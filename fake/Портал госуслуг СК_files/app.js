void (function(w) {
    "use strict";

    angular.lowercase = String.prototype.toLowerCase;
    angular.uppercase = String.prototype.toUpperCase;

    Date.prototype.toJSON = function(){
        return moment(this).format();
    }

    var modules = [
        "ngLocale",
        "ngRoute",
        "ngMask",
        "ngAnimate",
        "ngSanitize",
        "ngStorage",
        "ui.mask",
        "ui.bootstrap",
        "pascalprecht.translate",
        "schemaForm",
        "schemaForm-datepicker",
        "schemaForm-timepicker",
        "schemaForm-datetimepicker",
        "ngSchemaFormFile",
        "oi.select",
        "mgcrea.ngStrap",
        "AngularPrint",
        "mgcrea.ngStrap.modal",
        "ui.select",
        "mgcrea.ngStrap.select",
        "mgcrea.ngStrap.datepicker",
        "formio",
        "inputDropdown",
        "ckeditor",
        "ui.ace",
        "angular-js-xlsx",
        "ngFormBuilder"
    ];

    angular.module("rpgu.app", modules);

    /* eslint-disable */

    w.debug = console.log;

    w.warn = console.warn;

    w.report = function(data, name) {
        return;
        // var xhr = new XMLHttpRequest();
        // var body =
        //     'ref=' +
        //     encodeURIComponent(name) +
        //     '&message=' +
        //     encodeURIComponent(JSON.stringify(data));
        // xhr.open("POST", "https://report-errors-bot.gammacode.ru/report-error/2633934695", true);
        // xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        // xhr.setRequestHeader('x-app-token', '897f668a-9abb-4092-8e08-c0f652adeda6');
        // xhr.send(body);
    }

    w.todo = function(data) {
        console.group("TODO: ");
        console.log(data);
        console.groupEnd();
    }

    console.log("Дата последней сборки: " + "2021-05-13T07:40:56.081Z");
    /* eslint-enable */



})(window);

(function (global) {

    // minimal symbol polyfill for IE11 and others
    if (typeof Symbol !== 'function') {
        var Symbol = function(name) {
            return name;
        }

        Symbol.nonNative = true;
    }

    var STATE_PLAINTEXT = Symbol('plaintext');
    var STATE_HTML      = Symbol('html');
    var STATE_COMMENT   = Symbol('comment');

    var ALLOWED_TAGS_REGEX  = /<(\w*)>/g;
    var NORMALIZE_TAG_REGEX = /<\/?([^\s\/>]+)/;

    function striptags(html, allowable_tags, tag_replacement) {
        html            = html || '';
        allowable_tags  = allowable_tags || [];
        tag_replacement = tag_replacement || '';

        var context = init_context(allowable_tags, tag_replacement);

        return striptags_internal(html, context);
    }

    function init_striptags_stream(allowable_tags, tag_replacement) {
        allowable_tags  = allowable_tags || [];
        tag_replacement = tag_replacement || '';

        var context = init_context(allowable_tags, tag_replacement);

        return function striptags_stream(html) {
            return striptags_internal(html || '', context);
        };
    }

    striptags.init_streaming_mode = init_striptags_stream;

    function init_context(allowable_tags, tag_replacement) {
        allowable_tags = parse_allowable_tags(allowable_tags);

        return {
            allowable_tags : allowable_tags,
            tag_replacement: tag_replacement,

            state         : STATE_PLAINTEXT,
            tag_buffer    : '',
            depth         : 0,
            in_quote_char : ''
        };
    }

    function striptags_internal(html, context) {
        var allowable_tags  = context.allowable_tags;
        var tag_replacement = context.tag_replacement;

        var state         = context.state;
        var tag_buffer    = context.tag_buffer;
        var depth         = context.depth;
        var in_quote_char = context.in_quote_char;
        var output        = '';

        for (var idx = 0, length = html.length; idx < length; idx++) {
            var char = html[idx];

            if (state === STATE_PLAINTEXT) {
                switch (char) {
                    case '<':
                        state       = STATE_HTML;
                        tag_buffer += char;
                        break;

                    default:
                        output += char;
                        break;
                }
            }

            else if (state === STATE_HTML) {
                switch (char) {
                    case '<':
                        // ignore '<' if inside a quote
                        if (in_quote_char) {
                            break;
                        }

                        // we're seeing a nested '<'
                        depth++;
                        break;

                    case '>':
                        // ignore '>' if inside a quote
                        if (in_quote_char) {
                            break;
                        }

                        // something like this is happening: '<<>>'
                        if (depth) {
                            depth--;

                            break;
                        }

                        // this is closing the tag in tag_buffer
                        in_quote_char = '';
                        state         = STATE_PLAINTEXT;
                        tag_buffer   += '>';

                        if (allowable_tags.has(normalize_tag(tag_buffer))) {
                            output += tag_buffer;
                        } else {
                            output += tag_replacement;
                        }

                        tag_buffer = '';
                        break;

                    case '"':
                    case '\'':
                        // catch both single and double quotes

                        if (char === in_quote_char) {
                            in_quote_char = '';
                        } else {
                            in_quote_char = in_quote_char || char;
                        }

                        tag_buffer += char;
                        break;

                    case '-':
                        if (tag_buffer === '<!-') {
                            state = STATE_COMMENT;
                        }

                        tag_buffer += char;
                        break;

                    case ' ':
                    case '\n':
                        if (tag_buffer === '<') {
                            state      = STATE_PLAINTEXT;
                            output    += '< ';
                            tag_buffer = '';

                            break;
                        }

                        tag_buffer += char;
                        break;

                    default:
                        tag_buffer += char;
                        break;
                }
            }

            else if (state === STATE_COMMENT) {
                switch (char) {
                    case '>':
                        if (tag_buffer.slice(-2) == '--') {
                            // close the comment
                            state = STATE_PLAINTEXT;
                        }

                        tag_buffer = '';
                        break;

                    default:
                        tag_buffer += char;
                        break;
                }
            }
        }

        // save the context for future iterations
        context.state         = state;
        context.tag_buffer    = tag_buffer;
        context.depth         = depth;
        context.in_quote_char = in_quote_char;

        return output;
    }

    function parse_allowable_tags(allowable_tags) {
        var tag_set = new Set();

        if (typeof allowable_tags === 'string') {
            var match;

            while ((match = ALLOWED_TAGS_REGEX.exec(allowable_tags))) {
                tag_set.add(match[1]);
            }
        }

        else if (!Symbol.nonNative &&
                 typeof allowable_tags[Symbol.iterator] === 'function') {

            tag_set = new Set(allowable_tags);
        }

        else if (typeof allowable_tags.forEach === 'function') {
            // IE11 compatible
            allowable_tags.forEach(tag_set.add, tag_set);
        }

        return tag_set;
    }

    function normalize_tag(tag_buffer) {
        var match = NORMALIZE_TAG_REGEX.exec(tag_buffer);

        return match ? match[1].toLowerCase() : null;
    }

    global.striptags = striptags;

}(this));

angular.module('rpgu.app').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('/admin/admin-municipals/admin-municipals.component.html',
    "<div class=\"container-fluid\" style=\"margin-top: 1em; margin-bottom: 1em\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'ERROR'\"><div class=\"alert alert-block alert-error fade in\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status === 'LOADING' || $ctrl.status === 'ERROR'\"><div class=\"mb-2\"><button class=\"btn btn-default\" ng-click=\"$ctrl.goBack()\">Назад</button></div><section><div class=\"d-flex mb-3\"><button class=\"btn btn-success mr-1\" ng-click=\"$ctrl.submit()\">Сохранить</button> <button class=\"btn btn-blue\" ng-click=\"$ctrl.addMunicipal('top')\">Добавить округ</button></div><div class=\"mb-3 border-municipals\" ng-repeat=\"($n, $municipal) in $ctrl.municipals\"><h2 class=\"h4\">Название муниципального округа</h2><div class=\"form-group mb-2\"><input class=\"form-control\" type=\"text\" ng-model=\"$municipal.title\"></div><fieldset><legend class=\"h5\">Идентификаторы</legend><div class=\"input-group mb-1 data-municipal-title\" ng-repeat=\"($i, $id) in $municipal.id\" data-municipal-title=\"{{$ctrl.getMunicipalTitle($id)}}\"><input class=\"form-control\" type=\"text\" ng-model=\"$id\" ng-blur=\"$ctrl.changeVal($id, $i, $municipal.idObj)\"> <span class=\"cursor-pointer input-group-addon alert-danger\" ng-click=\"$ctrl.removeId($id, $municipal.idObj)\">&times;</span></div></fieldset><div class=\"d-flex justify-content-between\"><button class=\"btn btn-blue\" ng-click=\"$ctrl.addId($municipal.idObj)\">Добавить идентификатор +</button> <button class=\"btn btn-danger\" ng-click=\"$ctrl.removeMunicipal($n)\">Удалить округ</button></div></div><button class=\"btn btn-success mr-1\" ng-click=\"$ctrl.submit()\">Сохранить</button> <button class=\"btn btn-blue\" ng-click=\"$ctrl.addMunicipal('bottom')\">Добавить округ</button></section></div></div><style>.btn:not(.btn-default) {\n" +
    "        font-size: 16px;\n" +
    "        padding: 8px 13px;\n" +
    "    }\n" +
    "    .border-municipals {\n" +
    "        border-left: 3px solid #84BF41;\n" +
    "        border-bottom: 1px solid #eee;\n" +
    "        padding-bottom: 1.5rem;\n" +
    "        padding-left: 1rem;\n" +
    "    }\n" +
    "    .input-group .form-control {\n" +
    "        padding: 0 10px;\n" +
    "    }\n" +
    "    .data-municipal-title {\n" +
    "        position: relative;\n" +
    "    }\n" +
    "    .data-municipal-title:after {\n" +
    "        content: attr(data-municipal-title);\n" +
    "        display: inline-block;\n" +
    "        position: absolute;\n" +
    "        z-index: 100;\n" +
    "        right: 4rem;\n" +
    "        top: 6px;\n" +
    "        max-width: 60%;\n" +
    "        overflow: hidden;\n" +
    "        white-space: nowrap;\n" +
    "        text-overflow: ellipsis;\n" +
    "        font-size: 13px;\n" +
    "    }</style>"
  );


  $templateCache.put('/admin/admin-news-edit/admin-news-edit.component.html',
    "<div class=\"container-fluid\" style=\"margin-top: 1em; margin-bottom: 1em\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'ERROR'\"><div class=\"alert alert-block alert-error fade in\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status === 'LOADING' || $ctrl.status === 'ERROR'\"><div style=\"margin-bottom: 1em\"><button class=\"btn btn-default\" ng-click=\"$ctrl.goBack()\">Назад</button></div><section><form class=\"form\" ng-submit=\"$ctrl.submit()\"><div class=\"form-group\"><div class=\"c-field\"><sup class=\"c-field-label\">Заголовок</sup> <input class=\"form-control\" type=\"text\" ng-model=\"$ctrl.news.header\"><div ng-show=\"$ctrl.errors.headerError\" ng-class=\"{'alert': $ctrl.errors.headerError, 'alert-danger': $ctrl.errors.headerError}\">Введите зоголовок</div></div></div><div class=\"form-group\"><div class=\"c-field\"><sup class=\"c-field-label\">Cсылка на изображение</sup> <input class=\"form-control\" type=\"text\" ng-model=\"$ctrl.news.thumbnail\"></div></div><div class=\"form-group row\"><div class=\"col-sm-4\"><div class=\"input-group c-field\"><sup class=\"c-field-label\">Дата</sup> <input class=\"form-control\" style=\"z-index:0\" type=\"text\" datetime-picker=\"dd.MM.yyyy\" ng-model=\"$ctrl.news.date\" enable-time=\"false\" is-open=\"$ctrl.datepickerIsOpen\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"$ctrl.openCalendar($event, prop)\"><i class=\"fa fa-calendar\"></i></button></span></div></div><div class=\"col-sm-8\"><div class=\"c-field\"><sup class=\"c-field-label\">Ярлык</sup> <input class=\"form-control\" type=\"text\" ng-model=\"$ctrl.news.alias\"></div><div class=\"alert alert-danger\" ng-show=\"$ctrl.aliasError\">Ярлык изменен, сохраните</div></div></div><div class=\"form-group\"><div class=\"form-control\" ckeditor=\"$ctrl.ckeditorOptions\" ready=\"$ctrl.onReady()\" ng-model=\"$ctrl.news.content\"></div><div ng-show=\"$ctrl.errors.contentError\" ng-class=\"{'alert': $ctrl.errors.contentError, 'alert-danger': $ctrl.errors.contentError}\">Добавьте содержимое</div></div><div class=\"form-group\"><div class=\"epgu-checkbox-wrapper\"><div ng-class=\"{checked : $ctrl.news.active}\" class=\"epgu-checkbox checked ng-click-active\" ng-click=\"$ctrl.handleActive()\"><div></div></div><label data-ng-click=\"$ctrl.handleActive()\">Отображать на портале</label></div></div><div class=\"form-group\"><button type=\"submit\" class=\"btn btn-success\">Отправить</button> <button type=\"button\" class=\"btn btn-warning\" ng-click=\"$ctrl.handleDelete()\">Удалить</button></div></form></section></div></div>"
  );


  $templateCache.put('/admin/admin-news-list/admin-news-list.component.html',
    "<div class=\"container\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><div style=\"margin-bottom: 1em\"><button class=\"btn btn-primary\" ng-click=\"$ctrl.addNews()\">Добавить новость</button></div><article class=\"news-article\" ng-repeat=\"newsItem in $ctrl.news\" ng-click=\"$ctrl.goTo(newsItem.alias)\"><p class=\"advice-datetime\">{{newsItem.date | dateFormat}}</p><h2>{{newsItem.header}}</h2><div><img ng-src=\"{{newsItem.thumbnail}}\" width=\"165\" height=\"135\" alt=\"\" style=\"float: left;margin-right:0.5rem\"> {{newsItem.content | stripTags | substr: 200}} &nbsp; <span class=\"icon-angle-right\"></span></div><div style=\"margin-top: 1em\"><button class=\"btn btn-default\" ng-click=\"$ctrl.edit(newsItem._id)\">Редактировать</button></div></article></div></div>"
  );


  $templateCache.put('/admin/adminLogin.component.html',
    "<div class=\"container\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status=='loading'\"><h4><i class=\"fa fa-cogs\"></i> Служебный вход</h4><div style=\"padding:20px\"><form class=\"form-horizontal\" ng-submit=\"$ctrl.doLogin()\"><div class=\"form-group\"><label class=\"control-label\">Логин:</label><div class=\"controls\"><input type=\"text\" class=\"form-control\" ng-model=\"$ctrl.login\"></div></div><div class=\"form-group\"><label class=\"control-label\">Пароль:</label><div class=\"controls mb-2\"><input type=\"password\" class=\"form-control\" ng-model=\"$ctrl.password\"></div><button class=\"btn btn-danger\"><i class=\"fa fa-signin\"></i> Войти</button></div></form><div ng-if=\"$ctrl.isLoggedIn\">Перенаправление, ожидайте</div></div></div></div>"
  );


  $templateCache.put('/admin/announcement/announcement.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"form-group mb-2\"><label>Информационная строка</label><input class=\"form-control\" ng-model=\"$ctrl.announcement.text\"></div><div class=\"form-group mb-2\"><label class=\"control-label\">Размер шрифта</label><select class=\"form-control new-c-field-select\" ng-model=\"$ctrl.announcement.fontSize\" ng-options=\"item as item for item in $ctrl.fontSizeList\"></select></div><div class=\"form-group mb-2\"><label class=\"control-label\">Цвет</label><select class=\"form-control new-c-field-select\" ng-model=\"$ctrl.announcement.style\" ng-options=\"item.value as item.name for item in $ctrl.styleList\"></select></div><div class=\"form-group mb-2\"><div class=\"mm-checkbox\" ng-class=\"{'mb-1': $ctrl.announcement.mainOnly}\"><input type=\"checkbox\" ng-model=\"$ctrl.announcement.mainOnly\"><label ng-click=\"$ctrl.announcement.mainOnly = !$ctrl.announcement.mainOnly\">Отображать только на главной</label></div></div><div class=\"form-group mb-2\"><div class=\"mm-checkbox\" ng-class=\"{'mb-1': $ctrl.announcement.active}\"><input type=\"checkbox\" ng-model=\"$ctrl.announcement.active\"><label ng-click=\"$ctrl.announcement.active = !$ctrl.announcement.active\">Активна</label></div></div><div class=\"mb-2\"><button class=\"btn btn-success\" ng-click=\"$ctrl.save()\">Сохранить</button></div></status-wrapper>"
  );


  $templateCache.put('/admin/aspService.template.html',
    "<div class=\"container-fluid\"><div class=\"row\"><ul class=\"nav nav-tabs admin-form-tab\" style=\"margin:0;font-weight:bold;font-size:13px\"><li ng-class=\"{active:isSelected('editasp')}\"><a href ng-click=\"selectTab('editasp')\"><i class=\"fa fa-file-text-o\"></i> Список услуг АСП</a></li><li ng-class=\"{active:isSelected('editform')}\"><a href ng-click=\"selectTab('editform')\"><i class=\"fa fa-file-text-o\"></i> Редактор формы</a></li><li ng-class=\"{active:isSelected('editsoap')}\"><a href ng-click=\"selectTab('editsoap')\"><i class=\"fa fa-file-text-o\"></i> Редактор SOAP</a></li></ul></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading' || formStatus=='loading' || soapStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"row tab-content\" ng-show=\"isSelected('editasp')\" style=\"border-width: 1px;border-style: solid;border-color: darkgrey;overflow-x: hidden;min-height: 450px\"><div align=\"center\" class=\"row\" ng-hide=\"addStatus=='ready' || status=='loading'\"><button class=\"btn btn-xs btn-primary\" ng-click=\"addAsp()\"><i style=\"margin-right: 5px\" class=\"fa fa-plus\"></i> Добавить АСП услугу</button></div><div style=\"margin-top: 15px\" class=\"row\" ng-show=\"aspList.length==0 && status=='ready'\"><div class=\"col-md-12\"><div align=\"center\" class=\"alert alert-info\">Услуг АСП не найдено.</div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div><br><a href ng-click=\"refresh()\" title=\"Обновить вкладку\"><i class=\"fa fa-undo fa-4x\"></i></a></div><div ng-show=\"status=='ready'\"><div ng-hide=\"addStatus=='ready'\"><div ng-repeat=\"list in aspList\" class=\"appl-table-content\" style=\"padding-bottom: 0px; padding-top: 10; padding-bottom: 10px; margin: 10px; border-radius: 10px\"><div class=\"row\"><div class=\"col-md-8\"><div><a href=\"{{'rgu/service_view?id=' + list.pspId + '&rid=' + list.serviceId + '&tab=statement'|s1Url}}\"><strong>{{ list.serviceName }}</strong></a></div><div>{{ list.deptName }}</div></div><div class=\"col-md-3\"><div style=\"font-family:'Lucida Console', monospace\"><strong>РГУ: </strong>{{ list.serviceId }}</div><div style=\"font-family:'Lucida Console', monospace\"><strong>АСП: </strong>{{ list.aspId }}</div></div><div align=\"right\" class=\"col-md-1\"><a href ng-click=\"aspRemove(list)\" title=\"Удалить\"><i class=\"fa fa-trash-o fa-lg\" style=\"padding-top: 15px\"></i></a></div></div></div></div><div ng-show=\"addStatus=='ready'\" class=\"appl-table-content\" style=\"padding-bottom: 0px; padding-bottom: 10px; margin: 10px; border-radius: 10px\"><div class=\"row\"><div class=\"col-md-6\"><div class=\"c-field\"><label class=\"c-field-label\">ID услуги <sup>*</sup></label><input type=\"text\" ng-model=\"serviceId\" class=\"c-text c-text-white\" placeholder=\"Напишите код услуги из РГУ\" required></div></div><div class=\"col-md-5\"><div class=\"c-field\"><label class=\"c-field-label\">Код АСП <sup>*</sup></label><input type=\"text\" ng-model=\"aspId\" class=\"c-text c-text-white\" placeholder=\"Напишите код услуги в АСП\" required></div></div><div align=\"center\" class=\"col-md-1\"><a href ng-click=\"aspSave()\" title=\"Сохранить\"><i class=\"fa fa-save fa-lg\" style=\"padding-top: 15px\"></i> </a><a href ng-click=\"addStatus = undefined\" title=\"Отмена\"><i class=\"fa fa-remove fa-lg\" style=\"padding-top: 15px\"></i></a></div></div></div></div></div><div ng-show=\"isSelected('editform')\"><div class=\"row\" style=\"border-width: 1px;border-style: solid;border-color: darkgrey;margin-bottom: 10px;min-height: 450px\"><div ng-show=\"formStatus=='ready'\"><div ng-model=\"request.schemaform\" ui-ace=\"aceOptions\"></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"formStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{formError.message}}</p></div></div></div><div align=\"center\"><button ng-click=\"submitdata(tab)\" class=\"btn btn-success\" ng-class=\"{disabled:!visibleButton(tab)}\" style=\"margin-top: 10px; margin-bottom: 10px\"><i class=\"fa fa-database\"></i> Сохранить</button></div></div><div ng-show=\"isSelected('editsoap')\"><div class=\"row\" style=\"border-width: 1px;border-style: solid;border-color: darkgrey;margin-bottom: 10px;min-height: 450px\"><div ng-show=\"soapStatus=='ready'\"><form class=\"form-horizontal\" role=\"form\" style=\"margin: 10px\"><div class=\"row\"><div class=\"col-md-11\"><div class=\"form-group\"><label class=\"control-label col-sm-2\" for=\"endpoint\">Endpoint:</label><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"request.soap.endpoint\" placeholder=\"Endpoint\" id=\"endpoint\"></div></div></div><div align=\"left\" class=\"col-md-1\"><a href ng-click=\"getEndpoint()\" title=\"Получить текущий endpoint\"><i class=\"fa fa-undo fa-lg\" style=\"padding-top: 10px\"></i></a></div></div></form><div ng-model=\"request.soap.template\" ui-ace=\"soapOptions\"></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"formStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{soapError.message}}</p></div></div></div><div align=\"center\"><button ng-click=\"submitdata(tab)\" class=\"btn btn-success\" style=\"margin-top: 10px; margin-bottom: 10px\"><i class=\"fa fa-database\"></i> Сохранить</button></div></div></div>"
  );


  $templateCache.put('/admin/covid19-admin-stats/covid19-admin-stats.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"row\"><div class=\"col-md-4\"><label>Начало отчета:</label><date-picker ng-model=\"$ctrl.startDate\" max-date=\"$ctrl.maxDate\"></date-picker></div><div class=\"col-md-4\"><label>Окончание отчета:</label><date-picker ng-model=\"$ctrl.endDate\" max-date=\"$ctrl.maxDate\"></date-picker></div></div><div class=\"mt-2\"><button class=\"btn btn-blue\" ng-click=\"$ctrl.download()\">Скачать</button></div></status-wrapper>"
  );


  $templateCache.put('/admin/covid19Infected.template.html',
    "<div><h1 class=\"lk-heading\">Загрузка инфицированных</h1><status-wrapper><upload-infected-file upload-url=\"uploadUrl\" accept=\"accept\"></upload-infected-file></status-wrapper></div>"
  );


  $templateCache.put('/admin/covid19OrgsUpload.template.html',
    "<div><h1 class=\"lk-heading\">Загрузка организаций</h1><status-wrapper><upload-infected-file upload-url=\"uploadUrl\" accept=\"accept\"></upload-infected-file></status-wrapper></div>"
  );


  $templateCache.put('/admin/covid19PassControl.html',
    "<div><h1 class=\"lk-heading\">Управление пропусками COVID19</h1></div>"
  );


  $templateCache.put('/admin/dictList.template.html',
    "<h3>Локальные словари</h3><div class=\"mb-2\"><a class=\"btn btn-primary\" href=\"/admin/dict_view\"><i class=\"fa fa-plus\"></i> Создать</a></div><div ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready'\"><table class=\"table table-striped table-bordered table-hover\"><thead><tr><th width=\"120\">ID</th><th>Код</th><th>Наименование</th><th width=\"50\"></th></tr></thead><tbody><tr ng-repeat=\"row in list\"><td>{{row._id}}</td><td>{{row.code}}</td><td>{{row.name}}</td><td><a class=\"btn btn-sm btn-default\" href=\"{{getDictUrl(row._id)}}\"><i class=\"fa fa-pencil\"></i></a></td></tr></tbody></table></div><div ng-show=\"status == 'loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div>"
  );


  $templateCache.put('/admin/dictView.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\" id=\"form\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div>"
  );


  $templateCache.put('/admin/digital-services/digital-service.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"mb-2\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button></div><p class=\"text-justify\"><strong>Ведомство:&nbsp;</strong> <span>{{$ctrl.service.dept_title}}</span></p><p class=\"text-justify\"><strong>Процедура:&nbsp;</strong> <a href=\"{{'/rgu/service_view?id=' + $ctrl.service.pspassport_id}}\">{{$ctrl.service.pspassport_title}}</a></p><p class=\"text-justify\"><strong>Услуга:&nbsp;</strong> <span>{{$ctrl.service.service_title}}</span></p><div class=\"mt-1 mb-2\"><button class=\"btn btn-sm\" ng-class=\"{'btn-primary': $ctrl.service.active}\" ng-click=\"$ctrl.toggle('active')\">Активна</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-warning': !$ctrl.service.active}\" ng-click=\"$ctrl.toggle('active')\">Не активна</button></div><div class=\"mb-2\"><div class=\"mm-checkbox\" ng-class=\"{'mb-1': $ctrl.service.isLink}\"><input type=\"checkbox\" ng-model=\"$ctrl.service.isLink\"><label ng-click=\"$ctrl.toggle('isLink')\">Внешняя ссылка</label></div><div ng-show=\"$ctrl.service.isLink\" class=\"form-group\"><label>Адрес URI внешнего ресурса</label><input class=\"form-control\" ng-model=\"$ctrl.service.href\"></div></div><div ng-show=\"!$ctrl.service.isLink\"><div class=\"mb-2\"><div class=\"mm-checkbox\" ng-class=\"{'mb-1': $ctrl.service.asp}\"><input type=\"checkbox\" ng-model=\"$ctrl.service.asp\"><label ng-click=\"$ctrl.toggle('asp')\">Услуга АСП</label></div><div ng-show=\"$ctrl.service.asp\" class=\"form-group\"><label>Код услуги АСП</label><input class=\"form-control\" ng-model=\"$ctrl.service.aspCode\"></div></div><div class=\"mt-1 mb-2\"><div><label>Оплата услуги</label></div><button class=\"btn btn-sm\" ng-class=\"{'btn-primary': $ctrl.service.payment.toUpperCase() === 'NONE' || !($ctrl.service.payment) }\" ng-click=\"$ctrl.toggleType('payment', 'NONE')\">Не требуется</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-info': $ctrl.service.payment.toUpperCase() === 'OPTIONAL' }\" ng-click=\"$ctrl.toggleType('payment', 'OPTIONAL')\">Опционально</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-warning': $ctrl.service.payment.toUpperCase() === 'REQUIRED' }\" ng-click=\"$ctrl.toggleType('payment', 'REQUIRED')\">Требуется</button></div><style>.valid {\n" +
    "                color: #84BF41;\n" +
    "            }\n" +
    "\n" +
    "            .mt-05 {\n" +
    "                margin-top: 0.5rem;\n" +
    "            }\n" +
    "\n" +
    "            .form-group label~.form-control {\n" +
    "                padding: 11px 10px 10px;\n" +
    "            }\n" +
    "\n" +
    "            .input-group .form-control:first-child {\n" +
    "                border-right-width: 0;\n" +
    "                padding: 11px 10px 10px;\n" +
    "            }\n" +
    "\n" +
    "            .input-group .form-control:first-child.border-danger {\n" +
    "                border-left: 4px solid #DB4056;\n" +
    "            }\n" +
    "\n" +
    "            .input-group .form-control:first-child.border-success {\n" +
    "                border-left: 4px solid #84BF41;\n" +
    "            }\n" +
    "\n" +
    "            .input-group .form-control:first-child.border-warning {\n" +
    "                border-left: 4px solid #FFC300;\n" +
    "            }\n" +
    "\n" +
    "            [class*=alert].input-group-addon {\n" +
    "                border-color: #ccc;\n" +
    "            }\n" +
    "\n" +
    "            .template-name {\n" +
    "                margin-top: 0.2rem;\n" +
    "                font-size: 14px;\n" +
    "            }</style><div class=\"form-group mb-2\"><label>Идентификатор шаблона SOAP</label><div class=\"input-group\"><input class=\"form-control\" ng-class=\"{\n" +
    "                        'border-warning': $ctrl.reqSoap.changed,\n" +
    "                        'border-success': $ctrl.reqSoap.valid,\n" +
    "                        'border-danger': !($ctrl.reqSoap.valid)\n" +
    "                    }\" ng-model=\"$ctrl.service.soap\"> <span class=\"input-group-addon cursor-pointer\" data-target=\"#searchSoap\" data-toggle=\"modal\">поиск </span><span class=\"input-group-addon cursor-pointer\" ng-class=\"{\n" +
    "                    'alert-warning': $ctrl.reqSoap.changed,\n" +
    "                    'alert-success': $ctrl.reqSoap.valid,\n" +
    "                    'alert-danger': !($ctrl.reqSoap.valid)\n" +
    "                  }\" ng-click=\"$ctrl.goToSoap()\">{{$ctrl.reqSoap.changed ? \"Сохранить\" : \"Редактировать\"}}</span></div><p class=\"text-justify template-name\"><strong>Название шаблона soap: </strong><span ng-show=\"$ctrl.reqSoap.name\">{{$ctrl.reqSoap.name}}</span></p></div><div class=\"form-group mb-2\"><label>Идентификатор шаблона формы</label><div class=\"input-group\"><input class=\"form-control\" ng-class=\"{\n" +
    "                        'border-warning': $ctrl.reqForm.changed,\n" +
    "                        'border-success': $ctrl.reqForm.valid,\n" +
    "                        'border-danger': !$ctrl.reqForm.valid\n" +
    "                    }\" ng-model=\"$ctrl.service.form\"> <span class=\"input-group-addon cursor-pointer\" data-target=\"#searchForm\" data-toggle=\"modal\">поиск </span><span class=\"input-group-addon active cursor-pointer\" ng-class=\"{\n" +
    "                      'alert-warning': $ctrl.reqForm.changed,\n" +
    "                      'alert-success': $ctrl.reqForm.valid && !($ctrl.reqForm.changed),\n" +
    "                      'alert-danger': !$ctrl.reqForm.valid\n" +
    "                  }\" ng-click=\"$ctrl.goToForm('reqForm')\">{{$ctrl.reqForm.changed ? \"Сохранить\" : \"Редактировать\"}}</span></div><p class=\"text-justify template-name m-0\"><strong>Название шаблона формы: </strong><span ng-show=\"$ctrl.reqForm.name\">{{$ctrl.reqForm.name}}</span></p><div class=\"mt-1 mb-1\"><div><label>Подпись заявителя (для физ. лиц)</label></div><sign-type sign-type=\"$ctrl.service.flSign\"></sign-type></div><div class=\"mt-1 mb-1\"><div><label>Подпись заявителя (для юр. лиц)</label></div><sign-type sign-type=\"$ctrl.service.ulSign\"></sign-type></div><div ng-show=\"(\n" +
    "                    $ctrl.service.mobileAccess &&\n" +
    "                    ($ctrl.service.flSign.toUpperCase() == 'FORCE' || $ctrl.service.ulSign.toUpperCase() == 'FORCE')\n" +
    "                )\" class=\"alert alert-warning\"><p>Внимание: в мобильном приложении не доступна электронная подпись заявителя!</p></div></div><div class=\"mb-2\"><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.service.mobileAccess\"><label ng-click=\"$ctrl.toggle('mobileAccess')\">Услуга доступна для мобильного приложения</label></div><div ng-show=\"$ctrl.service.mobileAccess && $ctrl.reqForm.format != 'formio'\" class=\"alert alert-warning mt-1\"><p>Внимание: Не допустимый формат шаблона формы для мобильного приложения!</p></div></div><div class=\"mb-2\"><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.service.mfcRecive\"><label ng-click=\"$ctrl.toggle('mfcRecive')\">Для услуги доступно получение результата в МФЦ</label></div></div><div class=\"mb-2\"><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.service.isSignReceive\"><label ng-click=\"$ctrl.toggle('isSignReceive')\">Для услуги доступно получение в подписанном виде</label></div></div><div class=\"mb-2\"><div class=\"d-flex justify-content-between align-items-center\"><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.service.isSMSAvailable\"><label ng-click=\"$ctrl.toggle('isSMSAvailable')\">Для услуги доступно информирование об изменении статуса заявления по СМС</label></div><div ng-show=\"$ctrl.service.isSMSAvailable\"><button class=\"btn btn-slim btn-primary\" data-target=\"#smsStatusList\" data-toggle=\"modal\">Редактировать доступные статусы</button></div></div></div><div class=\"mb-2\"><div class=\"d-flex justify-content-between align-items-center\"><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.service.isEmailAvailable\"><label ng-click=\"$ctrl.toggle('isEmailAvailable')\">Для услуги доступно информирование об изменении статуса заявления по E-mail</label></div><div ng-show=\"$ctrl.service.isEmailAvailable\"><button class=\"btn btn-slim btn-primary\" data-target=\"#emailStatusList\" data-toggle=\"modal\">Редактировать доступные статусы</button></div></div></div><div class=\"mb-2\"><div class=\"mm-checkbox\" ng-class=\"{'mb-1': $ctrl.service.isUl}\"><input type=\"checkbox\" ng-model=\"$ctrl.service.isUl\"><label ng-click=\"$ctrl.toggle('isUl')\">Иная форма для Юр.Лица</label></div><div class=\"form-group\" ng-show=\"$ctrl.service.isUl\"><label>Идентификатор шаблона формы для Юр.Лица</label><div class=\"input-group\"><input class=\"form-control\" ng-class=\"{\n" +
    "                                'border-warning': $ctrl.ulForm.changed,\n" +
    "                                'border-success': $ctrl.ulForm.valid,\n" +
    "                                'border-danger': !$ctrl.ulForm.valid\n" +
    "                            }\" ng-model=\"$ctrl.service.ulForm\"> <span class=\"input-group-addon cursor-pointer\" data-target=\"#searchFormUl\" data-toggle=\"modal\">поиск </span><span class=\"input-group-addon active cursor-pointer\" ng-class=\"{\n" +
    "                              'alert-warning': $ctrl.ulForm.changed,\n" +
    "                              'alert-success': $ctrl.ulForm.valid && !($ctrl.ulForm.changed),\n" +
    "                              'alert-danger': !$ctrl.ulForm.valid\n" +
    "                          }\" ng-click=\"$ctrl.goToForm('ulForm')\">{{$ctrl.ulForm.changed ? \"Сохранить\" : \"Редактировать\"}}</span></div><p class=\"text-justify template-name m-0\"><strong>Название шаблона формы: </strong><span ng-show=\"$ctrl.ulForm.name\">{{$ctrl.ulForm.name}}</span></p><div class=\"mt-1 mb-2\"><div><label>Подпись Юр.Лица</label></div><button class=\"btn btn-sm\" ng-class=\"{'btn-primary': $ctrl.service.ulSign.toUpperCase() === 'NONE' || !($ctrl.service.ulSign) }\" ng-click=\"$ctrl.toggleType('ulSign', 'NONE')\">Не требуется</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-warning': $ctrl.service.ulSign.toUpperCase() === 'SIMPLE' }\" ng-click=\"$ctrl.toggleType('ulSign', 'SIMPLE')\">Простая ЕСИА</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-warning': $ctrl.service.ulSign.toUpperCase() === 'FORCE' }\" ng-click=\"$ctrl.toggleType('ulSign', 'FORCE')\">Усиленная</button></div></div></div><div class=\"mb-2\"><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.service.deleteRequestFilesAfterSend\"><label ng-click=\"$ctrl.toggle('deleteRequestFilesAfterSend')\">Удалять прикреплённые файлы заявления после успешной отправки</label></div></div></div><div class=\"mb-2 mt-3\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button></div></status-wrapper><div class=\"modal fade\" id=\"searchForm\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Поиск шаблона формы</p></div><div class=\"modal-body\"><div class=\"form-group\"><label class=\"control-label\">Введите часть названия формы или id</label><oi-select oi-options=\"$ctrl.searchOption(item) for item in $ctrl.searchForm($query)\" ng-model=\"$ctrl.searchFormFound\" required></oi-select></div><div class=\"form-group\"><p><strong>будет выбрана форма: </strong>{{$ctrl.searchOption($ctrl.searchFormFound)}}</p></div></div><div class=\"modal-footer\"><button class=\"btn btn-success\" ng-click=\"$ctrl.chooseForm($ctrl.searchFormFound)\">Выбрать форму</button></div></div></div></div><div class=\"modal fade\" id=\"searchFormUl\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Поиск шаблона формы</p></div><div class=\"modal-body\"><div class=\"form-group\"><label class=\"control-label\">Введите часть названия формы или id</label><oi-select oi-options=\"$ctrl.searchOption(item) for item in $ctrl.searchForm($query)\" ng-model=\"$ctrl.searchFormUlFound\" required></oi-select></div><div class=\"form-group\"><p><strong>будет выбрана форма: </strong>{{$ctrl.searchOption($ctrl.searchFormUlFound)}}</p></div></div><div class=\"modal-footer\"><button class=\"btn btn-success\" ng-click=\"$ctrl.chooseFormUl($ctrl.searchFormUlFound)\">Выбрать форму</button></div></div></div></div><div class=\"modal fade\" id=\"searchSoap\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Поиск шаблона SOAP</p></div><div class=\"modal-body\"><div class=\"form-group\"><label class=\"control-label\">Введите часть названия шаблона или id</label><oi-select oi-options=\"$ctrl.searchOption(item) for item in $ctrl.searchSoap($query)\" ng-model=\"$ctrl.searchSoapFound\" required></oi-select></div><div class=\"form-group\"><p><strong>будет выбран шаблон: </strong>{{$ctrl.searchOption($ctrl.searchSoapFound)}}</p></div></div><div class=\"modal-footer\"><button class=\"btn btn-success\" ng-click=\"$ctrl.chooseSoap($ctrl.searchSoapFound)\">Выбрать шаблон</button></div></div></div></div><div class=\"modal fade\" id=\"smsStatusList\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Выберите статусы заявления для которых будут включены оповещения по СМС</p></div><div class=\"modal-body\"><ul class=\"list-group m-0\"><li class=\"list-group-item list-group-item-dafault cursor-pointer\" ng-repeat=\"item in $ctrl.statusListAvailable\" ng-class=\"{'active': $ctrl.isStatusActive('smsStatusList', item.code) }\" ng-click=\"$ctrl.statusChange('smsStatusList', item.code)\">{{item.val}}</li></ul></div><div class=\"modal-footer\"><button class=\"btn btn-success\" ng-click=\"$ctrl.statusSave('smsStatusList')\">Подтвердить изменение</button></div></div></div></div><div class=\"modal fade\" id=\"emailStatusList\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Выберите статусы заявления для которых будут включены оповещения по E-mail</p></div><div class=\"modal-body\"><ul class=\"list-group m-0\"><li class=\"list-group-item list-group-item-dafault cursor-pointer\" ng-repeat=\"item in $ctrl.statusListAvailable\" ng-class=\"{'active': $ctrl.isStatusActive('emailStatusList', item.code) }\" ng-click=\"$ctrl.statusChange('emailStatusList', item.code)\">{{item.val}}</li></ul></div><div class=\"modal-footer\"><button class=\"btn btn-success\" ng-click=\"$ctrl.statusSave('emailStatusList')\">Подтвердить изменение</button></div></div></div></div>"
  );


  $templateCache.put('/admin/digital-services/digital-services-list.component.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"mb-1\"><button class=\"btn btn-blue\" data-toggle=\"modal\" data-target=\"#newRGU\">Создать услугу +</button></div><div class=\"search\" ng-hide=\"status=='error' || status=='deleted'\"><div class=\"search-form\"><div class=\"search-form-field p-0\"><input class=\"search-input\" ng-model=\"$ctrl.search\" placeholder=\"Введите часть названия или кода услуги, процедуры или ведомства\" autocomplete=\"off\" spellcheck=\"off\"></div></div></div><div class=\"text-center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><style>.table thead>tr>th,\n" +
    "        .table tbody>tr>td {\n" +
    "            padding-left: 2rem;\n" +
    "            padding-right: 2rem;\n" +
    "            padding-bottom: 30px;\n" +
    "        }\n" +
    "\n" +
    "        .table thead>tr>th {\n" +
    "            border-bottom-color: #84BF41;\n" +
    "        }\n" +
    "\n" +
    "        .table thead>tr>th,\n" +
    "        .table tbody>tr>td {\n" +
    "            position: relative;\n" +
    "        }\n" +
    "\n" +
    "        .service-active-status:before {\n" +
    "            content: \"\\f05d\";\n" +
    "            font-family: FontAwesome;\n" +
    "            font-size: 2rem;\n" +
    "            color: green;\n" +
    "            position: absolute;\n" +
    "            z-index: 10;\n" +
    "            top: 10px;\n" +
    "            left: 95%;\n" +
    "        }\n" +
    "        .form-group label~.form-control {\n" +
    "            padding: 11px 10px 10px;\n" +
    "        }</style><table class=\"table table-hover mb-3\"><thead><tr><th>Цель</th><th>Процедура</th><th>Услуга</th><th width=\"20%\">Ведомство</th></tr></thead><tbody><tr class=\"cursor-pointer\" ng-repeat=\"service in $ctrl.list\" ng-click=\"$ctrl.goTo(service._id)\"><td><p>{{ service.st_id }} <i title=\"Активна\" class=\"fa fa-check-circle fa-lg\" style=\"color:green\" ng-show=\"service.active\"></i></p><p class=\"text-justify\">{{ service.st_title }}</p></td><td><p>{{ service.service_id }}</p><p class=\"text-justify\">{{ service.service_title }}</p></td><td><p>{{ service.pspassport_id }}</p><p class=\"text-justify\">{{ service.pspassport_title }}</p></td><td><p ng-show=\"service.dept_id\">{{ service.dept_id }}</p><p>{{ service.dept_title }}</p></td></tr></tbody></table><div class=\"mb-1\" ng-show=\"$ctrl.listCount>0\"><s1-paging count=\"$ctrl.listCount\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><hr></div><div class=\"modal fade\" id=\"newRGU\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Новая электронная услуга РПГУ</p></div><div class=\"modal-body\"><div class=\"form-group\"><label class=\"control-label\">Введите название услуги</label><oi-select oi-options=\"$ctrl.getFullName(item) for item in $ctrl.findServiceFn($query)\" ng-model=\"$ctrl.newRGUTemplate\" placeholder=\"Введите часть названия или кода услуги\" required></oi-select></div><div class=\"form-group\"><label>Ведомство:</label><input class=\"form-control\" readonly value=\"{{ $ctrl.newRGUTemplate.dept_title }}\"></div><div class=\"form-group\"><label>Паспорт:</label><input class=\"form-control\" readonly value=\"{{ $ctrl.newRGUTemplate.pspassport_title }}\"></div><button class=\"btn btn-success\" ng-click=\"$ctrl.create()\">Создать услугу</button></div></div></div></div>"
  );


  $templateCache.put('/admin/digital-services/sign-type.component.html',
    "<button class=\"btn btn-sm\" ng-class=\"{'btn-primary': $ctrl.signType.toUpperCase() === 'NONE' || !($ctrl.signType) }\" ng-click=\"$ctrl.setSignType('NONE')\">Не требуется</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-warning': $ctrl.signType.toUpperCase() === 'SIMPLE' }\" ng-click=\"$ctrl.setSignType('SIMPLE')\">Простая ЕСИА</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-warning': $ctrl.signType.toUpperCase() === 'FORCE' }\" ng-click=\"$ctrl.setSignType('FORCE')\">Усиленная</button>"
  );


  $templateCache.put('/admin/elkReport.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':isSelected('request')}\"><a ng-click=\"selectTab('request')\" href=\"#\">Заявление</a></li><li ng-class=\"{'is-active':isSelected('SOAPReq')}\"><a ng-click=\"selectTab('SOAPReq')\" href=\"#\">SOAP запрос</a></li><li ng-class=\"{'is-active':isSelected('SOAPResp')}\"><a href ng-click=\"selectTab('SOAPResp')\" href=\"#\">SOAP ответ</a></li></ul></nav><div class=\"tab-content\" ng-show=\"isSelected('request')\" style=\"padding:25px\"><div class=\"row\"><div class=\"col-md-8\"><h2 class=\"appl-heading\">Заявление №{{request.docNum}} от {{request.date|dateFormat:'DD.MM.YYYY HH:mm'}}<br>Статус: {{REQUEST_STATUS[getLastStatus().code]}}<br></h2></div></div><a href=\"{{'admin/requestReport?idServiceRequest=' + idServiceRequest | s1Url}}\" class=\"btn btn-xs btn-success\"><i class=\"fa fa-eye\"></i> Просмотр заявления</a><br><br><div class=\"appl-table-content\"><ol class=\"appl-table-details-list\"><li ng-repeat=\"status in request.statusList\"><div class=\"row\"><div class=\"col-md-3\"><strong class=\"appl-table-datails-title\">{{status.text}}</strong></div><div class=\"col-md-2\"><time class=\"appl-table-datails-date\">{{status.date | dateFormat:\"DD.MM.YYYY HH:mm\"}}</time></div><div class=\"col-md-3\"><p class=\"appl-table-datails-text\">{{status.author}}<br><span ng-repeat=\"file in status.files\"><a href=\"{{file.url}}\" target=\"_blank\">{{file.filename}}</a><br></span></p></div><div class=\"col-md-3\"><p class=\"appl-table-datails-text\">{{status.comment}}<br></p></div><div class=\"col-md-1\"><a class=\"btn btn-xs btn-danger\" title=\"Ошибка\" ng-show=\"status.elkSyncStatus.fail || status.elkSyncFiles.fail\"><i class=\"glyphicon glyphicon-remove\"></i> </a><a class=\"btn btn-xs btn-success\" title=\"Ok\" ng-show=\"status.elkSyncStatus.sync || status.elkSyncFiles.sync\"><i class=\"glyphicon glyphicon-ok\"></i> </a><a class=\"btn btn-xs btn-default\" title=\"Не сихронизируется\" ng-show=\"!(status.elkSyncStatus.sync || status.elkSyncFiles.sync || status.elkSyncStatus.fail || status.elkSyncFiles.fail)\"><i class=\"glyphicon glyphicon-minus\"></i></a></div></div></li></ol></div><br><div class=\"row\"><button class=\"btn btn-success btn-xs\" ng-click=\"resetSync()\"><i class=\"fa fa-exchange\"></i> Сбросить ошибку синхронизации</button></div></div><div class=\"tab-content\" ng-show=\"isSelected('SOAPReq')\" style=\"padding:25px\"><pre style=\"width:1000px\">{{failSync.soapReqText}}</pre></div><div class=\"tab-content\" ng-show=\"isSelected('SOAPResp')\" style=\"padding:25px\"><pre style=\"width:1000px\">{{failSync.soapRespText}}</pre></div></div></div>"
  );


  $templateCache.put('/admin/elkReportList.template.html',
    "<div class=\"container-fluid\"><h4 style=\"margin-top: 20px\"><i class=\"fa fa-exchange\"></i> Ошибки синхронизации статусов заявлений с ЕЛК</h4><form class=\"form-inline\" role=\"form\"><div class=\"search\"><div class=\"search-form\"><div class=\"col-md-2\"><input type=\"text\" class=\"form-control\" style=\"width: 100%\" ng-model=\"search_number\" placeholder=\"№ заявления\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div><div class=\"col-md-2\"><input type=\"text\" class=\"form-control\" style=\"width: 100%\" ng-model=\"search_id\" placeholder=\"ID заявления\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div><div class=\"col-md-5\"><input type=\"text\" class=\"form-control\" style=\"width: 100%\" ng-model=\"search_service\" placeholder=\"Код или название услуги\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div><a class=\"btn btn-info btn-xs\" ng-click=\"getlist()\" href><i class=\"fa fa-filter\"></i> Фильтр</a> <a class=\"btn btn-primary btn-xs\" ng-click=\"reset()\" href><i class=\"fa fa-eraser\"></i> Сбросить фильтр</a></div></div></form><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && requestCount==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"status=='ready' && requestCount>0\"><table class=\"table table-hover\"><thead><tr><th style=\"text-align:center\">№</th><th>ID</th><th>Несинхронизированный статус</th><th>Дата статуса</th><th>Услуга</th></tr></thead><tbody><tr ng-repeat=\"value in requests\"><td><a class=\"btn btn-success btn-xs\" href=\"{{ 'admin/elkReport?idServiceRequest=' + value.serviceRequestId|s1Url}}\" title=\"Отчет\">{{ value.docNum }}</a></td><td>{{ value.serviceRequestId }}</td><td>{{ value.statusName }}</td><td>{{ value.statusDate | dateFormat:\"DD.MM.YYYY HH:mm\"}}</td><td><a ng-href=\"{{'rgu/service_view?id=' + value.pspassport_id|s1Url}}\">{{value.pspassport_title}}</a></td></tr></tbody></table></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready' && requestCount>0\"><div style=\"margin:10px 0 0 25px\"><s1-paging skip=\"requestSkip\" max=\"requestMax\" count=\"requestCount\" on-change=\"getlist()\"></s1-paging></div><br></div><a class=\"btn btn-success btn-xs\" ng-click=\"resetSync()\" href><i class=\"fa fa-exchange\"></i> Сбросить все ошибки синхронизации</a><br><br></div>"
  );


  $templateCache.put('/admin/formio-view/formio-view.tmpl.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"save=='ready'\"><div class=\"alert alert-success\" style=\"padding:10px;text-align:center\">Ваша форма успешно сохранена!</div></div><div ng-hide=\"status=='loading' || status=='error' || save=='ready'\"><div style=\"margin-bottom: 10px\"><b>{{data.name}}</b> - <a href=\"{{'rgu/service_view?id='+data.psp_id|s1Url}}\" title=\"Перейти к услуге\">{{data.service_name}}</a></div><div class=\"row\"><ul class=\"nav nav-tabs admin-form-tab\" style=\"margin:0;font-weight:bold;font-size:13px\"><li ng-class=\"{active:isSelected('editsoap')}\"><a ng-click=\"selectTab('editsoap')\"><i class=\"fa fa-file-text-o\"></i> Редактор SOAP</a></li><li ng-class=\"{active:isSelected('editformio')}\"><a ng-click=\"selectTab('editformio')\"><i class=\"fa fa-file-text-o\"></i> Редактор formio</a></li><li ng-class=\"{active:isSelected('editformioJson')}\"><a ng-click=\"selectTab('editformioJson')\"><i class=\"fa fa-file-text-o\"></i> Редактор formio в формате JSON</a></li></ul></div><div ng-show=\"isSelected('editsoap')\"><div class=\"row tab-row-content\"><div style=\"margin: 10px\"><form class=\"form-horizontal\"><div class=\"form-group row\"><label class=\"control-label col-sm-2 mt-1\">Версия СМЭВ:</label><ul class=\"nav nav-pills col-sm-8\" style=\"margin-top: 0; margin-bottom: 0; padding: 0\"><li ng-class=\"{'active':isSmevVer(2)}\"><a ng-click=\"smevVerSelect(2)\"><span>СМЭВ-2</span></a></li><li ng-class=\"{'active':isSmevVer(3)}\"><a ng-click=\"smevVerSelect(3)\"><span>СМЭВ-3</span></a></li></ul></div><div class=\"form-group\"><label class=\"control-label col-sm-2 mt-1\">Endpoint для {{ isSmevVer(2) ? 'СМЭВ-2:' : 'СМЭВ-3:'}}</label><div class=\"col-md-10\"><input class=\"form-control\" ng-model=\"data.soap.endpoint\"></div></div><div class=\"form-group\" ng-show=\"isSmevVer(3)\"><label class=\"control-label col-sm-2 mt-1\">Корневой тег:</label><div class=\"col-md-10\"><input class=\"form-control\" ng-model=\"data.localpart\"></div></div><div class=\"form-group\"><label class=\"control-label col-sm-2 mt-1\">Soap_action:</label><div class=\"col-md-10\"><input class=\"form-control\" ng-model=\"data.soap.action\"></div></div></form><div ng-model=\"data.soap.template\" ui-ace=\"soapOptions\"></div></div></div><div class=\"row admin-forms-tabview\"><div style=\"margin: 10px\"><div class=\"col-md-6\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"trim\"> <span class=\"c-checkbox\"></span> Убрать переносы строк и табы в запросе (trim)</label><br><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"active\"> <span class=\"c-checkbox\"></span> Активировать форму</label><br><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"infoService\"> <span class=\"c-checkbox\"></span> Информационная услуга</label></div><div class=\"col-md-6\"><ul class=\"appl-form-list\"><li><label class=\"c-label c-label-check\"><input name=\"step1\" type=\"radio\" ng-model=\"archive_type\" value=\"rev111111\"> <span class=\"c-radio\"></span> Использовать архиватор rev111111 СМЭВ</label></li><li><label class=\"c-label c-label-check\"><input name=\"step1\" type=\"radio\" ng-model=\"archive_type\" value=\"rev120315\"> <span class=\"c-radio\"></span> Использовать архиватор rev120315 СМЭВ</label></li></ul></div></div></div><div class=\"row admin-forms-tabview\"><div style=\"margin: 10px\"><div class=\"form-group\" title=\"Если ограничение не нужно, укажите пустое значение или 0\"><label class=\"control-label col-sm-3\">Макс. размер файлов, МБ:</label><div class=\"col-md-3\"><input style=\"margin-bottom: 10px\" class=\"form-control\" ng-model=\"filesSizeLimit\"></div></div></div></div><div class=\"row admin-forms-tabview\"><div style=\"margin: 10px\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"resultProc.use\" name=\"\"> <span class=\"c-checkbox\"></span> Использовать специальную обработку ответа</label><form class=\"form-horizontal\" ng-show=\"resultProc.use\"><div class=\"form-group\"><label class=\"control-label col-sm-3\">xPath кода ответа:</label><div class=\"col-md-8\"><input class=\"form-control\" ng-model=\"resultProc.xPathAccept\"></div></div><div class=\"form-group\"><label class=\"control-label col-sm-3\">Значение кода успешного ответа:</label><div class=\"col-md-3\"><input class=\"form-control\" ng-model=\"resultProc.acceptValue\"></div></div><div class=\"form-group\"><label class=\"control-label col-sm-3\">xPath комментария ошибочного ответа:</label><div class=\"col-md-8\"><input class=\"form-control\" ng-model=\"resultProc.xPathRejectComment\"></div></div></form></div></div></div><div ng-show=\"isSelected('editformio')\"><div class=\"row tab-row-content\"><div class=\"form-group row\"><ul class=\"nav nav-pills\" style=\"margin: 0; margin-left: 12px; padding: 0\"><li class=\"m-0\" ng-class=\"{'active': data.formio.display === 'form'}\"><a ng-click=\"setFormat('form')\"><span>Одностраничная</span></a></li><li class=\"m-0\" ng-class=\"{'active': data.formio.display === 'wizard'}\"><a ng-click=\"setFormat('wizard')\"><span>Многостраничная</span></a></li></ul></div><form-builder form=\"data.formio\"></form-builder></div></div><div ng-show=\"isSelected('editformioJson')\"><div class=\"row tab-row-content\"><div class=\"col-sm-12\"><div ng-model=\"data.formioJson\" ui-ace=\"aceOptions\"></div></div></div></div><div class=\"modal fade\" id=\"rename\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h4 class=\"modal-title\">Переименование названия формы</h4></div><div class=\"modal-footer\"><div class=\"col-md-12\" style=\"margin-bottom: 10px\"><input class=\"form-control\" ng-model=\"name_form\"></div><button ng-click=\"rename()\" class=\"btn btn-success\" data-dismiss=\"modal\"><i class=\"fa fa-file-o\"></i> Сохранить</button> <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Закрыть</button></div></div></div></div><div class=\"modal fade\" id=\"atach\" role=\"dialog\"><div class=\"modal-dialog\" style=\"width: 90%\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h4 class=\"modal-title\">Привязать другую услугу для формы</h4></div><div class=\"modal-footer\"><form class=\"form-horizontal\" name=\"atachForm\"><div class=\"form-group\"><div class=\"col-md-2\"><label>Услуга:</label></div><div class=\"col-md-10\"><oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"service\" placeholder=\"Введите часть названия или кода услуги\"></oi-select></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Ведомство:</label></div><div class=\"col-md-10\"><input class=\"form-control\" readonly type=\"text\" value=\"{{ service.dept_title }}\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Паспорт:</label></div><div class=\"col-md-10\"><input class=\"form-control\" readonly type=\"text\" value=\"{{ service.pspassport_title }}\"></div></div></form><button ng-click=\"atached()\" class=\"btn btn-success\" data-dismiss=\"modal\"><i class=\"fa fa-file-o\"></i> Сохранить изменения</button> <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button></div></div></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div>"
  );


  $templateCache.put('/admin/formList.template.html',
    "<h3 class=\"alert alert-danger\">Модуль будет удален и доступен только в режиме чтения</h3><div class=\"search\" ng-hide=\"status=='error' || status=='deleted'\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" placeholder=\"Введите часть названия ...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div></div></div><ul class=\"form-ctrl\" ng-hide=\"status=='error' || status=='deleted'\"><li><div class=\"form-group\"><label class=\"form-group-check\"><input type=\"radio\" name=\"name\" ng-click=\"interval='name'\"> <span class=\"btn btn-white\">По названию</span></label><label class=\"form-group-check\"><input type=\"radio\" name=\"name\" ng-click=\"interval='code'\"> <span class=\"btn btn-white\">По коду</span></label><label class=\"form-group-check\"><input type=\"radio\" name=\"name\" ng-click=\"interval='dept'\"> <span class=\"btn btn-white\">По ведомству</span></label><label class=\"form-group-check\"><input type=\"radio\" name=\"name\" checked ng-click=\"interval='all'\"> <span class=\"btn btn-white\">Все формы</span></label></div></li></ul><div ng-show=\"status=='deleted'\"><div style=\"padding:10px;text-align:center\"><pre>\n" +
    "            <h5>Ваша форма удалена...</h5>\n" +
    "        </pre><button class=\"btn btn-primary\" ng-click=\"returnToList()\">Вернуться</button></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && listCount==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"status=='ready' && listCount>0\"><style>.table thead>tr>th, .table tbody>tr>td {\n" +
    "            padding-bottom: 30px;\n" +
    "        }</style><table class=\"table table-hover\"><thead><tr><th>Название (формат)</th><th></th><th>Код услуги</th><th>Услуга</th><th>Ведомство</th><th>Дата</th></tr></thead><tbody><tr ng-repeat=\"value in fullList\"><td><a href=\"{{value.view_url|s1Url}}\" title=\"Редактировать форму\">{{ value.name }}</a><p class=\"mt-1\">({{isFormio(value)?'Formio':'SchemaForm'}})</p></td><td><i title=\"Активна\" class=\"fa fa-check-circle fa-lg\" style=\"color:green\" ng-show=\"value.active\"></i></td><td>{{ value.service_id }}</td><td><a href=\"{{'rgu/service_view?id='+value.psp_id|s1Url}}\" title=\"Перейти к услуге\">{{ value.service_name }}</a></td><td>{{ value.dept_name }}</td><td>{{ value.changeDate | dateFormat:\"DD.MM.YYYY HH:mm\" }}</td></tr></tbody></table></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div><button class=\"btn btn-primary\" ng-click=\"returnToList()\">Вернуться</button></div><div ng-show=\"status=='ready' && listCount>0\"><div style=\"margin:10px 0 0 25px\"><s1-paging skip=\"listSkip\" max=\"listMax\" count=\"listCount\" on-change=\"getlist()\"></s1-paging></div></div><div class=\"modal fade\" id=\"newForm\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog modal-lg\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h3 class=\"modal-title\">Новая форма</h3></div><form class=\"form-horizontal\" ng-submit=\"newFormSubmit()\" name=\"myForm\"><div class=\"modal-body\"><div class=\"form-group row\"><div class=\"col-md-2 text-right\"><label>Название формы:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"newForm.name\" name=\"formname\" required></div></div><div class=\"form-group row\"><div class=\"col-md-2 text-right\"><label>Услуга:</label></div><div class=\"col-md-10\"><oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"newForm.service\" placeholder=\"Введите часть названия или кода услуги\" required></oi-select></div></div><div class=\"form-group row\"><div class=\"col-md-2 text-right\"><label>Ведомство:</label></div><div class=\"col-md-10\"><input class=\"form-control\" readonly type=\"text\" value=\"{{ newForm.service.dept_title }}\"></div></div><div class=\"form-group row\"><div class=\"col-md-2 text-right\"><label>Паспорт:</label></div><div class=\"col-md-10\"><input class=\"form-control\" readonly type=\"text\" value=\"{{ newForm.service.pspassport_title }}\"></div></div></div><div class=\"modal-footer\"><button type=\"submit\" class=\"btn btn-success\"><i class=\"fa fa-file-o\"></i> &nbsp;Создать</button> <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">&nbsp;Закрыть</button></div></form></div></div></div>"
  );


  $templateCache.put('/admin/forms-templates/forms-template-formio.component.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"text-center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><div class=\"mb-2 d-flex justify-content-between\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button> <button class=\"btn btn-blue\" ng-show=\"$ctrl.serviceID\" ng-click=\"$ctrl.backToService()\">Назад к услуге</button></div><div class=\"mt-0 mb-2 d-flex\"><div><label>Идентификатор формы</label><br>{{ $ctrl.form._id }}</div><button class=\"btn btn-sm btn-default ml-1 mr-1\" title=\"копировать\" ng-click=\"$ctrl.copyId()\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></button> <small ng-show=\"$ctrl.copySuccess\">скопировано</small></div><div class=\"form-group\"><label class=\"control-label\">Название формы</label><input class=\"form-control\" ng-model=\"$ctrl.form.name\"></div><style>.formio-tabs-li {\n" +
    "            margin-top: 5px;\n" +
    "        }\n" +
    "\n" +
    "        .tab-row-content {\n" +
    "            border-color: #CDD1D4 !important;\n" +
    "        }</style><ul class=\"nav nav-pills ml-0 mb-1\"><li ng-class=\"{'active': $ctrl.isSelectedTab('builder')}\"><a ng-click=\"$ctrl.selectTab('builder')\"><span>Визуальный конструктор</span></a></li><li ng-class=\"{'active': $ctrl.isSelectedTab('json')}\"><a ng-click=\"$ctrl.selectTab('json')\"><span>Редактор в формате JSON</span></a></li></ul><div ng-show=\"$ctrl.isSelectedTab('builder')\"><form-builder form=\"$ctrl.form.formio\"></form-builder></div><div ng-show=\"$ctrl.isSelectedTab('json')\"><div ng-model=\"$ctrl.form.formioJson\" ui-ace=\"$ctrl.aceEditorOptions\"></div></div><div class=\"mt-2 mb-2 d-flex justify-content-between\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button> <button class=\"btn btn-blue\" ng-show=\"$ctrl.serviceID\" ng-click=\"$ctrl.backToService()\">Назад к услуге</button></div></div>"
  );


  $templateCache.put('/admin/forms-templates/forms-template-schemaform.component.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"text-center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><div class=\"mb-2 d-flex justify-content-between\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button> <button class=\"btn btn-blue\" ng-show=\"$ctrl.serviceID\" ng-click=\"$ctrl.backToService()\">Назад к услуге</button></div><div class=\"mt-0 mb-2 d-flex\"><div><label>Идентификатор формы</label><br>{{ $ctrl.form._id }}</div><button class=\"btn btn-sm btn-default ml-1 mr-1\" title=\"копировать\" ng-click=\"$ctrl.copyId()\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></button> <small ng-show=\"$ctrl.copySuccess\">скопировано</small></div><div class=\"form-group\"><label class=\"control-label\">Название формы</label><input class=\"form-control\" ng-model=\"$ctrl.form.name\"></div><div class=\"mb-2\"><label class=\"control-label\">Редактор формы</label><div ng-model=\"$ctrl.schemaform\" ui-ace=\"$ctrl.aceEditorOptions\"></div></div><fieldset class=\"form-fieldset mb-2\"><label class=\"c-label c-label-check mb-1\"><input type=\"checkbox\" ng-model=\"$ctrl.debugform\"> <span class=\"c-checkbox\"></span> Показать форму</label><style>.form-fieldset {\n" +
    "                border: 1px solid #CDD1D4 !important;\n" +
    "                padding: 1rem;\n" +
    "                padding-bottom: 0;\n" +
    "            }</style><div class=\"mt-1\" ng-show=\"$ctrl.debugform\"><form name=\"form\" sf-schema=\"$ctrl.debug.schema\" sf-form=\"$ctrl.debug.form\" sf-model=\"$ctrl.debug.model\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div></fieldset><div class=\"mb-2 d-flex justify-content-between\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button> <button class=\"btn btn-blue\" ng-show=\"$ctrl.serviceID\" ng-click=\"$ctrl.backToService()\">Назад к услуге</button></div></div>"
  );


  $templateCache.put('/admin/forms-templates/forms-templates-list.component.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"mb-1\"><button class=\"btn btn-blue\" data-toggle=\"modal\" data-target=\"#newFormTemplate\">Создать форму +</button></div><div class=\"search\" ng-hide=\"status=='error' || status=='deleted'\"><div class=\"search-form\"><div class=\"search-form-field p-0\"><input class=\"search-input\" ng-model=\"$ctrl.search\" placeholder=\"Введите часть названия формы или id\" autocomplete=\"off\" spellcheck=\"off\"></div></div></div><div class=\"text-center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><style>.table thead>tr>th,\n" +
    "        .table tbody>tr>td {\n" +
    "            padding-left: 2rem;\n" +
    "            padding-right: 2rem;\n" +
    "        }\n" +
    "\n" +
    "        .table thead>tr>th {\n" +
    "            border-bottom-color: #84BF41;\n" +
    "        }</style><table class=\"table table-hover mb-3\"><thead><tr><th width=\"20%\">id</th><th>Название формы</th><th>Модуль</th><th>Формат</th></tr></thead><tbody><tr class=\"cursor-pointer\" ng-repeat=\"form in $ctrl.list\" ng-click=\"$ctrl.goTo(form)\"><td>{{ form._id }}</td><td>{{ form.name }}</td><td>{{ form.formio ? 'Formio' : (form.schemaform ? 'SchemaForm' : '') }}</td><td>{{ form.formio.display === 'wizard' ? 'Многостраничная' : '' }}</td></tr></tbody></table><div class=\"mb-1\" ng-show=\"$ctrl.listCount>0\"><s1-paging count=\"$ctrl.listCount\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><hr></div><div class=\"modal fade\" id=\"newFormTemplate\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Новая форма</p></div><div class=\"modal-body\"><form ng-submit=\"$ctrl.create()\" name=\"newFormTemplate\"><div class=\"form-group\"><label class=\"control-label\">Введите название новой формы</label><input class=\"form-control\" ng-model=\"$ctrl.newFormTemplate.name\" name=\"name\" required></div><ul class=\"nav nav-pills ml-0 mb-1\"><li ng-class=\"{'active': $ctrl.isSelectedFormat('form')}\"><a ng-click=\"$ctrl.selectFormat('form')\"><span>Одностраничная</span></a></li><li ng-class=\"{'active': $ctrl.isSelectedFormat('wizard')}\"><a ng-click=\"$ctrl.selectFormat('wizard')\"><span>Многостраничная</span></a></li></ul><button class=\"btn btn-success\">Создать форму</button></form></div></div></div></div>"
  );


  $templateCache.put('/admin/formView.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"save=='ready'\"><div class=\"alert alert-success\" style=\"padding:10px;text-align:center\">Ваша форма успешно сохранена!</div></div><div ng-hide=\"status=='loading' || status=='error' || save=='ready'\"><div style=\"margin-bottom: 10px\"><b>{{data.name}}</b> - <a href=\"{{'rgu/service_view?id='+data.psp_id|s1Url}}\" title=\"Перейти к услуге\">{{data.service_name}}</a></div><div class=\"row\"><ul class=\"nav nav-tabs admin-form-tab\" style=\"margin:0;font-weight:bold;font-size:13px\"><li ng-class=\"{active:isSelected('editsoap')}\"><a ng-click=\"selectTab('editsoap')\"><i class=\"fa fa-file-text-o\"></i> SOAP</a></li><li ng-class=\"{active:isSelected('editform')}\"><a ng-click=\"selectTab('editform')\"><i class=\"fa fa-file-text-o\"></i> Редактор SchemaForm</a></li></ul></div><div ng-show=\"isSelected('editform')\"><div class=\"row tab-row-content\"><div class=\"my-10px\"><div ng-model=\"editforms\" ui-ace=\"aceOptions\"></div></div></div><div class=\"row tab-row-content\"><div class=\"my-10px\"><div class=\"col-md-6\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"debugform\" name=\"debugform\"> <span class=\"c-checkbox\"></span> Показать форму</label></div></div></div><div class=\"row tab-row-content tab-content\" ng-show=\"debugform\"><div class=\"my-10px\"><form name=\"form\" sf-schema=\"debug.schema\" sf-form=\"debug.form\" sf-model=\"debug.model\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div></div></div><div ng-show=\"isSelected('editsoap')\"><div class=\"row tab-row-content\"><div style=\"margin: 10px\"><form class=\"form-horizontal\" role=\"form\"><div class=\"form-group row\"><label class=\"control-label col-sm-2 mt-1\" for=\"endpoint\">Версия СМЭВ:</label><ul class=\"nav nav-pills col-sm-8\" style=\"margin-top: 0; margin-bottom: 0; padding: 0\"><li ng-class=\"{'active':isSmevVer(2)}\"><a ng-click=\"smevVerSelect(2)\"><span>СМЭВ-2</span></a></li><li ng-class=\"{'active':isSmevVer(3)}\"><a ng-click=\"smevVerSelect(3)\"><span>СМЭВ-3</span></a></li></ul></div><div class=\"form-group\"><label class=\"control-label col-sm-2 mt-1\" for=\"endpoint\">Endpoint для {{ isSmevVer(2) ? 'СМЭВ-2:' : 'СМЭВ-3:'}}</label><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"data.soap.endpoint\" placeholder=\"Endpoint\" id=\"endpoint\"></div></div><div class=\"form-group\" ng-show=\"isSmevVer(3)\"><label class=\"control-label col-sm-2 mt-1\" for=\"endpoint\">Корневой тег:</label><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"data.localpart\" id=\"smevLocalpart\" required></div></div><div class=\"form-group\"><label class=\"control-label col-sm-2 mt-1\" for=\"action\">Soap_action:</label><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"data.soap.action\" placeholder=\"Soap_action\" id=\"action\"></div></div></form><div ng-model=\"data.soap.template\" ui-ace=\"soapOptions\"></div></div></div><div class=\"row admin-forms-tabview\"><div style=\"margin: 10px\"><div class=\"col-md-6\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"trim\"> <span class=\"c-checkbox\"></span> Убрать переносы строк и табы в запросе (trim)</label><br><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"active\" name=\"\"> <span class=\"c-checkbox\"></span> Активировать форму</label><br><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"infoService\" name=\"\"> <span class=\"c-checkbox\"></span> Информационная услуга</label></div><div class=\"col-md-6\"><ul class=\"appl-form-list\"><li><label class=\"c-label c-label-check\"><input name=\"step1\" type=\"radio\" ng-model=\"archive_type\" value=\"rev111111\"> <span class=\"c-radio\"></span> Использовать архиватор rev111111 СМЭВ</label></li><li><label class=\"c-label c-label-check\"><input name=\"step1\" type=\"radio\" ng-model=\"archive_type\" value=\"rev120315\"> <span class=\"c-radio\"></span> Использовать архиватор rev120315 СМЭВ</label></li></ul></div></div></div><div class=\"row admin-forms-tabview\"><div style=\"margin: 10px\"><div class=\"form-group\" title=\"Если ограничение не нужно, укажите пустое значение или 0\"><label class=\"control-label col-sm-3\">Макс. размер файлов, МБ:</label><div class=\"col-md-3\"><input style=\"margin-bottom: 10px\" class=\"form-control\" ng-model=\"filesSizeLimit\"></div></div></div></div><div class=\"row admin-forms-tabview\"><div style=\"margin: 10px\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"resultProc.use\" name=\"\"> <span class=\"c-checkbox\"></span> Использовать специальную обработку ответа</label><form class=\"form-horizontal\" role=\"form\" ng-show=\"resultProc.use\"><div class=\"form-group\"><label class=\"control-label col-sm-3\">xPath кода ответа:</label><div class=\"col-md-8\"><input class=\"form-control\" ng-model=\"resultProc.xPathAccept\"></div></div><div class=\"form-group\"><label class=\"control-label col-sm-3\">Значение кода успешного ответа:</label><div class=\"col-md-3\"><input class=\"form-control\" ng-model=\"resultProc.acceptValue\"></div></div><div class=\"form-group\"><label class=\"control-label col-sm-3\">xPath комментария ошибочного ответа:</label><div class=\"col-md-8\"><input class=\"form-control\" ng-model=\"resultProc.xPathRejectComment\"></div></div></form></div></div></div><div class=\"modal fade\" id=\"rename\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h4 class=\"modal-title\">Переименование названия формы</h4></div><div class=\"modal-footer\"><div class=\"col-md-12\" style=\"margin-bottom: 10px\"><input class=\"form-control\" ng-model=\"name_form\"></div><button ng-click=\"rename()\" class=\"btn btn-success\" data-dismiss=\"modal\"><i class=\"fa fa-file-o\"></i> Сохранить</button> <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Закрыть</button></div></div></div></div><div class=\"modal fade\" id=\"atach\" role=\"dialog\"><div class=\"modal-dialog\" style=\"width: 90%\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h4 class=\"modal-title\">Привязать другую услугу для формы</h4></div><div class=\"modal-footer\"><form class=\"form-horizontal\" name=\"atachForm\"><div class=\"form-group\"><div class=\"col-md-2\"><label>Услуга:</label></div><div class=\"col-md-10\"><oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"service\" placeholder=\"Введите часть названия или кода услуги\"></oi-select></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Ведомство:</label></div><div class=\"col-md-10\"><input class=\"form-control\" readonly type=\"text\" value=\"{{ service.dept_title }}\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Паспорт:</label></div><div class=\"col-md-10\"><input class=\"form-control\" readonly type=\"text\" value=\"{{ service.pspassport_title }}\"></div></div></form><button ng-click=\"atached()\" class=\"btn btn-success\" data-dismiss=\"modal\"><i class=\"fa fa-file-o\"></i> Сохранить изменения</button> <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button></div></div></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div>"
  );


  $templateCache.put('/admin/loadTheater.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"container-fluid\" ng-show=\"status=='ready'\"><h1 class=\"lk-heading\">Загрузка расписания информации о времени и месте театральных представлений</h1><div style=\"background-color: #fff;background-image: none;border: 1px solid #ccc;border-radius: 4px;padding: 20px\"><div class=\"row\"><div class=\"col-md-3\"><div class=\"form-group\"><label for=\"month\" class=\"c-field-label new-c-field-label\">Месяц *</label><select class=\"form-control new-c-field-select\" title=\"Выберите месяц из списка\" ng-model=\"month\" placeholder=\"Выберите месяц из списка\" id=\"month\" ng-options=\"monthItem.value as monthItem.name for monthItem in monthProperty\"></select></div></div><div class=\"col-md-3\"><div class=\"form-group\"><label for=\"year\" class=\"c-field-label new-c-field-label\">Год *</label><select class=\"form-control new-c-field-select\" title=\"Выберите год из списка\" ng-model=\"year\" placeholder=\"Выберите год из списка\" id=\"year\" ng-options=\"yearItem.value as yearItem.name for yearItem in yearProperty\"></select></div></div><div class=\"col-md-3\"><div align=\"center\"><js-xls onread=\"read\" onerror=\"error\"></js-xls></div></div></div></div></div>"
  );


  $templateCache.put('/admin/meDept.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready' && editstatus!='ready'\"><div class=\"col-md-9\"><div class=\"form\"><form><fieldset><legend class=\"c-legend\">Личные данные:</legend><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Фамилия</sup><input value=\"{{personal.name.surname}}\" type=\"text\" placeholder=\"Фамилия\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Имя</sup><input value=\"{{personal.name.name}}\" type=\"text\" placeholder=\"Имя\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Отчество</sup><input value=\"{{personal.name.patronymic}}\" type=\"text\" placeholder=\"Отчество\" class=\"c-text\" readonly></div></div></div></fieldset><hr><fieldset><legend class=\"c-legend\">Системные данные:</legend><div class=\"row\"><div class=\"col-sm-12\"><div class=\"c-field\"><sup class=\"c-field-label\">Логин:</sup><input value=\"{{personal.login}}\" type=\"text\" placeholder=\"Логин\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-12\"><div class=\"c-field\"><sup class=\"c-field-label\">Текущий пароль:</sup><input ng-model=\"personal.password\" type=\"password\" placeholder=\"Не вводите пароль, если не хотите менять его.\" class=\"c-text\"></div></div></div><div class=\"row\"><div class=\"col-sm-12\"><div class=\"c-field\"><sup class=\"c-field-label\">Подтвержение пароля:</sup><input ng-model=\"personal.password2\" type=\"password\" placeholder=\"Подтвержение пароля\" class=\"c-text\"></div></div></div></fieldset><div ng-if=\"personal.roleList.length>0\"><hr><fieldset><legend class=\"c-legend\">Роли:</legend><div class=\"row\"><ul><li style=\"list-style:none\" ng-repeat=\"item in personal.roleList\"><label><input type=\"checkbox\" ng-model=\"item.checked\" disabled> {{item.title}}</label></li></ul></div></fieldset></div><div ng-if=\"personal.deptList.length>0\"><hr><fieldset><legend class=\"c-legend\">Организации:</legend><div class=\"row\"><ul><li style=\"list-style:none\" ng-repeat=\"dept in personal.deptList\"><label><input type=\"checkbox\" ng-model=\"dept.checked\" disabled> {{dept.name}}</label></li></ul></div></fieldset></div><button class=\"btn btn-xs btn-info\" ng-click=\"edit()\"><i class=\"fa fa-pencil-square-o\"></i> Изменить данные</button></form></div></div></div><div ng-show=\"status=='ready' && editstatus=='ready'\"><div class=\"appl-note\"><div class=\"appl-success\"><figure class=\"appl-success-image\"><img ng-src=\"{{'svg/icon-appl-success.svg'|s1Url}}\" alt=\"\"></figure><p class=\"appl-success-text\">Вы успешно изменили данные!</p><p class=\"appl-success-links\"><a href=\"/portal/admin/user_page?tab=mydata\"><span class=\"icon-user\"></span>Перейти в личный кабинет</a></p></div></div></div>"
  );


  $templateCache.put('/admin/media-files-list/media-files-list.component.html',
    "<div class=\"container-fluid\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><div style=\"margin-bottom: 1em\"><button class=\"btn btn-primary\" ng-click=\"$ctrl.addNews()\">Добавить файл</button></div></div></div>"
  );


  $templateCache.put('/admin/mvzList.template.html',
    "<div><h3>Справочник Межведомственных запросов</h3><div><div><a class=\"btn btn-primary\" href=\"mvz_view\"><i class=\"fa fa-plus\"></i> Создать</a></div><br><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && list.length>0\" id=\"form\"></div></div></div>"
  );


  $templateCache.put('/admin/mvzView.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\" id=\"form\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div>"
  );


  $templateCache.put('/admin/organizationCovidList.template.html',
    "<div class=\"container-fluid\"><div class=\"alert alert-info\" ng-hide=\"isEdit\"><i class=\"fa fa-info-circle\"></i> Вам доступны организации, который были назначены Вам администратором. Вы можете вести реестр вопросов и ресурсов (сотрудников, мест обращения) каждой организации. Запись возможна из электронной услуги и из личного кабинета пользователя. Если организация привязана к услуге, то со страницы описания услуги будет доступна кнопка \"Записаться на прием\".</div><button class=\"btn btn-primary\" ng-hide=\"adding || !isEdit\" ng-click=\"adding=true\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить COVID организацию</button><div ng-show=\"adding\"><h2 class=\"service-heading\">Добавление новой организации</h2><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"addStatus=='loading'\"><form class=\"form-horizontal\" name=\"newObject\"><div class=\"form-group\"><div class=\"col-md-2\"><label>ID пользователя*:</label></div><div class=\"col-md-6\"><input required class=\"form-control\" type=\"text\" ng-model=\"newObj.userId\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Название*:</label></div><div class=\"col-md-6\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.name\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Адрес*:</label></div><div class=\"col-md-6\"><input required class=\"form-control\" type=\"text\" ng-model=\"newObj.address.city\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Тип:</label></div><div class=\"col-md-6\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.type\"></div></div></form><div style=\"padding:10px\" ng-show=\"addStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addError.message}}</p></div></div><div align=\"center\"><button ng-disabled=\"(newObject.email.$error.email || !newObj.altEmail) && newObj.useAltEmail==true\" class=\"btn btn-xs btn-primary\" ng-click=\"add()\"><i class=\"fa fa-plus\"></i> Создать</button> <a href=\"javascript:void(0)\" ng-click=\"adding=false\">Отмена</a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"addStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><h2 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 0px\" ng-show=\"status=='ready' && list.length>0\">Список организаций</h2><div class=\"search\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" ng-model-options=\"{debounce: 100}\" placeholder=\"Введите часть названия...\" type=\"text\" autocomplete=\"off\" spellcheck=\"\" speech=\"\" ng-keydown=\"onSearchKeyDown($event)\" x-webkit-speech=\"\"></div></div></div><div class=\"admin-new-org\"><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"appl-table-scroll\" ng-show=\"status=='ready' && list.length>0\"><table class=\"appl-table\"><thead><tr><th>Организация</th><th></th><th></th><th></th></tr></thead><tbody ng-repeat=\"r in list\"><tr><td data-th=\"Организация:\" class=\"no-wrap\">{{r.name}}</td><td></td><td><div class=\"appl-table-ctrl\" ng-hide=\"r.editing || r.removing\"><a href style=\"font-size: 13px;line-height: 1\" class=\"appl-table-btn\" ng-click=\"$parent.copyID(r._id)\" title=\"Скопировать ID организации\" ng-hide=\"!isEdit\">ID </a><a href class=\"appl-table-btn\" ng-click=\"$parent.copyQR(r._id)\" title=\"Скопировать ссылку на QR организации\" ng-hide=\"!isEdit\"><i class=\"fa fa-qrcode\"></i> </a><a ng-href=\"{{'portal/rest/covid19/permanent/org/' + r._id + '/qr?width=500&height=500'}}\" target=\"_blank\" class=\"appl-table-btn\" title=\"Перейти на QR организации\" ng-hide=\"!isEdit\"><i class=\"fa fa-external-link\"></i> </a>&nbsp; | &nbsp; <a href class=\"appl-table-btn\" ng-click=\"$parent.beforeEdit(r)\" title=\"Изменить\" ng-hide=\"!isEdit\"><i class=\"fa fa-pencil-square-o\"></i> </a><a href class=\"appl-table-btn\" ng-click=\"$parent.beforeRemove(r)\" title=\"Удалить\" ng-hide=\"!isEdit\"><i class=\"fa fa-times\"></i></a></div></td></tr><tr><td colspan=\"3\"><div ng-show=\"r.removing\"><div ng-hide=\"r.removeStatus=='loading'\"><div style=\"padding:10px\" ng-show=\"r.removeStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.removeError.message}}</p></div></div><div align=\"center\"><button class=\"btn btn-small\" ng-click=\"remove(r)\"><i class=\"fa fa-times\"></i> Удалить</button> <a href=\"javascript:void(0)\" ng-click=\"r.removing=false\">Отмена</a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.removeStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"r.editing\" style=\"position: relative\"><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"r.editStatus=='loading'\"><style>.rowExtendStyle {\n" +
    "                                            display: flex;\n" +
    "                                            align-items: center;,\n" +
    "                                        }</style><form class=\"form-horizontal\" name=\"editObject\"><div class=\"form-group rowExtendStyle\"><div class=\"col-md-2\"><label>ID пользователя*:</label></div><div class=\"col-md-8\"><input required class=\"form-control\" type=\"text\" ng-model=\"r.editObj.userId\"></div><div class=\"col-md-1\"></div><div class=\"col-md-1\"><button style=\"display: block;width: 100%\" title=\"Скопировать ID организации\" ng-click=\"$parent.copyID(r.editObj._id)\" class=\"btn btn-blue d-block\">ID</button></div></div><div class=\"form-group rowExtendStyle\"><div class=\"col-md-2\"><label>Название*:</label></div><div class=\"col-md-6\"><input required class=\"form-control\" type=\"text\" ng-model=\"r.editObj.name\"></div><div class=\"col-md-3\"></div><div class=\"col-md-1\"><button style=\"display: block;width: 100%\" title=\"Скопировать ссылку на QR организации\" ng-click=\"$parent.copyQR(r.editObj._id)\" class=\"btn btn-blue\"><i class=\"fa fa-qrcode\"></i></button></div></div><div class=\"form-group rowExtendStyle\"><div class=\"col-md-2\"><label>Адрес*:</label></div><div class=\"col-md-6\"><input required class=\"form-control\" type=\"text\" ng-model=\"r.editObj.address.city\"></div><div class=\"col-md-3\"></div><div class=\"col-md-1\"><a style=\"display: block;width: 100%\" target=\"_blank\" class=\"btn btn-blue\" ng-href=\"{{'portal/rest/covid19/permanent/org/' + r.editObj._id + '/qr?width=500&height=500'}}\" title=\"Перейти на QR организации\"><i class=\"fa fa-external-link\"></i></a></div></div><div class=\"form-group rowExtendStyle\"><div class=\"col-md-2\"><label>Тип:</label></div><div class=\"col-md-6\"><input placeholder=\"числовое значение\" class=\"form-control\" type=\"text\" ng-model=\"r.editObj.type\"></div></div></form><div style=\"padding:10px\" ng-show=\"r.editStatus=='error'\"><div class=\"alert alert-danger fade in\" style=\"text-align-last: center\"><strong>Ошибка! </strong>{{r.editError.message}}</div></div><div align=\"center\"><button ng-disabled=\"(editObject.email.$error.email || !r.editObj.altEmail) && r.editObj.useAltEmail==true\" class=\"btn btn-xs btn-primary\" ng-click=\"edit(r)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <a href=\"javascript:void(0)\" ng-click=\"r.editing=false\">Отмена</a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.editStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></td></tr></tbody></table><s1-paging count=\"count\" max=\"max\" skip=\"skip\" on-change=\"refresh()\"></s1-paging></div></div></div>"
  );


  $templateCache.put('/admin/organizationList.template.html',
    "<div class=\"container-fluid\"><div class=\"alert alert-info\" ng-hide=\"isEdit\"><i class=\"fa fa-info-circle\"></i> Вам доступны организации, который были назначены Вам администратором. Вы можете вести реестр вопросов и ресурсов (сотрудников, мест обращения) каждой организации. Запись возможна из электронной услуги и из личного кабинета пользователя. Если организация привязана к услуге, то со страницы описания услуги будет доступна кнопка \"Записаться на прием\".</div><button class=\"btn btn-primary\" ng-hide=\"adding || !isEdit\" ng-click=\"adding=true\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить организацию</button><div ng-show=\"adding\"><h2 class=\"service-heading\">Добавление новой организации</h2><nav class=\"nav-tabs\" style=\"margin-bottom: 10px\"><ul class=\"nav-tabs-menu admin-dept-menu\"><li ng-class=\"{'is-active':isSelected('REGIONAL')}\"><a ng-click=\"selectTab('REGIONAL')\" href=\"#\">Региональные</a></li><li ng-class=\"{'is-active':isSelected('MUNICIPAL')}\"><a ng-click=\"selectTab('MUNICIPAL')\" href=\"#\">Муниципальные</a></li></ul></nav><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"addStatus=='loading'\"><form class=\"form-horizontal\" name=\"newObject\"><div class=\"form-group\"><div class=\"col-md-12\"><oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"service\" required placeholder=\"Введите часть названия ведомства...\" class=\"ng-valid ng-isolate-scope ng-dirty ng-valid-parse ng-touched\"></oi-select></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Ведомство:</label></div><div class=\"col-md-10\"><input class=\"form-control\" readonly type=\"text\" value=\"{{ service.title }}\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Имя*:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.name\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Альтернативный e-mail:</label></div><div class=\"col-md-6\"><input name=\"email\" class=\"form-control\" type=\"email\" ng-model=\"newObj.altEmail\"><div class=\"alert alert-danger small\" role=\"alert\" ng-show=\"newObject.email.$error.email\">Формат example@mail.com</div></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Задействовать альт. e-mail:</label></div><div class=\"col-md-3\"><input style=\"width: 20px\" class=\"form-control\" type=\"checkbox\" ng-model=\"newObj.useAltEmail\"><div class=\"alert alert-danger small\" role=\"alert\" ng-show=\"(newObject.email.$error.email || !newObj.altEmail) && newObj.useAltEmail==true\">Укажите альт. email</div></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Выдача спец. пропуска COVID-19:</label></div><div class=\"col-md-3\"><input style=\"width: 20px\" class=\"form-control\" type=\"checkbox\" ng-model=\"newObj.isCovid19\"></div></div></form><div style=\"padding:10px\" ng-show=\"addStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addError.message}}</p></div></div><div align=\"center\"><button ng-disabled=\"(newObject.email.$error.email || !newObj.altEmail) && newObj.useAltEmail==true\" class=\"btn btn-xs btn-primary\" ng-click=\"add()\"><i class=\"fa fa-plus\"></i> Создать</button> <a href=\"javascript:void(0)\" ng-click=\"adding=false\">Отмена</a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"addStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><h2 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 0px\" ng-show=\"status=='ready' && list.length>0\">Список организаций</h2><div class=\"admin-new-org\"><div class=\"row\"><div class=\"col-md-12\"><div class=\"input-group\" style=\"margin:10px 0\"><input class=\"form-control search\" ng-model=\"search\" placeholder=\"Введите часть названия организации, код ...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech ng-keydown=\"onSearchKeyDown($event)\"> <span class=\"input-group-btn\"><button class=\"btn btn-success btn-xs\" type=\"button\" ng-click=\"refresh()\"><i class=\"fa fa-search\"></i>&nbsp;</button></span></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"appl-table-scroll\" ng-show=\"status=='ready' && list.length>0\"><table class=\"appl-table\"><thead><tr><th>Организация</th><th>Ведомство</th><th></th></tr></thead><tbody ng-repeat=\"r in list\"><tr><td data-th=\"Организация:\" class=\"no-wrap\">{{r.name}}</td><td data-th=\"Ведомство:\">{{r.dept.title}}</td><td><div class=\"appl-table-ctrl\" ng-hide=\"r.editing || r.removing\"><a href class=\"appl-table-btn\" ng-click=\"$parent.beforeEdit(r)\" title=\"Изменить\" ng-hide=\"!isEdit\"><i class=\"fa fa-pencil-square-o\"></i> </a><a href class=\"appl-table-btn\" ng-click=\"$parent.beforeRemove(r)\" title=\"Удалить\" ng-hide=\"!isEdit\"><i class=\"fa fa-times\"></i> </a><a href=\"{{'admin/resources?id='+r.id|s1Url}}&org={{r.name}}\" class=\"appl-table-btn\" title=\"Ресурсы\" ng-show=\"!isEdit\"><i class=\"fa fa-database\"></i> </a><a href=\"{{'admin/questions?id='+r.id|s1Url}}\" class=\"appl-table-btn\" title=\"Вопросы\" ng-show=\"!isEdit && !isDept()\"><i class=\"fa fa-question\"></i></a></div></td></tr><tr><td colspan=\"3\"><div ng-show=\"r.removing\"><div ng-hide=\"r.removeStatus=='loading'\"><div style=\"padding:10px\" ng-show=\"r.removeStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.removeError.message}}</p></div></div><div align=\"center\"><button class=\"btn btn-small\" ng-click=\"remove(r)\"><i class=\"fa fa-times\"></i> Удалить</button> <a href=\"javascript:void(0)\" ng-click=\"r.removing=false\">Отмена</a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.removeStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"r.editing\"><nav class=\"nav-tabs\" style=\"margin-bottom: 10px\"><ul class=\"nav-tabs-menu admin-dept-menu\"><li ng-class=\"{'is-active':isSelected('REGIONAL')}\"><a ng-click=\"selectTab('REGIONAL')\" href=\"#\">Региональные</a></li><li ng-class=\"{'is-active':isSelected('MUNICIPAL')}\"><a ng-click=\"selectTab('MUNICIPAL')\" href=\"#\">Муниципальные</a></li></ul></nav><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"r.editStatus=='loading'\"><form class=\"form-horizontal\" name=\"editObject\"><div class=\"form-group\"><div class=\"col-md-12\"><oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"r.editObj.service\" required placeholder=\"Введите часть названия ведомства...\" class=\"ng-valid ng-isolate-scope ng-dirty ng-valid-parse ng-touched\"></oi-select><span class=\"help-block\" ng-show=\"!r.editObj.service.title\">* Выберите из списка ведомство в строке поиска.</span></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Ведомство:</label></div><div class=\"col-md-10\"><input class=\"form-control\" name=\"title\" readonly type=\"text\" value=\"{{ r.editObj.service.title }}\"> <span class=\"help-block\" ng-show=\"!r.editObj.service.title\" style=\"color: red\">Вы не выбрали ведомство</span></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Имя*:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"r.editObj.name\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Альтернативный e-mail:</label></div><div class=\"col-md-6\"><input name=\"email\" class=\"form-control\" type=\"email\" ng-model=\"r.editObj.altEmail\"><div class=\"alert alert-danger small\" role=\"alert\" ng-show=\"editObject.email.$error.email\">Формат example@mail.com</div></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Задействовать альт. e-mail:</label></div><div class=\"col-md-3\"><input style=\"width: 20px\" class=\"form-control\" type=\"checkbox\" ng-model=\"r.editObj.useAltEmail\"><div class=\"alert alert-danger small\" role=\"alert\" ng-show=\"(editObject.email.$error.email || !r.editObj.altEmail) && r.editObj.useAltEmail==true\">Укажите альт. email</div></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Выдача спец. пропуска COVID-19:</label></div><div class=\"col-md-3\"><input style=\"width: 20px\" class=\"form-control\" type=\"checkbox\" ng-model=\"r.editObj.isCovid19\"></div></div></form><div style=\"padding:10px\" ng-show=\"r.editStatus=='error' && !r.editObj.service.title\"><div class=\"alert alert-danger fade in\" style=\"text-align-last: center\"><strong>Ошибка! </strong>{{r.editError.message}}</div></div><div align=\"center\"><button ng-disabled=\"(editObject.email.$error.email || !r.editObj.altEmail) && r.editObj.useAltEmail==true\" class=\"btn btn-xs btn-primary\" ng-click=\"edit(r)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <a href=\"javascript:void(0)\" ng-click=\"r.editing=false\">Отмена</a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.editStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></td></tr></tbody></table><s1-paging count=\"count\" max=\"max\" skip=\"skip\" on-change=\"refresh()\"></s1-paging></div></div></div>"
  );


  $templateCache.put('/admin/payableServiceList.template.html',
    "<div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-10\"><div class=\"alert alert-info\">В этом реестре ведется каталог услуг, для которых возможна оплата госпошлины.</div></div><div class=\"col-md-2\"><div><a target=\"_blank\" href=\"{{'admin/paymentDetailsList' |s1Url}}\" class=\"btn btn-info\"><i class=\"fa fa-rub\"></i> Платежные реквизиты</a></div></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div><div class=\"container-fluid\" ng-show=\"status=='ready'\"><div style=\"padding:10px;text-align:center\" ng-show=\"list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-repeat=\"p in list\" class=\"appl-table-content\" style=\"padding-bottom: 0px; padding-top: 20; margin: 10px;border-radius: 10px\"><div ng-show=\"p.status=='ready'\" class=\"row\"><div class=\"col-md-11\"><div><a href=\"{{'rgu/service_view?id=' + p.service_id + '&rid=' + p.st_id + '&tab=statement' |s1Url}}\"><strong>{{p.st_title}}</strong></a></div><div>{{p.dept_title}}</div></div><div class=\"col-md-1\"><a href ng-click=\"p.error = undefined; p.status = 'edit'; \" title=\"Редактировать\"><i class=\"fa fa-pencil\"></i> </a><a href ng-click=\"remove(p)\" title=\"Удалить\"><i class=\"fa fa-remove\"></i></a></div></div><div ng-show=\"p.status=='edit'\" class=\"row\"><div class=\"col-md-11\"><div class=\"c-field\"><label class=\"c-field-label\">Код варианта услуги <sup>*</sup></label><input type=\"text\" ng-model=\"p.st_id\" class=\"c-text c-text-white\"></div><p>Возможные варианты оплаты:</p><div ng-repeat=\"option in p.paymentOptions\"><div class=\"row\"><div class=\"col-md-3\"><div class=\"c-field\"><label class=\"c-field-label\">Название</label><input ng-model=\"option.name\" type=\"text\" class=\"c-text c-text-white\" required></div></div><div class=\"col-md-4\"><label for=\"paymentDetailsId\" class=\"c-field-label new-c-field-label\">Платежные реквизиты</label><select class=\"form-control new-c-field-select\" ng-model=\"option.paymentDetails_id\" ng-options=\"item._id as item.name for item in paymentDetailsList\" placeholder=\"- выбрать\" id=\"paymentDetailsId\"><option ng-show=\"!option.paymentDetails_id\" value=\"\">- выбрать</option></select></div><div class=\"col-md-4\"><div class=\"c-field\"><label class=\"c-field-label\">Комментарий (html)</label><textarea ng-model=\"option.htmlComment\" class=\"c-textarea c-textarea-white\" placeholder=\"Напишите сообщение с описанием стоимости и назначения услуг\" rows=\"2\" required></textarea></div></div><div class=\"col-md-1\"><a href ng-click=\"p.paymentOptions.splice(p.paymentOptions.indexOf(option), 1);\" title=\"Удалить\"><i class=\"fa fa-remove\"></i></a></div></div></div><div class=\"row\"><button class=\"btn btn-xs btn-primary\" ng-click=\"addOption(p)\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить вариант оплаты</button></div></div><div class=\"col-md-1\"><a href ng-click=\"save(p);\"><i class=\"fa fa-save\"></i> </a><a href ng-click=\"refreshIt(p);\"><i class=\"fa fa-undo\"></i></a></div></div><div ng-if=\"p.error\"><br><h4>Ошибка</h4><p>{{p.error.message}}</p></div><div ng-if=\"p.status=='loading'\" style=\"padding:10px;text-align:center\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><br></div></div><div class=\"container-fluid\"><div class=\"row\"><button class=\"btn btn-xs btn-primary\" ng-click=\"list.push({'_id':null}); list[list.length-1].status = 'edit';\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить</button></div></div>"
  );


  $templateCache.put('/admin/paymentDetailsList.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div><div class=\"container-fluid\" ng-show=\"status=='ready'\"><div style=\"padding:10px;text-align:center\" ng-show=\"list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-repeat=\"p in list\" class=\"appl-table-content col-md-5\" style=\"padding-bottom: 0px; padding-top: 20; margin: 10px;border-radius: 10px\"><div ng-show=\"p.status=='ready'\" class=\"row\"><div class=\"col-md-10\"><div><strong>{{p.name}}</strong></div></div><div class=\"col-md-2\"><a href ng-click=\"p.error = undefined; p.status = 'edit'; \" title=\"Редактировать\"><i class=\"fa fa-pencil\"></i> </a><a href ng-click=\"copy(p)\" title=\"Дублировать\"><i class=\"fa fa-copy\"></i> </a><a href ng-click=\"remove(p)\" title=\"Удалить\"><i class=\"fa fa-remove\"></i></a></div></div><div ng-show=\"p.status=='edit'\" class=\"row\"><div class=\"col-md-10\"><form sf-schema=\"schema\" sf-form=\"form\" sf-model=\"p\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div><div class=\"col-md-2\"><a href ng-click=\"save(p);\"><i class=\"fa fa-save\"></i> </a><a href ng-click=\"refreshIt(p);\"><i class=\"fa fa-undo\"></i></a></div></div><div ng-if=\"p.error\"><br><h4>Ошибка</h4><p>{{p.error.message}}</p></div><div ng-if=\"p.status=='loading'\" style=\"padding:10px;text-align:center\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><br></div></div><div class=\"container-fluid\"><div class=\"row\"><button class=\"btn btn-xs btn-primary\" ng-click=\"add()\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить</button></div></div>"
  );


  $templateCache.put('/admin/penalty/penalty.template.html',
    "<div class=\"row\"><div class=\"col-md-3\"><p class=\"input-group\"><label>Дата</label><date-picker ng-model=\"$ctrl.date\" max-date=\"$ctrl.maxDate\"></date-picker></p></div></div><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div ng-if=\"$ctrl.files\"><h3>Пользователи</h3><div class=\"row\" ng-repeat=\"file in $ctrl.files.users\"><div class=\"col-md-4\">{{file}}</div></div><button ng-if=\"$ctrl.files.users == null || $ctrl.files.users.length == 0\" ng-click=\"$ctrl.uploadFile($ctrl.date)\" class=\"btn btn-xs btn-blue\">Сформировать файл с пользователями</button><h3 style=\"margin-top: 10px\">Штрафы</h3><table class=\"table table-hover mb-3\"><thead><tr><th>Файл</th><th>Лог email</th><th>Лог СМС</th><th></th></tr></thead><tbody><tr ng-repeat=\"file in $ctrl.files.bill\"><td>{{file.name}}</td><td>{{file.error_log}}</td><td>{{file.error_sms_log}}</td><td><button ng-if=\"!file.error_log || !file.error_sms_log\" ng-click=\"$ctrl.sendEmail($ctrl.date, file.name, false)\" class=\"btn btn-xs btn-blue\">Отправить email и СМС</button></td></tr></tbody></table></div></status-wrapper>"
  );


  $templateCache.put('/admin/questionList/questionList.template.html',
    "<div><h3 class=\"service-heading\" ng-hide=\"status=='error'\">{{organization.name}}</h3><button class=\"btn btn-primary\" ng-hide=\"adding || my\" ng-click=\"adding=true\"><i class=\"fa fa-plus\"></i> Добавить вопрос</button><div ng-show=\"adding\"><div ng-hide=\"addStatus=='loading'\"><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-2 control-label\">Название:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.name\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Длительность, мин:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.length\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Выдача спец. пропуска COVID-19:</label><div class=\"col-md-10 controls\"><input style=\"width: 20px\" class=\"form-control\" type=\"checkbox\" ng-model=\"newObj.isCovid19\"></div></div><div class=\"form-group\"><label class=\"control-label\">Услуга</label><oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"newObj.service\" placeholder=\"Введите часть названия или кода услуги\" required></oi-select></div></form><div style=\"padding:10px\" ng-show=\"addStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addError.message}}</p></div></div><button class=\"btn btn-xs btn-primary\" ng-click=\"add()\"><i class=\"fa fa-plus\"></i> Создать</button> <a href=\"javascript:void(0)\" ng-click=\"adding=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"addStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && list.length>0\"><ul><li ng-repeat=\"r in list\" style=\"list-style:none\"><div style=\"padding:10px;border-bottom:solid 1px #ccc\"><div ng-hide=\"r.editing\"><span style=\"font-size:16px;margin:0 10px 10px 0\">{{r.name}}, {{r.length / 60 / 1000}} мин.</span> <button class=\"btn btn-xs btn-default\" ng-hide=\"my\" ng-click=\"$parent.beforeEdit(r)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <button class=\"btn btn-xs btn-danger\" ng-hide=\"my\" ng-click=\"$parent.beforeRemove(r)\"><i class=\"fa fa-times\"></i></button></div><div ng-show=\"r.removing\"><div ng-hide=\"r.removeStatus=='loading'\"><div style=\"padding:10px\" ng-show=\"r.removeStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.removeError.message}}</p></div></div><button class=\"btn btn-small\" ng-click=\"remove(r)\"><i class=\"fa fa-times\"></i> Удалить</button> <a href=\"javascript:void(0)\" ng-click=\"r.removing=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.removeStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"r.editing\"><div ng-hide=\"r.editStatus=='loading'\"><form class=\"form-horizontal\"><div class=\"form-group\" ng-if=\"!question\"><label class=\"col-md-2 control-label\">Название:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"r.editObj.name\"></div></div><div class=\"form-group\" ng-if=\"!question\"><label class=\"col-md-2 control-label\">Длительность, мин:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"r.editObj.length\"></div></div><div class=\"form-group\" ng-if=\"!question\"><label class=\"col-md-2 control-label\">Выдача спец. пропуска COVID-19:</label><div class=\"col-md-10 controls\"><input style=\"width: 20px\" class=\"form-control\" type=\"checkbox\" ng-model=\"r.editObj.isCovid19\"></div></div><div class=\"form-group\"><label class=\"control-label\">Услуга</label><oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"r.editObj.service\" placeholder=\"Введите часть названия или кода услуги\" required></oi-select><button style=\"position: relative;top: -50px;left: -50px\" class=\"btn btn-xs btn-danger\" ng-click=\"r.editObj.service = null\" title=\"Отвязать от услуги\"><i class=\"fa fa-times\"></i></button></div></form><div style=\"padding:10px\" ng-show=\"r.editStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.editError}}</p></div></div><button class=\"btn btn-xs btn-primary\" ng-click=\"edit(r)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <a href=\"javascript:void(0)\" ng-click=\"r.editing=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.editStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></div></li></ul></div></div>"
  );


  $templateCache.put('/admin/remotedictList.template.html',
    "<div><h3>Внешние словари</h3><div class=\"mb-2\"><a class=\"btn btn-primary\" href=\"/admin/remoteDict_view\"><i class=\"fa fa-plus\"></i> Создать</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && list.length>0\" id=\"form\"></div></div>"
  );


  $templateCache.put('/admin/remotedictView.template.html',
    "<div><h3>Внешний словарь</h3><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><form class=\"form-horizontal\"><fieldset ng-disabled=\"isHolding==true\" style=\"border:none\"><div class=\"form-group\"><div class=\"col-md-2\"><label>Наименование:</label></div><div class=\"col-md-10\"><input required class=\"form-control\" type=\"text\" ng-model=\"d.name\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Код:</label></div><div class=\"col-md-10\"><input required class=\"form-control\" type=\"text\" ng-model=\"d.code\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Адрес веб-сервиса:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"d.requestAddress\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>soapAction:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"d.soapAction\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Текст запроса:</label></div><div class=\"col-md-10\"><textarea class=\"form-control\" cols=\"80\" rows=\"10\" ng-model=\"d.requestText\"></textarea></div><br></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Наложить подпись ЭП-ОВ</label></div><label class=\"c-label c-label-check\" style=\"margin-left: 12px\"><input type=\"checkbox\" ng-model=\"d.sign\" name=\"\"> <span class=\"c-checkbox\"></span></label></div><div class=\"form-group\"><div class=\"col-md-2\"><label>cacheExpires - кол-во секунд по прошествии которых кеш будет считатся устаревшим (0 - не кешировать):</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"number\" ng-model=\"d.cacheExpires\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Возвращать одиночные теги (&lt;tag/&gt;) как XML</label></div><label class=\"c-label c-label-check\" style=\"margin-left: 12px\"><input type=\"checkbox\" ng-model=\"d.needSingleTagsAsXmlText\" name=\"\"> <span class=\"c-checkbox\"></span></label></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Использовать объекты в ответе (не name|value)</label></div><label class=\"c-label c-label-check\" style=\"margin-left: 12px\"><input type=\"checkbox\" ng-model=\"d.useObjects\" name=\"\"> <span class=\"c-checkbox\"></span></label></div><span ng-show=\"!d.useObjects\"><div class=\"form-group\"><div class=\"col-md-2\"><label>XPath для NAME :</label></div><div class=\"col-md-10\"><input class=\"form-control\" ng-model=\"d.nameXPath\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>XPath для VALUE :</label></div><div class=\"col-md-10\"><input class=\"form-control\" ng-model=\"d.valueXPath\"></div></div></span><span ng-show=\"d.useObjects\"><div class=\"row\"><div class=\"col-md-2\"></div><div class=\"col-md-2\"><label>Наименование поля</label></div><div class=\"col-md-7\"><label>XPath поля</label></div></div><div ng-repeat=\"fx in d.fieldXPaths\"><div class=\"row\"><div class=\"col-md-2\"></div><div class=\"col-md-2\"><input class=\"form-control\" ng-model=\"fx.fieldName\"></div><div class=\"col-md-7\"><input class=\"form-control\" ng-model=\"fx.xPath\"></div><div class=\"col-md-1\"><a href ng-click=\"d.fieldXPaths.splice(d.fieldXPaths.indexOf(fx), 1);\" title=\"Удалить\"><i class=\"fa fa-remove\"></i></a></div></div></div><div class=\"row\"><div class=\"col-md-2\"></div><div class=\"col-md-4\"><button class=\"btn btn-xs btn-primary\" ng-click=\"addOption(d)\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить</button></div></div></span><div ng-show=\"!requesting\"><button class=\"btn btn-xs btn-primary\" ng-click=\"refreshResp()\"><i class=\"fa fa-refresh\"></i> Проверить ответ</button></div><div ng-show=\"requesting\"><button class=\"btn btn-xs btn-primary\"><i class=\"fa fa-refresh fa-spin\"></i> Отправка запроса...</button></div><br><div ng-show=\"!requesting\"><div class=\"form-group\"><div class=\"col-md-2\"><label>Текст ответа:</label></div><div class=\"col-md-10\"><textarea readonly class=\"form-control\" cols=\"80\" rows=\"10\" ng-model=\"d.responseText\"></textarea></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Результат:</label></div><div class=\"col-md-8\"><table cellspacing=\"0\" border=\"1\" ng-show=\"!d.useObjects\"><tr><td width=\"300\"><b>name</b></td><td width=\"50\"><b>value</b></td></tr><tr ng-repeat=\"i in d.items\"><td>{{i.value}}</td><td>{{i.name}}</td></tr></table></div><div ng-show=\"d.useObjects\" class=\"col-md-8\"><pre>{{d.objects | json }}</pre></div></div></div></fieldset></form></div><button class=\"btn btn-primary\" ng-click=\"save()\"><i class=\"fa fa-save\"></i> Сохранить</button> <a href=\"{{'admin/remoteDict_list' |s1Url}}\" class=\"btn btn-default\"><i class=\"fa fa-file-text-o\"></i> Отменить</a> <button ng-hide=\"!d._id\" class=\"btn btn-danger\" ng-click=\"remove()\"><i class=\"fa fa-remove\"></i> Удалить</button></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div>"
  );


  $templateCache.put('/admin/requestReport/requestReport.template.html',
    "<service-request-header request=\"$ctrl.request\"></service-request-header><div ng-show=\"$ctrl.getStatus().comment\" class=\"alert alert-info\"><h4 class=\"mb-1\">Содержимое ошибки:</h4><pre>{{$ctrl.getStatus().comment}}</pre></div><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':$ctrl.isSelected('request')}\"><a ng-click=\"$ctrl.selectTab('request')\">Заявление</a></li><li ng-class=\"{'is-active':$ctrl.isSelected('history')}\"><a ng-click=\"$ctrl.selectTab('history')\">История рассмотрения</a></li></ul></nav><div class=\"tab-content\" ng-show=\"$ctrl.isSelected('request')\"><div class=\"mb-2\"><div ng-if=\"$ctrl.isFormio()\"><formio form=\"$ctrl.request.formTemplate\" submission=\"$ctrl.request.model\" url=\"'_'\"></formio></div><div ng-if=\"!$ctrl.isFormio()\"><form name=\"$ctrl.form\" sf-schema=\"$ctrl.request.formTemplate.schema\" sf-form=\"$ctrl.request.formTemplate.form\" sf-model=\"$ctrl.request.model\"></form></div></div></div><div class=\"tab-content\" ng-show=\"$ctrl.isSelected('history')\"><tr class=\"appl-table-details is-active\"><td colspan=\"6\"><div class=\"appl-table-content\"><ol class=\"appl-table-details-list\"><li ng-repeat=\"status in $ctrl.request.statusList\"><div class=\"row\"><div class=\"col-md-4\"><strong class=\"appl-table-datails-title\">{{status.text}}</strong></div><div class=\"col-md-4\"><time class=\"appl-table-datails-date\">{{status.date | dateFormat:\"DD.MM.YYYY HH:mm\"}}</time><p>{{status.comment}}</p></div><div class=\"col-md-4\"><p class=\"appl-table-datails-text\">{{status.author}}<br><span ng-repeat=\"file in status.files\"><a href=\"{{file.url}}\" target=\"_blank\">{{file.filename}}</a></span><br><span ng-if=\"status.soapReq\"><a ng-href=\"{{$ctrl.soapDumpUrl(status.soapReq)|s1Url}}\" target=\"_blank\">Запрос</a></span><br><span ng-if=\"status.soapResp\"><a ng-href=\"{{$ctrl.soapDumpUrl(status.soapResp)|s1Url}}\" target=\"_blank\">Ответ</a></span></p></div></div></li></ol></div></td></tr></div><div class=\"mb-2\"><button class=\"btn btn-blue\" ng-click=\"$ctrl.submitForm()\">Повторно поставить в очередь на отправку</button> <button class=\"btn btn-danger\" ng-disabled=\"$ctrl.getStatus().code == 100\" ng-click=\"$ctrl.deleteServiceRequest()\">Удалить</button></div></status-wrapper>"
  );


  $templateCache.put('/admin/resourceList/resourceList.template.html',
    "<div><h3 class=\"service-heading\" ng-hide=\"status=='error'\">{{organization}}</h3><div ng-show=\"!isDept()\"><button class=\"btn btn-primary\" ng-hide=\"adding\" ng-click=\"adding=true;newObj = {questions:[]}\"><i class=\"fa fa-plus\"></i> Добавить ресурс</button></div><div ng-show=\"adding\"><div ng-hide=\"addStatus=='loading'\"><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-2 control-label\">Имя*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.name\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Начало записи*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"number\" ng-model=\"newObj.scheduleBegin\"><p class=\"schema-form-description\">Указывается число часов от текущего момента (в будущем) до начала открытия записи</p></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Окончание записи*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"number\" ng-model=\"newObj.scheduleEnd\"><p class=\"schema-form-description\">Указывается число часов от текущего момента (в будущем) до окончания записи</p></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Интервал*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"number\" ng-model=\"newObj.scheduleInterval\"><p class=\"schema-form-description\">Указывается число минут интервала на которые разбивается рабочее время при записи на приём</p></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Описание:</label><div class=\"col-md-10 controls\"><textarea s1-autosize class=\"form-control\" ng-model=\"newObj.description\"></textarea></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Вопросы*:</label><div class=\"col-md-10 controls\"><button class=\"btn btn-default btn-xs\" ng-click=\"newObj.questions.push({})\"><i class=\"fa fa-plus\"></i> Добавить вопрос</button><ul class=\"ul-unstyled\"><li ng-repeat=\"q in newObj.questions\" style=\"position:relative\"><div style=\"margin:5px 0 0 30px\"><oi-select oi-options=\"c.id as (c.name+' - '+(c.length/60000)+' мин.') for c in questions\" ng-model=\"q.id\" placeholder=\"Введите часть вопроса\" required></oi-select></div><button style=\"position:absolute;top:5px;left:0\" class=\"btn btn-danger btn-xs\" ng-click=\"newObj.questions.splice($index,1)\" title=\"Убрать\" s1-tooltip><i class=\"fa fa-times\"></i></button></li></ul></div></div></form><div style=\"padding:10px\" ng-show=\"addStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addError.message}}</p></div></div><button class=\"btn btn-xs btn-primary\" ng-click=\"add()\"><i class=\"fa fa-plus\"></i> Создать</button> <a href=\"javascript:void(0)\" ng-click=\"adding=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"addStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && list.length>0\"><ul><li ng-repeat=\"r in list\" style=\"list-style:none\"><div style=\"padding:10px;border-bottom:solid 1px #ccc\"><div ng-hide=\"r.editing\"><span style=\"font-size:16px;margin:0 10px 10px 0\">{{r.name}}</span> <a href=\"{{'personcab/schedule?id='+r.id+'&org='+id|s1Url}}&place={{r.name}}&organization={{organization}}\" style=\"text-decoration:underline;margin:0 10px 10px 0\">Расписание</a> <button class=\"btn btn-xs btn-default\" ng-hide=\"isDept()\" ng-click=\"$parent.beforeEdit(r)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <button class=\"btn btn-xs btn-danger\" ng-hide=\"isDept()\" ng-click=\"$parent.beforeRemove(r)\"><i class=\"fa fa-times\"></i></button><div style=\"font-size:12px;color:#888\">{{r.scheduleBegin / 60000}} ч. - {{r.scheduleEnd / 60000}} ч.</div><div style=\"font-size:12px;color:#888\"><span ng-repeat=\"q in r.questions\">{{q.name}};</span></div><div style=\"font-size:12px;color:#888\">{{r.description}}</div></div><div ng-show=\"r.removing\"><div ng-hide=\"r.removeStatus=='loading'\"><div style=\"padding:10px\" ng-show=\"r.removeStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.removeError.message}}</p></div></div><button class=\"btn btn-small\" ng-click=\"remove(r)\"><i class=\"fa fa-times\"></i> Удалить</button> <a href=\"javascript:void(0)\" ng-click=\"r.removing=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.removeStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"r.editing\"><div ng-hide=\"r.editStatus=='loading'\"><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-2 control-label\">Имя*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"r.editObj.name\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Начало записи*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"number\" ng-model=\"r.editObj.scheduleBegin\"><p class=\"schema-form-description\">Указывается число часов от текущего момента (в будущем) до начала открытия записи</p></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Окончание записи*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"number\" ng-model=\"r.editObj.scheduleEnd\"><p class=\"schema-form-description\">Указывается число часов от текущего момента (в будущем) до окончания записи</p></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Интервал*:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"number\" ng-model=\"r.editObj.scheduleInterval\"><p class=\"schema-form-description\">Указывается число минут интервала на которые разбивается рабочее время при записи на приём</p></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Описание:</label><div class=\"col-md-10 controls\"><textarea s1-autosize class=\"form-control\" ng-model=\"r.editObj.description\"></textarea></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Вопросы*:</label><div class=\"col-md-10 controls\"><button class=\"btn btn-default btn-xs\" ng-click=\"r.editObj.questions.push({})\"><i class=\"fa fa-plus\"></i> Добавить вопрос</button><ul class=\"ul-unstyled\"><li ng-repeat=\"q in r.editObj.questions\" style=\"position:relative\"><div style=\"margin:5px 0 0 30px\"><oi-select oi-options=\"c.id as (c.name+' - '+(c.length/60000)+' мин.') for c in questions\" ng-model=\"q.id\" placeholder=\"Введите часть вопроса\" required></oi-select></div><button style=\"position:absolute;top:5px;left:0\" class=\"btn btn-danger btn-xs\" ng-click=\"r.editObj.questions.splice($index,1)\" title=\"Убрать\" s1-tooltip><i class=\"fa fa-times\"></i></button></li></ul></div></div></form><div style=\"padding:10px\" ng-show=\"r.editStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.editError.message}}</p></div></div><button class=\"btn btn-xs btn-primary\" ng-click=\"edit(r)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <a href=\"javascript:void(0)\" ng-click=\"r.editing=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.editStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></div></li></ul></div></div>"
  );


  $templateCache.put('/admin/serviceRequestReportList/serviceRequestReportList.component.html',
    "<h4 style=\"margin-top: 20px\"><i class=\"fa fa-cogs\"></i> &nbsp;Заявления пользователей</h4><form class=\"form-inline\"><div class=\"search\"><div class=\"search-form\"><div class=\"col-md-2\"><input type=\"text\" class=\"form-control\" style=\"width: 100%\" ng-model=\"$ctrl.search_number\" placeholder=\"№ заявления\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div><div class=\"col-md-2\"><input type=\"text\" class=\"form-control\" style=\"width: 100%\" ng-model=\"$ctrl.search_id\" placeholder=\"ID заявления\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div><div class=\"col-md-5\"><input type=\"text\" class=\"form-control\" style=\"width: 100%\" ng-model=\"$ctrl.search_service\" placeholder=\"Код или название услуги\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div><a class=\"btn btn-info btn-xs\" ng-click=\"$ctrl.getlist()\"><i class=\"fa fa-filter\"></i> Фильтр</a> <a class=\"btn btn-primary btn-xs\" ng-click=\"$ctrl.reset()\"><i class=\"fa fa-eraser\"></i> Сбросить фильтр</a></div></div></form><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><table class=\"table table-hover\"><thead><tr><th style=\"text-align:center\">№</th><th>ID</th><th>Статус</th><th>Дата</th><th>Услуга</th></tr></thead><tbody><tr ng-repeat=\"req in $ctrl.requests\"><td><a class=\"btn btn-success btn-xs\" href=\"{{'admin/requestReport?idServiceRequest=' + req._id}}\" title=\"Перейти к заявлению\">{{ req.docNum }}</a></td><td>{{ req._id }}</td><td>{{ req.status }}</td><td>{{ req.date | dateFormat:\"DD.MM.YYYY HH:mm\"}}</td><td><a href=\"{{'rgu/service_view?id=' + req.service.pspassport_id}}\">{{ req.service.service_title }}</a></td></tr></tbody></table></status-wrapper><div class=\"mb-1\" ng-show=\"$ctrl.count > 0\"><s1-paging skip=\"$ctrl.paginationOffset\" max=\"$ctrl.paginationMax\" count=\"$ctrl.count\" on-change=\"$ctrl.getlist()\"></s1-paging></div><hr>"
  );


  $templateCache.put('/admin/serviceRequestTest/service-request-test-settings.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"mb-1\"><button class=\"btn btn-blue\" ng-click=\"$ctrl.create()\">Добавить +</button></div><div class=\"search\"><div class=\"search-form\"><div class=\"search-form-field p-0\"><input class=\"search-input\" ng-model=\"$ctrl.search\" placeholder=\"Введите часть названия или № заявления\" autocomplete=\"off\" spellcheck=\"off\"></div></div></div><style>.table thead>tr>th,\n" +
    "        .table tbody>tr>td {\n" +
    "            padding-left: 2rem;\n" +
    "            padding-right: 2rem;\n" +
    "        }\n" +
    "\n" +
    "        .table thead>tr>th {\n" +
    "            border-bottom-color: #84BF41;\n" +
    "        }</style><table class=\"table table-hover mb-3\"><thead><tr><th>Название</th><th>№ заявления</th><th></th></tr></thead><tbody><tr ng-repeat=\"item in $ctrl.data.list\"><td>{{ item.name }}</td><td class=\"bordered-left\">{{ item.docNum }}</td><td class=\"bordered-left\"><button ng-click=\"$ctrl.edit(item)\" title=\"Редактировать\"><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i></button> <button ng-click=\"$ctrl.delete(item._id)\" title=\"Удалить\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button></td></tr></tbody></table><div class=\"mb-1\" ng-show=\"$ctrl.data.count>0\"><s1-paging count=\"$ctrl.data.count\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><hr></status-wrapper><div class=\"modal fade\" id=\"editItem\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Тестовое заявление</p></div><div class=\"modal-body\"><form ng-submit=\"$ctrl.save($ctrl.editItem)\" name=\"editItem\"><div class=\"form-group\"><label class=\"control-label\">Название</label><input class=\"form-control\" ng-model=\"$ctrl.editItem.name\" name=\"name\"></div><div class=\"form-group\"><label class=\"control-label\">Номер</label><input class=\"form-control\" type=\"number\" min=\"1\" ng-model=\"$ctrl.editItem.docNum\" name=\"name\" required></div><button class=\"btn btn-success\">Сохранить</button> <button class=\"btn btn-white\" data-dismiss=\"modal\">Отмена</button></form></div></div></div></div>"
  );


  $templateCache.put('/admin/serviceRequestTest/service-request-test.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"mb-1\"><button class=\"btn btn-blue\" ng-click=\"$ctrl.create()\">Запустить проверку</button> <a class=\"btn btn-blue\" href=\"/admin/service_request_test_settings\">Настройка тестовых заявлений</a></div><style>.table thead>tr>th,\n" +
    "        .table tbody>tr>td {\n" +
    "            padding-left: 2rem;\n" +
    "            padding-right: 2rem;\n" +
    "        }\n" +
    "\n" +
    "        .table thead>tr>th {\n" +
    "            border-bottom-color: #84BF41;\n" +
    "        }</style><table class=\"table table-hover mb-3\"><thead><tr><th width=\"20%\">id</th><th>Дата</th><th>Результат</th></tr></thead><tbody><tr ng-repeat=\"item in $ctrl.data.list\"><td>{{ item._id }}</td><td class=\"bordered-left\">{{ item.date | dateFormat:\"DD.MM.YYYY HH:mm\" }}</td><td class=\"bordered-left\"><a class=\"btn btn-default\" ng-href=\"portal/rest/serviceRequestTest/{{item._id}}/xlsx\" target=\"_blank\">Результат в xlsx</a></td></tr></tbody></table><div class=\"mb-1\" ng-show=\"$ctrl.data.count>0\"><s1-paging count=\"$ctrl.data.count\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><hr></status-wrapper>"
  );


  $templateCache.put('/admin/soap-templates/soap-template.component.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"text-center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><div class=\"mb-2 d-flex justify-content-between\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button> <button class=\"btn btn-blue\" ng-show=\"$ctrl.serviceID\" ng-click=\"$ctrl.backToService()\">Назад к услуге</button></div><div class=\"mt-0 mb-2 d-flex\"><div><label>Идентификатор записи</label><br>{{ $ctrl.soap._id }}</div><button class=\"btn btn-sm btn-default ml-1 mr-1\" title=\"копировать\" ng-click=\"$ctrl.copyId()\"><i class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></button> <small ng-show=\"$ctrl.copySuccess\">скопировано</small></div><div class=\"form-group\"><label class=\"control-label\">Название шаблона</label><input class=\"form-control\" ng-model=\"$ctrl.soap.name\"></div><div class=\"form-group\"><label class=\"control-label\">Маршрут (endpoint)</label><input class=\"form-control\" ng-model=\"$ctrl.soap.soap.endpoint\"></div><div class=\"form-group\"><label class=\"control-label\">Версия СМЭВ:</label><ul class=\"nav nav-pills m-0\"><li class=\"m-0\" ng-class=\"{'active': $ctrl.isSmevVer(2)}\"><a ng-click=\"$ctrl.smevVerSelect(2)\"><span>СМЭВ-2</span></a></li><li class=\"m-0\" ng-class=\"{'active': $ctrl.isSmevVer(3)}\"><a ng-click=\"$ctrl.smevVerSelect(3)\"><span>СМЭВ-3</span></a></li></ul></div><div class=\"form-group\" ng-show=\"$ctrl.isSmevVer(3)\"><label class=\"control-label\">Корневой тег СМЭВ 3 (localpart):</label><input class=\"form-control\" ng-model=\"$ctrl.soap.soap.localpart\"></div><div class=\"form-group\"><label class=\"control-label\">Действие (action):</label><input class=\"form-control\" ng-model=\"$ctrl.soap.soap.action\"></div><div class=\"mb-2\"><label class=\"control-label\">Шаблон (xml template):</label><div ng-model=\"$ctrl.soap.soap.template\" ui-ace=\"$ctrl.aceEditorOptions\"></div></div><div class=\"mb-1\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"$ctrl.soap.soap.trim\"> <span class=\"c-checkbox\"></span> Убрать переносы строк и табы в запросе (trim)</label></div><div class=\"mb-1\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"$ctrl.soap.soap.infoService\"> <span class=\"c-checkbox\"></span> Информационная услуга</label></div><div class=\"mb-1\"><label class=\"c-label c-label-check\"><input name=\"step1\" type=\"radio\" ng-model=\"$ctrl.soap.soap.archive_type\" value=\"rev111111\"> <span class=\"c-radio\"></span> Использовать архиватор rev111111 СМЭВ</label></div><div class=\"mb-1\"><label class=\"c-label c-label-check\"><input name=\"step1\" type=\"radio\" ng-model=\"$ctrl.soap.soap.archive_type\" value=\"rev120315\"> <span class=\"c-radio\"></span> Использовать архиватор rev120315 СМЭВ</label></div><div class=\"form-group row mb-2\" title=\"Если ограничение не нужно, укажите пустое значение или 0\"><label class=\"control-label col-sm-12\">Макс. размер файлов, МБ:</label><div class=\"col-sm-6 col-md-3\"><input class=\"form-control\" ng-model=\"$ctrl.soap.soap.filesSizeLimit\"></div></div><fieldset class=\"form-fieldset mb-2\"><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"$ctrl.soap.soap.resultProc.use\"> <span class=\"c-checkbox\"></span> Использовать специальную обработку ответа</label><style>.form-fieldset {\n" +
    "                border: 1px solid #CDD1D4 !important;\n" +
    "                padding: 1rem;\n" +
    "                padding-bottom: 0;\n" +
    "            }</style><div ng-show=\"$ctrl.soap.soap.resultProc.use\"><div class=\"form-group\"><label class=\"control-label\">xPath кода ответа:</label><input class=\"form-control\" ng-model=\"$ctrl.soap.soap.resultProc.xPathAccept\"></div><div class=\"form-group\"><label class=\"control-label\">Значение кода успешного ответа:</label><input class=\"form-control\" ng-model=\"$ctrl.soap.soap.resultProc.acceptValue\"></div><div class=\"form-group\"><label class=\"control-label\">xPath комментария ошибочного ответа:</label><input class=\"form-control\" ng-model=\"$ctrl.soap.soap.resultProc.xPathRejectComment\"></div></div></fieldset><div class=\"mb-2 d-flex justify-content-between\"><button class=\"btn btn-success\" ng-click=\"$ctrl.update()\">Сохранить</button> <button class=\"btn btn-blue\" ng-show=\"$ctrl.serviceID\" ng-click=\"$ctrl.backToService()\">Назад к услуге</button></div></div>"
  );


  $templateCache.put('/admin/soap-templates/soap-templates-list.component.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"mb-1\"><button class=\"btn btn-blue\" data-toggle=\"modal\" data-target=\"#newSoap\">Создать шаблон +</button></div><div class=\"search\" ng-hide=\"status=='error' || status=='deleted'\"><div class=\"search-form\"><div class=\"search-form-field p-0\"><input class=\"search-input\" ng-model=\"$ctrl.search\" placeholder=\"Введите часть названия шаблона или id\" autocomplete=\"off\" spellcheck=\"off\"></div></div></div><div class=\"text-center\" ng-show=\"$ctrl.status==='LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status==='LOADING'\"><style>.table thead>tr>th,\n" +
    "        .table tbody>tr>td {\n" +
    "            padding-left: 2rem;\n" +
    "            padding-right: 2rem;\n" +
    "        }\n" +
    "\n" +
    "        .table thead>tr>th {\n" +
    "            border-bottom-color: #84BF41;\n" +
    "        }</style><table class=\"table table-hover mb-3\"><thead><tr><th width=\"20%\">id</th><th>Наименование шаблона</th><th>Soap Endpoint</th></tr></thead><tbody><tr class=\"cursor-pointer\" ng-repeat=\"soap in $ctrl.list\" ng-click=\"$ctrl.goTo(soap._id)\"><td>{{ soap._id }}</td><td class=\"bordered-left\">{{ soap.name }}</td><td class=\"bordered-left\">{{ soap.soap.endpoint }}</td></tr></tbody></table><div class=\"mb-1\" ng-show=\"$ctrl.listCount>0\"><s1-paging count=\"$ctrl.listCount\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><hr></div><div class=\"modal fade\" id=\"newSoap\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Новый шаблон SOAP</p></div><div class=\"modal-body\"><form ng-submit=\"$ctrl.create()\" name=\"newSoapTemplate\"><div class=\"form-group\"><label class=\"control-label\">Введите название нового шаблона</label><input class=\"form-control\" ng-model=\"$ctrl.newSoapTemplate.name\" name=\"name\" required></div><button class=\"btn btn-success\">Создать шаблон</button></form></div></div></div></div>"
  );


  $templateCache.put('/admin/translates/translates.html',
    "<div class=\"mb-2\"><button class=\"btn btn-default\" ng-click=\"$ctrl.goBack()\">Назад</button></div><div class=\"d-flex mb-2\"><button class=\"btn btn-blue\" ng-click=\"$ctrl.add()\">Добавить строку</button></div><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><h2 class=\"h3\">Строки для перевода</h2><div ng-repeat=\"($n, $translate) in $ctrl.translates\"><div class=\"input-group d-flex mb-1\"><input class=\"form-control\" type=\"text\" placeholder=\"English - введите ключ на английском языке для перевода\" ng-model=\"$translate.name\" ng-change=\"$ctrl.change($translate)\"> <input class=\"form-control\" type=\"text\" placeholder=\"Русский - введите Русский перевод ключа\" ng-model=\"$translate.value\" ng-change=\"$ctrl.change($translate)\"></div></div></status-wrapper><div class=\"mt-3\"><s1-paging count=\"$ctrl.count\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><style>.border-translates {\n" +
    "    border-left: 3px solid #84BF41;\n" +
    "    border-bottom: 1px solid #eee;\n" +
    "    padding-bottom: 1.5rem;\n" +
    "    padding-left: 1rem;\n" +
    "}\n" +
    "\n" +
    ".input-group .form-control {\n" +
    "    width: 45%;\n" +
    "    flex: 0 0 45%;\n" +
    "    margin-right: 10px;\n" +
    "    padding: 4px 10px;\n" +
    "}\n" +
    "\n" +
    ".translate-title {\n" +
    "    position: relative;\n" +
    "}</style>"
  );


  $templateCache.put('/admin/unpCatalog.template.html',
    "<div><h3>Каталог услуг УНП</h3><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div><div ng-show=\"status=='ready'\"><ul><li ng-repeat=\"r in list\" style=\"list-style:none\"><table width=\"100%\" cellspacing=\"0\" border=\"1\"><tr><th colspan=\"2\">Код: {{r.code}}</th><th colspan=\"9\">{{r.name}}</th></tr><tr><td colspan=\"2\">{{r.isActive}}</td><td colspan=\"9\">{{r.desc}}</td></tr><tr><th>Категория услуги</th><td>Код: {{r.serviceCategory.code}}</td><td colspan=\"9\">{{r.serviceCategory.name}}</td></tr><tr><td colspan=\"6\">Вид оплаты: {{r.paymentKind}}</td></tr><tr><th width=\"50\">Платежные параметры</th><td width=\"50\">наименование</td><td width=\"50\">обязат ельный</td><td width=\"50\">видимый польз.</td><td width=\"50\">только чтение</td><td width=\"50\">исп. для поиска</td><td width=\"50\">вкл. в инф. о платеже</td><td width=\"50\">Маска для проверки</td><td width=\"50\">иденти фикатор</td><td width=\"200\">Значение по умолч</td><td width=\"200\">Возможные значения</td></tr><tr ng-repeat=\"p in r.paymentParameters.descriptionSimpleParameterOrDescriptionComplexParameter\"><td>{{p.label}}</td><td>{{p.name}}</td><td>{{p.required}}</td><td>{{p.visible}}</td><td>{{p.readonly}}</td><td>{{p.forSearch}}</td><td>{{p.forPayment}}</td><td>{{p.regexp}}</td><td>{{p.isId}}</td><td width=\"200\">{{p.defaultValue}}</td><td width=\"200\"><ul><li ng-repeat=\"v in p.allowedValues.value\">{{v.data}} - {{v.label}}</li></ul></td></tr><tr><td colspan=\"11\"><p><b>Поставщик услуги:</b></p><p>Наименование организации: {{r.payee.name}}</p><p>ИНН: {{r.payee.inn}}</p><p>КПП: {{r.payee.kpp}}</p><p>ОКТМО: {{r.payee.oktmo}}</p><p>ОГРН: {{r.payee.ogrn}}</p><p>Счета организации:</p><ol><li ng-repeat=\"ac in r.payee.accounts.account\"><p>Счет: {{ac.account}}</p><p>Банк: {{ac.bank.name}}</p><p>Банк БИК: {{ac.bank.bik}}</p><p>Банк Корр. счет: {{ac.bank.correspondentBankAccount}}</p></li></ol></td></tr></table><br></li></ul></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{erm}}</p></div></div></div>"
  );


  $templateCache.put('/admin/uploadInfectedFile/uploadInfectedFile.template.html',
    "<style>.uploadRow {\n" +
    "        display: flex;\n" +
    "        align-items: center;\n" +
    "        margin-top: 15px;\n" +
    "    }\n" +
    "    .paragraph {\n" +
    "        margin: 0;\n" +
    "    }\n" +
    "    .uploadWrapper {\n" +
    "        display: flex;\n" +
    "        flex-direction: column;\n" +
    "        justify-content: center;\n" +
    "        align-items: center;\n" +
    "        overflow: hidden;\n" +
    "        position: relative;\n" +
    "        border: 2px dashed black;\n" +
    "        border-radius: 5px;\n" +
    "        min-height: 150px;\n" +
    "    }\n" +
    "    #uploadFile {\n" +
    "        opacity: 0;\n" +
    "        position: absolute;\n" +
    "        left: 0;\n" +
    "        top: 0;\n" +
    "        bottom: 0;\n" +
    "        width: 100%;\n" +
    "        cursor: pointer;\n" +
    "    }\n" +
    "    .upload-title {\n" +
    "        font-weight: 500;\n" +
    "        margin-top: 10px;\n" +
    "    }\n" +
    "    .upload-file-name {\n" +
    "        margin-bottom: 10px;\n" +
    "    }\n" +
    "    .upload-body {\n" +
    "        font-size: 13px;\n" +
    "        text-align: center;\n" +
    "    }\n" +
    "    .progress-bar {\n" +
    "        background-color: #2263b0;\n" +
    "        transition: width 40ms ease !important;\n" +
    "    }\n" +
    "    .status-wrapper {\n" +
    "        padding: 10px 0;\n" +
    "        text-align: center;\n" +
    "    }</style><div class=\"row\"><div class=\"col-xs-4 uploadWrapper\"><input multiple accept=\"{{accept}}\" id=\"uploadFile\" type=\"file\"> <i class=\"fa fa-upload fa-2x\" style=\"color: #2263b0\"></i><p class=\"paragraph upload-title\">Загрузка файла</p><p class=\"paragraph upload-body\">Перетащите файл или нажмите для загрузки</p></div><div ng-show=\"file\" class=\"col-xs-4\"><p class=\"paragraph upload-file-name\">Загружаемый файл: <strong>{{file.name}}</strong></p><div class=\"progress\" style=\"height: 15px\"><div class=\"progress-bar\" ng-style=\"{width: progressBar + '%'}\"></div></div><div ng-show=\"status\"><p ng-class=\"{'bg-success': status === 'success', 'bg-danger': status === 'error'}\" class=\"paragraph status-wrapper\">{{msg}}</p></div></div></div><div class=\"row uploadRow\"><div class=\"cols-xs-2\"><button ng-class=\"{'btn-disable': !file}\" class=\"btn btn-blue\" ng-click=\"uploadFile()\">Загрузить</button></div></div>"
  );


  $templateCache.put('/admin/userCab.template.html',
    "<div><section class=\"lk\"><div class=\"container-fluid\"><h1 class=\"lk-heading\">Личный кабинет</h1><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':isSelected('mydata')}\"><a ng-click=\"selectTab('mydata')\" href=\"#\">Мои данные</a></li><li ng-class=\"{'is-active':isSelected('record')}\"><a href ng-click=\"selectTab('record')\" href=\"#\">Запись на прием</a></li></ul></nav><div class=\"tab-content\" ng-show=\"isSelected('mydata')\"><me-dept></me-dept></div><div class=\"tab-content\" ng-show=\"isSelected('record')\" style=\"min-height: 35%\"><appointments></appointments></div></div></section></div>"
  );


  $templateCache.put('/admin/userList.template.html',
    "<div><button class=\"btn btn-primary\" ng-hide=\"adding\" ng-click=\"beforeAdd()\"><i class=\"fa fa-plus\"></i> Добавить пользователя</button><div ng-if=\"adding\"><div ng-hide=\"addStatus=='loading'\" style=\"margin:25px 150px\"><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-2 control-label\">Логин:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newUser.login\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Ф.И.О.:</label><div class=\"col-md-4 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newUser.name.surname\"></div><div class=\"col-md-3 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newUser.name.name\"></div><div class=\"col-md-3 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newUser.name.patronymic\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Пароль:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"password\" ng-model=\"newUser.password\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Подтвержение пароля:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"password\" ng-model=\"newUser.password2\"></div></div></form><div><span>Роли</span><ul><li style=\"list-style:none\" ng-repeat=\"role in newUser.rolesList\"><label><input type=\"checkbox\" ng-model=\"role.checked\"> {{role.title}}</label></li></ul><span>Организации</span><ul><li style=\"list-style:none\" ng-repeat=\"dept in newUser.deptsList\"><label><input type=\"checkbox\" ng-model=\"dept.checked\"> {{dept.name}}</label></li></ul></div><div style=\"padding:10px\" ng-if=\"addStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addError.message}}</p></div></div><button class=\"btn btn-primary\" ng-click=\"add()\"><i class=\"fa fa-floppy-o\"></i> Создать</button> <a href=\"javascript:void(0)\" ng-click=\"$parent.adding=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-if=\"addStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div class=\"search\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" ng-model-options=\"{debounce: 100}\" placeholder=\"Введите часть имени...\" type=\"text\" autocomplete=\"off\" spellcheck=\"\" speech=\"\" ng-keydown=\"onSearchKeyDown($event)\" x-webkit-speech=\"\"></div></div></div><div style=\"padding:10px;text-align:center\" ng-if=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-if=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error1.message}}</p></div></div><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\" style=\"margin:0;font-weight:bold;font-size:13px\" ng-show=\"status == 'ready'\"><li ng-repeat=\"tab in tabs\" ng-class=\"{'is-active':activeTab.id==tab.id}\" ng-click=\"activeTab.id = tab.id\"><a href data-toggle=\"tab\">{{tab.title}} <span class=\"badge\">{{lists[tab.id].length}}</span></a></li></ul></nav><div ng-repeat=\"tab in tabs\" class=\"tab-content\" ng-show=\"status == 'ready' && activeTab.id==tab.id\" style=\"padding:5px\"><div style=\"padding:10px;text-align:center\" ng-if=\"lists[tab.id].length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"lists[tab.id].length>0\"><ul><li ng-repeat=\"item in lists[tab.id]\" style=\"list-style:none\"><div style=\"padding:10px;border-bottom:solid 1px #ccc\"><div><i class=\"icon-user\"></i> <span style=\"font-size:16px;margin:0 10px 10px 0\">{{item.name.full}}</span> <span>Логин: <b>{{item.login}}</b> </span><span>ФИО: <b>{{item.name.surname}} {{item.name.name}} {{item.name.patronymic}}</b> </span><button ng-hide=\"item.locked\" class=\"btn btn-small btn-danger\" ng-click=\"item.locking = true\" title=\"Заблокировать\"><i class=\"fa fa-lock\"></i></button> <button ng-show=\"item.locked\" class=\"btn btn-small btn-success\" ng-click=\"item.locking = true\" title=\"Разблокировать\"><i class=\"fa fa-unlock\"></i></button> <button class=\"btn btn-small btn-info\" ng-click=\"beforeEdit(item)\"><i class=\"fa fa-pencil-square-o\"></i> Редактировать</button> <button title=\"Скопировать ID пользователя в буфер\" class=\"btn btn-small btn-blue\" ng-click=\"copyToBuffer(item._id)\"><i style=\"color: #fff\" class=\"fa fa-clipboard\" aria-hidden=\"true\"></i></button><div style=\"font-size:12px; color:#888\"><div><b>Роли:</b> <span ng-repeat=\"role in item.roles\"><span>{{roleNames[role.name]}}</span> <span ng-hide=\"$last || !roleNames[role.name]\">,</span></span></div><div ng-if=\"item.depts.length>0\"><b>Организации:</b> <span ng-repeat=\"dept in item.depts\">{{deptNames[dept.dept.id]}} <span ng-hide=\"$last\">,</span></span></div></div></div><div ng-if=\"item.locking\" style=\"margin:10px 0 0 25px\"><div ng-hide=\"item.lockStatus=='loading'\"><div style=\"padding:10px\" ng-if=\"item.lockStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{item.lockError.message}}</p></div></div><button ng-hide=\"item.locked\" class=\"btn btn-xs btn-danger\" ng-click=\"lock(item)\"><i class=\"fa fa-lock\"></i> Заблокировать</button> <button ng-show=\"item.locked\" class=\"btn btn-xs btn-success\" ng-click=\"lock(item)\"><i class=\"fa fa-unlock\"></i> Разблокировать</button> <a href=\"javascript:void(0)\" ng-click=\"item.locking = false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-if=\"item.lockStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-if=\"item.editing\" style=\"margin:10px 0 0 25px\"><div ng-hide=\"item.editStatus=='loading'\"><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-2 control-label\">Ф.И.О.:</label><div class=\"col-md-4 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"item.editUser.name.surname\"></div><div class=\"col-md-3 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"item.editUser.name.name\"></div><div class=\"col-md-3 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"item.editUser.name.patronymic\"></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Пароль:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"password\" ng-model=\"item.editUser.password\"><p style=\"font-size:11px;color:#888\">Не вводите пароль, если не хотите менять его.</p></div></div><div class=\"form-group\"><label class=\"col-md-2 control-label\">Подтвержение пароля:</label><div class=\"col-md-10 controls\"><input class=\"form-control\" type=\"password\" ng-model=\"item.editUser.password2\"></div></div></form><span>Роли</span><ul><li style=\"list-style:none\" ng-repeat=\"role in item.editUser.rolesList\"><label><input type=\"checkbox\" ng-model=\"role.checked\"> {{role.title}}</label></li></ul><span>Организации</span><ul><li style=\"list-style:none\" ng-repeat=\"dept in item.editUser.deptsList\"><label><input type=\"checkbox\" ng-model=\"dept.checked\"> {{dept.name}}</label></li></ul><div style=\"padding:10px\" ng-if=\"item.editStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{item.editError.message}}</p></div></div><button class=\"btn btn-xs btn-info\" ng-click=\"edit(item)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <a href=\"javascript:void(0)\" ng-click=\"item.editing=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-if=\"item.editStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></div></li></ul></div></div></div>"
  );


  $templateCache.put('/admin/visList.template.html',
    "<div><h3>Справочник Ведомственных информационных систем</h3><div><div><a class=\"btn btn-primary\" href=\"vis_view\"><i class=\"fa fa-plus\"></i> Создать</a></div><br><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && list.length>0\" id=\"form\"></div></div></div>"
  );


  $templateCache.put('/admin/visView.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\" id=\"form\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div>"
  );


  $templateCache.put('/admin/votesAdmin.template.html',
    "<div class=\"container-fluid\"><button class=\"btn btn-primary\" ng-hide=\"adding\" ng-click=\"adding=true\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить голосование</button><div ng-show=\"adding\"><h4 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 0px; font-size: 20px\">Добавление нового голосование</h4><div class=\"admin-new-org admin-new-org_border\" style=\"margin-top: 20px\" ng-hide=\"addStatus=='loading'\"><form class=\"form-horizontal\" name=\"newObject\"><div class=\"form-group\"><div class=\"col-md-2\"><label>Заголовок:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.title\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Описание:</label></div><div class=\"col-md-10\"><textarea class=\"form-control\" ng-model=\"newObj.description\"></textarea></div></div><div class=\"form-group\"><div class=\"col-md-6\"><label>Только для зарегистрированных пользователей:</label></div><div class=\"col-md-1\"><input type=\"checkbox\" class=\"form-control\" ng-model=\"newObj.onlyAuth\"></div></div></form><div style=\"padding:10px\" ng-show=\"addStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addError.message}}</p></div></div><div align=\"center\"><button class=\"btn btn-xs btn-primary\" ng-click=\"addVote()\"><i class=\"fa fa-plus\"></i> Создать</button> <button class=\"btn btn-xs btn-default\" type=\"button\" ng-click=\"adding=false\">Отмена</button></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"addStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"show\"><h2 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 0px\">Список голосований</h2><div class=\"row\"><div class=\"col-md-12\"><div class=\"input-group\" style=\"margin:10px 0\"><input class=\"form-control search\" ng-model=\"search\" placeholder=\"Введите часть описания для поиска ...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech ng-keydown=\"onSearchKeyDown($event)\"> <span class=\"input-group-btn\"><button class=\"btn btn-success btn-xs\" type=\"button\" ng-click=\"refresh()\" title=\"Нажмите чтобы выполнить поиск\"><i class=\"fa fa-search\"></i>&nbsp;</button></span></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"appl-table-scroll\" ng-show=\"status=='ready' && list.length>0\"><table class=\"appl-table\"><thead><tr><th>Описание</th><th>Навигация</th></tr></thead><tbody ng-repeat=\"r in list\"><tr><td data-th=\"Описание:\" class=\"no-wrap\"><a href=\"{{'admin/voteView?id='+r._id|s1Url}}\">{{r.title}}</a></td><td data-th=\"Навигация\"><div class=\"appl-table-ctrl\"><a href class=\"appl-table-btn\" title=\"Редактировать голосование\" ng-click=\"beforeEdit(r)\" ng-hide=\"r.editing\"><i class=\"fa fa-pencil-square-o\"></i> </a><a href class=\"appl-table-btn\" ng-click=\"beforeRemove(r)\" title=\"Удалить голосование\" ng-hide=\"r.removing\"><i class=\"fa fa-times\"></i> </a><a href class=\"appl-table-btn\" ng-click=\"activate(r, true)\" ng-hide=\"r.active\" title=\"Активировать голосование\"><i class=\"fa fa-unlock\"></i> </a><a href class=\"appl-table-btn\" ng-click=\"activate(r, false)\" ng-show=\"r.active\" title=\"Дезактивировать голосование\"><i class=\"fa fa-lock\"></i> </a><a href class=\"appl-table-btn\" ng-click=\"onlyAuth(r, false)\" ng-show=\"r.onlyAuth\" title=\"Сделать доступным для всех\"><i class=\"fa fa-globe\"></i> </a><a href class=\"appl-table-btn\" ng-click=\"onlyAuth(r, true)\" ng-hide=\"r.onlyAuth\" title=\"Сделать доступным только для авторизованных пользователей\"><i class=\"fa fa-key\"></i> </a><a href class=\"appl-table-btn\" title=\"Добавить варианты голосования\" ng-click=\"beforeAddVariants(r)\" ng-hide=\"r.varianting\"><i class=\"fa fa-plus\"></i> </a><a href class=\"appl-table-btn\" title=\"Редактировать варианты голосования\" ng-click=\"beforeEditVariants(r)\" ng-hide=\"r.varediting\"><i class=\"fa fa-coffee\"></i></a></div></td></tr><tr><td colspan=\"2\" ng-show=\"r.removing || r.editing || r.varianting || r.varediting\"><div ng-show=\"r.removing\"><h4 class=\"service-heading\" style=\"margin-top: 0px; margin-bottom: 10px; font-size: 20px\">Удаление голосованиеа</h4><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"r.removeStatus=='loading'\"><div style=\"padding:10px\" ng-show=\"r.removeStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.removeError.message}}</p></div></div><div align=\"center\"><button class=\"btn btn-xs btn-danger\" ng-click=\"remove(r)\"><i class=\"fa fa-times\"></i> Вы уверены?</button> <button class=\"btn btn-xs btn-default\" type=\"button\" ng-click=\"r.removing=false\">Отмена</button></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.removeStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"r.editing\"><h4 class=\"service-heading\" style=\"margin-top: 0px; margin-bottom: 0px; font-size: 20px\">Редактирование голосованиеа</h4><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"r.editStatus=='loading'\"><div class=\"admin-new-org\"><form class=\"form-horizontal\" name=\"editObject\"><div class=\"form-group\"><div class=\"col-md-2\"><label>Заголовок:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"r.editObj.title\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Описание:</label></div><div class=\"col-md-10\"><textarea class=\"form-control\" ng-model=\"r.editObj.description\"></textarea></div></div><div class=\"form-group\"><div class=\"col-md-6\"><label>Только для зарегистрированных пользователей:</label></div><div class=\"col-md-1\"><input type=\"checkbox\" class=\"form-control\" ng-model=\"r.editObj.onlyAuth\"></div></div></form></div><div style=\"padding:10px\" ng-show=\"r.editStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.editError.message}}</p></div></div><div align=\"center\"><button class=\"btn btn-xs btn-danger\" ng-click=\"editVote(r)\"><i class=\"fa fa-plus\"></i> Изменить</button> <button class=\"btn btn-xs btn-default\" type=\"button\" ng-click=\"r.editing=false\">Отмена</button></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.editStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"r.varianting\"><h4 class=\"service-heading\" style=\"margin-top: 0px; margin-bottom: 0px; font-size: 20px\">Добавление варианта</h4><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"r.variantStatus=='loading'\"><div class=\"admin-new-org\"><form class=\"form-horizontal\" name=\"variantObject\"><div class=\"form-group\"><div class=\"col-md-2\"><label>Заголовок:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"r.varObj.title\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Описание:</label></div><div class=\"col-md-10\"><textarea class=\"form-control\" ng-model=\"r.varObj.description\"></textarea></div></div></form></div><div style=\"padding:10px\" ng-show=\"r.variantStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.variantError.message}}</p></div></div><div align=\"center\"><button class=\"btn btn-xs btn-danger\" ng-click=\"addVariant(r)\"><i class=\"fa fa-plus\"></i> Добавить</button> <button class=\"btn btn-xs btn-default\" type=\"button\" ng-click=\"r.varianting=false\">Отмена</button></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.variantStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"r.varediting\"><h4 class=\"service-heading\" style=\"margin-top: 0px; margin-bottom: 0px; font-size: 20px\">Редактирование вариантов</h4><div class=\"admin-new-org admin-new-org_border\" ng-hide=\"r.variantEditStatus=='loading'\"><div class=\"admin-new-org\"><div class=\"row\"><div class=\"col-md-12\"><div class=\"input-group\" style=\"margin:10px 0\"><select class=\"form-control\" title=\"Выберите вариант голосования из списка\" ng-model=\"selectedVariant\" ng-options=\"varOption as varOption.name for varOption in variants\" placeholder=\"Выберите вариант голосования из списка\" ng-change=\"changeValue(r, selectedVariant.id)\" title=\"Выберите вариант голосования из списка\"><option ng-show=\"!selectedVariant\" value=\"\">Выберите вариант из списка</option></select><span class=\"input-group-btn\"><button class=\"btn btn-xs btn-danger\" type=\"button\" ng-click=\"RemoveVariants(r)\" title=\"Удалить вариант\"><i class=\"fa fa-times\"></i> Удалить</button> <button class=\"btn btn-xs btn-success\" type=\"button\" ng-click=\"changeValue(r, selectedVariant.id)\" title=\"Редактировать вариант\"><i class=\"fa fa-pencil-square-o\"></i> Редактировать</button> <button class=\"btn btn-xs btn-default\" type=\"button\" ng-click=\"exitSelectVariants(r)\" title=\"Выход из редактирования\">Выход</button></span></div></div></div><div ng-show=\"r.varEditValue\"><div class=\"admin-new-org\" ng-hide=\"r.variantEditStatus=='loading'\"><form class=\"form-horizontal\" name=\"variantEditObject\"><div class=\"form-group\"><div class=\"col-md-2\"><label>фИО:</label></div><div class=\"col-md-10\"><input class=\"form-control\" type=\"text\" ng-model=\"r.varObj.title\"></div></div><div class=\"form-group\"><div class=\"col-md-2\"><label>Описание:</label></div><div class=\"col-md-10\"><textarea class=\"form-control\" ng-model=\"r.varObj.description\"></textarea></div></div></form></div><div align=\"center\"><button class=\"btn btn-xs btn-danger\" ng-click=\"EditVariants(r)\"><i class=\"fa fa-pencil-square-o\"></i> Изменить</button> <button class=\"btn btn-xs btn-default\" type=\"button\" ng-click=\"cancelSelectVariants(r)\">Отмена</button></div></div><div style=\"padding:10px\" ng-show=\"r.variantEditStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.variantEditError.message}}</p></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.variantEditStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></div></td></tr></tbody></table><div style=\"margin-bottom: 10px\"><s1-paging count=\"count\" max=\"max\" skip=\"skip\" on-change=\"refresh()\"></s1-paging></div></div></div></div>"
  );


  $templateCache.put('/admin/voteView.template.html',
    "<div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-2\"><a href=\"javascript:void(0)\" ng-click=\"goBack()\" class=\"btn btn-md btn-white\" style=\"margin-top: 20px\"><span class=\"icon-left-open\"></span>Вернуться назад</a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready'\"><h4 align=\"center\" class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 10px; font-size: 20px; font-weight: bold\">{{list.title}}</h4><h4 style=\"font-size: 20px\" class=\"service-heading\" ng-bind-html=\"list.description\"></h4><h4 style=\"margin-bottom: 5px; font-weight: bold\" ng-bind-html=\"list.activeStatus\"></h4><h4 style=\"margin-bottom: 5px; font-weight: bold\" ng-bind-html=\"list.onlyAuthStatus\"></h4><h4 style=\"font-weight: bold\">Число проголосовавших: <span class=\"badge\">{{list.variantsCount}}</span></h4><h4>Варианты:</h4><ul><li ng-repeat=\"v in list.variants\">{{v.title}}</li></ul><a href=\"javascript:void(0)\" ng-click=\"list.showResults = !list.showResults\">Результаты</a><div class=\"row\"><div class=\"col-md-2\"><a href=\"javascript:void(0)\" ng-click=\"goBack()\" class=\"btn btn-md btn-white\" style=\"margin-top: 20px; margin-bottom: 20px\"><span class=\"icon-left-open\"></span>Вернуться назад</a></div></div></div></div>"
  );


  $templateCache.put('/components/add-students-modal/add-students-modal-smolensk.component.html',
    "<div class=\"modal fade\" tabindex=\"-1\" id=\"{{$ctrl.id}}\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">Введите часть название школы и выберите нужную из выпадающего списка</h4></div><div class=\"modal-body\"><div class=\"form-group c-field mb-2\"><label class=\"c-field-label c-field-label\">Выберите школу *</label><input-dropdown input-class-name=\"c-field-select\" input-required=\"true\" selected-item=\"$ctrl.schoolItem\" default-dropdown-items=\"$ctrl.schools\" filter-list-method=\"$ctrl.filterSchoolList(userInput)\" item-selected-method=\"$ctrl.schoolObjectSelected(item)\"></input-dropdown></div><div ng-show=\"$ctrl.students.length > 0\"><ul class=\"list-group\"><li class=\"list-group-item list-group-item-dafault\" ng-repeat=\"student in $ctrl.students\">{{student.name}}</li></ul></div><div ng-show=\"$ctrl.noStudents\">Не найдено ни одного ученика</div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Закрыть</button> <button type=\"button\" class=\"btn btn-primary\" ng-click=\"$ctrl.addStudentsToUser()\">Добавить</button></div></div></div></div>"
  );


  $templateCache.put('/components/add-students-modal/add-students-modal-stavropol.component.html',
    "<div class=\"modal fade\" tabindex=\"-1\" id=\"{{$ctrl.id}}\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">Введите часть название школы и выберите нужную из выпадающего списка</h4></div><div class=\"modal-body\"><div class=\"form-group c-field mb-2\"><label class=\"c-field-label c-field-label\">Выберите муниципалитет *</label><input-dropdown input-class-name=\"c-field-select\" input-required=\"true\" selected-item=\"$ctrl.regionItem\" default-dropdown-items=\"$ctrl.regions\" filter-list-method=\"$ctrl.filterRegionsList(userInput)\" item-selected-method=\"$ctrl.regionObjectSelected(item)\"></input-dropdown></div><div ng-show=\"$ctrl.showSchoolsSelector\" class=\"form-group c-field mb-2\"><label class=\"c-field-label c-field-label\">Выберите школу *</label><input-dropdown input-class-name=\"c-field-select\" input-required=\"true\" selected-item=\"$ctrl.schoolItem\" default-dropdown-items=\"$ctrl.schools\" filter-list-method=\"$ctrl.filterSchoolList(userInput)\" item-selected-method=\"$ctrl.schoolObjectSelected(item)\"></input-dropdown></div><div ng-show=\"$ctrl.students.length > 0\"><ul class=\"list-group\"><li class=\"list-group-item list-group-item-dafault\" ng-repeat=\"student in $ctrl.students\">{{student.name}}</li></ul></div><div ng-show=\"$ctrl.noStudents\">Не найдено ни одного ученика</div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Закрыть</button> <button type=\"button\" class=\"btn btn-primary\" ng-click=\"$ctrl.addStudentsToUser()\">Добавить</button></div></div></div></div>"
  );


  $templateCache.put('/components/add-students-modal/add-students-modal.component.html',
    "<div class=\"modal fade\" tabindex=\"-1\" id=\"{{$ctrl.id}}\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">Введите часть название школы и выберите нужную из выпадающего списка</h4></div><div class=\"modal-body\"><div class=\"form-group c-field mb-2\"><label class=\"c-field-label c-field-label\">Выберите школу *</label><input-dropdown input-class-name=\"c-field-select\" input-required=\"true\" selected-item=\"$ctrl.schoolItem\" default-dropdown-items=\"$ctrl.schools\" filter-list-method=\"$ctrl.filterSchoolList(userInput)\" item-selected-method=\"$ctrl.schoolObjectSelected(item)\"></input-dropdown></div><div ng-show=\"$ctrl.students.length > 0\"><ul class=\"list-group\"><li class=\"list-group-item list-group-item-dafault\" ng-repeat=\"student in $ctrl.students\">{{student.name}}</li></ul></div><div ng-show=\"$ctrl.noStudents\">Не найдено ни одного ученика</div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Закрыть</button> <button type=\"button\" class=\"btn btn-primary\" ng-click=\"$ctrl.addStudentsToUser()\">Добавить</button></div></div></div></div>"
  );


  $templateCache.put('/components/address/address.component.html',
    "<div class=\"row\"><div class=\"col-sm-5\"><div class=\"c-field\"><sup class=\"c-field-label\">Регион</sup> <input value=\"{{$ctrl.address.region}}\" type=\"text\" class=\"c-text\" readonly></div></div><div class=\"col-sm-7\"><div class=\"c-field\"><sup class=\"c-field-label\">Район</sup> <input value=\"{{$ctrl.address.district}}\" type=\"text\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-5\"><div class=\"c-field\"><sup class=\"c-field-label\">Населенный пункт</sup> <input value=\"{{$ctrl.address.city}}\" type=\"text\" class=\"c-text\" readonly></div></div><div class=\"col-sm-5\"><div class=\"c-field\"><sup class=\"c-field-label\">Улица</sup> <input value=\"{{$ctrl.address.street}}\" type=\"text\" class=\"c-text\" readonly></div></div><div class=\"col-sm-2\"><div class=\"c-field\"><sup class=\"c-field-label\">Дом</sup> <input value=\"{{$ctrl.address.house}}\" type=\"text\" class=\"c-text\" readonly></div></div></div>"
  );


  $templateCache.put('/components/announcement-view/announcement-view.component.html',
    "<div class=\"alert alert-info container-fluid\" ng-if=\"$ctrl.isVisible()\"><div ng-show=\"$ctrl.userCovid19Info.isInfected\" style=\"color: red;font-size: 1.3em;line-height: 1.1\" class=\"text-danger mb-1\">Вы обнаружены в реестре лиц, больных COVID-19.<br>Если данная информация не соответствует действительности, рекомендуем обратиться в медицинское учреждение по месту Вашего пребывания.</div><p ng-class=\"$ctrl.getStyles()\">{{$ctrl.announcement.text}}</p></div>"
  );


  $templateCache.put('/components/app-header/app-header.html',
    "<header class=\"st-header\"><div class=\"top-sidebar\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-10\"><top-header-menu></top-header-menu></div><div class=\"col-md-2\"><a onclick=\"jQuery('html').toggleClass('is-fontlarge');\" class=\"btn-font\"><b>+</b> &nbsp;Аа Увеличить шрифт</a></div></div></div></div><nav class=\"nav\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-4\"><div class=\"logo\"><a href=\"{{''|s1Url}}\"><img ng-src=\"{{'assets/images/logo.' + '26' + '.png'|s1Url}}\" alt=\"ГосУслуги\"></a></div></div><div class=\"col-md-2\"><nav-catalog></nav-catalog></div><div class=\"col-md-3\"><div ng-show=\"isIndex\"><a href=\"https://esia.gosuslugi.ru/public/ra/\" class=\"nav-button\"><i>Центры обслуживания ЕСИА</i></a></div><div ng-show=\"!isIndex\"><nav-recepients></nav-recepients></div></div><div class=\"col-md-3\"><cabinet></cabinet></div></div></div></nav><announcement-view></announcement-view></header><header class=\"st-header_mob\"><div class=\"top-sidebar_mob\"><div class=\"container-fluid\"><button class=\"nav_mob-btn\" ng-click=\"$ctrl.toggleMenu()\" ng-class=\"{'is-active': $ctrl.isMenuOpen}\"><span></span> <span></span> <span></span> <span></span></button><div class=\"search_mob\"><form action=\"#\"><input type=\"text\" placeholder=\"Поиск\" class=\"search_mob-input\"> <button class=\"search_mob-btn\"><span class=\"icon-search\"></span></button></form></div><div class=\"cabinet_mob\" ng-class=\"{'is-open': $ctrl.isLKOpen}\"><button class=\"cabinet_mob-link\" ng-click=\"$ctrl.toggleLKOpen()\"><span class=\"icon-auth\"></span></button><div ng-show=\"$ctrl.user && $ctrl.user.id!='anonymous'\"><div class=\"cabinet_mob-dropdown\"><ul class=\"cabinet_mob-dropdown-menu\"><li class=\"is-active\"><a href=\"{{'personcab/index?tab=mydata'|s1Url}}\">Мои данные</a></li><li><a href=\"{{'personcab/index?tab=statement'|s1Url}}\">Мои заявления</a></li><li><a href=\"{{'personcab/index?tab=payment'|s1Url}}\">Начисления и платежи</a></li><li><a href=\"{{'personcab/index?tab=record'|s1Url}}\">Запись на прием</a></li><li><a href=\"{{'personcab/index?tab=my-records'|s1Url}}\">Мои записи</a></li><li><a ng-click=\"$ctrl.logout()\">Выйти из личного кабинета</a></li></ul></div></div></div></div></div><nav class=\"nav_mob\" ng-class=\"{'is-open': $ctrl.isMenuOpen}\"><div class=\"container-fluid\"><ul class=\"nav_mob-menu\"><li><a href=\"{{'rgu/category_list'|s1Url}}\">Категории услуг</a></li><li><a href=\"{{'rgu/dept_list'|s1Url}}\">Органы власти</a></li><li><a href=\"{{'rgu/case_list'|s1Url}}\">Жизненные ситуации</a></li><li><a href=\"http://www.stavregion.ru/\">Сайт региона</a></li><li><a href=\"http://www.control26.ru/\" target=\"_blank\">Народный контроль</a></li><li><a href=\"http://umfc26.ru/index.php\" target=\"_blank\">МФЦ</a></li><li id=\"transport-head-button\"><a href=\"{{'transport'|s1Url}}\">Транспорт</a></li><li><a href=\"http://dsreda.stavregion.ru/home\" target=\"_blank\">Доступная среда</a></li></ul></div></nav><div class=\"container-fluid\"><div class=\"logo\"><a href=\"{{''|s1Url}}\"><img ng-src=\"{{'assets/images/logo.' + '26' + '.png'|s1Url}}\" alt=\"ГосУслуги\"></a></div></div></header>"
  );


  $templateCache.put('/components/app.template.html',
    "<div class=\"st-preloader {{viewLoaded}}\"></div><div class=\"st {{viewLoaded}}\" style=\"min-height:100vh\"><app-header></app-header><div class=\"breadcrumbs\" ng-show=\"breadcrumbs.length > 1\"><div class=\"container-fluid\"><ul class=\"breadcrumbs-menu\"><li ng-repeat=\"t in breadcrumbs\" ng-class=\"{active:!t.href}\" class=\"is-active\"><a ng-show=\"t.href\" href=\"{{t.href}}\"><span ng-class=\"{'icon-home': $first}\"></span> {{t.label}} </a><span ng-hide=\"t.href\">{{t.label}}</span></li><li style=\"float: right; padding: inherit\" ng-show=\"showDigital\"><label class=\"service-check\" style=\"margin-top: 10px; max-width: none\"><input type=\"checkbox\" ng-change=\"onlyDigitalChange()\" ng-model=\"onlyDigital\"> <span class=\"service-check-input\"></span> Только электронные услуги</label></li></ul></div></div><div class=\"st-main\"><div ng-transclude=\"top\"></div><div class=\"container-fluid mt-1 mb-1\"><div ng-transclude></div></div><div ng-transclude=\"bottom\"></div></div><ng-include src=\"includes.footer\" include-replace></ng-include><div class=\"mobile-app-toast\" ng-class=\"{'show': mobileApp}\" ng-hide=\"hideMobileApp\"><div ng-click=\"doHideMobileApp()\" class=\"window-close-btn\"><i class=\"fa fa-window-close-o\" aria-hidden=\"true\"></i></div><a href=\"{{mobileApp}}\"><span class=\"mobile-app-icon\"><img src=\"/assets/images/icon.png\" alt=\"иконка приложения\"> </span><span class=\"mobile-app-text\">Скачать мобильное приложение</span></a></div><style>.mobile-app-toast {\n" +
    "            position: fixed;\n" +
    "            z-index: 1000;\n" +
    "            bottom: 0;\n" +
    "            right: 0;\n" +
    "            left: 0;\n" +
    "            width: 100vw;\n" +
    "            max-height: 0;\n" +
    "            transition: max-height 1s;\n" +
    "            overflow: hidden;\n" +
    "            background-color: #fff;\n" +
    "            text-align: center;\n" +
    "            box-shadow: 0px 0px 11px -3px rgba(0,0,0, 0.56);\n" +
    "        }\n" +
    "        .mobile-app-toast.show {\n" +
    "            max-height: 25vh;\n" +
    "        }\n" +
    "        .mobile-app-toast a {\n" +
    "            display: -webkit-flex;\n" +
    "            display: -moz-flex;\n" +
    "            display: -ms-flex;\n" +
    "            display: -o-flex;\n" +
    "            display: flex;\n" +
    "        }\n" +
    "        .mobile-app-icon {\n" +
    "            flex: 0 0 30%;\n" +
    "        }\n" +
    "        .mobile-app-text {\n" +
    "            font-size: 5rem;\n" +
    "            line-height: 1.5;\n" +
    "            flex: 1;\n" +
    "            display: -webkit-flex;\n" +
    "            display: -moz-flex;\n" +
    "            display: -ms-flex;\n" +
    "            display: -o-flex;\n" +
    "            display: flex;\n" +
    "            align-items: center;\n" +
    "            justify-content: center;\n" +
    "        }</style></div>"
  );


  $templateCache.put('/components/breadcrumbs.tmpl.html',
    "<div class=\"breadcrumbs\" ng-show=\"links.length > 1\"><div class=\"container-fluid\"><ul class=\"breadcrumbs-menu\"><li ng-repeat=\"t in links\" ng-class=\"{active:!t.href}\" class=\"is-active\"><a ng-show=\"t.href\" href=\"{{t.href}}\"><span ng-class=\"{'icon-home': $first}\"></span> {{t.label}} </a><span ng-hide=\"t.href\">{{t.label}}</span></li><li style=\"float: right; padding: inherit\" ng-show=\"showDigital\"><label class=\"service-check\" style=\"margin-top: 10px; max-width: none\"><input type=\"checkbox\" ng-change=\"onlyDigitalChange()\" ng-model=\"onlyDigital\"> <span class=\"service-check-input\"></span> Только электронные услуги</label></li></ul></div></div>"
  );


  $templateCache.put('/components/cabinet/cabinet.component.html',
    "<div ng-class=\"{'cabinet':true, 'is-open': $ctrl.isOpen}\"><div ng-if=\"!$ctrl.user || $ctrl.user.id === 'anonymous'\"><button class=\"cabinet-link\" ng-click=\"$ctrl.login()\"><span class=\"cabinet-link-name\">Личный кабинет</span></button></div><div ng-if=\"$ctrl.user && $ctrl.user.id !== 'anonymous'\"><button class=\"cabinet-link\" ng-click=\"$ctrl.dropdown()\"><span class=\"cabinet-link-name\">{{$ctrl.title}} </span><mark ng-if=\"$ctrl.serviceRequestModifiedSinceLastLogin\" class=\"dept-item-count notify-count\">{{$ctrl.serviceRequestModifiedSinceLastLogin}} <span class=\"dept-item-count-caption notify-count-caption\">Изменен статус заявлений</span></mark></button><div class=\"cabinet-dropdown\"><ul class=\"cabinet-dropdown-menu\"><li ng-if=\"$ctrl.isDept\"><a href=\"/admin/admin_page\">Главная страница администратора</a></li><li ng-if=\"$ctrl.isAdmin\"><a href=\"/admin/digital-services-list\">Электронные услуги</a></li><li ng-if=\"$ctrl.isAdmin\"><a href=\"/admin/dict_list\">Локальные словари</a></li><li ng-if=\"$ctrl.isAdmin\"><a href=\"/admin/remoteDict_list\">Внешние словари</a></li><li ng-if=\"$ctrl.isAdmin\"><a href=\"/admin/serviceRequestReportList\">Заявления пользователей</a></li><li ng-hide=\"$ctrl.isDept\"><a href=\"/personcab/index?tab=mydata\">Мои данные</a></li><li ng-if=\"$ctrl.isDept\"><a href=\"/admin/user_page?tab=mydata\">Мои данные</a></li><li ng-hide=\"$ctrl.isDept\"><a href=\"/personcab/index?tab=statement\">Мои заявления</a> <mark ng-if=\"$ctrl.serviceRequestModifiedSinceLastLogin\" class=\"dept-item-count notify-count-menu\">{{$ctrl.serviceRequestModifiedSinceLastLogin}} <span class=\"dept-item-count-caption notify-count-caption\">Изменен статус заявлений</span></mark></li><li ng-hide=\"$ctrl.isDept\"><a href=\"/personcab/index?tab=payment\">Начисления и платежи</a></li><li ng-hide=\"$ctrl.isDept\"><a href=\"/personcab/index?tab=record\">Запись на прием</a></li><li ng-if=\"$ctrl.isDeptWithoutCovid\"><a href=\"/admin/user_page?tab=record\">Запись на прием</a></li><li ng-hide=\"$ctrl.isDept\"><a href=\"/personcab/index?tab=my-records\">Мои записи</a></li><li ng-if=\"$ctrl.isDeptWithoutCovid\"><a href=\"/admin/org_list\">Расписание организаций</a></li><li><a ng-click=\"$ctrl.logout()\">Выйти из личного кабинета</a></li></ul></div></div></div>"
  );


  $templateCache.put('/components/datePicker.template.html',
    "<p class=\"input-group\" style=\"margin-bottom: 0\"><input class=\"form-control\" type=\"text\" ng-required=\"ngRequired\" ng-disabled=\"ngDisabled\" is-open=\"state.isOpen\" ng-model=\"date\" min-date=\"min\" max-date=\"max\" uib-datepicker-popup=\"dd.MM.yyyy\" current-text=\"Сегодня\" clear-text=\"Очистить\" close-text=\"Закрыть\" ng-change=\"onChange()\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i></button></span></p>"
  );


  $templateCache.put('/components/delete-students-modal/delete-students-modal.component.html',
    "<div class=\"modal fade\" tabindex=\"-1\" id=\"{{$ctrl.id}}\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">Выберите ученика из списка, если хотите, чтобы он не отображался на странице расписания</h4></div><div class=\"modal-body\"><div ng-show=\"$ctrl.students.length > 0\"><div class=\"list-group\"><a class=\"list-group-item list-group-item-dafault\" ng-repeat=\"student in $ctrl.students\" ng-click=\"$ctrl.chooseToDelete(student)\">{{student.name}}<div ng-show=\"student.toDelete\" class=\"close align-center\"><span>&times;</span> <span class=\"to-delete\">Будет удален</span></div></a></div></div><p class=\"info-panel\">Для добавления или восстановления учеников перейдите к добавлению учеников на предыдущей странице</p><p>Для подтверждения удаления нажмите на кнопку \"Сохранить список\"</p></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Закрыть</button> <button type=\"button\" class=\"btn btn-primary\" ng-click=\"$ctrl.saveStudentsToUser()\">Сохранить список</button></div></div></div></div>"
  );


  $templateCache.put('/components/footer-address/footer-address.component.html',
    "<address class=\"address\"><span>{{$ctrl.footerAddress}}</span> <span>{{$ctrl.technicalSupport}}</span></address>"
  );


  $templateCache.put('/components/gibdd-settings/gibdd-settings.component.html',
    "<hr><h3 class=\"mt-1 c-legend\">Постановления ЦАФАП ГИБДД СК (ст. 28.6 КоАП)</h3><div id=\"gibdd-settings\" class=\"row\"><div class=\"col-sm-10\"><p>Согласен(-на) получать сведения об административном(-ых) правонарушении(-ях) в области дорожного движения в форме электронного документа (ст. 28.6 КоАП)</p></div><div class=\"col-sm-2\"><div class=\"mm-checkbox\" ng-show=\"!$ctrl.penalty\"><a ng-click=\"$ctrl.collapse()\"><p class=\"text-right\">читать далее</p></a></div><div class=\"mm-checkbox\" ng-show=\"$ctrl.penalty\" style=\"margin-top: 0.5rem\"><input type=\"checkbox\" ng-model=\"$ctrl.penalty\"><label ng-click=\"$ctrl.collapse()\"></label></div></div></div><div id=\"js-gibdd-collapse\" class=\"info-panel\" style=\"display: none\"><div class=\"close\"><span class=\"icon-close-me\" ng-click=\"$ctrl.collapse()\">Закрыть</span></div><div ng-if=\"$ctrl.trusted()\"><p class=\"lh-13\">Я {{$ctrl.fullName}}, даю свое согласие на получение сведений об административном(-ых) правонарушении(-ях)<sup>1</sup>, вынесенных ЦАФАП ГИБДД по Ставропольскому краю, в электронном виде<sup>2</sup>, на адрес электронной почты: <a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\">{{$ctrl.email.value}}</a>, указанный мной при регистрации на региональном портале государственных и муниципальных услуг (в ЕСИА)<sup>3</sup>.</p><p class=\"lh-13\">Согласен(-на), что дата направления сведений об административном(-ых) правонарушении(-ях) на указанный адрес электронной почты будет считаться датой ее получения.<br>Одновременно даю свое согласие на предоставление информации о моем согласии на получение сведений об административном(-ых) правонарушении(-ях)<sup>1</sup> в электронном виде<sup>2</sup> должностным лицам, уполномоченным на вынесение постановлений<sup>1</sup></p><p><small><sup>1</sup> Экземпляр постановления по делу об административном правонарушении в форме электронного документа и материалы, полученные с применением работающих в автоматическом режиме специальных технических средств, имеющих функции фото- и киносъемки, видеозаписи, или средств фото- и киносъемки, видеозаписи в форме электронного документа, либо информация, содержащаяся в постановлении. иных средств информационных технологий, включая региональные порталы государственных и муниципальных услуг, и (или) с использованием подвижной радиотелефонной связи.</small></p><p><small><sup>2</sup> С использованием Единого портала государственных и муниципальных услуг либо иных средств информационных технологий, включая региональные порталы государственных и муниципальных услуг, и (или) с использованием подвижной радиотелефонной связи.</small></p><p><small><sup>3</sup> Единая система идентификации и аутентификации.</small></p><div class=\"text-center\"><button class=\"btn btn-blue\" type=\"button\" ng-click=\"$ctrl.savePenalty(!$ctrl.penalty)\">{{$ctrl.penalty === true ? \"Отказаться\" : \"Подтвердить\"}}</button><div class=\"mt-1\" ng-show=\"$ctrl.penalty\"><div style=\"display: inline-block\"><p class=\"info-warn-yellow\" style=\"margin-bottom: 0\">В случае отказа Ваше Согласие будет аннулировано через 3 дня</p></div></div></div></div><div ng-if=\"!($ctrl.trusted())\"><p class=\"lh-13\">Для получения сведений об административных правонарушениях в области дорожного движения в форме электронного документа требуется подтвержденная ученная запись ЕСИА и Подтвержденный почтовый ящик. <a href=\"https://esia.gosuslugi.ru/profile/user/personal\">Подтвердить учетную запись ЕСИА</a></p></div></div><div class=\"modal fade\" tabindex=\"-1\" id=\"gibdd-email-error-modal\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">{{$ctrl.emailErrorText}}</h4></div></div></div></div>"
  );


  $templateCache.put('/components/info-pou/info-pou-tabs.html',
    "<info-pou-beta></info-pou-beta>"
  );


  $templateCache.put('/components/info-pou/info-pou.component.html',
    "<div class=\"container-fluid student-performance\" style=\"margin-top: 1em; margin-bottom: 1em\"><div style=\"margin-bottom: 1em; display: flex; justify-content: space-between\"><a class=\"btn btn-info\" data-toggle=\"modal\" data-target=\"{{'#' + $ctrl.addStudentsModalID}}\">Добавить учеников</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'ERROR'\"><div class=\"alert alert-block alert-error fade in\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"mb-1\"><ul class=\"nav nav-pills\" style=\"margin-left: 0\"><li ng-repeat=\"student in $ctrl.students\" ng-class=\"{'active':$ctrl.isDefaultStudent(student)}\"><a ng-click=\"$ctrl.studentSelect(student)\"><small>{{student.ouName}}</small><div>{{student.name}}</div></a></li></ul></div><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':$ctrl.isSelected('performance')}\"><a ng-click=\"$ctrl.selectTab('performance')\">Успеваемость</a></li><li ng-class=\"{'is-active':$ctrl.isSelected('schedule')}\"><a ng-click=\"$ctrl.selectTab('schedule')\">Расписание</a></li><li ng-class=\"{'is-active':$ctrl.isSelected('final')}\"><a ng-click=\"$ctrl.selectTab('final')\">Итоговые оценки</a></li></ul></nav><div ng-show=\"$ctrl.isSelected('performance') || $ctrl.isSelected('schedule')\"><div class=\"form-group mb-2\"><div class=\"col-sm-6 input-group c-field mb-0\"><sup class=\"c-field-label\">Дата</sup> <input class=\"form-control\" style=\"z-index:0\" type=\"text\" datetime-picker=\"dd.MM.yyyy\" ng-model=\"$ctrl.date\" enable-time=\"false\" is-open=\"$ctrl.datepickerIsOpen\" when-closed=\"$ctrl.closePicker(args)\"> <span class=\"input-group-btn\"><button type=\"button\" class=\"btn btn-default\" ng-click=\"$ctrl.openCalendar($event)\"><i class=\"fa fa-calendar\"></i></button></span></div><small>Будет отображена вся неделя включающая выбранную дату</small></div></div><div class=\"tab-content\" ng-if=\"$ctrl.isSelected('performance')\"><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><student-performance tabledata=\"$ctrl.studentShedule\" date=\"$ctrl.date\"></student-performance></status-wrapper></div><div class=\"tab-content\" ng-if=\"$ctrl.isSelected('schedule')\" style=\"min-height: 35%\"><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><student-schedule tabledata=\"$ctrl.studentShedule\" date=\"$ctrl.date\"></student-schedule></status-wrapper></div><div class=\"tab-content\" ng-if=\"$ctrl.isSelected('final')\" style=\"min-height: 35%\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status === 'LOADING'\"><div style=\"max-width:100%;margin-top: 1em\"><student-final student=\"$ctrl.selectedStudent\"></student-final></div></div></div><hr class=\"mt-2\"><div class=\"mb-1\" style=\"display: flex; justify-content: space-between\"><a class=\"btn btn-sm btn-warning\" data-toggle=\"modal\" data-target=\"{{'#' + $ctrl.deleteStudentsModalID}}\">Удалить учеников</a></div><add-students-modal-stavropol id=\"$ctrl.addStudentsModalID\"></add-students-modal-stavropol><delete-students-modal id=\"$ctrl.deleteStudentsModalID\" students=\"$ctrl.students\"></delete-students-modal></div>"
  );


  $templateCache.put('/components/info-pou/student-final/student-final.component.html',
    "<div class=\"student-final\"><style>.final-rates {\n" +
    "            margin-bottom: 4px;\n" +
    "        }\n" +
    "\n" +
    "        .final-rates .text {\n" +
    "            background-color: #F7F9F9;\n" +
    "            color: #333;\n" +
    "            display: flex;\n" +
    "            justify-content: space-between;\n" +
    "            align-items: center;\n" +
    "            padding: 8px;\n" +
    "        }\n" +
    "\n" +
    "        .final-rates .text > p {\n" +
    "            margin: 0;\n" +
    "        }\n" +
    "\n" +
    "        .final-rates .rates {\n" +
    "            background-color: #EAF0F3;\n" +
    "            padding: 8px;\n" +
    "        }\n" +
    "\n" +
    "        .final-rates .avg {\n" +
    "            display: block;\n" +
    "            border-radius: 4px;\n" +
    "            padding: 8px 10px;\n" +
    "            color: white;\n" +
    "        }\n" +
    "\n" +
    "        .final-rates .rates-item {\n" +
    "            padding: 6px 12px;\n" +
    "            font-weight: bold;\n" +
    "            border-radius: 4px;\n" +
    "            background-color: #fefefe;\n" +
    "            display: inline-block;\n" +
    "            margin-right: 4px;\n" +
    "        }</style><status-wrapper status=\"$ctrl.periodsStatus\"><ul class=\"nav nav-pills\" style=\"margin-left: 0\"><li ng-repeat=\"item in $ctrl.periods track by item.value\" ng-class=\"{'active':$ctrl.isSelected(item.value)}\"><a ng-click=\"$ctrl.selectPeriod(item.value)\">{{item.name}}</a></li></ul></status-wrapper><status-wrapper status=\"$ctrl.ratingsStatus\"><div class=\"final-rates\" ng-repeat=\"item in $ctrl.ratings\"><div class=\"text\"><p>{{item.journalSubject}}</p><div class=\"avg\" style=\"{{'background-color:' + $ctrl.rateBGColor(item.avg)}}\">{{item.avg}}</div></div><div class=\"rates\"><span ng-repeat=\"rate in item.rates track by rate.idx\" class=\"rates-item\" style=\"{{'color:' + $ctrl.rateBGColor(rate.value)}}\">{{rate.value}}</span></div></div></status-wrapper><div ng-show=\"$ctrl.error\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div></div>"
  );


  $templateCache.put('/components/info-pou/student-performance/student-performance-daytable-mobile.component.html',
    "<style>.day-schedule {\n" +
    "        border: 2px solid #DBE2E6;\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__heading {\n" +
    "        padding: 1rem;\n" +
    "        background-color: #E8F3FC !important;\n" +
    "        border-bottom: 1px dashed rgba(0, 72, 112, 0.7);\n" +
    "        text-align: right;\n" +
    "        font-size: 1.2em;\n" +
    "        font-family: Roboto, sans-serif;\n" +
    "        font-weight: bold;\n" +
    "        color: rgba(0, 72, 112, 0.7);\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__heading p {\n" +
    "        margin-bottom: 0.2rem !important;\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__content {\n" +
    "        text-align: right;\n" +
    "        font-family: Roboto, sans-serif;\n" +
    "        border-bottom: 1px solid #DBE2E6;\n" +
    "        padding: 0.4em;\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__content:not(:last-child) {\n" +
    "        border-bottom: 1px solid #DBE2E6;\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__subject {\n" +
    "        margin-bottom: 0.4rem;\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__exercise {\n" +
    "        font-size: 1em;\n" +
    "        font-weight: bold;\n" +
    "        line-height: 1.2em;\n" +
    "        margin-bottom: 0.4rem;\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__rating {\n" +
    "        display: inline-block;\n" +
    "        font-size: 1.4em;\n" +
    "        font-weight: bold;\n" +
    "        color: rgba(0, 72, 112, 0.7);\n" +
    "        margin-bottom: 0.2rem;\n" +
    "        padding: 0.5em;\n" +
    "        background-color: #DBE2E6;\n" +
    "    }\n" +
    "\n" +
    "    .day-schedule__content:nth-of-type(odd) {\n" +
    "        background-color: #f9f9f9;\n" +
    "    }</style><div class=\"day-schedule mb-2\"><div class=\"day-schedule__heading\"><p>{{$ctrl.dayname}}</p><p>{{$ctrl.date | dateFormat}}</p></div><div class=\"day-schedule__content\" ng-repeat=\"day in $ctrl.daydata\"><div class=\"day-schedule__subject\">{{day.subject}}</div><div class=\"day-schedule__exercise\">{{day.exercise}}</div><div ng-if=\"day.rating\" class=\"day-schedule__rating\">{{day.rating}}</div></div></div>"
  );


  $templateCache.put('/components/info-pou/student-performance/student-performance-daytable.component.html',
    "<style>.table-schedule__subject, .table-schedule__exercise {\n" +
    "        width: 35%;\n" +
    "        word-break: keep-all;\n" +
    "    }\n" +
    "\n" +
    "    .table-schedule__rating {\n" +
    "        width: 25%;\n" +
    "    }</style><table class=\"table oneday-table\" style=\"margin-bottom: 1.6em\"><tbody><tr><td class=\"not-hover oneday-table__firstcol\"><div class=\"dayname-rotate\"><div class=\"half-rotate\">{{$ctrl.date | dateFormat}}</div><div class=\"half-rotate\">{{$ctrl.dayname}}</div></div></td><td class=\"not-hover\" style=\"padding: 0\"><table class=\"table table-striped table-schedule\" style=\"margin-bottom: 0\"><tbody><tr><th>Предмет</th><th>Дом. задание</th><th>Оценка</th></tr><tr ng-repeat=\"day in $ctrl.daydata\"><td class=\"table-schedule__subject\">{{day.subject}}</td><td class=\"table-schedule__exercise\">{{day.exercise}}</td><td class=\"table-schedule__rating\">{{day.rating}}</td></tr></tbody></table></td></tr></tbody></table>"
  );


  $templateCache.put('/components/info-pou/student-performance/student-performance.component.html',
    "<div class=\"visible-xs-block visible-sm-block\"><div class=\"student-performance\"><student-performance-daytable-mobile date=\"$ctrl.daytable[1].date\" dayname=\"'Понедельник'\" daydata=\"$ctrl.daytable[1].daydata\"></student-performance-daytable-mobile><student-performance-daytable-mobile date=\"$ctrl.daytable[2].date\" dayname=\"'Вторник'\" daydata=\"$ctrl.daytable[2].daydata\"></student-performance-daytable-mobile><student-performance-daytable-mobile date=\"$ctrl.daytable[3].date\" dayname=\"'Среда'\" daydata=\"$ctrl.daytable[3].daydata\"></student-performance-daytable-mobile><student-performance-daytable-mobile date=\"$ctrl.daytable[4].date\" dayname=\"'Четверг'\" daydata=\"$ctrl.daytable[4].daydata\"></student-performance-daytable-mobile><student-performance-daytable-mobile date=\"$ctrl.daytable[5].date\" dayname=\"'Пятница'\" daydata=\"$ctrl.daytable[5].daydata\"></student-performance-daytable-mobile><student-performance-daytable-mobile date=\"$ctrl.daytable[6].date\" dayname=\"'Суббота'\" daydata=\"$ctrl.daytable[6].daydata\"></student-performance-daytable-mobile></div></div><div class=\"visible-md-block visible-lg-block\"><div class=\"student-performance\"><table class=\"student-performance-daytables\"><tbody><tr style=\"vertical-align:top\"><td style=\"width: 47%\" ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daytable[1].date)}\"><student-performance-daytable date=\"$ctrl.daytable[1].date\" dayname=\"'Понедельник'\" daydata=\"$ctrl.daytable[1].daydata\"></student-performance-daytable></td><td style=\"width: 4%\"></td><td style=\"width: 47%\" ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daytable[4].date)}\"><student-performance-daytable date=\"$ctrl.daytable[4].date\" dayname=\"'Четверг'\" daydata=\"$ctrl.daytable[4].daydata\"></student-performance-daytable></td></tr><tr style=\"vertical-align:top\"><td style=\"width: 47%\" ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daytable[2].date)}\"><student-performance-daytable date=\"$ctrl.daytable[2].date\" dayname=\"'Вторник'\" daydata=\"$ctrl.daytable[2].daydata\"></student-performance-daytable></td><td style=\"width: 4%\"></td><td style=\"width: 47%\" ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daytable[5].date)}\"><student-performance-daytable date=\"$ctrl.daytable[5].date\" dayname=\"'Пятница'\" daydata=\"$ctrl.daytable[5].daydata\"></student-performance-daytable></td></tr><tr style=\"vertical-align:top\"><td style=\"width: 47%\" ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daytable[3].date)}\"><student-performance-daytable date=\"$ctrl.daytable[3].date\" dayname=\"'Среда'\" daydata=\"$ctrl.daytable[3].daydata\"></student-performance-daytable></td><td style=\"width: 4%\"></td><td style=\"width: 47%\" ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daytable[6].date)}\"><student-performance-daytable date=\"$ctrl.daytable[6].date\" dayname=\"'Суббота'\" daydata=\"$ctrl.daytable[6].daydata\"></student-performance-daytable></td></tr></tbody></table></div></div><div><table class=\"table table-striped student-performance-tablesum\"><tbody><tr><td>Оценки за неделю</td><td class=\"table-schedule__rating\" ng-repeat=\"rating in $ctrl.ratings\">{{rating.value}}</td></tr><tr><td>Кол-во оценок</td><td class=\"table-schedule__rating_count\" ng-repeat=\"rating in $ctrl.ratings\">{{rating.count}}</td></tr></tbody></table></div>"
  );


  $templateCache.put('/components/info-pou/student-schedule/student-schedule.component.html',
    "<div class=\"student-schedule table-responsive\"><table class=\"table table-striped\"><tbody><tr><th style=\"width: 11%\"><div class=\"student-schedule__th\"><div>&nbsp;</div><div>Урок</div></div></th><th ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daysdata[1].date)}\"><div class=\"student-schedule__th\"><small>{{$ctrl.daysdata[1].date|dateFormat}}</small><div>Понедельник</div></div></th><th ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daysdata[2].date)}\"><div class=\"student-schedule__th\"><small>{{$ctrl.daysdata[2].date|dateFormat}}</small><div>Вторник</div></div></th><th ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daysdata[3].date)}\"><div class=\"student-schedule__th\"><small>{{$ctrl.daysdata[3].date|dateFormat}}</small><div>Среда</div></div></th><th ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daysdata[4].date)}\"><div class=\"student-schedule__th\"><small>{{$ctrl.daysdata[4].date|dateFormat}}</small><div>Четверг</div></div></th><th ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daysdata[5].date)}\"><div class=\"student-schedule__th\"><small>{{$ctrl.daysdata[5].date|dateFormat}}</small><div>Пятница</div></div></th><th ng-class=\"{'active':$ctrl.isActiveDate($ctrl.date, $ctrl.daysdata[6].date)}\"><div class=\"student-schedule__th\"><small>{{$ctrl.daysdata[6].date|dateFormat}}</small><div>Суббота</div></div></th></tr><tr><td><small>{{$ctrl.daysdata[1][0].time}}</small><div class=\"table-schedule__rating\">1</div></td><td>{{$ctrl.daysdata[1].schedule[0].subject}}</td><td>{{$ctrl.daysdata[2].schedule[0].subject}}</td><td>{{$ctrl.daysdata[3].schedule[0].subject}}</td><td>{{$ctrl.daysdata[4].schedule[0].subject}}</td><td>{{$ctrl.daysdata[5].schedule[0].subject}}</td><td>{{$ctrl.daysdata[6].schedule[0].subject}}</td></tr><tr><td><small>{{$ctrl.daysdata[1][1].time}}</small><div class=\"table-schedule__rating\">2</div></td><td>{{$ctrl.daysdata[1].schedule[1].subject}}</td><td>{{$ctrl.daysdata[2].schedule[1].subject}}</td><td>{{$ctrl.daysdata[3].schedule[1].subject}}</td><td>{{$ctrl.daysdata[4].schedule[1].subject}}</td><td>{{$ctrl.daysdata[5].schedule[1].subject}}</td><td>{{$ctrl.daysdata[6].schedule[1].subject}}</td></tr><tr><td><small>{{$ctrl.daysdata[1][2].time}}</small><div class=\"table-schedule__rating\">3</div></td><td>{{$ctrl.daysdata[1].schedule[2].subject}}</td><td>{{$ctrl.daysdata[2].schedule[2].subject}}</td><td>{{$ctrl.daysdata[3].schedule[2].subject}}</td><td>{{$ctrl.daysdata[4].schedule[2].subject}}</td><td>{{$ctrl.daysdata[5].schedule[2].subject}}</td><td>{{$ctrl.daysdata[6].schedule[2].subject}}</td></tr><tr><td><small>{{$ctrl.daysdata[1][3].time}}</small><div class=\"table-schedule__rating\">4</div></td><td>{{$ctrl.daysdata[1].schedule[3].subject}}</td><td>{{$ctrl.daysdata[2].schedule[3].subject}}</td><td>{{$ctrl.daysdata[3].schedule[3].subject}}</td><td>{{$ctrl.daysdata[4].schedule[3].subject}}</td><td>{{$ctrl.daysdata[5].schedule[3].subject}}</td><td>{{$ctrl.daysdata[6].schedule[3].subject}}</td></tr><tr><td><small>{{$ctrl.daysdata[1][4].time}}</small><div class=\"table-schedule__rating\">5</div></td><td>{{$ctrl.daysdata[1].schedule[4].subject}}</td><td>{{$ctrl.daysdata[2].schedule[4].subject}}</td><td>{{$ctrl.daysdata[3].schedule[4].subject}}</td><td>{{$ctrl.daysdata[4].schedule[4].subject}}</td><td>{{$ctrl.daysdata[5].schedule[4].subject}}</td><td>{{$ctrl.daysdata[6].schedule[4].subject}}</td></tr><tr><td><small>{{$ctrl.daysdata[1][5].time}}</small><div class=\"table-schedule__rating\">6</div></td><td>{{$ctrl.daysdata[1].schedule[5].subject}}</td><td>{{$ctrl.daysdata[2].schedule[5].subject}}</td><td>{{$ctrl.daysdata[3].schedule[5].subject}}</td><td>{{$ctrl.daysdata[4].schedule[5].subject}}</td><td>{{$ctrl.daysdata[5].schedule[5].subject}}</td><td>{{$ctrl.daysdata[6].schedule[5].subject}}</td></tr></tbody></div>"
  );


  $templateCache.put('/components/inputDropdown.template.html',
    "<div class=\"form-group schema-form-{{form.type}} {{form.htmlClass}}\" ng-class=\"{'has-error': form.disableErrorState !== true && hasError(), 'has-success': form.disableSuccessState !== true && hasSuccess(), 'has-feedback': form.feedback !== false }\"><label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{'sr-only': !showTitle()}\" for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label><input-dropdown2 ng-show=\"form.key\" placeholder=\"{{form.placeholder || form.schema.placeholder || ('placeholders.select')}}\" class=\"form-control {{form.fieldHtmlClass}}\" id=\"{{form.key.slice(-1)[0]}}\" allow-custom-input=\"true\" ng-model=\"$$value$$\" schema-validate=\"form\" callback=\"form.options.callback\" name=\"{{form.key.slice(-1)[0]}}\"></input-dropdown2><span ng-if=\"form.feedback !== false\" class=\"form-control-feedback\" ng-class=\"evalInScope(form.feedback) || {'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-remove': hasError() }\" aria-hidden=\"true\"></span> <span ng-if=\"hasError() || hasSuccess()\" id=\"{{form.key.slice(-1)[0] + 'Status'}}\" class=\"sr-only\">{{ hasSuccess() ? '(success)' : '(error)' }}</span><div class=\"help-block\" sf-message=\"form.description\"></div></div>"
  );


  $templateCache.put('/components/inputDropdown2.template.html',
    "<input-dropdown input-placeholder=\"{{placeholder}}\" allow-custom-input=\"true\" selected-item=\"selectedItem\" filter-list-method=\"filter(userInput)\" item-selected-method=\"selected(item)\" input-value-default=\"{{ngModel}}\"></input-dropdown>"
  );


  $templateCache.put('/components/navCatalog.component.html',
    "<style>.nav-catalog-link {\n" +
    "        font-size: 1.8rem;\n" +
    "        font-weight: bold;\n" +
    "    }</style><div class=\"nav-catalog-wrapper nav-catalog {{ $ctrl.isOpen === true ? 'is-active is-open': '' }}\"><a href=\"#\" ng-click=\"$ctrl.open()\" class=\"nav-catalog-link {{ $ctrl.isOpen === true ? 'is-active is-open' : '' }}\" style=\"cursor:pointer\">Каталог услуг</a><div class=\"nav-catalog-dropdown\"><div class=\"container-fluid\"><ul class=\"service-list\"><li class=\"col-xs-6 col-sm-4\"><div class=\"service-item\"><a href=\"{{'rgu/category_list'|s1Url}}\"><figure class=\"service-item-svg\"><img ng-src=\"{{'assets/svg/icon-service-catalog-1.svg'|s1Url}}\" alt=\"\"><h3 class=\"service-item-title\">Категории услуг</h3></figure></a><div class=\"service-item-category\"><ul class=\"service-item-menu\"><li class=\"col-sm-6\"><a href=\"{{'rgu/category_service_list?id=721&category=Здравоохранение&title=Обязательное медицинское страхование'|s1Url}}\">Здравоохранение</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/category_service_list?id=731&category=Гражданство&title=Паспорт Российской Федерации'|s1Url}}\">Гражданство</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/category_service_list?id=741&category=Труд и занятость&title=Трудоустройство'|s1Url}}\">Труд и занятость</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/category_service_list?id=711&category=Пенсионное обеспечение&title=Информирование'|s1Url}}\">Пенсионное обеспечение</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/category_service_list?id=752&category=Семья&title=Усыновление и опека'|s1Url}}\">Семья</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/category_service_list?id=701&category=Социальное обеспечение&title=Льготы'|s1Url}}\">Социальное обеспечение</a></li></ul><a href=\"{{'rgu/category_list'|s1Url}}\" class=\"btn btn-sm btn-white\">Все услуги</a></div></div></li><li class=\"col-xs-6 col-sm-4\"><div class=\"service-item\"><a href=\"{{'rgu/dept_list'|s1Url}}\"><figure class=\"service-item-svg\"><img ng-src=\"{{'assets/svg/icon-service-catalog-2.svg'|s1Url}}\" alt=\"\"><h3 class=\"service-item-title\">Органы власти</h3></figure></a><div class=\"service-item-category\"><ul class=\"service-item-menu\"><li><a href=\"{{'rgu/dept_view?id=2600000010000000001'|s1Url}}\">Правительство Ставропольского края</a></li><li><a href=\"{{'rgu/dept_view?id=2600000010000055520'|s1Url}}\">Комитет Ставропольского края по государственному заказу</a></li><li><a href=\"{{'rgu/dept_view?id=2600000010000000025'|s1Url}}\">Комитет Ставропольского края по делам архивов</a></li></ul><a href=\"{{'rgu/dept_list'|s1Url}}\" class=\"btn btn-sm btn-white\">Все органы власти</a></div></div></li><li class=\"col-xs-6 col-sm-4\"><div class=\"service-item\"><a href=\"{{'rgu/case_list'|s1Url}}\"><figure class=\"service-item-svg\"><img ng-src=\"{{'assets/svg/icon-service-catalog-3.svg'|s1Url}}\" alt=\"\"><h3 class=\"service-item-title\">Жизненные ситуации</h3></figure></a><div class=\"service-item-category\"><ul class=\"service-item-menu\"><li class=\"col-sm-6\"><a href=\"{{'rgu/case_service_list?id=40001&title=%D0%9F%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%BA%D1%80%D0%B5%D0%B4%D0%B8%D1%82%D0%B0'|s1Url}}\">Получение кредита</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/case_service_list?id=40002&title=%D0%92%D1%8B%D0%B5%D0%B7%D0%B4%20%D0%B7%D0%B0%20%D0%B3%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D1%83'|s1Url}}\">Выезд за границу</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/case_service_list?id=40016&title=%D0%9E%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%3E%20%D0%9E%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2%20%D0%BD%D0%B0%20%D0%BD%D0%B5%D0%B4%D0%B2%D0%B8%D0%B6%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D1%8C'|s1Url}}\">Оформление документов на недвижимость</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/case_service_list?id=40005&title=%D0%92%D0%B7%D0%B0%D0%B8%D0%BC%D0%BE%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D0%B5%20%D1%81%20%D1%82%D0%B0%D0%BC%D0%BE%D0%B6%D0%BD%D0%B5%D0%B9'|s1Url}}\">Взаимодействие с таможней</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/case_service_list?id=40021&title=%D0%98%D0%B7%D0%BC%D0%B5%D0%BD%D0%B8%D0%B5%20%D1%81%D0%B5%D0%BC%D0%B5%D0%B9%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%BF%D0%BE%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20%3E%20%D0%97%D0%B0%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B1%D1%80%D0%B0%D0%BA%D0%B0'|s1Url}}\">Заключение брака</a></li><li class=\"col-sm-6\"><a href=\"{{'rgu/case_service_list?id=40003&title=%D0%9F%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%B8'|s1Url}}\">Получение информации</a></li></ul><a href=\"{{'rgu/case_list'|s1Url}}\" class=\"btn btn-sm btn-white\">Все ситуации</a></div></div></li></ul></div></div></div>"
  );


  $templateCache.put('/components/navRecepients.component.html',
    "<div ng-class=\"{'nav-recipient':true, 'is-active is-open':$ctrl.dropdown}\"><button class=\"nav-recipient-link\" ng-click=\"$ctrl.toggle()\"><i>{{ $ctrl.recieverTypeName }}</i> <span class=\"icon-down\"></span></button><div class=\"nav-recipient-dropdown\"><ul class=\"nav-recipient-menu\"><li><a ng-click=\"$ctrl.changeRecieverType(undefined); $ctrl.recieverTypeName='Все получатели'\">Все получатели</a></li><li><a ng-click=\"$ctrl.changeRecieverType('citizen'); $ctrl.recieverTypeName='Граждане'\">Граждане</a></li><li><a ng-click=\"$ctrl.changeRecieverType('businessman'); $ctrl.recieverTypeName='Предприниматели'\">Предприниматели</a></li><li><a ng-click=\"$ctrl.changeRecieverType('organization'); $ctrl.recieverTypeName='Организации'\">Организации</a></li><li><a ng-click=\"$ctrl.changeRecieverType('foreign'); $ctrl.recieverTypeName='Иностранные лица'\">Иностранные лица</a></li><li><a ng-click=\"$ctrl.changeRecieverType('nobody'); $ctrl.recieverTypeName='Лица без гражданства'\">Лица без гражданства</a></li></ul></div></div>"
  );


  $templateCache.put('/components/news/news-list/news-list.compact-tmpl.html',
    "<div ng-show=\"$ctrl.news\"><div style=\"display: flex;justify-content: space-between\"><h2 class=\"service-heading\"><a href=\"/news\">Новости портала</a></h2><a href=\"/news\"><span>Все новости</span></a></div><div class=\"row news-list\"><div ng-repeat=\"newsItem in $ctrl.news\" class=\"col-sm-6 col-md-4\"><article class=\"news-article news-article_compact\" ng-click=\"$ctrl.goTo(newsItem.alias)\"><h3 class=\"appointment-heading\">{{newsItem.header}}</h3><p class=\"advice-datetime\">{{newsItem.date | dateFormat}}</p><p style=\"flex:1\"><img ng-src=\"{{newsItem.thumbnail}}\" width=\"110\" height=\"90\" alt=\"\" style=\"float: left;margin-right:0.5rem\"> {{newsItem.content | stripTags | substr: 120 }} &nbsp; <span class=\"icon-angle-right\"></span></p><a ng-click=\"$ctrl.goTo(newsItem.alias)\"><p class=\"text-right\">подробнее</p></a></article></div></div></div>"
  );


  $templateCache.put('/components/news/news-list/news-list.component.html',
    "<section class=\"news-list-section\"><div class=\"container-fluid mt-1 mb-1\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status === 'LOADING'\"><ng-include src=\"$ctrl.listView\"></ng-include></div></div></section>"
  );


  $templateCache.put('/components/news/news-list/news-list.full-tmpl.html',
    "<h1 class=\"service-heading\">Новости портала</h1><div class=\"row news-list\"><div ng-repeat=\"newsItem in $ctrl.news\" class=\"col-sm-6 col-md-4\"><article class=\"news-article\" ng-click=\"$ctrl.goTo(newsItem.alias)\"><h2 class=\"appointment-heading\">{{newsItem.header}}</h2><p class=\"advice-datetime\">{{newsItem.date | dateFormat}}</p><div style=\"flex:1\"><img ng-src=\"{{newsItem.thumbnail}}\" alt=\"\" width=\"120\" height=\"95\" style=\"float:left;margin-right:.6em\"> {{newsItem.content | stripTags | substr: 130}} &nbsp;&nbsp; <span class=\"fa fa-angle-right\"></span></div><a ng-click=\"$ctrl.goTo(newsItem.alias)\"><p class=\"text-right\">подробнее</p></a></article></div></div><div><s1-paging count=\"$ctrl.count\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div>"
  );


  $templateCache.put('/components/news/news.component.html',
    "<div class=\"container-fluid\" style=\"margin-top: 1em; margin-bottom: 1em\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'ERROR'\"><div class=\"alert alert-block alert-error fade in\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"$ctrl.status === 'LOADING'\"><div style=\"margin-bottom: 1em\"><button class=\"btn btn-default\" ng-click=\"$ctrl.goBack()\">Назад</button></div><section><h1 class=\"service-heading\">{{$ctrl.news.header}}</h1><p class=\"advice-datetime\">{{$ctrl.news.date | dateFormat}}</p><div ng-if=\"$ctrl.news.thumbnail\" style=\"margin-bottom: 1em\"><img ng-src=\"{{$ctrl.news.thumbnail}}\" alt=\"{{$ctrl.news.thumbnail}}\"></div><div ng-bind-html=\"$ctrl.news.content\"></div></section></div></div>"
  );


  $templateCache.put('/components/org-chooser-modal/org-chooser-modal.html',
    "<div class=\"modal fade\" tabindex=\"-1\" id=\"org-сhooser-modal\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">Выберите тип учетной записи</h4></div><div class=\"modal-body\"><div class=\"list-group\" ng-show=\"$ctrl.status === 'OK'\"><a class=\"list-group-item list-group-item-dafault\" ng-class=\"{'active': !$ctrl.orgId || $ctrl.orgId == -1 }\" ng-click=\"$ctrl.changeOrg(-1)\">{{$ctrl.fullUserName}} </a><a ng-repeat=\"org in $ctrl.orgs\" class=\"list-group-item list-group-item-dafault\" ng-class=\"{'active': (org.oid == $ctrl.orgId) }\" ng-click=\"$ctrl.changeOrg(org.oid)\">{{ org.shortName }}</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status === 'ERROR'\"><div class=\"alert alert-block alert-error fade in\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Закрыть</button> <button type=\"button\" class=\"btn btn-blue\" ng-click=\"$ctrl.submitOrg()\">Выбрать</button></div></div></div></div>"
  );


  $templateCache.put('/components/payment/payment-widget.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"mt-1 mb-2\"><button class=\"btn btn-sm\" ng-class=\"{'btn-info': $ctrl.type === 'list' }\" ng-click=\"$ctrl.togglePaymentType('list')\">Выбрать оплату из списка</button> <button class=\"btn btn-sm\" ng-class=\"{'btn-info': $ctrl.type === 'manual' }\" ng-click=\"$ctrl.togglePaymentType('manual')\">Ввести номер платежа вручную</button> <a class=\"btn btn-sm btn-primary ml-2\" href=\"{{ $ctrl.paymentUrl() }}\">Создать новый платеж &nbsp;&nbsp;&nbsp; <i class=\"fa fa-angle-right\"></i></a></div><div class=\"row mb-2\"><div class=\"col-md-8\"><div ng-show=\"$ctrl.type === 'list'\"><select class=\"form-control new-c-field-select\" ng-model=\"$ctrl.uuid\" ng-options=\"item.value as item.name for item in $ctrl.payments\"><option ng-show=\"!option.name\" value=\"\">- выбрать</option></select></div><div ng-show=\"$ctrl.type === 'manual'\"><div class=\"c-field\"><input ng-model=\"$ctrl.uuid\" class=\"c-text c-text-white\"></div></div></div></div></status-wrapper>"
  );


  $templateCache.put('/components/popular-services/popular-services.component.html',
    "<section class=\"service\"><div class=\"container-fluid section-container\"><h2 class=\"service-heading\">Популярные услуги</h2><ul class=\"service-list\"><li class=\"col-sm-6 col-md-4\" ng-repeat=\"service in $ctrl.services\"><a class=\"service-item\" ng-class=\"service.ngClass\" ng-href=\"{{service.url}}\"><figure class=\"service-item-svg\"><img ng-src=\"{{service.iconUrl}}\" width=\"60\" height=\"64\" alt=\"иконка услуги\"><figcaption><h3 class=\"service-item-title\">{{service.title}}</h3></figcaption></figure></a></li></ul></div></section>"
  );


  $templateCache.put('/components/rgu/rgu-document.html',
    "<span>{{$ctrl.doc.title}}</span> <span ng-show=\"$ctrl.doc.type\" class=\"label label-primary\">{{$ctrl.doc.type}}</span><div ng-if=\"$ctrl.doc.comment\"><b>Описание: </b>{{$ctrl.doc.comment}}</div><div ng-if=\"$ctrl.doc.example_id\"><b>Пример документа:</b> <a ng-href=\"{{$ctrl.getFileUrl($ctrl.doc.example_id)}}\">{{$ctrl.doc.example_file}}</a></div><div ng-if=\"$ctrl.doc.template_id\"><b>Шаблон документа:</b> <a ng-href=\"{{$ctrl.getFileUrl($ctrl.doc.template_id)}}\">{{$ctrl.doc.template_file}}</a></div>"
  );


  $templateCache.put('/components/s1Paging.template.html',
    "<div class=\"s1-paging\"><span>Показаны {{skip + 1}} - {{mathMin()}} из {{count}} записей</span><div style=\"display:inline-block;vertical-align:middle\"><div class=\"input-group\"></div><a class=\"btn btn-info\" title=\"Первая страница\" ng-click=\"page=1\" ng-disabled=\"page<=1\"><i class=\"fa fa-angle-double-left\"></i> </a><a class=\"btn btn-info\" title=\"Предыдущая страница\" ng-click=\"page=page-1\" ng-disabled=\"page<=1\"><i class=\"fa fa-angle-left\"></i> </a><input class=\"form-control\" type=\"text\" style=\"text-align: right;max-width:72px;display:inline-block\" title=\"Страница\" ng-model=\"page\" ng-model-options=\"{debounce: 1000}\"> <a class=\"btn btn-info\" title=\"Следующая страница\" ng-click=\"page=page+1\" ng-disabled=\"page>=totalPages\"><i class=\"fa fa-angle-right\"></i> </a><a class=\"btn btn-info\" title=\"Последняя страница\" ng-click=\"$parent.page=totalPages\" ng-if=\"useCount\" ng-disabled=\"page>=totalPages\"><i class=\"fa fa-angle-double-right\"></i></a></div><span>Показывать по:</span><select ng-disabled=\"totalPages == 0\" class=\"form-control\" ng-model=\"max\" style=\"width: auto;display:inline-block\" class=\"form-control\"><option value=\"9\">9</option><option value=\"18\">18</option><option value=\"48\">48</option></select><span>Записей</span></div>"
  );


  $templateCache.put('/components/search-form/search-form.component.html',
    "<div class=\"search\" ng-show=\"$ctrl.isShown()\"><div class=\"search-form\"><div class=\"search-form-field p-0\"><input class=\"search-input\" ng-model=\"$ctrl.search\" placeholder=\"{{$ctrl.placeholder}}\" autocomplete=\"off\" spellcheck=\"off\"></div></div></div>"
  );


  $templateCache.put('/components/service-request/archive.component.html',
    "<h1 class=\"h2\">Архив заявлений</h1><search-form show=\"!($ctrl.status === 'ERROR')\" placeholder=\"введите значение...\" on-search=\"$ctrl.onSearch(val)\"></search-form><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"appl-table-scroll\"><table class=\"appl-table\"><thead><tr><th>Статус</th><th>№ заявления</th><th>Услуга</th><th>Ведомство</th><th>Дата</th></tr></thead><tbody ng-repeat=\"request in $ctrl.requests\"><tr class=\"{{request._id}}\" ng-click=\"$ctrl.collapse(request._id)\" ng-class=\"{true:'appl-table-trigger is-active', false:'appl-table-trigger'}[requestSkip == 0 && $index == 0]\"><td data-th=\"Статус:\" class=\"no-wrap\"><span class=\"icon-collapse\"></span> {{request.statusList[request.statusList.length - 1].text}}</td><td data-th=\"№ заявления:\">{{request.docNum}}</td><td data-th=\"Услуга:\"><a href=\"{{'rgu/service_view?id=' + request.psPassport.id|s1Url}}\">{{request.service.name}}</a></td><td data-th=\"Ведомство:\"><a href=\"{{'rgu/dept_view?id=' + request.dept.id|s1Url}}\">{{request.dept.name}}</a></td><td data-th=\"Дата:\">{{request.date | dateFormat:\"DD.MM.YYYY HH:mm\"}}</td></tr><tr class=\"{{request._id}}\" ng-class=\"{true:'appl-table-details is-active', false:'appl-table-details'}[requestSkip == 0 && $index == 0]\"><td colspan=\"6\"><div class=\"appl-table-content\"><ol class=\"appl-table-details-list\"><li ng-repeat=\"status in request.statusList\"><div class=\"row\"><div class=\"col-md-4\"><strong class=\"appl-table-datails-title\">{{status.text}}</strong></div><div class=\"col-md-4\"><time class=\"appl-table-datails-date\">{{status.date | dateFormat:\"DD.MM.YYYY HH:mm\"}}</time> <span ng-show=\"status.comment\">{{status.comment}}</span></div><div class=\"col-md-4\"><p class=\"appl-table-datails-text\">{{status.author}}</p><div ng-repeat=\"file in status.files\"><a href=\"{{file.url}}\" target=\"_blank\">{{file.filename}}</a></div></div></div></li></ol><div class=\"appl-table-details-ctrl\"><a ng-show=\"request.formId\" class=\"btn btn-xs btn-blue\" ng-click=\"$ctrl.copy(request._id)\"><span class=\"icon-docs\"></span> Создать заявление новой версии </a><a class=\"btn btn-xs btn-white\" ng-click=\"$ctrl.show(request._id)\" ng-show=\"!$ctrl.isEdit(request)\"><i class=\"fa fa-eye\"></i> Просмотр</a></div></div></td></tr></tbody></table></div><div class=\"mb-1\" ng-show=\"$ctrl.listCount>0\"><s1-paging count=\"$ctrl.listCount\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><hr></status-wrapper>"
  );


  $templateCache.put('/components/service-request/formio.component.html',
    "<div ng-if=\"$ctrl.ready()\"><service-request-header request=\"$ctrl.request\"></service-request-header></div><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div ng-if=\"$ctrl.ready()\"><formio form=\"$ctrl.request.formTemplate\" submission=\"$ctrl.request.model\" read-only=\"!$ctrl.isEditable()\" url=\"'_'\"></formio><receive-result-type receive-result-type=\"$ctrl.request.receiveResultType\" mfc-receive-selected=\"$ctrl.mfcReceiveSelected\" drgu=\"$ctrl.drgu\" mfc-list=\"$ctrl.mfcList\"></receive-result-type><div ng-if=\"$ctrl.showIF('signing')\"><div class=\"alert alert-info\"><strong>Внимание! </strong><span>Ставя свою электронную подпись под данным заявлением вы подтверждаете корректность введенных в нем данных и соглашаетесь на отправку заявления в указанное ведомство.</span></div><sign-cades on-sign=\"$ctrl.onSign(val)\" on-cancel=\"$ctrl.onCancelSign()\" data=\"$ctrl.soapReq\"></sign-cades></div><div ng-if=\"$ctrl.showPayment()\"><div class=\"alert alert-info\"><p class=\"h4\">Оплата электронной услуги <span ng-show=\"$ctrl.drgu.payment == 'REQUIRED'\">( обязательно <span style=\"color:red\">*</span> ) </span><span ng-show=\"$ctrl.drgu.payment == 'OPTIONAL'\">( опционально )</span></p><payment-widget on-choose=\"$ctrl.onChoosePayment(val)\" serviceid=\"$ctrl.drgu.service_id\" return-url=\"$ctrl.returnUrl()\"></payment-widget></div></div><div class=\"appl-form-ctrl clearfix\"><div ng-if=\"$ctrl.isEditable()\"><button class=\"btn btn-blue\" ng-disabled=\"$ctrl.isWizard() && !$ctrl.wizardLastPage()\" ng-click=\"$ctrl.handleSubmit()\">Отправить заявление</button> <button class=\"btn btn-blue\" ng-click=\"$ctrl.save()\"><i ng-show=\"$ctrl.saving\" class=\"fa fa-circle-o-notch fa-spin\"></i> &nbsp;&nbsp;Сохранить черновик</button><div ng-repeat=\"alert in $ctrl.formioAlerts track by $index\" class=\"alert alert-danger\" style=\"position: absolute\">Пожалуйста, исправьте неверно заполненные поля перед отправкой</div></div><div ng-if=\"$ctrl.request.formId && !$ctrl.isEditable()\"><a href=\"{{'/personcab/dos_appeal?idService=' +\n" +
    "                    $ctrl.request.digitalRguServices + '&date=' +\n" +
    "                    $ctrl.request.date.toISOString()}}\" class=\"btn btn-danger mr-1\"><i class=\"fa fa-exclamation-circle\"></i> Жалоба </a><a class=\"btn btn-blue\" ng-click=\"$ctrl.copy()\"><span class=\"icon-docs\"></span> &nbsp;Использовать как шаблон </a><a class=\"btn btn-warning\" ng-if=\"$ctrl.isErrorStatus()\" ng-click=\"$ctrl.report()\"><i class=\"fa fa-bug\"></i> Обратиться в техподдержку</a></div></div><div ng-if=\"!$ctrl.isDoneStatus()\"><div ng-if=\"$ctrl.drgu.isSMSAvailable\" class=\"alert alert-success\"><div class=\"mb-1 d-flex justify-content-between align-items-center\"><p class=\"h4 m-0\">Для услуги доступно информирование об изменении статуса заявления по СМС</p><button class=\"btn btn-xs btn-primary\" ng-click=\"$ctrl.save()\">сохранить</button></div><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.request.isSMSReceive\"><label ng-click=\"$ctrl.request.isSMSReceive = !$ctrl.request.isSMSReceive\">Получать уведомления по СМС</label></div></div><div ng-if=\"$ctrl.drgu.isEmailAvailable\" class=\"alert alert-success\"><div class=\"mb-1 d-flex justify-content-between align-items-center\"><p class=\"h4 m-0\">Для услуги доступно информирование об изменении статуса заявления по E-mail</p><button class=\"btn btn-xs btn-primary\" ng-click=\"$ctrl.save()\">сохранить</button></div><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.request.isEmailReceive\"><label ng-click=\"$ctrl.request.isEmailReceive = !$ctrl.request.isEmailReceive\">Получать уведомления по E-mail</label></div></div></div><div ng-show=\"$ctrl.status === 'REPORT'\"><service-request-report status=\"$ctrl.status\" request=\"$ctrl.request\" on-error=\"$ctrl.errorHandler(err)\"></service-request-report></div></div></status-wrapper>"
  );


  $templateCache.put('/components/service-request/header.component.html',
    "<div class=\"appl mt-1 mb-2\"><div class=\"d-flex align-items-center mb-2\"><img class=\"dept-image mr-2\" ng-src=\"{{'assets/images/logo-rus.png'|s1Url}}\"><h2 class=\"dept-title m-0\">{{$ctrl.service.dept_title}}</h2></div><p class=\"appl-caption mb-2\"><a href=\"{{$ctrl.openRguUrl()}}\" title=\"Открыть услугу в реестре\">{{$ctrl.service.service_title}}</a></p><h1 class=\"appl-heading d-flex justify-content-between\"><span>Заявление №{{$ctrl.request.docNum}} от {{$ctrl.request.date|dateFormat:'DD.MM.YYYY HH:mm'}}</span> <span>{{$ctrl.REQUEST_STATUS[$ctrl.status.code]}}</span></h1></div>"
  );


  $templateCache.put('/components/service-request/list.component.html',
    "<div ng-show=\"$ctrl.status === 'REPORT'\"><service-request-report status=\"$ctrl.status\" request=\"$ctrl.reportRequest\" on-error=\"$ctrl.errorHandler(err)\"></service-request-report></div><div ng-show=\"!($ctrl.status === 'REPORT')\"><div class=\"alert alert-info d-flex align-items-center justify-content-between mb-2\"><span>Произведена архивация всех заявлений, созданных до 16.08.2018, в связи с переходом на новую версию ЕЛК</span> <a class=\"btn btn-default\" href=\"/personcab/service-request/archive\">Архив заявлений</a></div><search-form show=\"!($ctrl.status === 'ERROR')\" placeholder=\"номер заявления, название услуги или ведомства...\" on-search=\"$ctrl.onSearch(val)\"></search-form><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"appl-table-scroll\"><table class=\"appl-table\"><thead><tr><th>Статус</th><th>№ заявления</th><th>Услуга</th><th>Ведомство</th><th>Дата</th></tr></thead><tbody ng-repeat=\"request in $ctrl.requests\"><tr class=\"{{request._id}} appl-table-trigger cursor-pointer\" ng-class=\"{'is-active': $first}\" ng-click=\"$ctrl.collapse(request._id)\"><td class=\"no-wrap\"><span class=\"icon-collapse\"></span> {{request.statusList[request.statusList.length - 1].text}}</td><td><mark ng-if=\"request.isModified\" class=\"dept-item-count notify-count notify-list\" style=\"\"><span class=\"dept-item-count-caption notify-count-caption\">Изменен статус заявления</span> </mark><span>{{request.docNum}}</span></td><td><div ng-if=\"request.importedFromELK\">{{request.service.name}}</div><a ng-if=\"!request.importedFromELK\" href=\"{{'rgu/service_view?id=' + request.service.pspassport_id}}\">{{request.service.service_title}}</a></td><td><a href=\"{{'rgu/dept_view?id=' + request.service.dept_id}}\">{{request.service.dept_title}}</a></td><td>{{request.date | dateFormat:\"DD.MM.YYYY HH:mm\"}}</td></tr><tr class=\"{{request._id}} appl-table-details\" ng-class=\"{'is-active': $first || (requestSkip == 0 && $index == 0)}\"><td colspan=\"6\"><div class=\"appl-table-content\"><div ng-if=\"request.urlELK\" style=\"margin-bottom: 15px\"><strong class=\"appl-table-datails-title\" style=\"display: initial\">Получено из Единого Личного Кабинета: </strong><a ng-href=\"{{request.urlELK}}\" target=\"_blank\">{{request.urlELK}}</a></div><ol class=\"appl-table-details-list\"><li ng-repeat=\"status in request.statusList\"><div class=\"row\"><div class=\"col-md-4\"><strong class=\"appl-table-datails-title\">{{status.text}}</strong></div><div class=\"col-md-4\"><time class=\"appl-table-datails-date\">{{status.date | dateFormat:\"DD.MM.YYYY HH:mm\"}}</time> <span class=\"text-bold\" ng-show=\"status.comment\">{{status.comment}}</span></div><div class=\"col-md-4\"><p class=\"appl-table-datails-text\">{{status.author}}</p><div ng-repeat=\"file in status.files\" class=\"row\" style=\"padding-top: 2px; padding-bottom: 2px\"><div class=\"col-md-7\"><a href=\"{{file.url}}\" target=\"_blank\">{{file.filename}}</a></div><div class=\"col-md-5\"><a ng-if=\"!$ctrl.getSignedFile(file.filename, status.files)\" href=\"{{file.url}}\" target=\"_blank\" class=\"btn btn-xs btn-blue\">Скачать</a><verify-cades ng-if=\"$ctrl.getSignedFile(file.filename, status.files)\" sign=\"file\" signed-file=\"$ctrl.getSignedFile(file.filename, status.files)\">Проверить</verify-cades></div></div></div></div></li></ol><div ng-if=\"!request.importedFromELK\" class=\"appl-table-details-ctrl\"><div class=\"d-flex justify-content-between\"><div><a ng-if=\"request.pay && $ctrl.isNeedPayment(request)\" class=\"btn btn-xs btn-default-focus\" ng-href=\"{{request.pay.formURL}}\" target=\"_blank\"><i class=\"fa fa-money\"></i> &nbsp;Оплатить </a><a ng-if=\"request.pay\" class=\"btn btn-xs btn-blue\" ng-href=\"{{request.pay.paymentStatusFormURL}}\" target=\"_blank\"><i class=\"fa fa-question\"></i> &nbsp;Статус оплаты </a><a ng-if=\"$ctrl.getPaymentId(request) != null\" class=\"btn btn-xs btn-blue\" ng-href=\"https://www.gosuslugi.ru/payment/{{$ctrl.getPaymentId(request)}}?returnUrl=?returnUrl=https://26gosuslugi.ru/\" target=\"_blank\"><i class=\"fa fa-money\"></i> &nbsp;Оплатить </a><a ng-if=\"request.formId && !$ctrl.isEditable(request)\" class=\"btn btn-xs btn-blue\" ng-click=\"$ctrl.copy(request)\"><span class=\"icon-docs\"></span> &nbsp;Использовать как шаблон </a><a class=\"btn btn-xs btn-white\" ng-click=\"$ctrl.edit(request)\" ng-if=\"$ctrl.isEditable(request)\"><i class=\"fa fa-pencil\"></i> &nbsp;Редактировать </a><a class=\"btn btn-xs btn-white\" ng-click=\"$ctrl.show(request)\" ng-if=\"!$ctrl.isEditable(request)\"><i class=\"fa fa-eye\"></i> &nbsp;Просмотр </a><a class=\"btn btn-xs btn-white\" ng-if=\"!request.modelEmpty\" ng-href=\"{{'portal/rest/serviceRequest/v2/' +request._id + '/pdf' | s1Url}}\" target=\"_blank\"><i class=\"fa fa-print\"></i> &nbsp;Печать </a><a href=\"{{$ctrl.deptLink(request)}}\" class=\"btn btn-xs btn-blue\" ng-if=\"$ctrl.isRecordAvailable(request)\"><span class=\"icon-calendar\"></span> Записаться на прием </a><a class=\"btn btn-xs btn-warning\" ng-if=\"$ctrl.isErrorStatus(request)\" ng-click=\"$ctrl.report(request)\"><i class=\"fa fa-bug\"></i> Обратиться в техподдержку</a></div><div><span ng-if=\"$ctrl.isRateable(request) || request.ratingId\" class=\"mr-1\"><a class=\"btn btn-xs btn-success\" href=\"{{$ctrl.ratingUrl(request)}}\"><i class=\"fa fa-star-o\"></i> {{request.ratingId ? \"Результат оценки\" : \"Оценить\"}} </a></span><span ng-if=\"!$ctrl.isEditable(request)\" class=\"mr-1\"><a href=\"{{$ctrl.openAppealUrl(request)}}\" class=\"btn btn-xs btn-danger\"><i class=\"fa fa-exclamation-circle\"></i> Жалоба </a></span><span class=\"mr-1\"><a class=\"btn btn-xs btn-danger\" ng-click=\"$ctrl.delete(request)\"><i class=\"fa fa-close\"></i> &nbsp;Удалить</a></span></div></div></div></div></td></tr></tbody></table><style>.appl-table-content {\n" +
    "                border-top: 0;\n" +
    "                border-top-left-radius: 0;\n" +
    "                border-top-right-radius: 0;\n" +
    "                margin-top: 0;\n" +
    "                margin-bottom: 2rem;\n" +
    "            }</style></div></status-wrapper><div class=\"mb-1\" ng-show=\"$ctrl.listCount>0\"><s1-paging count=\"$ctrl.listCount\" max=\"$ctrl.max\" skip=\"$ctrl.skip\" on-change=\"$ctrl.pagination()\"></s1-paging></div><hr></div>"
  );


  $templateCache.put('/components/service-request/receiveResultType.component.html',
    "<div class=\"alert alert-info mt-1 mb-2\" style=\"z-index: 2\" ng-if=\"$ctrl.drgu.isSignReceive || $ctrl.drgu.mfcRecive\"><div><p class=\"h4\">Способ получения результата оказания услуги</p><button class=\"btn btn-sm mb-05\" ng-class=\"{'btn-primary': $ctrl.receiveResultType == 'SIMPLE' }\" ng-click=\"$ctrl.setReceiveResultType('SIMPLE')\">В ведомстве</button> <span ng-if=\"$ctrl.drgu.isSignReceive\"><button style=\"white-space: pre-wrap\" class=\"btn btn-sm mb-05\" ng-class=\"{'btn-primary': $ctrl.receiveResultType == 'SIGNED' }\" ng-click=\"$ctrl.setReceiveResultType('SIGNED')\">Подписанным ЭЦП</button> </span><span ng-if=\"$ctrl.drgu.mfcRecive\"><button class=\"btn btn-sm mb-05\" ng-class=\"{'btn-primary': $ctrl.receiveResultType == 'MFC' }\" ng-click=\"$ctrl.setReceiveResultType('MFC')\">В МФЦ</button></span></div><div ng-show=\"$ctrl.receiveResultType == 'MFC'\"><div class=\"form-group mt-05\"><label class=\"control-label\">Введите часть названия МФЦ</label><oi-select oi-options=\"$ctrl.searchOption(item) for item in $ctrl.searchMFC($query)\" ng-model=\"$ctrl.mfcReceiveSelected\" required></oi-select></div><p class=\"mt-05\"><strong>Будет выбран: </strong>{{$ctrl.searchOption($ctrl.mfcReceiveSelected)}}</p><p class=\"mt-05\"><strong>Адрес МФЦ: </strong>{{$ctrl.mfcReceiveSelected.address}}</p></div></div>"
  );


  $templateCache.put('/components/service-request/report.component.html',
    "<div class=\"alert alert-info\"><form name=\"form\" class=\"form\" ng-submit=\"$ctrl.sendReport()\"><h4>Здравствуйте {{$ctrl.reportData.fio}}</h4><p>Для оперативного разрешения вопроса по заявлению<span ng-if=\"$ctrl.service.service_title\"> об оказании услуги: <strong>{{$ctrl.service.service_title}}</strong></span>, просим заполнить следующую информацию для связи</p><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Почта *</sup> <input type=\"email\" class=\"c-text\" ng-model=\"$ctrl.reportData.email\" required></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Телефон</sup> <input type=\"tel\" class=\"c-text\" ng-model=\"$ctrl.reportData.phone\"></div></div></div><button class=\"btn btn-xs btn-primary\" type=\"submit\" ng-disabled=\"form.$invalid\"><i class=\"fa fa-envelope\"></i> Отправить</button> <button class=\"btn btn-xs btn-primary\" ng-click=\"$ctrl.status = 'READY'\"><i class=\"fa fa-ban\"></i> Отмена</button></form></div>"
  );


  $templateCache.put('/components/service-request/schemaform.component.html',
    "<div ng-show=\"$ctrl.ready()\"><service-request-header request=\"$ctrl.request\"></service-request-header></div><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div ng-show=\"$ctrl.status === 'REPORT'\"><service-request-report status=\"$ctrl.status\" request=\"$ctrl.request\" on-error=\"$ctrl.errorHandler(err)\"></service-request-report></div><div ng-show=\"$ctrl.ready()\"><div ng-show=\"!$ctrl.signing\"><form name=\"$ctrl.form\" sf-schema=\"$ctrl.request.formTemplate.schema\" sf-form=\"$ctrl.request.formTemplate.form\" sf-template=\"$ctrl.template\" sf-model=\"$ctrl.request.model\"></form></div><receive-result-type receive-result-type=\"$ctrl.request.receiveResultType\" mfc-receive-selected=\"$ctrl.mfcReceiveSelected\" drgu=\"$ctrl.drgu\" mfc-list=\"$ctrl.mfcList\"></receive-result-type><div ng-if=\"$ctrl.showSigning()\"><div class=\"alert alert-info\"><strong>Внимание!</strong><p>Ставя свою электронную подпись под данным заявлением вы подтверждаете корректность введенных в нем данных и соглашаетесь на отправку заявления в указанное ведомство.</p></div><sign-cades on-sign=\"$ctrl.onSign(val)\" on-cancel=\"$ctrl.onCancelSign()\" data=\"$ctrl.soapReq\"></sign-cades></div><div class=\"appl-form-ctrl clearfix\"><div class=\"clearfix\" ng-show=\"$ctrl.isEditable() && !($ctrl.signing)\"><button class=\"btn btn-blue\" ng-disabled=\"$ctrl.errors\" ng-click=\"$ctrl.handleSubmit()\">Отправить заявление</button> <button class=\"btn btn-blue\" ng-click=\"$ctrl.save()\"><i ng-show=\"$ctrl.saving\" class=\"fa fa-circle-o-notch fa-spin\"></i> &nbsp;&nbsp;Сохранить черновик</button></div><div ng-show=\"$ctrl.errors\" class=\"alert alert-danger mt-1 mb-2\" style=\"float:right\"><p>Необходимо заполнить требуемые поля</p></div><div ng-show=\"$ctrl.request.formId && !$ctrl.isEditable()\"><a href=\"{{'/personcab/dos_appeal?idService=' +\n" +
    "                    $ctrl.request.digitalRguServices + '&date=' +\n" +
    "                    $ctrl.request.date.toISOString()}}\" class=\"btn btn-danger mr-1\"><i class=\"fa fa-exclamation-circle\"></i> Жалоба </a><a class=\"btn btn-blue\" ng-click=\"$ctrl.copy()\"><span class=\"icon-docs\"></span> &nbsp;Использовать как шаблон </a><a class=\"btn btn-warning\" ng-show=\"$ctrl.isErrorStatus()\" ng-click=\"$ctrl.report()\"><i class=\"fa fa-bug\"></i> Обратиться в техподдержку</a></div></div><div ng-if=\"!$ctrl.isDoneStatus()\"><div ng-if=\"$ctrl.drgu.isSMSAvailable\" class=\"alert alert-success\"><div class=\"mb-1 d-flex justify-content-between align-items-center\"><p class=\"h4 m-0\">Для услуги доступно информирование об изменении статуса заявления по СМС</p><button class=\"btn btn-xs btn-primary\" ng-click=\"$ctrl.save()\">сохранить</button></div><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.request.isSMSReceive\"><label ng-click=\"$ctrl.request.isSMSReceive = !$ctrl.request.isSMSReceive\">Получать уведомления по СМС</label></div></div><div ng-if=\"$ctrl.drgu.isEmailAvailable\" class=\"alert alert-success\"><div class=\"mb-1 d-flex justify-content-between align-items-center\"><p class=\"h4 m-0\">Для услуги доступно информирование об изменении статуса заявления по E-mail</p><button class=\"btn btn-xs btn-primary\" ng-click=\"$ctrl.save()\">сохранить</button></div><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.request.isEmailReceive\"><label ng-click=\"$ctrl.request.isEmailReceive = !$ctrl.request.isEmailReceive\">Получать уведомления по E-mail</label></div></div></div><div ng-show=\"$ctrl.status === 'REPORT'\"><service-request-report status=\"$ctrl.status\" request=\"$ctrl.request\" on-error=\"$ctrl.errorHandler(err)\"></service-request-report></div></div></status-wrapper>"
  );


  $templateCache.put('/components/sfDatePicker.template.html',
    "<form name=\"datepickerForm\" role=\"form\"><div class=\"form-group schema-form-date\" ng-class=\"{'has-error': (datepickerForm.date.$dirty && datepickerForm.date.$invalid),\n" +
    "                    'has-success': (datepickerForm.date.$dirty && datepickerForm.date.$valid)}\"><label class=\"control-label\" ng-show=\"showTitle()\">{{dateTitle}}</label><div class=\"row\"><div class=\"form-control-date\"><div class=\"input-group\" style=\"display: block\"><input type=\"text\" class=\"form-control\" ng-model=\"dataModel\" data-date-type=\"{{dateType || 'string'}}\" data-date-format=\"{{dateFormat || 'dd-MM-yyyy'}}\" data-autoclose=\"{{dateAutoclose || '1'}}\" data-start-view=\"{{dateView || '2'}}\" data-min-date=\"{{min}}\" data-max-date=\"{{max}}\" placeholder=\"{{placeHolder || ''}}\" ng-required=\"{{ngRequired || 'false'}}\" ng-disabled=\"{{ngDisabled || 'false'}}\" ng-change=\"onChange()\" data-ext-view=\"{{extView || '0'}}\" name=\"date\" sf-date-mask bs-datepicker> <span class=\"input-group-addon\"><i class=\"fa fa-calendar\"></i></span></div><span class=\"form-control-feedback\" style=\"top: 15px !important\" ng-class=\"{'fa fa-check': (datepickerForm.date.$dirty && datepickerForm.date.$valid),\n" +
    "                               'fa fa-times': (datepickerForm.date.$dirty && datepickerForm.date.$invalid)}\"></span></div></div><div class=\"help-block\" style=\"margin: 5px\" ng-show=\"datepickerForm.date.$dirty && datepickerForm.date.$invalid\" ng-bind-html=\"description\"></div></div></form>"
  );


  $templateCache.put('/components/sign-cades/sign-cades.html',
    "<div class=\"clearfix\"><div class=\"pull-right\"><a class=\"btn btn-sm btn-warning\" ng-click=\"$ctrl.onCancel()\">Отменить подпись и вернуться</a></div></div><div class=\"appl-form-ctrl row\"><div class=\"col-sm-12\"><h3>Уважаемый пользователь!</h3><p>На данной странице вы можете подписать документ, однако предварительно, необходимо настроить программы для подписания документов.</p><h3>Для успешного подписания должны быть:</h3><ul class=\"m-0 p-0\"><li>Установлен и настроен плагин для браузера «КриптоПро ЭЦП Browser plug-in» версии 2.0.12438 и выше.<div class=\"mt-1\" ng-show=\"!$ctrl.plugin.status\"><p class=\"mb-1\"><span class=\"label label-danger\">Плагин не загружен</span></p><p><a href=\"http://www.cryptopro.ru/products/cades/plugin/\" target=\"_blank\">Скачать плагин на сайте КриптоПро</a></p><p><a href=\"http://cpdn.cryptopro.ru/default.asp?url=content/cades/plugin-installation.html\" target=\"_blank\">Инструкция по установке плагина КриптоПро</a></p><p><a href=\"https://chrome.google.com/webstore/detail/cryptopro-extension-for-c/iifchhfnnmpdbibifmljnfjhpififfog\" target=\"_blank\">Скачать расширение CryptoPro Extension for CAdES Browser Plug-in (Google Chrome, Yandex браузер)</a></p></div><div class=\"mt-1\" ng-show=\"$ctrl.plugin.status\"><p class=\"mb-1\">Версия плагина: <span class=\"badge\">{{$ctrl.plugin.plug_ver}}</span></p></div></li><li>Установлен криптопровайдер с поддержкой алгоритмов шифрования ГОСТ 34.10-2001, ГОСТ 28147-89, ГОСТ Р 34.11-2012 (например, сертифицированная версия КриптоПро CSP 4.0 R3)<div class=\"mt-1\" ng-show=\"!$ctrl.plugin.status\"><p class=\"mb-1\"><span class=\"label label-danger\">Плагин не загружен</span></p></div><div class=\"mt-1\" ng-show=\"$ctrl.plugin.status\"><p class=\"mb-1\">Версия КриптоПро CSP: <span class=\"badge\">{{$ctrl.plugin.csp_ver}}</span></p></div></li><li>В хранилище сертификатов \"Личные\" установлен КСКПЭП, выданный удостоверяющим центром.<p class=\"mt-1\">Убедитесь, что КСКПЭП не просрочен и установлен в хранилище сертификатов \"Личные\". Рекомендуем вручную проверить доступ к сертификату в хранилище \"Личные\". Для этого выберите Пуск - Выполнить, ввести \"certmgr.msc\" и нажать Enter. В левой части открывшегося окна выберите папку \"Личные\"- \"Реестр\" -\"Сертификаты\". В правой части в списке должен находиться личный сертификат</p></li></ul></div></div><div class=\"form-group\" ng-show=\"$ctrl.plugin.status\"><p class=\"mb-2 label label-success\" ng-show=\"$ctrl.plugin.status\">Плагин загружен</p></div><div><h2 class=\"appl-heading\">Выберите сертификат для подписи заявления:</h2><div ng-show=\"$ctrl.signing\"><div style=\"padding:10px;text-align:center\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"$ctrl.plugin.status && !($ctrl.signing)\"><div ng-repeat=\"c in $ctrl.certs\"><button ng-click=\"$ctrl.signCades(c.value)\" class=\"btn btn-xs btn-white text-left\" style=\"width:90%;white-space: normal\">{{c.text}}</button><div ng-show=\"$ctrl.saving\" class=\"st-preloader-bl\"></div></div><div ng-show=\"$ctrl.certs.length < 1\" class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div></div>"
  );


  $templateCache.put('/components/status-wrapper/status-wrapper.component.html',
    "<div class=\"mt-1 mb-2\"><div ng-show=\"$ctrl.status.toUpperCase() === 'ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div class=\"text-center\" ng-show=\"$ctrl.status.toUpperCase() === 'LOADING'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"$ctrl.status.toUpperCase() !== 'LOADING'\"><div ng-transclude></div></div></div>"
  );


  $templateCache.put('/components/top-header-menu/top-header-menu.26.component.html',
    "<ul class=\"top-sidebar-menu\"><li><a href=\"http://www.stavregion.ru/\">Сайт региона</a></li><li id=\"index-head-button\" class=\"is-active\"><a href=\"{{'index'|s1Url}}\">Портал услуг</a></li><li><a href=\"https://www.control26.ru/\" target=\"_blank\">Народный контроль</a></li><li><a href=\"http://umfc26.ru/index.php\" target=\"_blank\">МФЦ</a></li><li id=\"transport-head-button\"><a href=\"{{'transport'|s1Url}}\">Транспорт</a></li><li><a href=\"http://dsreda.stavregion.ru/home\" target=\"_blank\">Доступная среда</a></li><li><a href=\"https://yandex.ru/maps/?um=constructor%3Afd1rpF8Az-4UK_inoDJZ9ICZ-RFFvVgL&source=constructorLink&mode=usermaps&ll=43.117289%2C44.985437&z=8\" target=\"_blank\">Электросетевые организации</a></li></ul>"
  );


  $templateCache.put('/components/top-header-menu/top-header-menu.67.component.html',
    "<ul class=\"top-sidebar-menu\"><li><a href=\"https://pgu.admin-smolensk.ru:8443/main\">Сайт региона</a></li><li id=\"index-head-button\" class=\"is-active\"><a href=\"{{'index'|s1Url}}\">Портал услуг</a></li><li><a href=\"https://xn--67-7lc6ak.xn--p1ai/\" target=\"_blank\">МФЦ</a></li></ul>"
  );


  $templateCache.put('/components/verify-cades/cert-info.html',
    "<ul><li ng-if=\"$ctrl.value['CN']\"><label class=\"field-label\">Имя:</label><span>{{$ctrl.value['CN']}}</span></li><li ng-if=\"$ctrl.value['E']\"><label class=\"field-label\">Электронная почта:</label><a ng-href=\"mailto:{{$ctrl.value['E']}}\" target=\"_blank\">{{$ctrl.value['E']}}</a></li><li ng-if=\"$ctrl.value['O']\"><label class=\"field-label\">Организация:</label><span>{{$ctrl.value['O']}}</span></li><li ng-if=\"$ctrl.value['OU']\"><label class=\"field-label\">Подразделение:</label><span>{{$ctrl.value['OU']}}</span></li><li ng-if=\"$ctrl.value['C']\"><label class=\"field-label\">Страна:</label><span>{{$ctrl.value['C']}}</span></li><li ng-if=\"$ctrl.value['S']\"><label class=\"field-label\">Область:</label><span>{{$ctrl.value['S']}}</span></li><li ng-if=\"$ctrl.value['L']\"><label class=\"field-label\">Город:</label><span>{{$ctrl.value['L']}}</span></li></ul>"
  );


  $templateCache.put('/components/verify-cades/modal.html',
    "<div class=\"modal-header\"><h3 class=\"modal-title\" id=\"modal-title\" style=\"display: inline\">Проверка подписи</h3><i ng-click=\"$ctrl.close()\" class=\"fa fa-times\" aria-hidden=\"true\" style=\"float: right;cursor: pointer\"></i></div><div class=\"modal-body\" id=\"modal-body\"><div class=\"row\" ng-show=\"!$ctrl.plugin.version\"><div class=\"col-sm-12\"><h3>Уважаемый пользователь!</h3><p>На данной странице вы можете проверить подпись документа, однако предварительно, необходимо настроить программы для проверки подписи документов.</p><h3>Для успешной проверки должны быть:</h3><ul class=\"m-0 p-0\"><li>Установлен и настроен плагин для браузера «КриптоПро ЭЦП Browser plug-in» версии 2.0.12438 и выше.<div class=\"mt-1\"><p class=\"mb-1\"><span class=\"label label-danger\">Плагин не загружен</span></p><p class=\"mb-1\" ng-if=\"$ctrl.plugin.error\"><span class=\"label label-danger\">{{$ctrl.plugin.error}}</span></p><p><a href=\"http://www.cryptopro.ru/products/cades/plugin/\" target=\"_blank\">Скачать плагин на сайте КриптоПро</a></p><p><a href=\"http://cpdn.cryptopro.ru/default.asp?url=content/cades/plugin-installation.html\" target=\"_blank\">Инструкция по установке плагина КриптоПро</a></p><p><a href=\"https://chrome.google.com/webstore/detail/cryptopro-extension-for-c/iifchhfnnmpdbibifmljnfjhpififfog\" target=\"_blank\">Скачать расширение CryptoPro Extension for CAdES Browser Plug-in (Google Chrome, Yandex браузер)</a></p></div></li></ul></div></div><div class=\"form-group\" ng-if=\"$ctrl.plugin.version\"><p class=\"mb-1\">Версия плагина: <span class=\"badge\">{{$ctrl.plugin.version}}</span></p></div><div><ul><li><label class=\"field-label\">Проверяется файл:</label><span>{{$ctrl.signedFile.filename}}</span></li><li><label class=\"field-label\">Подпись:</label><span>{{$ctrl.sign.filename}}</span></li><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><li ng-if=\"$ctrl.cert\"><label>Подпись валидна. Сертификат:</label><ul><li><label class=\"field-label\">Выдан:</label><span>{{$ctrl.cert.validFromDate | dateFormat}}</span></li><li><label class=\"field-label\">Действителен до:</label><span>{{$ctrl.cert.validToDate | dateFormat}}</span></li><li><label class=\"field-label\">Алгоритм:</label><span>{{$ctrl.cert.algorithm}}</span><table class=\"table table-bordered cert-table\"><tr><th>Владелец</th><th>Издатель</th></tr><tr><td><cert-info value=\"$ctrl.certSubjectNameMap\"></cert-info></td><td><cert-info value=\"$ctrl.certIssuerNameMap\"></cert-info></td></tr></table></li></ul></li></status-wrapper></ul></div><p class=\"mb-1\" ng-if=\"$ctrl.plugin.error\"><label>Ошибка при проверке подписи:</label><span class=\"label label-danger\">{{$ctrl.plugin.error}}</span></p></div>"
  );


  $templateCache.put('/components/verify-cades/verify-cades.html',
    "<button ng-click=\"$ctrl.showModal()\" class=\"btn btn-xs btn-blue\">Проверить</button>"
  );


  $templateCache.put('/deprecated/request/request.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><div class=\"container-fluid\"><div class=\"appl\"><div class=\"row\"><div class=\"col-md-8\"><h2 class=\"appl-heading\">Заявление №{{request.docNum}} от {{request.date|dateFormat:'DD.MM.YYYY HH:mm'}} Статус: {{REQUEST_STATUS[reqStatus.code]}}</h2><p class=\"appl-caption\"><a href=\"{{'rgu/service_view?id='+request.psPassport.id + '&rid=' + request.service.id + '&tab=statement'|s1Url}}\" title=\"Открыть услугу в реестре\">{{request.service.name}}</a></p></div><div class=\"col-md-4\"><b class=\"provide-title\">Услугу предоставляет</b> <span class=\"provide-link\"><img ng-src=\"{{'assets/images/logo-rus.png'|s1Url}}\" alt=\"\"> <u>{{request.dept.name}}</u></span></div></div></div><div ng-hide=\"sending && signature\"><div style=\"padding:13px\"><div ng-show=\"reqStatus.code == 101 && sessionUserId == request.userId\" class=\"alert alert-warning\" role=\"alert\"><strong>Ожидается подписание заявления вторым заявителем.</strong><br>Для отправки заявления в ведомство <b>второму</b> заявителю необходимо:<br>1. Авторизоваться на портале госуслуг (должна быть подтвержденная учетная запись в ЕСИА)<br>2. Перейти по сылке: <code>{{thisPage}}</code><br>3. Отправить заявление в ведомство<br></div><div ng-show=\"!signing || reqStatus.code == 101\" class=\"row\"><div ng-if=\"isFormio()\"><formio form=\"request.serviceForm.formio\" submission=\"request.model\" url=\"'_'\"></formio></div><div ng-if=\"!isFormio()\"><form name=\"form.data\" sf-schema=\"request.serviceForm.schemaform.schema\" sf-form=\"request.serviceForm.schemaform.form\" sf-model=\"request.model\" sf-template=\"template\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div></div><div ng-show=\"reqStatus.code == 101 && sessionUserId != request.userId && !request.model.isSimpleSign\" class=\"alert alert-warning\" role=\"alert\"><strong>Внимание!</strong><br>Ставя свою электронную подпись под данным заявлением вы подтверждаете корректность введенных в нем данных и соглашаетесь на отправку заявления в указанное ведомство.</div><div ng-show=\"reqStatus.code == 101 && sessionUserId != request.userId && request.model.isSimpleSign\" class=\"alert alert-warning\" role=\"alert\"><strong>Внимание!</strong><br>Нажимая кнопку <b>Отправить заявление</b> вы подтверждаете корректность введенных в нем данных и соглашаетесь на отправку заявления в указанное ведомство.</div><div ng-show=\"signing || (reqStatus.code == 101 && sessionUserId != request.userId && !request.model.isSimpleSign)\" class=\"row\"><div class=\"appl-form-ctrl\"><div class=\"col-md-8\" style=\"padding:10px;text-align:center\" ng-show=\"!cadesinfo.status\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"col-md-8\" ng-show=\"cadesinfo.status\"><h2 class=\"appl-heading\">Выберите сертификат для подписи заявления:</h2><div ng-show=\"signer\"><span ng-show=\"signer=='1'\" class=\"label label-success\">Первый заявитель</span> <span ng-show=\"signer=='2'\" class=\"label label-success\">Второй заявитель</span><br><br></div><div ng-repeat=\"c in certs\"><button ng-click=\"signCades(c.value)\" class=\"btn btn-xs btn-white text-left\" style=\"width:90%;white-space: normal\">{{c.text}}</button><div ng-show=\"saving\" class=\"st-preloader-bl\"></div></div><div ng-show=\"certs.length < 1\" class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div class=\"col-md-4\"><h2 class=\"appl-heading\">Статус плагина:</h2><div ng-show=\"!cadesinfo.status\"><span class=\"label label-danger\">Плагин не загружен</span></div><div ng-show=\"cadesinfo.status\"><span class=\"label label-success\">Плагин загружен</span><table style=\"margin: 10px 0px\"><tr><td>Версия плагина: &nbsp</td><td><span class=\"badge\">{{cadesinfo.plug_ver}}</span></td></tr><tr><td>Версия КриптоПро CSP: &nbsp</td><td><span class=\"badge\">{{cadesinfo.csp_ver}}</span></td></tr></table></div></div></div></div><div class=\"appl-form-ctrl\" ng-hide=\"signer=='2' && reqStatus.code == 101\"><a ng-hide=\"signing || reqStatus.code == 101\" href=\"javascript:history.back()\" class=\"btn btn-white\">Назад</a> <a ng-show=\"reqStatus.code == 101 && sessionUserId == request.userId\" ng-click=\"backToDraft()\" class=\"btn btn-white\">Редактировать заявление</a> <a ng-show=\"signing\" ng-click=\"signing = false;\" class=\"btn btn-white\">Редактировать заявление</a> <button class=\"btn btn-blue\" ng-click=\"submitForm()\" ng-hide=\"!isEditable\" ng-if=\"!signing\" ng-disabled=\"isBlock() || !isValid()\">Отправить заявление</button> <button class=\"btn btn-blue\" ng-click=\"submitSecond()\" ng-show=\"reqStatus.code == 101 && sessionUserId != request.userId && request.model.isSimpleSign\" ng-disabled=\"!isValid()\">Отправить заявление</button> &nbsp <button class=\"btn btn-blue\" ng-click=\"save()\" ng-hide=\"!isEditable\"><i ng-show=\"saving\" class=\"fa fa-circle-o-notch fa-spin\">&nbsp</i> Сохранить черновик</button> &nbsp</div></div></div></div></div></div>"
  );


  $templateCache.put('/homepage/homepage.26.template.html',
    "<div class=\"st-main homepage\"><div class=\"row\"><div class=\"col-md-8\"><ng-include src=\"includes.searchForm\" include-replace></ng-include></div><div class=\"col-md-4\"><div class=\"gibdd-banner\"><p class=\"gibdd-banner__heading\">Постановления<br>ЦАФАП ГИБДД СК</p><a class=\"btn btn-blue\" data-toggle=\"modal\" data-target=\"#gibddPromoBannerModal\">Перейти</a></div></div></div><popular-services></popular-services><div class=\"row info-footer mb-3\"><div class=\"col-md-4\"><ng-include src=\"includes.record\" include-replace></ng-include></div><div class=\"col-md-4\"><ng-include src=\"includes.stats\" include-replace></ng-include></div><div class=\"col-md-4\"><ng-include src=\"includes.dosAppeal\" include-replace></ng-include></div></div></div><div class=\"modal fade\" tabindex=\"-1\" id=\"gibddPromoBannerModal\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">Получение постановлений ГИБДД на электронную почту</h4></div><div class=\"modal-body\"><p>Госуслуги края дают возможность получать постановления ГИБДД в электронном виде на свой адрес электронной почты.</p><p class=\"info-success\">Это удобно – не нужно ходить на почту за заказным письмом.</p><p class=\"info-success\">Это быстро – просто откройте свою электронную почту.</p><p class=\"info-success\">Это выгодно – больше времени, чтобы получить 50% скидку при оплате штрафов ГИБДД (в течение 20 дней со дня вынесения).</p><p class=\"info-success\">Это законно – такую возможность предусматривает Кодекс об административных правонарушениях Российской Федерации.</p><p>Если вы хотите получать постановления ГИБДД на свою электронную почту, в соответствии с требованиями КоАП РФ, необходимо Ваше согласие.</p></div><div class=\"modal-footer\"><div class=\"d-flex justify-content-between align-items-center\"><span class=\"gibdd-icon\"></span> <button type=\"button\" class=\"btn btn-blue\" ng-click=\"goToGibddFromModal()\">Перейти</button></div></div></div></div></div>"
  );


  $templateCache.put('/includes/dos-appeal.tmpl.html',
    "<section class=\"info-panel\"><h2 class=\"title\">Досудебное обжалование</h2><p>Возникли проблемы с получением государственных и муниципальных услуг?</p><p><a href=\"{{'personcab/dos_appeal'|s1Url}}\" class=\"btn btn-sm btn-blue\">Подать жалобу</a></p></section>"
  );


  $templateCache.put('/includes/footer.tmpl.html',
    "<footer class=\"st-footer\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-3\"><div class=\"logo\"><img ng-src=\"{{'assets/images/logo.' + '26' + '.png'|s1Url}}\" alt=\"ГосУслуги\"></div></div><div class=\"col-md-9\"><nav class=\"nav-info\"><ul class=\"nav-info-menu\"><li><a href=\"{{'about'|s1Url}}\">О портале</a></li><li><a href=\"{{'terms'|s1Url}}\">Условия использования</a></li><li><a href=\"{{'privacy'|s1Url}}\">Конфиденциальность</a></li><li><a href=\"{{'support'|s1Url}}\">Обратиться в техподдержку</a></li></ul></nav><footer-address></footer-address></div></div></div><div class=\"st-footer-line\"><div class=\"container-fluid\" style=\"border-top: 1px solid #c6cecf;padding: 3rem 15px\"><div class=\"row\"><div class=\"col-lg-9\"><p class=\"copyright\">&copy; <a href=\"http://www.stavminprom.ru/\">2013 Министерство энергетики, промышленности и связи Ставропольского края.</a> Все права защищены</p></div><div class=\"col-lg-3\"><div><a href=\"https://itunes.apple.com/ru/app/id1382887964\" target=\"_blank\" title=\"Загрузите в App Store\"><img src=\"{{'assets/images/appstore.png'|s1Url}}\" width=\"120\"> </a><a href=\"https://play.google.com/store/apps/details?id=ru.pkd.gosuslugi\" target=\"_blank\" title=\"Доступно в Google Play\"><img src=\"{{'assets/images/playmarket.png'|s1Url}}\" width=\"120\"></a></div></div></div></div></div></footer>"
  );


  $templateCache.put('/includes/gibddBanner.tmpl.html',
    "<section class=\"info-panel\"><h2 class=\"title\">Вы можете получать постановления ЦАФАП ГИБДД СК на электронную почту</h2><p><button type=\"button\" class=\"btn btn-sm btn-blue\" ng-click=\"goToGibdd()\">Перейти</button></p></section>"
  );


  $templateCache.put('/includes/header-desktop.tmpl.html',
    "<header class=\"st-header\"><div class=\"top-sidebar\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-10\"><top-header-menu></top-header-menu></div><div class=\"col-md-2\"><a onclick=\"jQuery('html').toggleClass('is-fontlarge');\" class=\"btn-font\"><b>+</b> &nbsp;Аа Увеличить шрифт</a></div></div></div></div><nav class=\"nav\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-4\"><div class=\"logo\"><a href=\"{{''|s1Url}}\"><img ng-src=\"{{'assets/images/logo.' + '26' + '.png'|s1Url}}\" alt=\"ГосУслуги\"></a></div></div><div class=\"col-md-2\"><nav-catalog></nav-catalog></div><div class=\"col-md-3\"><div ng-show=\"isIndex\"><a href=\"https://esia.gosuslugi.ru/public/ra/\" class=\"nav-button\"><i>Центры обслуживания ЕСИА</i></a></div><div ng-show=\"!isIndex\"><nav-recepients></nav-recepients></div></div><div class=\"col-md-3\"><cabinet></cabinet></div></div></div></nav></header>"
  );


  $templateCache.put('/includes/header-mobile.tmpl.html',
    "<header class=\"st-header_mob\"><div class=\"top-sidebar_mob\"><div class=\"container-fluid\"><button class=\"nav_mob-btn\"><span></span> <span></span> <span></span> <span></span></button><div class=\"cabinet_mob\"><div ng-show=\"!$mainCtrl.user || $mainCtrl.user.id=='anonymous'\"><button class=\"cabinet_mob-link is_link\"><a href=\"{{'esia'|s1Url}}\"><span class=\"icon-auth\"></span></a></button></div><div ng-show=\"$mainCtrl.user && $mainCtrl.user.id!='anonymous'\"><button class=\"cabinet_mob-link\"><span class=\"icon-auth\"></span></button><div class=\"cabinet_mob-dropdown\"><ul class=\"cabinet_mob-dropdown-menu\"><li class=\"is-active\"><a href=\"{{'personcab/index?tab=mydata'|s1Url}}\">Мои данные</a></li><li><a href=\"{{'personcab/index?tab=statement'|s1Url}}\">Мои заявления</a></li><li><a href=\"{{'personcab/index?tab=payment'|s1Url}}\">Начисления и платежи</a></li><li><a href=\"{{'personcab/index?tab=record'|s1Url}}\">Запись на прием</a></li><li><a href=\"{{'personcab/index?tab=my-records'|s1Url}}\">Мои записи</a></li><li><a href=\"{{'rest/oauth/logout'|s1Url}}\">Выйти из личного кабинета</a></li></ul></div></div></div><div class=\"search_mob\"><form action=\"#\"><input type=\"text\" placeholder=\"Поиск\" class=\"search_mob-input\"> <button class=\"search_mob-btn\"><span class=\"icon-search\"></span></button></form></div></div></div><nav class=\"nav_mob\"><div class=\"container-fluid\"><ul class=\"nav_mob-menu\"><li><a href=\"{{'rgu/category_list'|s1Url}}\">Категории услуг</a></li><li><a href=\"{{'rgu/dept_list'|s1Url}}\">Органы власти</a></li><li><a href=\"{{'rgu/case_list'|s1Url}}\">Жизненные ситуации</a></li><li><a href=\"#\">{{recieverTypeName}}</a></li><li><a href=\"http://www.stavregion.ru/\">Сайт региона</a></li><li><a href=\"http://www.control26.ru/\" target=\"_blank\">Народный контроль</a></li><li><a href=\"http://umfc26.ru/index.php\" target=\"_blank\">МФЦ</a></li><li id=\"transport-head-button\"><a href=\"{{'transport'|s1Url}}\">Транспорт</a></li><li><a href=\"http://dsreda.stavregion.ru/home\" target=\"_blank\">Доступная среда</a></li></ul></div></nav><div class=\"container-fluid\"><div class=\"logo\"><a href=\"{{''|s1Url}}\"><img ng-src=\"{{'assets/images/logo.' + '26' + '.png'|s1Url}}\" alt=\"ГосУслуги\"></a></div></div></header>"
  );


  $templateCache.put('/includes/poll.tmpl.html',
    "<div class=\"info-panel\" style=\"margin-bottom: 10px\" ng-show=\"poll && poll.status=='ready' && poll.active\"><div class=\"row\" style=\"min-width: 620px\"><div class=\"col-md-8\"><a href=\"{{'personcab/poll_list'|s1Url}}\" class=\"btn btn-xs btn-primary\"><b>Все опросы</b></a></div></div><div ng-show=\"poll.error\"><br><h4>Ошибка:</h4><p>{{poll.error.message}}</p></div></div><figure ng-show=\"!poll\" class=\"appointment-image\"><img ng-src=\"{{'assets/images/img-appointment.png'|s1Url}}\" alt=\"\"></figure>"
  );


  $templateCache.put('/includes/record.tmpl.html',
    "<section class=\"info-panel\"><h2 class=\"title\">Запись на прием</h2><p>Записаться на прием в муниципальные, региональные ведомства или МФЦ</p><p><a href=\"{{'personcab/index?tab=record'|s1Url}}\" class=\"btn btn-sm btn-blue\">Записаться на прием</a></p></section>"
  );


  $templateCache.put('/includes/searchForm.tmpl.html',
    "<div class=\"search-main-form\"><form name=\"form_search\" role=\"form\" ng-submit=\"search_service(search_text)\"><p class=\"search-main-heading\">Чем мы можем Вам помочь?</p><div class=\"search-main-form-field\"><input type=\"text\" ng-model=\"search_text\" placeholder=\"Введите название услуги\" class=\"search-main-input\"> <input type=\"submit\" value=\"Найти\" class=\"search-main-btn\"></div><small class=\"search-main-text\"><b>Например:</b> <i>загран паспорт</i></small></form></div>"
  );


  $templateCache.put('/includes/stats.tmpl.html',
    "<section class=\"info-panel\"><div style=\"text-align: center\"><h2 class=\"title\">Количество услуг, оказываемых в электронной форме</h2><h1>{{formStats.psPassportCount}}</h1></div></section>"
  );


  $templateCache.put('/personcab/appealList.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"appl-table-scroll\" ng-show=\"status=='ready'\"><div class=\"search-form mb-2\"><div class=\"c-field m-0\"><label class=\"c-field-label\">Статус</label><select class=\"form-control m-0\" style=\"padding-left: 6px; border-radius: 4px\" ng-model=\"filter.state\" ng-change=\"refresh()\"><option ng-repeat=\"status in stateList\" value=\"{{status.key}}\">{{status.value}}</option></select></div></div><table class=\"appl-table\"><thead><tr><th width=\"20\"></th><th>Вх. номер</th><th>Дата и время приёма жалобы</th><th>Срок рассмотрения жалобы</th><th>Статус</th><th></th></tr></thead><tbody ng-repeat=\"item in list\"><tr class=\"appl-table-trigger\" ng-class=\"{'is-active': item.expanded}\" ng-click=\"onExpandClick(item)\" style=\"cursor: pointer\"><td><span class=\"icon-collapse\"></span></td><td colspan=\"{{item.serviceResult ? 1 : 3}}\">{{item.serviceResult ? item.serviceResult.title : \"\"}}</td><td ng-if=\"item.serviceResult\">{{item.serviceResult.creationDate}}</td><td ng-if=\"item.serviceResult\">{{addInterval(moment(), item.serviceResult.timeToClosed) | dateFormat}}</td><td>{{getStateText(item)}}</td><td class=\"table-trobber text-right\"><img ng-show=\"!item.serviceResult\" ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></td></tr><tr class=\"appl-table-details\" ng-class=\"{'is-active': item.expanded}\"><td colspan=\"6\" ng-if=\"!item.serviceResult\"><div class=\"appl-table-content text-center\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></td><td colspan=\"6\" ng-if=\"item.serviceResult\"><div class=\"appl-table-content\"><div ng-if=\"item.serviceResult.waitWorkRes && item.serviceResult.state == 'waitCorrect'\"><h3 class=\"appl-heading\">Результат ФЛК</h3><p>{{item.serviceResult.waitWorkRes}}</p></div><div class=\"row\"><div class=\"col-md-6\"><div class=\"alert alert-info\"><h3 class=\"appl-heading\">Информация о жалобе</h3><div class=\"mb-2\" ng-if=\"item.serviceResult.slmService.title\"><label>Документ или услуга, за получением которой Вы обращались</label><div>{{item.serviceResult.slmService.title}}</div></div><div class=\"mb-2\" ng-if=\"item.serviceResult.sProvider.title\"><label>Ведомство, на которое Вы жалуетесь</label><div>{{item.serviceResult.sProvider.title}}</div></div><div class=\"mb-2\" ng-if=\"item.serviceResult.dlToService\"><label>Сотрудник, с которым Вы общались</label><div>{{item.serviceResult.dlToService}}</div></div><div class=\"mb-2\" ng-if=\"item.serviceResult.dateToService\"><label>Дата подачи заявления на получение услуги</label><div>{{item.serviceResult.dateToService}}</div></div><div class=\"mb-2\" ng-if=\"item.serviceResult.ARequirement\"><label>Требования (цель) подачи жалобы</label><div>{{item.serviceResult.ARequirement}}</div></div></div></div><div class=\"col-md-6\"><div class=\"alert alert-info\"><h3 class=\"appl-heading\">Причины подачи жалобы</h3><p ng-repeat=\"obj in item.serviceResult.appealCase.objects\">{{obj.title}}</p></div><div class=\"alert alert-info\" ng-if=\"item.serviceResult.appealText\"><h3 class=\"appl-heading\">Комментарий</h3><p>{{item.serviceResult.appealText}}</p></div><div class=\"alert alert-info\" ng-if=\"item.serviceResult.appealBasis\"><h3 class=\"appl-heading\">Дополнительные сведения</h3><p>{{item.serviceResult.appealBasis}}</p></div></div></div><div class=\"row\"><div class=\"col-md-6\"><div ng-if=\"item.serviceResult.aSurname || item.serviceResult.aName || item.serviceResult.aMiddleName || item.serviceResult.aPhone || item.serviceResult.aEmail || item.serviceResult.aPostAddress\" class=\"alert alert-info\"><h3 class=\"appl-heading\">Персональные данные заявителя</h3><div ng-if=\"item.serviceResult.aSurname || item.serviceResult.aName || item.serviceResult.aMiddleName\"><label>ФИО</label><p>{{item.serviceResult.aSurname}} {{item.serviceResult.aName}} {{item.serviceResult.aMiddleName}}</p></div><div ng-if=\"item.serviceResult.aPhone\"><label>Контактный телефон</label><p>{{item.serviceResult.aPhone}}</p></div><div ng-if=\"item.serviceResult.aEmail\"><label>Электронная почта</label><p>{{item.serviceResult.aEmail}}</p></div><div ng-if=\"item.serviceResult.aPostAddress\"><label>Почтовый адрес заявителя</label><p>{{item.serviceResult.aPostAddress}}</p></div></div></div><div class=\"col-md-6\"><div class=\"alert alert-info\" ng-if=\"isAdditionDetails(item.serviceResult)\"><div ng-if=\"item.serviceResult.replyType.items\"><h3 class=\"appl-heading\">Способ получения ответа</h3><p ng-repeat=\"replyType in item.serviceResult.replyType.items\">{{replyType.title}}</p></div><div ng-if=\"item.serviceResult.fileFromApplic.objectsStr\"><h3 class=\"appl-heading\">Файлы от Заявителя</h3><p ng-repeat=\"uuid in item.serviceResult.fileFromApplic.objectsStr\"><a href=\"{{'rest/appeal/get_file/' + uuid | s1Url}}\" class=\"btn btn-sm btn-blue\" target=\"_blank\">Скачать файл</a></p></div><div ng-if=\"item.serviceResult.fileRedirect.objectsStr\"><h3 class=\"appl-heading\">Доп. файлы по перенаправлению</h3><p ng-repeat=\"uuid in item.serviceResult.fileRedirect.objectsStr\"><a href=\"{{'rest/appeal/get_file/' + uuid | s1Url}}\" class=\"btn btn-sm btn-blue\" target=\"_blank\">Скачать файл</a></p></div><div ng-if=\"item.serviceResult.fileFromAgent.objectsStr\"><h3 class=\"appl-heading\">Полномочие представителя Заявителя</h3><p ng-repeat=\"uuid in item.serviceResult.fileFromAgent.objectsStr\"><a href=\"{{'rest/appeal/get_file/' + uuid | s1Url}}\" class=\"btn btn-sm btn-blue\" target=\"_blank\">Скачать файл</a></p></div><div ng-if=\"item.serviceResult.fileFromOIV.objectsStr\"><h3 class=\"appl-heading\">Доп. файлы по решению</h3><p ng-repeat=\"uuid in item.serviceResult.fileFromOIV.objectsStr\"><a href=\"{{'rest/appeal/get_file/' + uuid | s1Url}}\" class=\"btn btn-sm btn-blue\" target=\"_blank\">Скачать файл</a></p></div><div ng-if=\"item.serviceResult.printFrom.objectsStr\"><h3 class=\"appl-heading\">Печатная форма жалобы</h3><p ng-repeat=\"uuid in item.serviceResult.printFrom.objectsStr\"><a href=\"{{'rest/appeal/get_file/' + uuid | s1Url}}\" class=\"btn btn-sm btn-blue\" target=\"_blank\">Скачать файл</a></p></div><div ng-if=\"item.serviceResult.medoFiles.objectsStr\"><h3 class=\"appl-heading\">medoFiles</h3><p ng-repeat=\"uuid in item.serviceResult.medoFiles.objectsStr\"><a href=\"{{'rest/appeal/get_file/' + uuid | s1Url}}\" class=\"btn btn-sm btn-blue\" target=\"_blank\">Скачать файл</a></p></div></div></div></div><span ng-if=\"item.serviceResult.state == 'waitCorrect'\"><a class=\"btn btn-sm btn-blue mr-2\" style=\"margin-bottom: 10px\" href=\"{{'personcab/dos_appeal?uuid=' + item.extId | s1Url}}\"><i class=\"fa fa-pencil\"></i> Редактировать</a></span><h3 ng-if=\"item.history\">История обработки</h3><div ng-repeat=\"historyItem in item.history\" class=\"mb-2\"><strong class=\"mb-1\">{{historyItem.title}}</strong><div class=\"row\"><div class=\"col-sm-3\">Дата события</div><div class=\"col-sm-4\">{{historyItem.creationDate}}</div></div><div class=\"row\"><div class=\"col-sm-3\">Статус</div><div class=\"col-sm-4\">{{historyItem.stateApp}}</div></div><div ng-if=\"historyItem.details.Response_ou\" class=\"row\"><div class=\"col-sm-3\">Ответственный (Организация)</div><div class=\"col-sm-4\">{{historyItem.Response_ou.title}}</div></div></div></div></td></tr></tbody></table></div>"
  );


  $templateCache.put('/personcab/appointments.template.html',
    "<style>.appl-list {\n" +
    "        padding-left: 0;\n" +
    "        padding-right: 0;\n" +
    "        display: -webkit-flex;\n" +
    "        display: -moz-flex;\n" +
    "        display: -ms-flex;\n" +
    "        display: -o-flex;\n" +
    "        display: flex;\n" +
    "        flex-wrap: wrap;\n" +
    "        justify-content: space-between;\n" +
    "    }\n" +
    "    .appl-list li {\n" +
    "        padding: 1px;\n" +
    "        margin-bottom: 10px;\n" +
    "        flex: 0 0 49.4%;\n" +
    "        display: -webkit-flex;\n" +
    "        display: -moz-flex;\n" +
    "        display: -ms-flex;\n" +
    "        display: -o-flex;\n" +
    "        display: flex;\n" +
    "        min-height: 96px;\n" +
    "    }\n" +
    "    .appl-link.appl-appointment,\n" +
    "    .appl-link.appl-mfc {\n" +
    "        flex: 1;\n" +
    "        padding: 1.4rem 2rem 1.6rem 5.125rem;\n" +
    "        border: 1px solid rgba(15,15,15, 0.14);\n" +
    "        border-radius: 2px;\n" +
    "        box-shadow: 0 0 6px 0px transparent;\n" +
    "        transition: box-shadow 0.3s;\n" +
    "    }\n" +
    "    .appl-link.appl-appointment:hover,\n" +
    "    .appl-link.appl-mfc:hover {\n" +
    "        box-shadow: 0 0 6px 0px rgba(15,15,15, 0.24);\n" +
    "    }\n" +
    "    .appl-link.appl-appointment::after,\n" +
    "    .appl-link.appl-mfc::after {\n" +
    "        top: 1.6rem;\n" +
    "        left: 1.25rem;\n" +
    "    }</style><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><section class=\"lk\"><div class=\"container-fluid\"><div class=\"mb-2\"><label class=\"form-group-check\"><input type=\"radio\" name=\"statement\" ng-checked=\"requestChecked('REGIONAL')\" ng-click=\"orgType='REGIONAL'\"> <span class=\"btn btn-white\">Региональные</span></label><label class=\"form-group-check\"><input type=\"radio\" name=\"statement\" ng-checked=\"requestChecked('MUNICIPAL')\" ng-click=\"orgType='MUNICIPAL'\"> <span class=\"btn btn-white\">Муниципальные</span></label><label class=\"form-group-check\"><input type=\"radio\" name=\"statement\" ng-checked=\"requestChecked('MFC')\" ng-click=\"orgType='MFC'\"> <span class=\"btn btn-white\">МФЦ</span></label></div><div ng-if=\"requestChecked('MFC') && status=='ready'\"><search-form show=\"1\" placeholder=\"Поиск...\" on-search=\"onSearch(val)\"></search-form></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><div class=\"appl\" ng-show=\"orgCount>0\"><ul class=\"appl-list\" ng-if=\"!requestChecked('MFC')\"><li ng-repeat=\"item in data\"><a href=\"{{'personcab/appointments_places?id=' + item.id |s1Url}}\" class=\"appl-link appl-appointment\"><p class=\"mb-05\"><b>{{item.name}}</b> <span class=\"icon-right-open\"></span></p><span ng-show=\"item.dept\">{{item.dept.title}}</span></a></li></ul><ul class=\"appl-list\" ng-if=\"requestChecked('MFC')\"><li ng-repeat=\"item in mfcList\"><a href=\"{{'personcab/record_mfc?code=' + item.value + '&name=' + item.name |s1Url}}\" class=\"appl-link appl-mfc\"><p class=\"mb-05\"><b>{{item.mfcName}}</b> <span class=\"icon-right-open\"></span></p><span>{{item.name}}</span></a></li></ul></div></div><div ng-show=\"status=='ready' && !requestChecked('MFC')\"><div ng-show=\"orgCount>0\"><div class=\"mt-2\"><s1-paging skip=\"requestSkip\" max=\"requestMax\" count=\"orgCount\" on-change=\"organizationList()\"></s1-paging></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && orgCount==0\"><div class=\"well well-small\" style=\"display:inline-block\">Нет доступных организаций</div></div></div></section>"
  );


  $templateCache.put('/personcab/appointmentsPlaces/appointmentsPlaces.template.html',
    "<section class=\"lk\" ng-show=\"select=='ready'\"><div class=\"appl\"><div class=\"row\"><form class=\"appl-form\"><div class=\"col-sm-6 col-md-5\"><h2 class=\"appl-heading\">{{org.name}}</h2><div class=\"form-group c-field\"><label>Выберите вопрос:</label><oi-select oi-options=\"c as (c.name+' - '+(c.length/60000)+' мин.') for c in local.questions\" ng-model=\"local.question\" placeholder=\"Введите часть вопроса\" required></oi-select></div><div ng-if=\"local.question\" class=\"form-group c-field\"><label>Выберите сотрудника:</label><oi-select oi-options=\"c as c.name for c in local.resources\" ng-model=\"local.resource\" placeholder=\"\" required></oi-select></div></div><div class=\"col-sm-6 col-md-7\"><div class=\"form-group c-field\" style=\"min-height: 520px\"><div ng-if=\"local.resource\" class=\"if-animation\"><h3 class=\"appl-heading\" ng-hide=\"local.interval\">Выберите время:</h3><div ng-show=\"!local.interval\" style=\"padding-top: 2px\"><resource-schedule id=\"{{id}}\" resource=\"local.resource\" data=\"local.interval\" question=\"local.question\" notitle=\"true\"></resource-schedule></div></div><div ng-if=\"local.interval\" class=\"if-animation\"><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><div class=\"appl-note\"><div class=\"appl-success\"><figure class=\"appl-success-image\"><img ng-src=\"{{'assets/svg/icon-appl-success.svg'|s1Url}}\"></figure><p class=\"appl-success-text\">Вы успешно записались на прием!</p><p class=\"appl-success-links\"><a href=\"{{'personcab/index'|s1Url}}\"><span class=\"icon-user\"></span> Перейти в личный кабинет</a></p></div></div></div></div></div></div></form></div></div></section>"
  );


  $templateCache.put('/personcab/archiveRequest/archiveRequest.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-danger\"><h4><strong>Ошибка</strong></h4><p>{{error.message}}</p><br><a href ng-click=\"refresh()\" title=\"Обновить\"><i class=\"fa fa-undo fa-4x\"></i></a></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-hide=\"status=='loading' || status=='error'\" style=\"margin-top: 20px\"><div class=\"container-fluid\"><div class=\"appl-table-scroll\"><table class=\"appl-table\"><thead><tr><th>Статус</th><th>№ заявления</th><th>Услуга</th><th>Ведомство</th><th>Дата</th></tr></thead><tbody ng-repeat=\"request in requestList\"><tr ng-class=\"{true:'appl-table-trigger is-active', false:'appl-table-trigger'}[requestSkip == 0 && $index==0]\"><td data-th=\"Статус:\" class=\"no-wrap\"><span class=\"icon-collapse\"></span> {{request.status[request.status.length - 1].title}}</td><td data-th=\"№ заявления:\">{{request.number}}</td><td data-th=\"Услуга:\">{{request.procedureTitle}}</td><td data-th=\"Ведомство:\">{{request.deptTitle}}</td><td data-th=\"Дата:\">{{request.date | date:'dd.MM.yyyy HH:mm'}}</td></tr><tr ng-class=\"{true:'appl-table-details is-active', false:'appl-table-details'}[requestSkip == 0 && $index==0]\" ng-show=\"request.status.length > 0\"><td colspan=\"5\"><div class=\"appl-table-content\"><ol class=\"appl-table-details-list\"><li ng-repeat=\"status in request.status\"><div class=\"row\"><div class=\"col-md-4\"><strong class=\"appl-table-datails-title\">{{status.title}}</strong></div><div class=\"col-md-4\"><time class=\"appl-table-datails-date\">{{status.addDate | date:'dd.MM.yyyy HH:mm'}}</time><p>{{status.comment}}</p></div><div class=\"col-md-4\"><p class=\"appl-table-datails-text\">{{status.author}}<br><span ng-repeat=\"file in status.files\"><a href=\"{{'rest/serviceRequestArchive/getArchiveFile/' + file.file.id|s1Url}}\" target=\"_blank\">{{file.name + '.' + file.ext}}</a><br></span></p></div></div></li></ol></div></td></tr></tbody></table></div><div style=\"padding:10px;text-align:center\" ng-show=\"requestList.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div></div></div>"
  );


  $templateCache.put('/personcab/asp_request.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"container-fluid\" style=\"margin-top: 20px\" ng-show=\"status=='ready'\"><form name=\"form\" sf-schema=\"super_model.schema\" sf-form=\"super_model.form\" sf-model=\"super_model.model\" sf-options=\"{destroyStrategy: 'retain'}\"></form><div align=\"center\"><button ng-click=\"emptyModel()\" class=\"btn btn-success\" style=\"margin-top: 10px; margin-bottom: 10px\"><i class=\"fa fa-database\"></i> Очистить форму</button> <button class=\"btn btn-info\" ng-click=\"Submit()\" style=\"margin-top: 10px; margin-bottom: 10px\"><i class=\"fa fa-university\"></i> Отправить запрос</button></div><div ng-hide=\"status=='loading' || status=='error'\"><div ng-show=\"debugShow\"><label align=\"center\">Модель и ее значение</label><br><pre>{{super_model.model | json}}</pre></div></div><div ng-hide=\"status=='loading' || status=='error'\"><div ng-show=\"debugShow\"><label align=\"center\">Схема</label><br><pre>{{request.schema | json}}</pre></div></div><div ng-hide=\"status=='loading' || status=='error'\"><div ng-show=\"debugShow\"><label align=\"center\">Форма</label><br><pre>{{request.form | json}}</pre></div></div></div>"
  );


  $templateCache.put('/personcab/chargeListIPSH.template.html',
    "<div><div ng-if=\"tooLong\"><p>Пожалуйста, подождите еще немного, мы соединяем Вас с системой учета начислений и платежей...</p></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready' && nodoc\"><p>В личном кабинете не заполнены данные документа: {{nodoc}}</p><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"btn btn-sm btn-blue\">Перейти в Личный кабинет ЕСИА</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0 && !nodoc \"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"status=='ready'\"><button class=\"btn btn-xs btn-blue\" ng-click=\"refreshBills()\">Обновить список начислений</button><ul class=\"payments-list\"><li ng-repeat=\"r in list\"><div class=\"payments-item\"><div class=\"row\"><div class=\"col-sm-8\"><strong class=\"payments-item-title\">{{r.supplierName}}<ul class=\"payments-item-requisites\"><li>ИНН: {{r.supplierInn}}</li></ul><small>Дата выставления начисления: {{getDate(r.billDate) | dateFormat}}</small> <small>Дата получения начисления в ИПШ: {{getDate(r.createDate) | dateFormat}}</small> <small>{{r.comment}}</small> </strong><button ng-show=\"!r.details\" class=\"btn btn-xs btn-blue\" ng-click=\"showDetails(r)\">Реквизиты</button> <a href=\"{{'https://www.gosuslugi.ru/payment/' + r.billNumber + '?returnUrl=https://26gosuslugi.ru/'}}\">Оплатить</a> <a href=\"{{globalBackend + 'rest/ipsh/bills/' + r.billId + '/pdf'}}\" target=\"_blank\" class=\"btn btn-xs btn-blue\">Печать квитанции</a></div><div class=\"col-sm-4\"><div class=\"payments-item-ctrl\"><p class=\"payments-item-price\">{{r.amount}} <span class=\"icon-rouble\"></span></p><span class=\"label label-success\" ng-show=\"r.isPaid\">Оплачено</span><div class=\"alert alert-danger\" ng-if=\"r.error.message\"><i class=\"fa fa-warning-sign\"></i> {{r.error.message}}</div><div class=\"alert alert-danger\" ng-if=\"r.warning\" style=\"background-color: #FFA;color: #444\"><i class=\"fa fa-warning-sign\"></i> {{r.warning}}</div></div></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.error.message}}</p></div></div></li></ul><ul ng-if=\"data.numPages > 1\" uib-pagination boundary-links=\"true\" total-items=\"data.numPages*paging.size\" items-per-page=\"paging.size\" ng-model=\"paging.page\" ng-change=\"refresh()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></ul><div align=\"center\"><a href=\"javascript:void(0)\" class=\"btn btn-xs btn-primary\" ng-show=\"req_hasmore && !req_loading_more\" ng-click=\"more()\">Еще</a> <a href=\"javascript:void(0)\" class=\"btn btn-xs btn-primary disabled\" ng-show=\"req_loading_more\">Подготовка запроса...</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"req_loading_more\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></div>"
  );


  $templateCache.put('/personcab/chargeListIPSHDetails.template.html',
    "<div class=\"modal-header\"><h3 class=\"modal-title\" id=\"modal-title\" style=\"display: inline\">Платежные реквизиты</h3><i ng-click=\"$ctrl.close()\" class=\"fa fa-times\" aria-hidden=\"true\" style=\"float: right;cursor: pointer\"></i></div><div class=\"modal-body\" id=\"modal-body\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div ng-show=\"$ctrl.status=='ready'\"><div class=\"row\"><div class=\"col-sm-3\">Получатель</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.receiverName}}</div></div><div class=\"row\"><div class=\"col-sm-3\">ИНН</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.receiverInn}}</div></div><div class=\"row\"><div class=\"col-sm-3\">КПП</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.receiverKpp}}</div></div><div class=\"row\"><div class=\"col-sm-3\">БИК</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.bic}}</div></div><div class=\"row\"><div class=\"col-sm-3\">Банк</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.bankName}}</div></div><div class=\"row\"><div class=\"col-sm-3\">Счет</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.account}}</div></div><div class=\"row\"><div class=\"col-sm-3\">Описание платежа</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.payPurpose}}</div></div><div class=\"row\"><div class=\"col-sm-3\">ОКАТО</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.okato}}</div></div><div class=\"row\"><div class=\"col-sm-3\">КБК</div><div class=\"col-sm-9\">{{$ctrl.details.bill.payRequsites.kbk}}</div></div></div></div>"
  );


  $templateCache.put('/personcab/chargeListIPSHPaymentCommissions.template.html',
    "<div class=\"modal-header\"><h3 class=\"modal-title\" id=\"modal-title\" style=\"display: inline\">Выбор способа оплаты</h3><i ng-click=\"$ctrl.close()\" class=\"fa fa-times\" aria-hidden=\"true\" style=\"float: right;cursor: pointer\"></i></div><div class=\"modal-body\" id=\"modal-body\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-if=\"$ctrl.warning\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block;color: chocolate\"><h4>Предупреждение</h4><p>{{$ctrl.warning}}</p></div></div><div ng-show=\"$ctrl.status=='ready'\"><div class=\"row\"><div class=\"col-sm-5 payment-dlg\"><div class=\"row\"><div class=\"col-sm-12 payment-label\">Сумма платежа</div></div><div class=\"row\"><div class=\"col-sm-12\"><p class=\"payments-item-price\">{{$ctrl.details.bill.billSumm.amount[0].summ}} <span class=\"icon-rouble\"></span></p></div></div><div class=\"row\"><div class=\"col-sm-12 payment-label\">Наименование платежа</div></div><div class=\"row\"><div class=\"col-sm-12\">{{$ctrl.details.bill.billName}}</div></div><div class=\"row\"><div class=\"col-sm-6 payment-label\">Дата выставления счета</div><div class=\"col-sm-6 payment-label\">Уникальный Идентификатор</div></div><div class=\"row\"><div class=\"col-sm-6\">{{$ctrl.details.bill.billDate | dateFormat}}</div><div class=\"col-sm-6\">{{$ctrl.details.bill.billNumber}}</div></div><div class=\"row\"><div class=\"col-sm-12 payment-label\">Получатель платежа</div></div><div class=\"row\"><div class=\"col-sm-12\">{{$ctrl.details.bill.supplierName}} (ИНН: {{$ctrl.details.bill.supplierInn}})</div></div></div><div class=\"col-sm-7\"><uib-tabset ng-if=\"$ctrl.payment_comissions.payOptions.payOption\" type=\"pills\"><uib-tab heading=\"Банковская карта\"><ul class=\"payments-item-requisites\"><li ng-repeat=\"payOption in $ctrl.groups.CARD | orderBy:'payMethod.name'\"><label class=\"pay-system\"><div class=\"row\"><div class=\"col-sm-4 pay-system-black\"><input type=\"radio\" ng-model=\"$ctrl.selected.payOption\" ng-value=\"payOption\"> <img ng-if=\"$ctrl.selected.payOption === payOption\" ng-src=\"{{'assets/images/payment/checked.svg'|s1Url}}\" class=\"pay-system-check\"><div ng-if=\"$ctrl.selected.payOption !== payOption\" class=\"pay-system-check\"></div><span ng-if=\"payOption.cardInfo\">{{payOption.cardInfo.cardTypeCode}}</span> <span ng-if=\"!payOption.cardInfo\">Новая карта</span> <span ng-if=\"payOption.paymentInstrument\">{{payOption.paymentInstrument.name}}</span></div><div class=\"col-sm-4\"><span ng-if=\"payOption.fee != null\">Комиссия: {{payOption.fee}}р.</span></div><div class=\"col-sm-4\"><img ng-if=\"payOption.cardInfo.cardTypeCode == 'VISA' || !payOption.cardInfo\" ng-src=\"{{'assets/images/payment/VISA.svg'|s1Url}}\" class=\"pay-system\"> <img ng-if=\"payOption.cardInfo.cardTypeCode == 'MASTERCARD' || !payOption.cardInfo\" ng-src=\"{{'assets/images/payment/mc_vrt_pos.svg'|s1Url}}\" class=\"pay-system\"> <img ng-if=\"payOption.cardInfo.cardTypeCode == 'MAESTRO' || !payOption.cardInfo\" ng-src=\"{{'assets/images/payment/ms_vrt_pos.svg'|s1Url}}\" class=\"pay-system\"> <img ng-if=\"payOption.cardInfo.cardTypeCode == 'MIR' || !payOption.cardInfo\" ng-src=\"{{'assets/images/payment/mir_logo.svg'|s1Url}}\" class=\"pay-system\"></div></div></label></li></ul></uib-tab><uib-tab heading=\"Электронный кошелек\"><ul class=\"payments-item-requisites\"><li ng-repeat=\"payOption in $ctrl.groups.EMONEY | orderBy:'payMethod.name'\"><label class=\"pay-system\"><div class=\"row\"><div class=\"col-sm-4 pay-system-black\"><input type=\"radio\" ng-model=\"$ctrl.selected.payOption\" ng-value=\"payOption\"> <img ng-if=\"$ctrl.selected.payOption === payOption\" ng-src=\"{{'assets/images/payment/checked.svg'|s1Url}}\" class=\"pay-system-check\"><div ng-if=\"$ctrl.selected.payOption !== payOption\" class=\"pay-system-check\"></div><span>{{payOption.payMethod.name}}</span></div><div class=\"col-sm-4\"><span ng-if=\"payOption.fee != null\">Комиссия: {{payOption.fee}}р.</span></div><div class=\"col-sm-4\"><img ng-if=\"payOption.payMethod.code == 'webmoney'\" ng-src=\"{{'assets/images/payment/WEBMONEY.svg'|s1Url}}\" class=\"pay-system\"></div></div></label></li></ul></uib-tab></uib-tabset><div style=\"padding:10px;text-align:center\" ng-if=\"!$ctrl.payment_comissions.payOptions.payOption\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\">Нет доступных способов оплаты для данного начисления</div></div><button class=\"btn btn-xs btn-blue\" ng-click=\"$ctrl.pay($ctrl.selected.payOption)\" ng-if=\"$ctrl.selected.payOption\"><i ng-show=\"r.status=='loading'\" class=\"fa fa-circle-o-notch fa-spin\">&nbsp</i> Оплатить</button><div auto-submit-form=\"\" event=\"gateway.redirect\" form-data=\"$ctrl.paymentForm\"></div></div></div></div></div>"
  );


  $templateCache.put('/personcab/covid-19/__covid-19-qr.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><h1>Пропуск №{{$ctrl.pass.docNum}}</h1><div class=\"row\"><div class=\"col-lg-8\"><form action=\"#\"><fieldset><legend class=\"c-legend\">Основные личные данные</legend><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Фамилия</sup> <input value=\"{{$ctrl.pass.surName}}\" type=\"text\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Имя</sup> <input value=\"{{$ctrl.pass.firstName}}\" type=\"text\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Отчество</sup> <input value=\"{{$ctrl.pass.middleName}}\" type=\"text\" class=\"c-text\" readonly></div></div></div><legend class=\"c-legend\">Удостоверение личности</legend><div class=\"row\"><div class=\"col-sm-12\"><div class=\"c-field\"><sup class=\"c-field-label\">Наименование документа</sup> <input value=\"{{$ctrl.getDocName($ctrl.pass)}}\" type=\"text\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Серия документа</sup> <input value=\"{{$ctrl.pass.series}}\" type=\"text\" class=\"c-text\" readonly></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Номер документа</sup> <input value=\"{{$ctrl.pass.number}}\" type=\"text\" class=\"c-text\" readonly></div></div></div><legend class=\"c-legend\">Способ передвижения</legend><div class=\"row\"><div class=\"col-sm-12\"><input value=\"{{$ctrl.getWayToTravelCaption($ctrl.pass.wayToTravel)}}\" type=\"text\" class=\"c-text\" readonly></div></div><div ng-if=\"$ctrl.pass.wayToTravel == 'WALK'\"><legend class=\"c-legend\">Адрес выхода</legend><address-component address=\"$ctrl.pass.fromAddress\"></address-component></div><div ng-if=\"$ctrl.pass.wayToTravel == 'CAR'\"><legend class=\"c-legend\">Начальная точка</legend><address-component address=\"$ctrl.pass.fromAddress\"></address-component><legend class=\"c-legend\">Конечная точка</legend><address-component address=\"$ctrl.pass.toAddress\"></address-component><legend class=\"c-legend\">Гос. номер автомобиля</legend><div class=\"row\"><div class=\"col-sm-12\"><input value=\"{{$ctrl.pass.carLicensePlateNumber}}\" type=\"text\" class=\"c-text\" readonly></div></div></div><legend class=\"c-legend\">Причина выхода</legend><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Тип пропуска</sup> <input value=\"{{$ctrl.getPassTypeCaption($ctrl.pass.passType)}}\" type=\"text\" class=\"c-text\" readonly></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Время выхода</sup> <input value=\"{{$ctrl.pass.time|dateFormat:'DD.MM.YYYY HH:mm'}}\" type=\"text\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-6\"></div><div class=\"col-sm-6\"><div class=\"c-field\" ng-if=\"$ctrl.pass.endTime\"><sup class=\"c-field-label\">Заявка истекает</sup> <input value=\"{{$ctrl.pass.endTime|dateFormat:'DD.MM.YYYY HH:mm'}}\" type=\"text\" class=\"c-text\" readonly></div></div></div><legend class=\"c-legend\">Риск</legend><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><label>Опасность заражения</label><span ng-if=\"$ctrl.pass.isInfected\" class=\"dot red\"></span> <span ng-if=\"!$ctrl.pass.isInfected\" class=\"dot green\"></span></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><label>Статус заявки</label><span class=\"dot {{$ctrl.getStatusColor($ctrl.pass)}}\"></span></div></div></div></fieldset></form></div><div class=\"col-lg-4\"><div>Горячая линия: 8 (800) 1000 768</div><img style=\"width: 300px; height: 300px\" ng-src=\"{{'portal/rest/covid19/pass/' + $ctrl.passId + '/qr?width=300&height=300'}}\" alt=\"qr\"></div></div></status-wrapper>"
  );


  $templateCache.put('/personcab/covid-19/covid-19-list.component.html',
    "<div style=\"padding: 10px\"><div ng-show=\"!$ctrl.loading && !$ctrl.covidRole\"><div class=\"\" ng-if=\"$ctrl.userPass\"><status-wrapper><h1>Пропуск № {{$ctrl.userPass.docNum}}</h1><div ng-if=\"$ctrl.userPass.isInfected\" class=\"alert alert-error\"><legend class=\"c-legend\">Вы обнаружены в реестре лиц, больных COVID-19.<br>Если данная информация не соответствует действительности, рекомендуем обратиться в медицинское учреждение по месту Вашего пребывания.</legend></div><div ng-if=\"!$ctrl.userPass.isInfected\" class=\"alert alert-success\"><legend class=\"c-legend mb-0\">Риск заражения отсутствует</legend></div><div class=\"\"><img class=\"bordered\" style=\"width: 300px; height: auto\" ng-src=\"{{'portal/rest/covid19/permanent/qr?width=300&height=300'}}\" alt=\"qr-code\"></div></status-wrapper></div><div ng-if=\"!$ctrl.userPass\"><style>.qrCheckbox {\n" +
    "                    -webkit-appearance: none;\n" +
    "                    border: 3px solid #97A1A7;\n" +
    "                    width: 25px;\n" +
    "                    height: 25px;\n" +
    "                    background-color: #fafafa;\n" +
    "                    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), inset 0px -15px 10px -12px rgba(0, 0, 0, 0.05);\n" +
    "                    padding: 9px;\n" +
    "                    border-radius: 3px;\n" +
    "                    display: inline-block;\n" +
    "                    vertical-align: middle;\n" +
    "                    position: relative;\n" +
    "                    margin: 0 !important;\n" +
    "                }\n" +
    "\n" +
    "                .qrCheckbox:checked {\n" +
    "                    background-color: #2263b0;\n" +
    "                    border: 1px solid #adb8c0;\n" +
    "                    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), inset 0px -15px 10px -12px rgba(0, 0, 0, 0.05), inset 15px 10px -12px rgba(255, 255, 255, 0.1);\n" +
    "                    color: #99a1a7;\n" +
    "                }\n" +
    "\n" +
    "                .qrCheckbox:active, .regular-checkbox:checked:active {\n" +
    "                    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), inset 0px 1px 3px rgba(0, 0, 0, 0.1);\n" +
    "                }\n" +
    "\n" +
    "                .qrCheckbox:checked:after {\n" +
    "                    content: '\\2714';\n" +
    "                    font-size: 18px;\n" +
    "                    position: absolute;\n" +
    "                    top: -1px;\n" +
    "                    left: 4px;\n" +
    "                    color: #fff;\n" +
    "                }\n" +
    "\n" +
    "                .qrLabel {\n" +
    "                    display: inline-block;\n" +
    "                    vertical-align: middle;\n" +
    "                    cursor: pointer;\n" +
    "                }</style><div ng-if=\"$ctrl.noPhoneAndSnils()\" class=\"row mt-3\"><div class=\"col-md-10 alert alert-warning\"><p>Для получения QR-кода заполните данные о СНИЛС и номере мобильного телефона в личном кабинете портала Госуслуг.</p></div></div><div ng-if=\"!$ctrl.noPhoneAndSnils()\"><p>Оформляя QR-пропуск, даю свое <a href=\"/soglasie\">согласие на обработку персональных данных </a>и на получение оповещений в случае возможного контакта с лицами, имеющими установленный диагноз COVID-2019</p><div style=\"margin: 10px 0 20px 0\"><button ng-click=\"$ctrl.getPass()\" class=\"btn btn-blue\">Получить пропуск</button></div></div></div><div class=\"mt-3\" style=\"padding:10px\" ng-show=\"$ctrl.error\"><div class=\"alert alert-danger fade in\" style=\"text-align-last: center\"><strong>Ошибка! </strong>{{$ctrl.error}}</div></div></div></div>"
  );


  $templateCache.put('/personcab/covid-19/covid-19-organizationList.template.html',
    "<div class=\"container-fluid\"><h2 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 0px\" ng-show=\"status=='ready' && list.length > 0\">Запись на прием для выдачи специального пропуска на въезд выезд и передвижения</h2><div class=\"admin-new-org\"><div class=\"row\"><div class=\"col-md-12\"><div class=\"input-group\" style=\"margin:10px 0\"><input class=\"form-control search\" ng-model=\"search\" placeholder=\"Введите часть названия организации, код ...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech ng-keydown=\"onSearchKeyDown($event)\"> <span class=\"input-group-btn\"><button class=\"btn btn-success btn-xs\" type=\"button\" ng-click=\"refresh()\"><i class=\"fa fa-search\"></i>&nbsp;</button></span></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"appl-table-scroll\" ng-show=\"status=='ready' && list.length>0\"><table class=\"appl-table\"><thead><tr><th>Ведомство</th></tr></thead><tbody ng-repeat=\"r in list\"><tr ng-click=\"onRowClick(r)\" style=\"cursor: pointer\"><td data-th=\"Ведомство:\">{{r.dept.title}}</td></tr></tbody></table><s1-paging count=\"count\" max=\"max\" skip=\"skip\" on-change=\"refresh()\"></s1-paging></div></div></div>"
  );


  $templateCache.put('/personcab/covid-19/covid-19-pass.component.html',
    "<h1>{{$ctrl.title}}</h1><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div ng-if=\"!$ctrl.isLoggedIn && !$ctrl.skipLogin\"><h2>Вы не авторизованы</h2><p>Авторизуйтесь с помощью учётной записи портала Госуслуг для ускорения процедуры оформления цифрового пропуска</p><p><button class=\"btn btn-blue\" ng-click=\"$ctrl.login()\">Авторизация</button></p><p><a href=\"https://esia.gosuslugi.ru/registration/\" target=\"_blank\">пройти процедуру регистрации на портале Госуслуг</a></p><p><a ng-click=\"$ctrl.skipLogin = true\">Продолжить без авторизации</a></p></div><div ng-if=\"$ctrl.isLoggedIn || $ctrl.skipLogin\"><formio form=\"$ctrl.formTemplate\" submission=\"$ctrl.model\" url=\"'_'\"></formio><button class=\"btn btn-blue\" ng-click=\"$ctrl.handleSubmit()\" ng-disabled=\"!$ctrl.isValid()\">Отправить</button></div></status-wrapper>"
  );


  $templateCache.put('/personcab/covid-19/covid-19-qr-org.component.html',
    "<div ng-style=\"$ctrl.qrOrgWrapperStyle\"><div ng-style=\"$ctrl.formOverlay\"><div ng-style=\"$ctrl.formModal\"><img ng-style=\"$ctrl.formModalImg\" ng-src=\"/assets/images/logo.26.png\" alt=\"ГосУслуги\"><div ng-style=\"$ctrl.formModalContent\"><div ng-if=\"!$ctrl.grantedInfo\"><div ng-style=\"$ctrl.formModalHeader\"><div ng-show=\"$ctrl.phoneMode\"><p ng-style=\"$ctrl.titleHeader\">Вход по номеру телефона</p><p ng-show=\"$ctrl.orgInfo.name\" ng-style=\"$ctrl.titleHeader\">в <strong>\"{{$ctrl.orgInfo.name}}\"</strong></p></div><div ng-show=\"!$ctrl.phoneMode\"><p ng-style=\"$ctrl.titleHeader\">Введите код подтверждения:</p></div></div><form class=\"form-horizontal\" ng-submit=\"$ctrl.submitPhone()\"><div class=\"modal-body\" style=\"padding: 0 15px;margin-bottom: 5px\"><div class=\"form-group row\"><div class=\"col\" ng-show=\"$ctrl.phoneMode\"><style>.inputWrapper {\n" +
    "                                            position: relative;\n" +
    "                                        }</style><div class=\"inputWrapper\"><input minlength=\"14\" ui-mask=\"+7(999)9999999\" class=\"form-control\" type=\"tel\" ng-model=\"$ctrl.phone\"></div></div><div class=\"col\" ng-show=\"!$ctrl.phoneMode\"><input maxlength=\"4\" placeholder=\"Код подтверждения\" class=\"form-control\" ng-style=\"$ctrl.formPhoneInputCode\" type=\"tel\" ng-model=\"$ctrl.code\"></div></div></div><div ng-show=\"$ctrl.statusError\" class=\"bg-danger my-10px\"><div style=\"padding: 5px 0\">{{$ctrl.statusError}}</div></div><button type=\"submit\" ng-style=\"$ctrl.submitStyle\" class=\"btn btn-blue\">Отправить</button><p ng-if=\"$ctrl.phoneMode\" style=\"margin: 10px 0 0 0;font-size: 12px\">Нажимая кнопку отправить, даю свое <a href=\"/soglasie\">согласие на обработку персональных данных </a>и на получение оповещений в случае возможного контакта с лицами, имеющими установленный диагноз COVID-2019</p></form></div><div ng-if=\"$ctrl.grantedInfo\"><div ng-style=\"$ctrl.grantedIcon\"><i ng-if=\"!$ctrl.grantedInfo.isInfected\" class=\"fa fa-check fa-2x\" style=\"color: #28a745\"></i> <i ng-if=\"$ctrl.grantedInfo.isInfected\" class=\"fa fa-times fa-2x\" style=\"color: #f58989\"></i></div><p ng-if=\"!$ctrl.grantedInfo.isInfected\" style=\"padding: 5px 0;font-size: 20px;margin-bottom: 0\">Подтверждено посещение общественного места</p><span ng-show=\"$ctrl.orgInfo\" style=\"font-size: 20px\"><strong>\"{{$ctrl.orgInfo.name}}\"</strong></span><p style=\"padding: 15px;margin-top: 20px;font-size: 18px\" ng-style=\"$ctrl.mb\" ng-class=\"{'bg-danger': $ctrl.grantedInfo.isInfected, 'bg-success': !$ctrl.grantedInfo.isInfected}\">{{$ctrl.grantedInfo.isInfected ? \"Вам отказано в посещении заведения в связи с риском заражения других посетителей.\" : \"Риск заражения отсутствует.\"}}</p><p ng-if=\"$ctrl.grantedInfo.dateLeft\" style=\"margin-bottom: 0;font-size: 18px\">Подтверждение действительно до:<br><strong style=\"line-height: 1.5\">{{$ctrl.grantedInfo.dateLeft}}</strong></p></div></div></div></div></div>"
  );


  $templateCache.put('/personcab/covid-19/covid-19-qr.component.html',
    "<style>html, body {\n" +
    "        font-size: 12px;\n" +
    "    }\n" +
    "    .passHeader {\n" +
    "        display: flex;\n" +
    "        justify-content: space-between;\n" +
    "        align-items: center;\n" +
    "        margin-bottom: 20px;\n" +
    "    }\n" +
    "    .passTitle {\n" +
    "        margin: 0;\n" +
    "    }</style><div style=\"padding: 10px; overflow: hidden\"><status-wrapper><div class=\"passHeader\"><h1 class=\"passTitle\">Пропуск<span ng-if=\"$ctrl.pass\"> №{{$ctrl.pass.docNum}}</span></h1></div><button ng-if=\"$ctrl.isCovidOperator\" class=\"btn btn-blue\" style=\"display: block; margin-bottom: 20px\" ng-click=\"$ctrl.logout()\">Выйти</button><div ng-if=\"$ctrl.loaded\"><div ng-show=\"$ctrl.isValidData && $ctrl.isCovidOperator\" style=\"font-size: 20px;margin: 10px 0; padding: 10px\" class=\"bg-danger align-center\">{{$ctrl.isValidData}}</div><div ng-if=\"$ctrl.pass && $ctrl.isCovidOperator\"><div ng-show=\"$ctrl.pass.isInfected\" class=\"alert alert-error\"><legend class=\"c-legend\">Возможен риск заражения.</legend></div><div ng-show=\"!$ctrl.pass.isInfected\" class=\"alert alert-success\"><legend class=\"c-legend mb-0\">Риск заражения отсутствует.</legend></div></div><div ng-show=\"$ctrl.isCovidOperator && !$ctrl.isValidData\"><div ng-show=\"$ctrl.passed\" class=\"mt-2 bg-success align-center\">Пропуск осуществлён</div></div><div ng-if=\"!$ctrl.isLoggedIn\" class=\"mt-2 btn btn-blue\" style=\"display: block\" ng-click=\"$ctrl.toLogin()\">Войти в систему</div></div></status-wrapper></div>"
  );


  $templateCache.put('/personcab/customSchedule.template.html',
    "<div class=\"appl-note\" ng-hide=\"data.length==0\"><h2 ng-if=\"moment.format('MMMM')\" style=\"font-size: 3rem\">{{moment.format(\"MMMM\")}}</h2><div class=\"appl-note-ctrl\"><button class=\"appl-note-back prev\" ng-click=\"monthBack()\" title=\"Назад\" s1-tooltip><span class=\"icon-left-open\"></span></button> <button class=\"appl-note-forward next\" ng-click=\"monthForward()\" title=\"Вперед\" s1-tooltip><span class=\"icon-right-open\"></span></button></div></div><table class=\"table-calendar\" ng-show=\"data.length>0\"><thead><tr><th ng-repeat=\"d in days\" class=\"calendar-days col-md-1\" style=\"text-transform: capitalize\">{{d.title}}</th></tr></thead><tbody><tr ng-repeat=\"w in weeks\"><td ng-repeat=\"d in w.week\" ng-class=\"{\n" +
    "                    'calendar-td-active': (d.selectLocked || isLocked(d)),\n" +
    "                    'calendar-td-ready': !d.selectLocked,\n" +
    "                    'calendar-td-selected': selected == d\n" +
    "                }\" ng-disabled=\"d.selectLocked\"><div class=\"calendar-day calendar-weeks\" ng-class=\"{'selected-day': selected == d}\" ng-click=\"select(d)\" s1-tooltip title=\"{{d.title}}\"><span ng-if=\"d.moment.month()==moment.month() && d.moment.day()!=0 && d.moment.day()!=6\">{{d.moment.date()}}</span> <span ng-if=\"d.moment.month()==moment.month() && (d.moment.day()==0 || d.moment.day()==6)\" class=\"weekend\">{{d.moment.date()}}</span> <span ng-hide=\"d.moment.month()==moment.month()\" style=\"color:#aaa\">{{d.moment.date()}}</span></div></td></tr></tbody></table><div class=\"alert alert-info\" ng-show=\"data.length == 0\"><strong>Нет доступных дат!</strong></div>"
  );


  $templateCache.put('/personcab/dos_appeal.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"container-fluid\" style=\"margin-top: 20px\"><div ng-if=\"showSelectService\"><h3>Выберите услугу для подачи жалобы</h3><p>Введите часть названия услуги, выберите из выпадающего списка подходящий вариант и нажмите кнопку перехода к оформлению для заполнение необходимых полей</p><div class=\"form-group\"><oi-select oi-options=\"getFullServiceName(item) for item in findService($query)\" ng-model=\"selectedService\" placeholder=\"Введите часть названия или кода услуги\" required></oi-select></div><p>{{ selectedService.dept_title }}</p><button class=\"btn btn-primary\" ng-class=\"{ disabled: !selectedService }\" ng-click=\"selectService(selectedService)\">Перейти к оформлению</button><hr class=\"mt-3 mb-3\"><div class=\"row info-footer mb-3\"><div class=\"col-md-4\"><ng-include src=\"includes.record\" include-replace></ng-include></div><div class=\"col-md-4\"><section class=\"info-panel\"><h2 class=\"title\">Ранее заполненные заявления</h2><p>Вы можете посмотреть результаты ранее заполненных заявлений в личном кабинете</p><p><a href=\"{{'personcab/index?tab=statement'|s1Url}}\" class=\"btn btn-sm btn-blue\">Личный кабинет</a></p></section></div></div></div><div ng-if=\"!showSelectService && status == 'ready'\"><div ng-show=\"!hideTip\" class=\"alert alert-info\"><div class=\"apl-info-top__wrapper\"><h6 class=\"apl-top-info__title\">Заполните форму подачи жалобы</h6><p class=\"apl-top-info__text\">Процесс заполнения займет у Вас 3-5 минут. Внимательно читайте подсказки и постарайтесь указать как можно больше подробной информации. Это поможет решить Ваш вопрос в кратчайшие сроки и избежать возможных уточнений и запросов дополнительных сведений.</p><span ng-click=\"hideTip = true\" class=\"apl-top-info__btn-close\"></span></div></div><div id=\"dos-appeal\"><form name=\"form\" sf-schema=\"schemaForm.schema\" sf-form=\"schemaForm.form\" sf-model=\"schemaForm.model\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div><div align=\"center\"><button onclick=\"window.history.back()\" class=\"btn btn-success\" style=\"margin-top: 10px; margin-bottom: 10px\"><i class=\"fa fa-arrow-left\"></i> Вернуться</button> <button ng-click=\"emptyModel()\" class=\"btn btn-success\" style=\"margin-top: 10px; margin-bottom: 10px\"><i class=\"fa fa-database\"></i> Очистить форму</button> <button class=\"btn btn-info\" ng-click=\"Submit()\" style=\"margin-top: 10px; margin-bottom: 10px\"><i class=\"fa fa-university\"></i> Отправить</button></div></div></div><div class=\"container-fluid\" style=\"margin-top: 20px\" ng-show=\"status=='done'\"><div class=\"row\"><div><div><h4>Жалоба отправлена</h4><br></div></div><div class=\"appl-form-ctrl\"><a class=\"btn btn-white\" href=\"{{'personcab/index?tab=appeal'|s1Url}}\"><span class=\"icon-left-open\"></span> К списку жалоб</a></div></div></div><style>#dos-appeal .form-group:not(:last-child) {\n" +
    "        margin-bottom: 2em;\n" +
    "    }\n" +
    "    #dos-appeal .schema-form-fieldset > .help-block {\n" +
    "        margin-top: 0.5em;\n" +
    "        margin-bottom: 1.5em;\n" +
    "    }\n" +
    "    #dos-appeal .schema-form-fieldset > legend {\n" +
    "        font-family: \"ekibastuz\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n" +
    "        font-weight: 600;\n" +
    "    }\n" +
    "    #dos-appeal .control-label,\n" +
    "    #dos-appeal .schema-form-date .control-label {\n" +
    "        position: static;\n" +
    "        color: #535b63;\n" +
    "        margin-bottom: 0.5em;\n" +
    "        font-size: 1.4rem;\n" +
    "        line-height: 1.1;\n" +
    "    }\n" +
    "    #dos-appeal .schema-form-date .control-label {\n" +
    "        margin-left: -13px;\n" +
    "    }\n" +
    "    #dos-appeal .schema-form-date .form-control-feedback,\n" +
    "    #dos-appeal .schema-form-number .form-control-feedback,\n" +
    "    #dos-appeal .schema-form-text .form-control-feedback {\n" +
    "        top: initial !important;\n" +
    "        bottom: 5px !important;\n" +
    "    }\n" +
    "\n" +
    "    #dos-appeal .schema-form-inputDropdown span.form-control-feedback\n" +
    "\n" +
    "    #dos-appeal .schema-form-text .control-label ~ .form-control,\n" +
    "    #dos-appeal .schema-form-select .control-label ~ .form-control,\n" +
    "    #dos-appeal .schema-form-textarea .control-label ~ .form-control,\n" +
    "    #dos-appeal .schema-form-date .control-label ~ .form-control-date .form-control,\n" +
    "    #dos-appeal .schema-form-date .control-label ~ .row .form-control-date .form-control,\n" +
    "    #dos-appeal .schema-form-textarea > label ~ .form-control,\n" +
    "    #dos-appeal .schema-form-number .control-label ~ .form-cotrol,\n" +
    "    #dos-appeal .form-group label ~ .form-control,\n" +
    "    #dos-appeal [ng-controller=\"dynamicSelectController\"] .control-label ~ .form-group .btn {\n" +
    "        padding-top: 12px;\n" +
    "    }\n" +
    "\n" +
    "    #dos-appeal .schema-form-fieldset {\n" +
    "        margin-bottom: 1em;\n" +
    "        padding-bottom: 0.5em;\n" +
    "    }</style>"
  );


  $templateCache.put('/personcab/draftConfirmDialog.template.html',
    "<div class=\"modal-header\"><h3 class=\"modal-title\" id=\"modal-title\" style=\"display: inline\">Создание заявления</h3><i ng-click=\"$ctrl.close()\" class=\"fa fa-times\" aria-hidden=\"true\" style=\"float: right;cursor: pointer\"></i></div><div class=\"modal-body\" id=\"modal-body\"><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"$ctrl.status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div><div ng-show=\"$ctrl.status=='ready'\"><p>У вас уже есть черновик заявления выбранной услуги. Как поступить?</p><button class=\"btn btn-blue\" ng-click=\"$ctrl.useDraft()\">Редактировать черновик</button> <button class=\"btn btn-success\" ng-click=\"$ctrl.createNew()\">Создать новое заявление</button> <button class=\"btn btn-white\" ng-click=\"$ctrl.close()\">Отмена</button></div></div>"
  );


  $templateCache.put('/personcab/elkRequest.template.html',
    "<div style=\"padding:10px;text-align:center;margin-top: 20px\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center;margin-top: 20px\" ng-hide=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Внимание идет обработка данных, пожалуйста подождите...</h4></div></div><div style=\"padding:10px;text-align:center;margin-top: 20px\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div>"
  );


  $templateCache.put('/personcab/index/indexCab.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status==='ERROR'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-hide=\"status=='LOADING' || status=='ERROR'\"><section class=\"lk\"><div class=\"container-fluid\"><h1 class=\"lk-heading\">Личный кабинет</h1><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':isSelected('covid-19')}\"><a ng-click=\"selectTab('covid-19')\">COVID-19</a></li><li ng-class=\"{'is-active':isSelected('mydata')}\"><a ng-click=\"selectTab('mydata')\">Мои данные</a></li><li ng-class=\"{'is-active':isSelected('statement')}\"><a ng-click=\"selectTab('statement')\">Заявления</a></li><li ng-class=\"{'is-active':isSelected('appeal')}\"><a ng-click=\"selectTab('appeal')\">Жалобы</a></li><li ng-class=\"{'is-active':isSelected('payment')}\"><a ng-click=\"selectTab('payment')\">Начисления и платежи</a></li><li ng-class=\"{'is-active':isSelected('record')}\"><a ng-click=\"selectTab('record')\">Запись на прием</a></li><li ng-class=\"{'is-active':isSelected('my-records')}\"><a ng-click=\"selectTab('my-records')\">Мои записи</a></li><li ng-class=\"{'is-active':isSelected('pays')}\"><a ng-click=\"selectTab('pays')\">Оплаты</a></li></ul></nav><div class=\"tab-content\" ng-show=\"isSelected('covid-19')\"><div ng-if=\"isSelected('covid-19')\"><covid19-list></covid19-list></div></div><div class=\"tab-content\" ng-show=\"isSelected('mydata')\"><div ng-if=\"isSelected('mydata')\"><me></me></div></div><div class=\"tab-content\" ng-show=\"isSelected('statement')\" style=\"min-height: 35%\"><div ng-if=\"isSelected('statement')\"><service-request-list></service-request-list></div></div><div class=\"tab-content\" ng-show=\"isSelected('appeal')\" style=\"min-height: 35%\"><div ng-if=\"isSelected('appeal')\"><appeal-list></appeal-list></div></div><div class=\"payments\" ng-show=\"isSelected('payment')\"><div ng-if=\"isSelected('payment')\"><div class=\"row\"><div class=\"col-md-4 col-md-push-8\"><div class=\"filter\" ng-show=\"view != 'paymentsELK'\"><form action=\"#\"><label class=\"c-label\"><b>Выберите документ:</b></label><select class=\"c-select\" ng-model=\"type\"><option value=\"INN\">ИНН</option><option value=\"SNILS\">СНИЛС</option><option value=\"DRIVER\">Водительское удостоверение</option><option value=\"PASSPORT\">Паспорт РФ</option><option value=\"MILITARY\">Военный билет</option><option value=\"\">ВСЕ</option></select></form></div></div><div class=\"col-md-8 col-md-pull-4\"><ul class=\"form-ctrl\"><li><div class=\"form-group\"><label class=\"form-group-check\"><input type=\"radio\" name=\"payment\" ng-checked=\"view=='charges'\" ng-click=\"view='charges'\"> <span class=\"btn btn-white\">Начисления</span></label><label class=\"form-group-check\"><input type=\"radio\" name=\"payment\" ng-checked=\"view=='payments'\" ng-click=\"view='payments'\"> <span class=\"btn btn-white\">Платежи</span></label><label class=\"form-group-check\"><input type=\"radio\" ng-checked=\"view=='paymentsELK'\" ng-click=\"view='paymentsELK'\"> <span class=\"btn btn-white\">Платежи ЕЛК</span></label></div></li></ul><div ng-show=\"view=='charges'\"><charge-list on-show=\"isSelected('payment')\"></charge-list></div><div ng-show=\"view=='payments'\"><payment-list on-show=\"isSelected('payment')\"></payment-list></div><div ng-show=\"view=='paymentsELK'\"><payments-elk></payments-elk></div></div></div></div></div><div class=\"tab-content\" ng-show=\"isSelected('record')\" style=\"min-height: 35%\"><div ng-if=\"isSelected('record')\"><appointments on-show=\"isSelected('record')\"></appointments></div></div><div class=\"tab-content\" ng-show=\"isSelected('my-records')\" style=\"min-height: 35%\"><div ng-if=\"isSelected('my-records')\"><my-appointments on-show=\"isSelected('my-records')\"></my-appointments></div></div><div class=\"tab-content\" ng-show=\"isSelected('pays')\" style=\"min-height: 35%\"><div ng-if=\"isSelected('pays')\"><pays></pays></div></div></div></section></div>"
  );


  $templateCache.put('/personcab/info-pou/infoPou.template.html',
    "<div class=\"container-fluid\"><h2 class=\"service-heading\" style=\"font-size: 3.5rem; margin-top: 20px; margin-bottom: 20px\">Предоставление информации о текущей успеваемости обучающегося</h2><div style=\"position: relative\"><p style=\"font-weight: bold\" align=\"center\">Уважаемые родители и ученики</p><p align=\"center\">Обращаем внимание, что при получении услуги обязятельно должно быть выбрано ваше местоположение. В случае, если Фамилия Имя Отчество вашего ребенка не отображается необходимо обратиться в администрацию школы для проверки корректности сведений, содержащихся в базе данных школы.</p><div class=\"row\"><div class=\"col-md-6\"><div class=\"form-group\"><label for=\"okato\" class=\"c-field-label new-c-field-label\">Выберите муниципалитет *</label><select class=\"form-control new-c-field-select\" title=\"Выберите регион из списка\" ng-model=\"okato\" placeholder=\"Выберите регион из списка\" id=\"okato\"><option ng-show=\"!okato\" value=\"\">Выберите муниципалитет из списка</option><option ng-repeat=\"item in okatoOptions\" value=\"{{item.value}}\">{{item.name}}</option></select></div></div><div class=\"col-md-6\"><div class=\"form-group\"><label for=\"appType\" class=\"c-field-label new-c-field-label\">Выберите заявителя *</label><select class=\"form-control new-c-field-select\" title=\"Выберите заявителя из списка\" ng-model=\"appType\" ng-options=\"varOption as varOption.name for varOption in appTypeOptions\" placeholder=\"Выберите заявителя из списка\" id=\"appType\"></select></div></div></div><div class=\"row\"><div ng-show=\"okato\"><div class=\"col-md-6\"><div class=\"form-group\"><label for=\"OUName\" class=\"c-field-label new-c-field-label\">Выберите школу обучающегося *</label><select class=\"form-control new-c-field-select\" title=\"Выберите школу обучающегося\" ng-model=\"OUName\" ng-options=\"varOption as varOption.name for varOption in OUNameOptions\" placeholder=\"Выберите школу обучающегося\" id=\"OUName\"><option ng-show=\"!OUName\" value=\"\">Выберите школу обучающегося из списка</option></select></div></div></div><div ng-show=\"appType.name=='родитель' && OUName\"><div class=\"col-md-6\"><div class=\"form-group\"><label for=\"Childname\" class=\"c-field-label new-c-field-label\">Выберите ФИО обучающегося *</label><select class=\"form-control new-c-field-select\" title=\"Выберите ФИО обучающегося\" ng-model=\"Childname\" ng-options=\"varOption as varOption.name for varOption in ChildOptions\" placeholder=\"Выберите ФИО обучающегося\" id=\"Childname\"><option ng-show=\"!Childname\" value=\"\">Выберите ФИО обучающегося</option></select></div></div></div></div><h4 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 20px; font-size: 20px; font-weight: bold\">2. Выберите интересующую информацию электронного дневника</h4><label><input type=\"radio\" ng-model=\"radio_button\" name=\"optradio\" value=\"diary\"> Дневник</label><br><label><input type=\"radio\" ng-model=\"radio_button\" name=\"optradio\" value=\"itog\"> Итоговые оценки</label><br><div ng-show=\"radio_button=='diary'\"><h4 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 20px; font-size: 20px; font-weight: bold\">Выберите период предоставления информации</h4><div style=\"margin: 20px\"><div class=\"row\"><div class=\"col-md-6\"><sf-date-picker date-format=\"dd-MM-yyyy\" date-autoclose=\"1\" ng-model=\"dt_period_s\" date-type=\"string\" date-title=\"c\" date-view=\"0\" place-holder=\"Выберите дату начала периода\" ext-view=\"1\"></sf-date-picker><label for=\"period_s\" style=\"font-weight: normal\">*Выберите дату начала периода за который необходимо предоставить информацию</label></div><div class=\"col-md-6\"><sf-date-picker date-format=\"dd-MM-yyyy\" date-autoclose=\"1\" ng-model=\"dt_period_po\" date-type=\"string\" date-title=\"по\" date-view=\"0\" ext-view=\"1\" place-holder=\"Выберите дату окончания периода\"></sf-date-picker><label for=\"period_s\" style=\"font-weight: normal\">*Выберите дату окончания периода за который необходимо предоставить информацию</label></div></div><h4 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 20px; font-size: 20px; font-weight: bold\">Выберите интересующую информацию</h4><div class=\"row\"><div class=\"col-md-12\"><label><input type=\"checkbox\" ng-model=\"diary_exercise\" ng-true-value=\"'1'\" ng-false-value=\"'0'\"> Общее домашнее задание</label></div></div><div align=\"center\" style=\"margin-bottom: 20px\"><button ng-disabled=\"ParentBtn()=='true'\" class=\"btn btn-xs btn-primary\" ng-click=\"show_exercise()\"><i class=\"fa fa-calendar-check-o\"></i> Показать</button> <button class=\"btn btn-xs btn-danger\" ng-click=\"diary_status='init'\"><i class=\"fa fa-times\"></i> Скрыть</button></div><div class=\"appl-table-scroll\" style=\"margin: 20px\" ng-show=\"diary_status=='ready'\"><table class=\"appl-table\"><thead><tr><th>Дата</th><th>№</th><th>Предмет/учитель</th><th ng-show=\"diary_exercise=='1'\">Тема/Домашнее задание</th><th>Оценка</th><th ng-show=\"diary_message=='1'\">Сообщение учителя</th></tr></thead><tbody ng-repeat=\"r in fullList\"><tr><td data-th=\"Дата\" class=\"no-wrap\">{{ConvertDate(r.DiaryDate.__text)}}</td><td data-th=\"№ урока\" class=\"no-wrap\">{{r.DiaryNumber.__text}}</td><td data-th=\"Предмет и учитель\" class=\"no-wrap\">{{r.DiarySubject.__text}}</td><td data-th=\"Тема/Домашнее задание\" class=\"no-wrap\" ng-show=\"diary_exercise=='1'\">{{r.DiaryExercise.__text}}</td><td data-th=\"Оценка\" class=\"no-wrap\">{{r.DiaryRating.__text}}</td><td data-th=\"Сообщение учителя\" class=\"no-wrap\" ng-show=\"diary_message=='1'\">{{r.DiaryText.__text}}</td></tr></tbody></table></div><div ng-show=\"diary_status=='ready' && diaryCount>0\" style=\"margin-bottom: 20px\"><div style=\"margin:10px 0 0 25px\"><s1-paging skip=\"listSkip\" max=\"listMax\" count=\"diaryCount\" on-change=\"dairy_paginator()\"></s1-paging></div></div></div></div><div ng-show=\"radio_button=='itog'\"><div style=\"margin: 20px\"><div class=\"row\"><div align=\"center\"><button ng-disabled=\"ParentBtn()=='true'\" class=\"btn btn-xs btn-primary\" ng-click=\"show_iperiod()\"><i class=\"fa fa-calendar-check-o\"></i> Показать отчетные периоды</button><div class=\"alert alert-danger\" ng-show=\"alert=='error'\" style=\"margin: 10px\"><strong>Внимание!</strong> {{error.message}}</div></div></div><div class=\"row\"><div class=\"col-md-12\" ng-show=\"periods=='ready'\" style=\"margin: 20px\"><div class=\"form-group\"><label for=\"period_itog_lookup\" class=\"c-field-label new-c-field-label\">Выберите отчетный период предоставления информации:</label><select class=\"form-control new-c-field-select\" title=\"Выберите отчетный период предоставления информации\" ng-model=\"period_itog_lookup\" ng-options=\"varOption as varOption.name for varOption in periodOptions\" placeholder=\"Выберите отчетный период предоставления информации\" id=\"period_itog_lookup\"><option ng-show=\"!period_itog_lookup\" value=\"\">Выберите отчетный период предоставления информации</option></select></div></div></div><div align=\"center\" ng-show=\"period_itog_lookup\"><button class=\"btn btn-xs btn-primary\" ng-click=\"show_period_itog()\"><i class=\"fa fa-calendar-check-o\"></i> Показать</button></div><div class=\"appl-table-scroll\" ng-show=\"period_status=='ready'\" style=\"margin: 20px\"><table class=\"appl-table\"><thead><tr><th>Предмет</th><th>Оценка</th></tr></thead><tbody ng-show=\"lookup_value.root.JournalRecord.length > 0\" ng-repeat=\"r in lookup_value.root.JournalRecord\"><tr><td data-th=\"Предмет\" class=\"no-wrap\">{{r.JournalSubject.__text}}</td><td data-th=\"Оценка\" class=\"no-wrap\">{{r.JournalRating.__text}}</td></tr><tbody ng-show=\"!lookup_value.root.JournalRecord.length\"><tr><td data-th=\"Предмет\" class=\"no-wrap\">{{lookup_value.root.JournalRecord.JournalSubject.__text}}</td><td data-th=\"Оценка\" class=\"no-wrap\">{{lookup_value.root.JournalRecord.JournalRating.__text}}</td></tr></tbody></tbody></table></div></div></div><div align=\"center\" style=\"padding:10px\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4 style=\"color: red; font-weight: bold\">Ошибка</h4><p style=\"display: block; background-color: gainsboro; font-weight: bold; padding: 10px\">{{error.message}}</p></div></div><div class=\"st-preloader-bl\" ng-show=\"status=='loading'\"></div></div></div>"
  );


  $templateCache.put('/personcab/infoService.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><div class=\"container-fluid\"><div class=\"appl\"><div class=\"row\"><div class=\"col-md-8\"><p class=\"appl-caption\"><a href=\"{{'rgu/service_view?id='+request.psPassport.id + '&rid=' + request.service.id + '&tab=statement'|s1Url}}\" title=\"Открыть услугу в реестре\">{{request.service_title}}</a></p></div><div class=\"col-md-4\"><b class=\"provide-title\">Услугу предоставляет</b><span class=\"provide-link\"><img ng-src=\"{{'assets/images/logo-rus.png'|s1Url}}\" alt=\"\"> <u>{{request.dept_title}}</u></span></div></div></div><div style=\"margin-top: 20px\"><form name=\"form\" sf-schema=\"request.schemaform.schema\" sf-form=\"request.schemaform.form\" sf-model=\"request.model\" sf-template=\"template\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div><div class=\"appl-form-ctrl\"><a href=\"javascript:history.back()\" class=\"btn btn-white\">Назад</a></div></div></div>"
  );


  $templateCache.put('/personcab/me.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div><div class=\"row\" ng-show=\"status=='ready'\"><div class=\"col-md-12\"><div class=\"form\"><div class=\"alert alert-success\" ng-show=\"orgsInUser.length > 0\"><div ng-show=\"chosenOrg.oid\">В данный момент Вы выбрали организацию &laquo;{{chosenOrg.shortName}}&raquo;. &nbsp; <a ng-click=\"chooseOrg()\">Выбрать другую</a></div><div ng-show=\"!chosenOrg.oid\">У Вас доступны организации. &nbsp; <a ng-click=\"chooseOrg()\">Выбрать</a></div></div><form action=\"#\"><fieldset><legend class=\"c-legend\"><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"c-change-link\">Изменить данные</a> 1. Основные личные данные</legend><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Фамилия</sup> <input value=\"{{personal.samlUser.name.lastName}}\" type=\"text\" placeholder=\"Фамилия\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Имя</sup> <input value=\"{{personal.samlUser.name.firstName}}\" type=\"text\" placeholder=\"Имя\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Отчество</sup> <input value=\"{{personal.samlUser.name.middleName}}\" type=\"text\" placeholder=\"Отчество\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Дата рождения</sup> <input value=\"{{personal.samlUser.birthDate}}\" type=\"text\" placeholder=\"Дата рождения\" class=\"c-text\" readonly></div></div><div class=\"col-sm-8\"><div class=\"c-field\"><sup class=\"c-field-label\">Пол</sup> <input value=\"{{personal.samlUser.gender}}\" type=\"text\" placeholder=\"Пол\" class=\"c-text\" readonly></div></div></div></fieldset><hr><fieldset><legend class=\"c-legend\"><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"c-change-link\">Изменить данные</a> 2. Идентификаторы</legend><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Серия паспорта</sup> <input value=\"{{personal.samlUser.person.principalDoc.passport_rf.series}}\" type=\"text\" placeholder=\"Серия паспорта\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Номер паспорта</sup> <input value=\"{{personal.samlUser.person.principalDoc.passport_rf.number}}\" type=\"text\" placeholder=\"Номер паспорта\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Дата выдачи паспорта</sup> <input value=\"{{personal.samlUser.person.principalDoc.passport_rf.issueDate}}\" type=\"text\" placeholder=\"Дата выдачи паспорта\" class=\"c-text\" readonly></div></div></div><div class=\"c-field\"><sup class=\"c-field-label\">Орган выдавший паспорт</sup> <input value=\"{{personal.samlUser.person.principalDoc.passport_rf.issuedBy}}\" type=\"text\" placeholder=\"Орган выдавший паспорт\" class=\"c-text\" readonly></div><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">СНИЛС</sup> <input value=\"{{personal.samlUser.person.snils}}\" type=\"text\" placeholder=\"СНИЛС\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">ИНН</sup> <input value=\"{{personal.samlUser.person.inn}}\" type=\"text\" placeholder=\"ИНН\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">ОГРНИП</sup> <input value=\"{{personal.samlUser.person.personOGRN}}\" type=\"text\" placeholder=\"ОГРНИП\" class=\"c-text\" readonly></div></div></div></fieldset><hr><fieldset><legend class=\"c-legend\"><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"c-change-link\">Изменить данные</a> 3. Контактная информация</legend><div class=\"c-field\"><sup class=\"c-field-label\">Мобильный телефон</sup> <input value=\"{{personal.samlUser.person.personMobilePhone}}\" type=\"text\" placeholder=\"Мобильный телефон\" class=\"c-text\" readonly></div><div class=\"c-field\"><sup class=\"c-field-label\">Электронная почта</sup> <input value=\"{{personal.samlUser.person.email}}\" type=\"text\" placeholder=\"Электронная почта\" class=\"c-text\" readonly></div><label class=\"h4 form-label\">Адрес регистрации:</label><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Почтовый индекс</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_REGISTRATION.index}}\" type=\"text\" placeholder=\"Почтовый индекс\" class=\"c-text\" readonly></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Регион</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_REGISTRATION.region}}\" type=\"text\" placeholder=\"Регион\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Город</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_REGISTRATION.city}}\" type=\"text\" placeholder=\"Город\" class=\"c-text\" readonly></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Улица</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_REGISTRATION.street}}\" type=\"text\" placeholder=\"Улица\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Дом</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_REGISTRATION.house}}\" type=\"text\" placeholder=\"Дом\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Корпус</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_REGISTRATION.corpus}}\" type=\"text\" placeholder=\"Корпус\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Квартира</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_REGISTRATION.flat}}\" type=\"text\" placeholder=\"Квартира\" class=\"c-text\" readonly></div></div></div><div ng-show=\"personal.samlUser.person.principalAdr.PERSON_LIVE\"><label class=\"h4 form-label\">Адрес фактического места проживания:</label><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Почтовый индекс</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_LIVE.index}}\" type=\"text\" placeholder=\"Почтовый индекс\" class=\"c-text\" readonly></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Регион</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_LIVE.region}}\" type=\"text\" placeholder=\"Регион\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Город</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_LIVE.city}}\" type=\"text\" placeholder=\"Город\" class=\"c-text\" readonly></div></div><div class=\"col-sm-6\"><div class=\"c-field\"><sup class=\"c-field-label\">Улица</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_LIVE.street}}\" type=\"text\" placeholder=\"Улица\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Дом</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_LIVE.house}}\" type=\"text\" placeholder=\"Дом\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Корпус</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_LIVE.corpus}}\" type=\"text\" placeholder=\"Корпус\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Квартира</sup> <input value=\"{{personal.samlUser.person.principalAdr.PERSON_LIVE.flat}}\" type=\"text\" placeholder=\"Квартира\" class=\"c-text\" readonly></div></div></div></div></fieldset><div ng-show=\"personStatus=='org'\"><hr><fieldset><legend class=\"c-legend\"><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"c-change-link\">Изменить данные</a> 4. Информация об организации</legend><div class=\"row\"><div class=\"col-sm-12\"><div class=\"c-field\"><sup class=\"c-field-label\">Наименование организации</sup> <input value=\"{{personal.samlUser.org.fullName}}\" type=\"text\" placeholder=\"Наименование организации\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">ОГРН организации</sup> <input value=\"{{personal.samlUser.org.ogrn}}\" type=\"text\" placeholder=\"ОГРН организации\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Тип организации</sup> <input value=\"{{personal.samlUser.org.orgType}}\" type=\"text\" placeholder=\"Тип организации\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Должность пользователя</sup> <input value=\"{{personal.samlUser.org.orgPosition}}\" type=\"text\" placeholder=\"Должность пользователя\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">КПП организации</sup> <input value=\"{{personal.samlUser.org.kpp}}\" type=\"text\" placeholder=\"КПП организации\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">ОКОПФ</sup> <input value=\"{{personal.samlUser.org.orgLegalForm}}\" type=\"text\" placeholder=\"ОКОПФ\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">ИНН организации</sup> <input value=\"{{personal.samlUser.org.inn}}\" type=\"text\" placeholder=\"ИНН организации\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Телефон</sup> <input value=\"{{personal.samlUser.org.contacts.OPH.value}}\" type=\"text\" placeholder=\"Телефон\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Адрес электронной почты</sup> <input value=\"{{personal.samlUser.org.contacts.OEM.value}}\" type=\"text\" placeholder=\"Адрес электронной почты\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Факс</sup> <input value=\"{{personal.samlUser.org.contacts.OFX.value}}\" type=\"text\" placeholder=\"Факс\" class=\"c-text\" readonly></div></div></div></fieldset><div ng-show=\"personal.samlUser.org.ORG_LEGAL\"><hr><fieldset><legend class=\"c-legend\"><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"c-change-link\">Изменить данные</a> 5. Юридический адрес организации</legend><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Страна</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_LEGAL.country}}\" type=\"text\" placeholder=\"Код страны\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Индекс</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_LEGAL.index}}\" type=\"text\" placeholder=\"Индекс\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Регион</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_LEGAL.region}}\" type=\"text\" placeholder=\"Регион\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Улица</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_LEGAL.street}}\" type=\"text\" placeholder=\"Улица\" class=\"c-text\" readonly></div></div><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Дом</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_LEGAL.house}}\" type=\"text\" placeholder=\"Дом\" class=\"c-text\" readonly></div></div><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Корпус</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_LEGAL.corpus}}\" type=\"text\" placeholder=\"Корпус\" class=\"c-text\" readonly></div></div><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Квартира</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_LEGAL.flat}}\" type=\"text\" placeholder=\"Квартира\" class=\"c-text\" readonly></div></div></div></fieldset></div><div ng-show=\"personal.samlUser.org.ORG_POSTAL\"><hr><fieldset><legend class=\"c-legend\"><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"c-change-link\">Изменить данные</a> 6. Почтовый адрес организации</legend><div class=\"row\"><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Код страны</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_POSTAL.country}}\" type=\"text\" placeholder=\"Код страны\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Индекс</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_POSTAL.index}}\" type=\"text\" placeholder=\"Индекс\" class=\"c-text\" readonly></div></div><div class=\"col-sm-4\"><div class=\"c-field\"><sup class=\"c-field-label\">Регион</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_POSTAL.region}}\" type=\"text\" placeholder=\"Регион\" class=\"c-text\" readonly></div></div></div><div class=\"row\"><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Улица</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_POSTAL.street}}\" type=\"text\" placeholder=\"Улица\" class=\"c-text\" readonly></div></div><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Дом</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_POSTAL.house}}\" type=\"text\" placeholder=\"Дом\" class=\"c-text\" readonly></div></div><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Корпус</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_POSTAL.corpus}}\" type=\"text\" placeholder=\"Корпус\" class=\"c-text\" readonly></div></div><div class=\"col-sm-3\"><div class=\"c-field\"><sup class=\"c-field-label\">Квартира</sup> <input value=\"{{personal.samlUser.org.orgAddresses.ORG_POSTAL.flat}}\" type=\"text\" placeholder=\"Квартира\" class=\"c-text\" readonly></div></div></div></fieldset></div></div><my-settings></my-settings></form></div></div></div>"
  );


  $templateCache.put('/personcab/mincultSchedule.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-danger\" align=\"center\"><strong>Ошибка</strong><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready'\"><div class=\"container-fluid\"><h1 class=\"lk-heading\">Расписание театральных представлений</h1><div class=\"row\"><div class=\"col-md-12\"><div class=\"form-group\"><label for=\"dept\" class=\"c-field-label new-c-field-label\">Организация *</label><select class=\"form-control new-c-field-select\" title=\"Выберите организацию из списка\" ng-model=\"dept\" placeholder=\"Выберите организацию из списка\" id=\"dept\" ng-options=\"deptItem.name as deptItem.name for deptItem in fullList\"></select></div></div></div><div class=\"row\"><div class=\"col-md-6\"><div class=\"form-group\"><label for=\"month\" class=\"c-field-label new-c-field-label\">Месяц</label><select class=\"form-control new-c-field-select\" title=\"Выберите месяц из списка\" ng-model=\"month\" placeholder=\"Выберите месяц из списка\" id=\"month\" ng-options=\"monthItem.value as monthItem.name for monthItem in monthProperty\"></select></div></div><div class=\"col-md-6\"><div class=\"form-group\"><label for=\"year\" class=\"c-field-label new-c-field-label\">Год</label><select class=\"form-control new-c-field-select\" title=\"Выберите год из списка\" ng-model=\"year\" placeholder=\"Выберите год из списка\" id=\"year\" ng-options=\"yearItem.value as yearItem.name for yearItem in yearProperty\"></select></div></div></div><div style=\"margin-top: 20px\" ng-show=\"mincultList.length>0\"><table class=\"table table-hover\"><thead><tr><th style=\"width: 80px\">Дата</th><th style=\"width: 80px\">Время</th><th>Мероприятие</th><th>Адрес</th><th style=\"width: 150px\">Телефон</th></tr></thead><tbody><tr ng-repeat=\"mincult in mincultList\"><td data-th=\"Дата\">{{ mincult.day }} {{ currMonth }}</td><td data-th=\"Время\">{{ mincult.time }}</td><td data-th=\"Мероприятие\" ng-bind-html=\"mincult.html\"></td><td data-th=\"Адрес\">{{ mincult.address }}</td><td data-th=\"Телефон\">{{ mincult.phone }}</td></tr></tbody></table></div><div ng-show=\"mincultList.length==0 || !dept\"><div class=\"alert alert-danger\" align=\"center\"><strong>Не выбрана организация</strong></div></div></div></div>"
  );


  $templateCache.put('/personcab/myAppointments.template.html',
    "<div ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='error'\"><div class=\"alert alert-danger\" align=\"center\"><h4 style=\"text-align: center\"><strong>Ошибка</strong></h4><p>{{error.message}}</p></div></div><style>.appl .appl-list {\n" +
    "        padding-left: 0;\n" +
    "        padding-right: 0;\n" +
    "    }\n" +
    "\n" +
    "    .appl .appl-list li.myrecord {\n" +
    "        padding: 1px;\n" +
    "        margin-bottom: 10px;\n" +
    "        display: -webkit-flex;\n" +
    "        display: -moz-flex;\n" +
    "        display: -ms-flex;\n" +
    "        display: -o-flex;\n" +
    "        display: flex;\n" +
    "    }\n" +
    "\n" +
    "    .appl .appl-link.appl-record {\n" +
    "        flex: 1;\n" +
    "        padding: 1.4rem 2rem 1.6rem 5.125rem;\n" +
    "        border: 1px solid rgba(15, 15, 15, 0.14);\n" +
    "        border-radius: 2px;\n" +
    "        box-shadow: 0 0 6px 0px transparent;\n" +
    "        transition: box-shadow 0.3s;\n" +
    "    }\n" +
    "\n" +
    "    .appl .appl-link.appl-record:hover {\n" +
    "        box-shadow: 0 0 6px 0px rgba(15, 15, 15, 0.24);\n" +
    "    }\n" +
    "\n" +
    "    .appl .appl-link.appl-record::after {\n" +
    "        top: 1.6rem;\n" +
    "        left: 1.25rem;\n" +
    "    }</style><section class=\"lk\"><div class=\"container-fluid\"><div class=\"appl\"><div class=\"mb-2\"><label class=\"form-group-check\"><input type=\"radio\" name=\"appointments\" ng-checked=\"onlyCurrent==true\" ng-click=\"onlyCurrent = true\"> <span class=\"btn btn-white\">Текущие</span></label><label class=\"form-group-check\"><input type=\"radio\" name=\"appointments\" ng-checked=\"onlyCurrent==false\" ng-click=\"onlyCurrent = false\"> <span class=\"btn btn-white\">Все</span></label></div><div class=\"row\"><div class=\"col-md-8\"><ul class=\"appl-list\"><li ng-repeat=\"r in list\" class=\"myrecord\" ng-class=\"{ 'first-record': $first }\"><a class=\"appl-link appl-record\" style=\"padding-left: 70px\" ng-click=\"r.details = !r.details\" ng-show=\"r.current || !onlyCurrent\"><span class=\"icon-doc-text\"></span> <b class=\"mb-1\" ng-bind-html=\"r.question.name\"></b> <time><span class=\"icon-clock\"></span> {{r.time | dateFormat:\"DD.MM.YYYY HH:mm\"}} </time><span ng-show=\"!r.details\" class=\"icon-right-open\"></span> <span ng-show=\"r.details\" class=\"icon-down-open\"></span><br><span ng-bind-html=\"r.organization.name\"></span><div ng-show=\"r.details\"><br><ul class=\"dept-details-list\"><li><i class=\"fa fa-university\">&nbsp </i><span ng-bind-html=\"r.organization.deptTitle\"></span></li><li ng-show=\"r.info\"><i class=\"fa fa-pencil\">&nbsp &nbsp</i> <span ng-bind-html=\"r.info\"></span></li><li><span ng-show=\"r.length>0\"><i class=\"fa fa-hourglass\">&nbsp &nbsp</i> <span ng-bind-html=\"r.length\"></span> минут</span> <time style=\"color: unset\" ng-click=\"delRecord(r)\"><span class=\"fa fa-remove\"></span> Отменить запись</time></li></ul></div></a></li></ul></div><div class=\"col-md-4\"><div class=\"info-panel mb-2\"><form><label class=\"c-label\"><b>Поиск по вопросу, организации или услуге:</b></label><div class=\"filter-search\"><input type=\"text\" placeholder=\"Поиск\" class=\"filter-search-text\" ng-model=\"search\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div></form></div><div class=\"info-panel\" ng-show=\"next\"><h4>Ближайшая запись</h4><h4><span class=\"icon-clock\"></span> {{next.time | dateFormat:\"DD.MM.YYYY HH:mm\"}}</h4><p ng-bind-html=\"next.question.name\">Предоставление государственной услуги: «Выдача разрешений на строительство в случае строительства, реконструкции сооружений, являющихся пересечением автомобильной дороги регионального или межмуниципального значения и (или) примыканием к автомобильной дороге регионального или межмуниципального значения, а также сооружений, являющихся пересечением и (или) примыканием к частной автомобильной дороге» адрес: г. Ставрополь, ул. Спартака, 6 (кабинет № 10)</p><span ng-bind-html=\"next.organization.name\"></span></div></div></div></div></div></section>"
  );


  $templateCache.put('/personcab/mySettings.template.html',
    "<div><hr><fieldset><legend class=\"c-legend\">Настройки</legend><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready'\"><div class=\"row\"><div class=\"col-sm-7\"><p>Передавать сведения по заявлениям в <a href=\"https://lk.gosuslugi.ru\">Единый личный кабинет</a></p></div><div class=\"col-sm-4\"><fieldset ng-disabled=\"!editElkForw\"><label class=\"radio-inline\"><input type=\"radio\" ng-model=\"elk.forwarding\" value=\"off\">Откл.</label><label class=\"radio-inline\"><input type=\"radio\" ng-model=\"elk.forwarding\" value=\"current\">Текущие</label><label class=\"radio-inline\"><input type=\"radio\" ng-model=\"elk.forwarding\" value=\"all\">Все</label></fieldset></div><div class=\"col-sm-1\"><a href title=\"Изменить\" class=\"btn btn-xs btn-default\" ng-click=\"editElkForw=!editElkForw\"><i class=\"fa fa-pencil\"></i></a></div></div><div ng-show=\"editElkForw\" align=\"right\"><button type=\"button\" class=\"btn btn-xs btn-primary\" ng-click=\"saveElkForw()\" style=\"margin-right: 1em\"><i class=\"fa fa-save\"></i> Сохранить</button> <a href=\"javascript:void(0)\" ng-click=\"editElkForw=false\">Отмена</a><br><br></div><div class=\"row\"><div class=\"col-sm-7\"><p>Подписаться на уведомления из <a href=\"https://lk.gosuslugi.ru\">Единого личного кабинета</a></p></div><div class=\"col-sm-4\"><fieldset ng-disabled=\"!setElksubscribed\"><label class=\"radio-inline\"><input type=\"radio\" ng-model=\"elk.subscribed\" data-ng-value=\"false\">Откл.</label><label class=\"radio-inline\"><input type=\"radio\" ng-model=\"elk.subscribed\" data-ng-value=\"true\">Вкл.</label></fieldset></div><div class=\"col-sm-1\"><a href title=\"Изменить\" class=\"btn btn-xs btn-default\" ng-click=\"setElksubscribed=!setElksubscribed\"><i class=\"fa fa-pencil\"></i></a></div></div><div ng-show=\"setElksubscribed\" align=\"right\"><button type=\"button\" class=\"btn btn-xs btn-primary\" ng-click=\"saveElkSubscribed()\"><i class=\"fa fa-save\"></i> Сохранить</button> <a href=\"javascript:void(0)\" ng-click=\"setElksubscribed=false\">Отмена</a></div><div class=\"row\" ng-show=\"true\"><div class=\"col-sm-7\"><p>Получать уведомления СМС</p></div><div class=\"col-sm-4\"><fieldset ng-disabled=\"!editSMS\"><label class=\"radio-inline\"><input type=\"radio\" data-ng-model=\"sms.enabled\" data-ng-value=\"false\">Откл.</label><label class=\"radio-inline\"><input type=\"radio\" data-ng-model=\"sms.enabled\" data-ng-value=\"true\">Вкл.</label></fieldset></div><div class=\"col-sm-1\"><a href title=\"Изменить\" class=\"btn btn-xs btn-default\" ng-click=\"editSMS=!editSMS\"><i class=\"fa fa-pencil\"></i></a></div></div><div class=\"row\" ng-show=\"true\"><div class=\"col-sm-4\"></div><div class=\"col-md-2\"><div class=\"form-group\"><label for=\"fromHour\" class=\"c-field-label new-c-field-label\">С</label><select class=\"form-control new-c-field-select\" ng-model=\"sms.from\" ng-disabled=\"!editSMS\" ng-options=\"h.val as h.name for h in HOURS\" id=\"fromHour\"></select></div></div><div class=\"col-md-2\"><div class=\"form-group\"><label for=\"toHour\" class=\"c-field-label new-c-field-label\">По</label><select class=\"form-control new-c-field-select\" ng-model=\"sms.to\" ng-disabled=\"!editSMS\" ng-options=\"h.val as h.name for h in HOURS\" id=\"toHour\"></select></div></div><div class=\"col-md-4\"><div class=\"form-group\"><label for=\"tz\" class=\"c-field-label new-c-field-label\">Часовой пояс</label><select class=\"form-control new-c-field-select\" ng-model=\"sms.offset\" ng-disabled=\"!editSMS\" ng-options=\"t.val as t.name for t in tzList\" id=\"tz\"></select></div></div></div><div ng-show=\"editSMS\" align=\"right\"><button type=\"button\" style=\"margin-right: 1em\" class=\"btn btn-xs btn-primary\" ng-click=\"saveSMS()\"><i class=\"fa fa-save\"></i> Сохранить</button> <a href=\"javascript:void(0)\" ng-click=\"editSMS=false\">Отмена</a><br><br></div></div></fieldset><gibdd-settings></gibdd-settings></div>"
  );


  $templateCache.put('/personcab/payment/chargeList.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready' && nodoc\"><p>В личном кабинете не заполнены данные документа: {{nodoc}}</p><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"btn btn-sm btn-blue\">Перейти в Личный кабинет ЕСИА</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && data.chargeInfo.length == 0 && !nodoc \"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"status=='ready' && data != null\"><ul class=\"payments-list\"><li ng-repeat=\"r in data.chargeInfo\"><div class=\"payments-item\"><div class=\"row\"><div class=\"col-sm-8\"><strong class=\"payments-item-title\">{{r.payee.name}} <small>{{r.purpose}}</small></strong><ul class=\"payments-item-requisites\"><li>Дата начисления: {{r.billDate | dateFormat:\"DD.MM.YYYY HH:mm\"}}</li><li>ИНН: {{r.payee.inn}}</li><li>КПП: {{r.payee.kpp}}</li><li>ОГРН: {{r.payee.ogrn}}</li><li>Банк: {{r.payee.orgAccount.bank.name}}</li><li>БИК: {{r.payee.orgAccount.bank.bik}}</li><li>Р/С: {{r.payee.orgAccount.accountNumber}}</li></ul></div><div class=\"col-sm-4\"><div class=\"payments-item-ctrl\"><div ng-if=\"r.discount != null && r.discount.DiscountSize != null && !isExpired(r.discount.DiscountSize.expiry)\"><p class=\"payments-item-price\">{{r.totalAmount / 100 * r.discount.DiscountSize.value / 100}} <span class=\"icon-rouble\"></span></p><p class=\"payments-item-price payments-item-discount\">{{r.totalAmount / 100}} <span class=\"icon-rouble\"></span></p><p>При оплате до {{r.discount.DiscountSize.expiry | dateFormat}}</p></div><p ng-if=\"r.discount == null || r.discount.DiscountSize == null || isExpired(r.discount.DiscountSize.expiry)\" class=\"payments-item-price\">{{r.totalAmount / 100}} <span class=\"icon-rouble\"></span></p><button class=\"btn btn-xs btn-blue\" ng-show=\"r.amountToPay > 0 && r.status != 'loading'\" ng-click=\"pay(r)\">Оплатить</button> <span class=\"label label-success\" ng-show=\"r.amountToPay == 0\">Оплачено</span><div class=\"alert alert-danger\" ng-if=\"r.error.message\"><i class=\"fa fa-warning-sign\"></i> {{r.error.message}}</div></div></div></div></div></li></ul></div></div>"
  );


  $templateCache.put('/personcab/payment/paymentList.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='ready' && nodoc\"><p>В личном кабинете не заполнены данные документа: {{nodoc}}</p><a href=\"https://esia.gosuslugi.ru/profile/user/person.xhtml\" class=\"btn btn-sm btn-blue\">Перейти в Личный кабинет ЕСИА</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && data.paymentInfo.length == 0 && !nodoc \"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"status=='ready' && data != null\"><ul class=\"payments-list\"><li ng-repeat=\"r in data.paymentInfo\"><div class=\"payments-item\"><div class=\"row\"><div class=\"col-sm-8\"><strong class=\"payments-item-title\">{{r.payee.name}} <small>{{r.purpose}}</small></strong><ul class=\"payments-item-requisites\"><li>Дата платежа: {{r.paymentDate | dateFormat:\"DD.MM.YYYY HH:mm\"}}</li><li>ИНН: {{r.payee.inn}}</li><li>КПП: {{r.payee.kpp}}</li><li>ОГРН: {{r.payee.ogrn}}</li><li>Банк: {{r.payee.orgAccount.bank.name}}</li><li>БИК: {{r.payee.orgAccount.bank.bik}}</li><li>Р/С: {{r.payee.orgAccount.accountNumber}}</li></ul></div><div class=\"col-sm-4\"><div class=\"payments-item-ctrl\"><p class=\"payments-item-price\">{{r.amount / 100}} <span class=\"icon-rouble\"></span></p><span class=\"label label-success\">Оплачено</span><div class=\"alert alert-danger\" ng-if=\"r.error.message\"><i class=\"fa fa-warning-sign\"></i> {{r.error.message}}</div></div></div></div></div></li></ul></div></div>"
  );


  $templateCache.put('/personcab/payment/paymentsELK.template.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><ul class=\"payments-list\"><li ng-repeat=\"payment in $ctrl.payments\"><div class=\"row\"><div class=\"col-sm-8\"><strong class=\"payments-item-title\">{{payment.paymentName}}</strong><ul class=\"payments-item-requisites\"><li>Дата платежа: {{payment.paymentDate | dateFormat:\"DD.MM.YYYY HH:mm\"}}</li><li>Номер платежа: {{payment.elkPaymentNumber}}</li></ul></div><div class=\"col-sm-4\"><div class=\"payments-item-ctrl\"><p class=\"payments-item-price\">{{payment.paymentSumma}} <span class=\"icon-rouble\"></span></p></div></div></div><div class=\"row\"><div class=\"col-sm-12\"><a ng-href=\"{{payment.paymentUrl}}\">{{payment.paymentUrl}}</a></div></div></li></ul></status-wrapper>"
  );


  $templateCache.put('/personcab/paymentListIPSH.template.html',
    "<div><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-2 control-label\" style=\"margin-top: 10px;text-align: right\">Начало:</label><div class=\"col-md-3 controls\"><date-picker max-date=\"ngModel.dateEnd\" ng-model=\"dateStart\"></date-picker></div><label class=\"col-md-2 control-label\" style=\"margin-top: 10px;text-align: right\">Окончание:</label><div class=\"col-md-3 controls\"><date-picker min-date=\"ngModel.dateStart\" ng-model=\"dateEnd\"></date-picker></div><div class=\"col-md-1 controls\"><button class=\"btn btn-xs btn-blue\" style=\"height: 50px !important\" ng-click=\"getPaymentList()\"><i ng-show=\"status=='loading'\" class=\"fa fa-circle-o-notch fa-spin\">&nbsp</i> Загрузить</button></div></div></form><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && fullList.length==0 && !nodoc\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-show=\"status=='ready' && fullList.length>0\"><ul class=\"payments-list\"><li ng-repeat=\"r in fullList\" style=\"padding-bottom: 20px\"><div class=\"payments-item\"><div class=\"row\"><div class=\"col-sm-8\"><strong class=\"payments-item-title\">{{r.paymentName}} <small>{{r.serviceType.name}}</small></strong><ul class=\"payments-item-requisites\"><li>Способ оплаты: {{r.payMethod.name}}</li><li>Платежный шлюз: {{r.payGate.name}}</li><li>Банк: {{r.bank.name}}</li><li>Статус: {{r.status.name}}</li></ul></div><div class=\"col-sm-4\"><div class=\"payments-item-ctrl\"><p class=\"payments-item-price\">{{r.amount}} <span class=\"icon-rouble\"></span></p><small>{{r.createTime | dateFormat:\"DD.MM.YYYY HH:mm\"}}</small></div></div></div></div><button class=\"btn btn-xs btn-blue\" ng-click=\"showStatus(r)\"><i ng-show=\"r.requestStatus=='loading'\" class=\"fa fa-circle-o-notch fa-spin\">&nbsp;</i> Запросить статус</button> <button class=\"btn btn-xs btn-blue\" ng-click=\"showDetails(r)\"><i ng-show=\"r.requestStatus=='loading'\" class=\"fa fa-circle-o-notch fa-spin\">&nbsp;</i> Показать детали</button> <a href=\"{{'/portal/rest/ipsh/payments/' + r.paymentId + '/pdf'}}\" target=\"_blank\" class=\"btn btn-xs btn-blue\">Печать чека</a><div ng-if=\"r._status && r.requestStatus =='ready'\"><fieldset><legend style=\"width: initial\">Статус</legend><ul class=\"payments-item-requisites\"><li>{{getStatusText(r._status.status)}}</li></ul></fieldset></div><div ng-if=\"r.details && r.requestStatus =='ready'\"><fieldset><legend style=\"width: initial\">Детали плательщика</legend><ul class=\"payments-item-requisites\"><li>Ф.И.О.: {{r.details.payment.payer.payerSurname}} {{r.details.payment.payer.payerName}} {{r.details.payment.payer.payerMiddleName}}</li><li>Адрес: {{r.details.payment.payer.payerAddress.zipCode}} {{r.details.payment.payer.payerAddress.addressString}}</li><li>ИНН: {{r.details.payment.payer.payerInn}}</li></ul></fieldset></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.requestStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.error.message}}</p></div></div></li></ul><ul ng-if=\"data.numPages > 1\" uib-pagination boundary-links=\"true\" total-items=\"data.numPages*paging.size\" items-per-page=\"paging.size\" ng-model=\"paging.page\" ng-change=\"getPaymentList()\" class=\"pagination-sm\" previous-text=\"&lsaquo;\" next-text=\"&rsaquo;\" first-text=\"&laquo;\" last-text=\"&raquo;\"></ul></div></div>"
  );


  $templateCache.put('/personcab/pays.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-if=\"status=='ready' && list.length==0 && !nodoc \"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-if=\"status=='ready' && list.length>0\"><ul><li ng-repeat=\"r in list\" style=\"list-style:none\"><div class=\"payments-item\"><div class=\"row\"><div class=\"col-sm-6\"><strong class=\"payments-item-title\">{{r.narrative}} <small>{{r.supplierOrgInfo_name}}</small> <small ng-if=\"getPaymentStatusText(r.paymentStatusCode)\"><b>Статус: </b>{{getPaymentStatusText(r.paymentStatusCode)}}</small></strong><ul class=\"payments-item-requisites\"><li><span>{{r.time | date}}</span></li></ul></div><div class=\"col-sm-3\"><div class=\"payments-item-ctrl\"><p class=\"payments-item-price\">{{r.totalAmount}} <span class=\"icon-rouble\"></span></p></div></div><div class=\"col-sm-3\"><div class=\"payments-item-ctrl\"><a target=\"_blank\" ng-href=\"{{r.formURL}}\"><span class=\"btn btn-xs btn-blue\">Оплатить</span> </a><a target=\"_blank\" ng-href=\"{{r.paymentStatusFormURL}}\"><span class=\"btn btn-xs btn-white\">Проверить статус оплаты</span> </a><a ng-if=\"r.idServiceRequest\" style=\"margin-top: 3px\" ng-click=\"showServiceRequest(r.idServiceRequest)\"><span class=\"btn btn-xs btn-white\">Просмотр заявления</span></a></div></div></div></div></li></ul></div></div>"
  );


  $templateCache.put('/personcab/payService.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><div><a href=\"{{'rgu/service_view?id=' + serviceInfo.pspassport_id + '&rid=' + serviceInfo.service_id + '&tab=statement' |s1Url}}\"><h3>{{serviceInfo.service_title}}</h3></a></div><h4>{{serviceInfo.dept_title}}</h4><div ng-show=\"paymentOptions.length > 1\"><div class=\"row\"><div class=\"col-md-12\"><label for=\"paymentOptsId\" class=\"c-field-label new-c-field-label\">Вариан оплаты</label><select class=\"form-control new-c-field-select\" style=\"white-space: normal; -webkit-appearance: none\" ng-model=\"selectedPaymentOption\" ng-options=\"idx as opt.name for (idx, opt) in paymentOptions\" placeholder=\"- выбрать вариант оплаты\" id=\"paymentOptsId\"><option ng-show=\"!selectedPaymentOption\" value=\"\">- выбрать</option></select></div></div><br></div><div ng-show=\"htmlComment\" class=\"alert alert-info\" ng-bind-html=\"htmlComment\"><br></div><div ng-show=\"formModel\"><form name=\"form\" sf-schema=\"schema\" sf-form=\"form\" sf-model=\"formModel\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div><div class=\"appl-form-ctrl\"><button class=\"btn btn-blue\" ng-click=\"pay()\"><i ng-show=\"proceed\" class=\"fa fa-circle-o-notch fa-spin\">&nbsp</i>Перейти к оплате</button></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div>"
  );


  $templateCache.put('/personcab/poll/poll.component.html',
    "<status-wrapper status=\"$ctrl.p.status\" error=\"$ctrl.p.error\"><div ng-if=\"$ctrl.p.status=='ready' && ($ctrl.isAdmin || $ctrl.p.active)\"><div class=\"row\"><div class=\"col-md-12\"><p><a ng-href=\"{{'personcab/poll/' + $ctrl.p._id | s1Url}}\"><strong>{{$ctrl.p.question}}</strong></a></p></div></div><div class=\"row\" ng-repeat=\"v in $ctrl.p.variants\"><div class=\"col-md-7 col-xs-12\"><div><ul class=\"appl-form-list\"><li><label ng-if=\"!$ctrl.p.isMultiVariant\" class=\"c-label c-label-check\" style=\"font-weight: 500\"><input type=\"radio\" ng-model=\"$ctrl.p.selected\" ng-value=\"$index\"> <span ng-hide=\"$ctrl.isAdmin || $ctrl.p.isSubmitted\" class=\"c-radio\"></span> {{v.title}}<div><img ng-click=\"v.checked = !v.checked\" ng-if=\"v.imageId\" ng-src=\"{{'portal/rest/poll/image/' + v.imageId | s1Url}}\" alt=\"\"></div></label><div ng-if=\"$ctrl.p.isMultiVariant\" ng-class=\"{'mm-checkbox': !$ctrl.isAdmin && !$ctrl.p.isSubmitted}\"><input ng-if=\"!$ctrl.isAdmin && !$ctrl.p.isSubmitted\" type=\"checkbox\" ng-model=\"v.checked\"><label ng-click=\"v.checked = !v.checked\">{{v.title}}</label><div><img ng-click=\"v.checked = !v.checked\" ng-if=\"v.imageId\" ng-src=\"{{'portal/rest/poll/image/' + v.imageId | s1Url}}\" alt=\"\"></div></div></li></ul></div></div><div class=\"col-md-4 col-xs-5\" style=\"text-align: right\"><p class=\"text-muted\">Проголосовало</p></div><div class=\"col-md-1 col-xs-7\"><span class=\"label label-default\" style=\"background-color: #999\">{{v.count}}</span></div></div><div ng-show=\"$ctrl.isAdmin && $ctrl.p.description\"><span class=\"text-primary text-left\">{{$ctrl.p.description}}</span></div><div class=\"row\" ng-hide=\"$ctrl.isAdmin\"><div class=\"col-md-7 col-xs-12\"><button class=\"btn btn-xs btn-primary\" ng-disabled=\"!$ctrl.canVote($ctrl.p)\" ng-show=\"!$ctrl.p.isSubmitted\" ng-click=\"$ctrl.vote($ctrl.p);\"><i class=\"fa fa-check\"></i> Голосовать</button> <span class=\"text-primary text-left\" ng-show=\"$ctrl.p.isSubmitted\">Ваш голос принят</span></div><div class=\"col-md-4 col-xs-5\" style=\"text-align: right\"><p class=\"text-muted\">Всего опрошено</p></div><div class=\"col-md-1 col-xs-7\"><span class=\"label label-default\">{{$ctrl.p.count}}</span></div></div><div class=\"row\" ng-show=\"$ctrl.isAdmin\"><br><div class=\"col-md-5\"><a href class=\"btn btn-xs btn-primary\" ng-click=\"$ctrl.p.status = 'edit'; $ctrl.p.error = undefined;\" title=\"Редактировать\"><i class=\"fa fa-pencil\"></i> </a><a href class=\"btn btn-xs btn-success\" ng-show=\"!$ctrl.p.active\" ng-click=\"$ctrl.enable($ctrl.p, true);\" title=\"Активировать\"><i class=\"fa fa-play\"></i> </a><a href class=\"btn btn-xs btn-default\" ng-show=\"$ctrl.p.active\" ng-click=\"$ctrl.enable($ctrl.p, false);\" title=\"Остановить\"><i class=\"fa fa-stop\"></i> </a><a href class=\"btn btn-xs btn-warning\" ng-click=\"$ctrl.toMain($ctrl.p);\" title=\"На главную\"><i class=\"fa fa-desktop\"></i> </a><a ng-if=\"!$ctrl.hideRemove\" href class=\"btn btn-xs btn-danger\" ng-click=\"$ctrl.remove($ctrl.p)\" title=\"Удалить\"><i class=\"fa fa-remove\"></i></a></div><div class=\"col-md-2\" align=\"right\"><p class=\"text-muted\">Всего опрошено</p></div><div class=\"col-md-1\"><span class=\"label label-default\">{{$ctrl.p.count}}</span></div><div class=\"col-md-4\" align=\"right\"><p class=\"text-muted\" ng-show=\"$ctrl.p.startDate && $ctrl.isAdmin\">Опрос начат <span class=\"label label-default\">{{$ctrl.p.startDate | dateFormat:\"DD.MM.YYYY HH:mm\"}}</span></p></div></div></div><div ng-if=\"$ctrl.p.status=='edit'\"><div class=\"c-field\"><sup class=\"c-field-label\">Вопрос опроса</sup> <input type=\"text\" ng-model=\"$ctrl.p.question\" class=\"c-text\"></div><div class=\"row\" ng-repeat=\"v in $ctrl.p.variants\"><div class=\"col-md-1\"></div><div class=\"col-md-4\"><div><div class=\"c-field\"><sup class=\"c-field-label\">Вариант ответа</sup> <input type=\"text\" ng-model=\"v.title\" class=\"c-text\"></div></div></div><div class=\"col-md-4\"><img ngf-src=\"!v.image.$error && v.image\"> <a href=\"\" class=\"btn btn-default\" ngf-select ng-model=\"v.image\" name=\"file\" ngf-pattern=\"'image/*'\" ngf-accept=\"'image/*'\" ngf-max-size=\"20MB\">Загрузить изображение</a></div><div class=\"col-md-1\"><a href class=\"appl-table-btn\" style=\"padding: 15px 5px 5px 5px\" ng-click=\"$ctrl.p.variants.splice($index, 1)\" title=\"Удалить\"><i class=\"fa fa-times\"></i></a></div></div><div class=\"row\"><div class=\"col-md-1\"></div><div class=\"col-md-1\"><a href class=\"appl-table-btn\" style=\"padding: 0px 5px 15px 5px\" ng-click=\"$ctrl.p.variants.push({name:''})\" title=\"Удалить\"><i class=\"fa fa-plus\"></i></a></div></div><div class=\"c-field\"><sup class=\"c-field-label\">Примечание</sup> <input type=\"text\" ng-model=\"$ctrl.p.description\" class=\"c-text\"></div><div class=\"c-field\"><div class=\"mm-checkbox\"><input type=\"checkbox\" ng-model=\"$ctrl.p.isMultiVariant\" class=\"ng-pristine ng-untouched ng-valid ng-empty\"><label ng-click=\"$ctrl.p.isMultiVariant = !$ctrl.p.isMultiVariant\">Возможность выбрать несколько вариантов ответа (checkbox)</label></div></div><div><a href class=\"btn btn-xs btn-primary\" ng-click=\"$ctrl.save($ctrl.p);\"><i class=\"fa fa-save\"></i> Сохранить </a><a href class=\"btn btn-xs btn-default\" ng-click=\"$ctrl.cancelEdit();\"><i class=\"fa fa-remove\"></i> Отмена</a></div></div></status-wrapper>"
  );


  $templateCache.put('/personcab/poll/pollList.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div><div class=\"container-fluid\" ng-show=\"status=='ready'\"><div style=\"padding:10px;text-align:center\" ng-show=\"polls.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div ng-repeat=\"p in polls\" class=\"appl-table-content\" style=\"margin-bottom: 10px;border-radius: 10px\"><poll p=\"p\" on-refresh=\"refresh()\"></poll><div ng-show=\"p.error\"><br><h4>Ошибка</h4><p>{{p.error.message}}</p></div><div style=\"padding:10px;text-align:center\" ng-show=\"p.status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><br></div><button ng-show=\"isAdmin\" class=\"btn btn-xs btn-primary\" ng-click=\"polls.push({variants:[]}); polls[polls.length-1].status = 'edit';\" style=\"margin-top: 20px\"><i class=\"fa fa-plus\"></i> Добавить опрос</button></div>"
  );


  $templateCache.put('/personcab/poll/pollOne.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><poll p=\"$ctrl.p\" on-refresh=\"$ctrl.refresh()\" hide-remove=\"true\"></poll></status-wrapper>"
  );


  $templateCache.put('/personcab/recordMfc.template.html',
    "<div class=\"container-fluid\"><h3>Запись на прием в МФЦ</h3><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'images/loader.gif'|s1Url}}\"></div><br><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка. Попробуйте обратиться позднее.</h4><p>{{error.message}}</p></div></div><div ng-show=\"status=='done'\"><div><h4>Вы успешно записались на прием.</h4><br></div></div><div ng-show=\"status=='ready'\"><div class=\"row\"><div class=\"col-md-10\"><div><form name=\"form\" sf-schema=\"schema\" sf-form=\"form\" sf-model=\"model\" sf-options=\"{destroyStrategy: 'retain'}\"></form></div></div></div></div><div class=\"appl-form-ctrl\"><a ng-show=\"status=='done'\" class=\"btn btn-white\" href=\"{{'personcab/index.jsp?tab=my-records' |s1Url}}\"><span class=\"icon-left-open\"></span> К списку записей</a> <button class=\"btn btn-blue\" ng-show=\"status=='ready'\" ng-click=\"appointment()\">Записаться</button></div></div>"
  );


  $templateCache.put('/personcab/requestConfirm.template.html',
    "<div ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка. Попробуйте обратиться позднее.</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'||sendStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><p><b>Требуется Ваше согласие по следующим пунктам:</b></p><ul class=\"appl-form-ul\"><li>Я подтверждаю, что вся представленная информация является достоверной и точной;</li><li>Я несу ответственность в соответствии с действующим законодательством Российской Федерации за предоставление заведомо ложных или неполных сведений;</li><li>Я выражаю свое согласие на необходимое использование и обработку своих персональных данных, в том числе в информационных системах;</li><li>Со сроками оказания государственной услуги ознакомлен;</li></ul><p><label class=\"c-label c-label-check\"><input type=\"checkbox\" ng-model=\"checked\" name=\"\"> <span class=\"c-checkbox\"></span> Я подтверждаю свое согласие со всеми вышеперечисленными пунктами</label></p><div class=\"appl-form-ctrl\"><a href=\"javascript:history.back()\" class=\"btn btn-white\">Назад</a> <button class=\"btn btn-blue\" ng-disabled=\"!checked\" ng-click=\"nextRequest()\">Далее</button></div></div>"
  );


  $templateCache.put('/personcab/requestRate/indicator-radio.html',
    "<div class=\"form-group\"><strong>{{$ctrl.indicator.title}}</strong><p>{{$ctrl.indicator.description}}</p><div ng-repeat=\"value in $ctrl.indicator.values.value\" class=\"form-check\"><label title=\"{{value.title}}\"><input type=\"radio\" value=\"{{value.id}}\" ng-model=\"$ctrl.indicator.value\" ng-disabled=\"$ctrl.isDisabled\"> {{value.title}}</label><p>{{value.altTitle}}</p></div></div>"
  );


  $templateCache.put('/personcab/requestRate/indicator-textarea.html',
    "<div class=\"form-group\"><strong>{{$ctrl.indicator.title}}</strong><p>{{$ctrl.indicator.description}}</p>TODO: textarea</div>"
  );


  $templateCache.put('/personcab/requestRate/request-rate.html',
    "<h3><strong ng-show=\"!$ctrl.ratingId\">Оценка качества оказанной услуги</strong></h3><h3><strong ng-show=\"$ctrl.ratingId\">Результат оценки качества оказанной услуги</strong></h3><status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><div class=\"row\"><div class=\"col-md-1\"><b class=\"\">Заявление</b></div><div class=\"col-md-10\"><p>№ {{$ctrl.docNum}} от {{ $ctrl.receivedDate | dateFormat:\"DD.MM.YYYY HH:mm\" }}</p></div></div><div class=\"row\"><div class=\"col-md-1\"><b class=\"\">Ведомство</b></div><div class=\"col-md-10\"><p>{{$ctrl.dept.name}}</p></div></div><div class=\"row\"><div class=\"col-md-1\"><b class=\"\">Услуга</b></div><div class=\"col-md-10\"><p>{{$ctrl.psPassport.name}}</p></div></div><div class=\"row\"><div class=\"col-md-1\"><b class=\"\">Процедура</b></div><div class=\"col-md-10\"><p>{{$ctrl.service.name}}</p></div></div><br><div ng-repeat=\"block in $ctrl.form.blocks.block\"><h4 ng-if=\"$ctrl.getIndicators(block.id).length > 0\"><strong>{{block.value}}</strong></h4><div ng-repeat=\"indicator in $ctrl.getIndicators(block.id)\" class=\"row\" style=\"margin-top: 20px\"><div ng-if=\"indicator.viewAs == 'radio'\" class=\"col-md-12\"><indicator-radio indicator=\"indicator\" is-disabled=\"!!$ctrl.ratingId\"></indicator-radio></div><div ng-if=\"indicator.viewAs == 'checkbox'\" class=\"col-md-12\">TODO: checkbox</div><div ng-if=\"indicator.viewAs == 'string'\" class=\"col-md-12\">TODO: string</div><div ng-if=\"indicator.viewAs == 'textarea'\" class=\"col-md-12\"><indicator-textarea indicator=\"indicator\" is-disabled=\"!!$ctrl.ratingId\"></indicator-textarea></div></div></div><div class=\"appl-form-ctrl\"><a class=\"btn btn-white\" href=\"{{'personcab/index?tab=statement' |s1Url}}\"><span class=\"icon-left-open\"></span> К списку заявлений </a><button class=\"btn btn-blue\" ng-show=\"!$ctrl.ratingId\" ng-click=\"$ctrl.postRate()\">Отправить оценку</button></div></status-wrapper>"
  );


  $templateCache.put('/personcab/resourceSchedule/removeIntervals.component.html',
    "<status-wrapper status=\"$ctrl.status\" error=\"$ctrl.error\"><h3>Удаление интервалов</h3><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-3 control-label\">Начало:</label><div class=\"col-md-3 controls\"><date-picker ng-model=\"$ctrl.dateStart\"></date-picker></div><label class=\"col-md-3 control-label\">Окончание:</label><div class=\"col-md-3 controls\"><date-picker ng-model=\"$ctrl.dateEnd\"></date-picker></div></div></form><button class=\"btn btn-xs btn-danger\" ng-click=\"$ctrl.removeIntervals()\" ng-disabled=\"!$ctrl.isValid()\"><i class=\"fa fa-trash\"></i> Удалить</button> <button class=\"btn btn-xs btn-white\" ng-click=\"$ctrl.vis=false\">Отмена</button></status-wrapper>"
  );


  $templateCache.put('/personcab/resourceSchedule/repeatInterval.template.html',
    "<div class=\"form-group\"><label class=\"control-label\"><input type=\"checkbox\" ng-model=\"ngModel.checked\">Повторяющиеся мероприятие</label></div><div ng-hide=\"!ngModel.checked\"><div class=\"form-group\"><label class=\"col-md-4 control-label\">Дни повторения:</label><div class=\"col-md-8 controls\"><label class=\"control-label\" ng-repeat=\"day in ngModel.days track by $index\" style=\"margin-right: 5px\"><input type=\"checkbox\" ng-model=\"ngModel.days[$index]\"> {{getDayName($index)}}</label></div></div><div class=\"form-group\"><label class=\"col-md-4 control-label\">Окончание:</label><div class=\"col-md-8 controls\"><date-picker min-date=\"minDate\" max-date=\"maxDate\" ng-model=\"ngModel.dateEnd\"></date-picker></div></div></div>"
  );


  $templateCache.put('/personcab/resourceSchedule/resourceSchedule.template.html',
    "<div class=\"resource-schedule-table-view mb-1 alert alert-success\"><div class=\"if-animation table-heading\" ng-show=\"!selected\"><h3 class=\"service-heading\" ng-if=\"!notitle\">Расписание - <b>{{place}}</b></h3><div class=\"appl-note d-flex align-items-center justify-content-between mb-1\"><h2 ng-if=\"moment.format('MMMM')\" style=\"font-size: 3rem; line-height: 1\">{{moment.format(\"MMMM\")}}</h2><div><button class=\"appl-note-back m-0\" ng-click=\"monthBack()\" title=\"Назад\" s1-tooltip><span class=\"icon-left-open\"></span></button> <button class=\"appl-note-forward m-0\" ng-click=\"monthForward()\" title=\"Вперед\" s1-tooltip><span class=\"icon-right-open\"></span></button></div></div><table class=\"table-calendar\"><thead><tr><th ng-repeat=\"d in days\" class=\"calendar-days col-md-1\" style=\"text-transform: capitalize\">{{d.title}}</th></tr></thead><tbody><tr ng-repeat=\"w in weeks\"><td ng-repeat=\"d in w.week\" ng-class=\"{\n" +
    "                            'calendar-td-active': (isUser && !d.selectLocked) || isLocked(d)\n" +
    "                        }\"><div class=\"calendar-day calendar-weeks\" style=\"height: initial; margin-bottom: auto\" ng-click=\"select(d)\" ng-class=\"{'alert-success':selected==d}\" s1-tooltip title=\"{{d.title}}\"><span ng-show=\"d.moment.month()==moment.month() && d.moment.day()!=0 && d.moment.day()!=6\">{{d.moment.date()}}</span> <span ng-show=\"d.moment.month()==moment.month() && (d.moment.day()==0 || d.moment.day()==6)\" style=\"color:red\">{{d.moment.date()}}</span> <span ng-hide=\"d.moment.month()==moment.month()\" style=\"color:#aaa\">{{d.moment.date()}}</span><div ng-show=\"d.list.length>0\" class=\"if-animation\" style=\"font-size:12px;color:#888\"><i class=\"fa fa-tasks\"></i> {{d.maxInt/60000}} мин.</div><div ng-show=\"d.intervals.length>0 && isDept\" class=\"if-animation\" style=\"font-size:12px;color:#888;background-color: lawngreen\"><i class=\"fa fa-user\"></i> {{d.intervals.length}} зап.</div></div></td></tr></tbody></table></div><div class=\"if-animation\" ng-show=\"!!selected\"><div ng-show=\"removing\" class=\"alert alert-info\"><div ng-hide=\"removing.removeStatus=='loading'\"><div style=\"padding:10px\" ng-show=\"removing.removeStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{removing.removeError.message}}</p></div></div><div>Подтвердите удаление интервала <b>{{removing.time|dateFormat:'HH:mm'}} - {{removing.timeEnd|dateFormat:'HH:mm'}}</b> <span>({{removing.length / 60000}} мин.)</span></div><button class=\"btn btn-xs btn-danger\" ng-click=\"remove(removing)\"><i class=\"fa fa-times\"></i> Удалить</button> <a href=\"javascript:void(0)\" ng-click=\"removing=null\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"removing.removeStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><div ng-show=\"!newInt.time\"><div class=\"appl-note\"><h3 class=\"service-heading\">{{place}}</h3><div class=\"appl-note-ctrl\"><button class=\"appl-note-back\" ng-click=\"select(null);refresh();returnStatus();\" title=\"Назад\" s1-tooltip><span class=\"icon-left-open\"></span></button> <button class=\"appl-note-update\" ng-click=\"refresh()\" ng-show=\"!selected.selectLocked\"><span class=\"icon-arrows-cw\"></span></button><p class=\"appl-note-heading\" style=\"padding-top: 4px\">Вернуться к выбору даты</p></div><div class=\"appl-time\" ng-show=\"(isDept\n" +
    " && selected.subIntervals.length>0) || (!selected.selectLocked && selected.subIntervals.length>0)\"><ul class=\"appl-time-list\"><li ng-repeat=\"subInterval in selected.subIntervals\"><label class=\"appl-time-check\"><input type=\"radio\" ng-disabled=\"!subInterval.enabled\" ng-click=\"selectSubInterval(subInterval)\" ng-class=\"{selected: subInterval == $parent.selectedSubInterval}\"> <time>{{subInterval.time|mskFormat}} - {{subInterval.timeEnd|mskFormat}}</time></label></li></ul></div><br><div ng-show=\"isDept && selected.intervals.length>0\"><div print-landscape><table class=\"table table-hover\" style=\"margin-bottom: 20px\" print-table=\"selected.intervals\"><thead><tr><th>Время записи (интервал)</th><th>ФИО</th><th>СНИЛС</th><th>Телефон</th><th>Почта</th><th>Адрес</th><th>Вопрос</th><th>Доп. информация</th></tr></thead><tbody><tr ng-repeat=\"value in selected.intervals\"><td>{{ value.time|mskFormat}} - {{value.timeEnd|mskFormat}}</td><td>{{ value.user.name.lastName }} {{ value.user.name.firstName }} {{ value.user.name.middleName }}</td><td>{{ value.user.snils }}</td><td>{{ value.user.phone }}</td><td>{{ value.user.email }}</td><td>{{ value.user.address }}</td><td>{{ value.question.name }}</td><td>{{ value.info }}</td></tr></tbody></table></div></div></div></div></div><div ng-show=\"isDept\"><div><b ng-show=\"selected.editLocked\">День заблокирован для редактирования</b></div><button class=\"btn btn-primary\" ng-click=\"adding=true\" ng-show=\"!adding && !removingIntervals && !selected.editLocked\"><i class=\"fa fa-plus\"></i> Добавить интервал</button> <button class=\"btn btn-danger\" ng-click=\"removingIntervals=true\" ng-show=\"!adding && !removingIntervals && !selected.editLocked\"><i class=\"fa fa-trash\"></i> Удаление интервалов</button> <button print-btn ng-show=\"!adding && !removingIntervals\" class=\"btn btn-primary\"><i class=\"fa fa-print\"></i> Распечатать таблицу</button><div ng-show=\"adding\"><div ng-hide=\"addStatus=='loading'\"><form class=\"form-horizontal\"><div class=\"form-group\"><label class=\"col-md-4 control-label\">Начало:</label><div class=\"col-md-8 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.start\" ui-mask=\"99:99\"></div></div><div class=\"form-group\"><label class=\"col-md-4 control-label\">Окончание:</label><div class=\"col-md-8 controls\"><input class=\"form-control\" type=\"text\" ng-model=\"newObj.end\" ui-mask=\"99:99\"></div></div><repeat-interval min-date=\"selected.moment\" max-date=\"maxDate\" ng-model=\"newObj.repeatInterval\"></repeat-interval></form><div style=\"padding:10px\" ng-show=\"addStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addError.message}}</p></div></div><button class=\"btn btn-xs btn-primary\" ng-click=\"add()\"><i class=\"fa fa-plus\"></i> Создать</button> <a href=\"javascript:void(0)\" ng-click=\"adding=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"addStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div><remove-intervals ng-if=\"removingIntervals\" id-organization=\"id\" id-resource=\"resourceId\" on-remove=\"onRemove(count)\"></remove-intervals><div style=\"padding:10px\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><ul ng-show=\"status=='ready'\"><li ng-repeat=\"r in selected.list\" style=\"list-style:none\"><div style=\"padding:10px;border-bottom:solid 1px #ccc\"><div><span style=\"font-size:16px;margin:0 10px 10px 0\">{{r.time|mskFormat}} - {{r.timeEnd|mskFormat}}</span> <button class=\"btn btn-xs btn-danger\" ng-show=\"isDept && !selected.editLocked\" ng-click=\"r.removing = true\"><i class=\"fa fa-times\"></i></button></div><div ng-show=\"r.removing\"><div ng-hide=\"r.removeStatus=='loading'\"><div style=\"padding:10px\" ng-show=\"r.removeStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{r.removeError.message}}</p></div></div><button class=\"btn btn-xs btn-danger\" ng-click=\"remove(r)\"><i class=\"fa fa-times\"></i> Удалить</button> <a href=\"javascript:void(0)\" ng-click=\"r.removing=false\">Отмена</a></div><div style=\"padding:10px;text-align:center\" ng-show=\"r.removeStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div></div></div></li></ul></div><div ng-show=\"status=='ready'\"><div class=\"appl-note-form info-panel\" ng-show=\"selected.selectLocked && !isDept\"><b ng-show=\"selected.selectLocked\">День заблокирован для записи</b></div></div><div ng-show=\"status=='ready'\"><div class=\"appl-note-form info-panel\" ng-show=\"!selected.selectLocked && selected.subIntervals.length==0\"><b>Свободный день для записи</b></div></div><div ng-show=\"newInt.time\"><div class=\"appl-note\"><div class=\"appl-note-ctrl\"><button class=\"appl-note-back prev_2\" ng-click=\"selectSubInterval(null);refresh();returnStatus();\" title=\"Назад\" s1-tooltip><span class=\"icon-left-open\"></span></button><p class=\"appl-note-heading\">Вернуться к выбору интервала</p></div><div class=\"appl-note-form info-panel\"><div ng-show=\"status=='ready' && !selected.selectLocked\"><div ng-hide=\"addIntStatus=='loading'\"><div ng-hide=\"addIntStatus=='error' || getStatus=='error'\"><p class=\"appl-note-heading\">Запись на {{selected.moment|dateFormat}}</p><form name=\"zapis_form\" role=\"form\"><div class=\"controls\"><input type=\"text\" class=\"c-text c-text-white\" ng-model=\"newInt.time\" ui-mask=\"99:99\" disabled></div><div ng-show=\"!question\"><div class=\"controls\"><select placeholder=\"Вопрос *:\" ng-model=\"newInt.question.id\" class=\"form-control\" ng-options=\"c.id as (c.name+' - '+(c.length/60000)+' мин.') for c in resource.questions\"></select><br></div></div><div ng-show=\"isDept\"><div class=\"controls\"><textarea placeholder=\"ФИО *:\" ng-model=\"newInt.userText\" s1-autosize class=\"c-textarea c-textarea-white\" title=\"Фамилия Имя отчество для записи на прием\" required></textarea></div></div><div class=\"controls\"><input class=\"c-text c-text-white\" placeholder=\"Мобильный телефон *\" type=\"phone\" ng-model=\"newInt.userPhone\" value=\"{{personal.samlUser.person.personMobilePhone}}\" title=\"Мобильный телефон\" required></div><div class=\"controls\"><input class=\"c-text c-text-white\" placeholder=\"Адрес электронной почты *\" name=\"userEmail\" type=\"email\" ng-model=\"newInt.userEmail\" title=\"Адрес электронной почты\" value=\"{{personal.samlUser.person.email}}\" required><div class=\"alert alert-danger small\" role=\"alert\" ng-show=\"zapis_form.userEmail.$dirty && zapis_form.userEmail.$invalid\">Введите правильный email</div></div><div class=\"controls\"><input type=\"text\" placeholder=\"Адрес *\" class=\"c-text c-text-white\" title=\"Адрес регистрации проживания\" ng-model=\"newInt.userAddress\" value=\"{{adress}}\" required></div><div class=\"controls\"><textarea cols=\"30\" rows=\"10\" placeholder=\"Краткое содержание вопроса\" title=\"Краткое содержание вопроса\" class=\"c-textarea c-textarea-white\"></textarea></div><div class=\"controls\"><textarea placeholder=\"Доп. инф.:\" ng-model=\"newInt.info\" title=\"Дополнительная информация\" class=\"c-textarea c-textarea-white\" s1-autosize></textarea></div><button class=\"btn btn-blue\" style=\"padding: 6px 20px\" ng-show=\"isUser\" ng-click=\"addInt('occupied')\" ng-disabled=\"zapis_form.userEmail.$invalid\">Записаться</button> <button class=\"btn btn-blue\" style=\"padding: 6px 20px\" ng-show=\"isDept\" ng-click=\"addInt('occupied')\" ng-disabled=\"zapis_form.userEmail.$invalid\">Записать</button></form></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"addIntStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px\" ng-show=\"addIntStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{addIntError.message}}</p></div></div><div style=\"padding:10px\" ng-show=\"getStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{getStatusError.message}}</p></div></div></div></div></div></div></div>"
  );


  $templateCache.put('/personcab/statusDou.template.html',
    "<div class=\"container-fluid\"><h2 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 0px\">Проверка номера очереди в приоритетный детский сад</h2><div style=\"position: relative\"><h4 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 20px; font-size: 20px; font-weight: bold\">Введите сведения о ребенке</h4><form class=\"form-horizontal\" name=\"status_form\" role=\"form\" ng-submit=\"show(status_form)\"><div class=\"row\"><div class=\"col-sm-6\"><div class=\"c-field\" style=\"margin-bottom: 0px\"><sup class=\"c-field-label\">Фамилия *</sup> <input type=\"text\" placeholder=\"Введите фамилию\" title=\"Это обязательное поле для заполнения\" ng-model=\"form.surname\" ng-pattern=\"/^[а-яА-Я]+$/\" class=\"c-text\" name=\"surname\" required></div><div class=\"alert alert-danger small\" role=\"alert\" style=\"margin-bottom: 0px\" ng-show=\"status_form.surname.$dirty && status_form.surname.$invalid\">Введите правильно фамилию, только кирилица</div></div></div><h4 class=\"service-heading\" style=\"margin-top: 20px; margin-bottom: 0px; font-size: 20px\">Введите серию свидетельства о рождении</h4><div class=\"row\"><div class=\"col-sm-3\"><div class=\"c-field\" style=\"margin-bottom: 0px; margin-top: 20px\"><sup class=\"c-field-label\">Римские цифры *</sup> <input type=\"text\" placeholder=\"Введите римские цифры, не более 4-х\" title=\"Это обязательное поле для заполнения\" ng-model=\"form.serial_one\" class=\"c-text\" name=\"serial_one\" ng-pattern=\"/^[IVX]{1,4}$/\" required></div><div class=\"alert alert-danger small\" role=\"alert\" style=\"margin-bottom: 0px\" ng-show=\"status_form.serial_one.$dirty && status_form.serial_one.$invalid\">Введите римские цифры, не более 4-х</div></div><div class=\"col-sm-3\"><div class=\"c-field\" style=\"margin-bottom: 0px; margin-top: 20px\"><sup class=\"c-field-label\">Заглавные буквы русского алфавита *</sup> <input type=\"text\" placeholder=\"Введите 2 заглавные буквы русского алфавита\" title=\"Это обязательное поле для заполнения\" ng-model=\"form.serial_two\" class=\"c-text\" name=\"serial_two\" ng-pattern=\"/^[А-Я]{2}$/\" required></div><div class=\"alert alert-danger small\" role=\"alert\" style=\"margin-bottom: 0px\" ng-show=\"status_form.serial_two.$dirty && status_form.serial_two.$invalid\">Введите 2 заглавные буквы русского алфавита</div></div></div><div class=\"row\"><div class=\"col-sm-3\"><div class=\"c-field\" style=\"margin-bottom: 0px; margin-top: 20px\"><sup class=\"c-field-label\">Номер свидетельства о рождении *</sup> <input type=\"text\" placeholder=\"Введите 6 цифр\" title=\"Это обязательное поле для заполнения\" ng-model=\"form.number\" class=\"c-text\" name=\"number\" ng-pattern=\"/^[0-9]{6}$/\" required></div><div class=\"alert alert-danger small\" role=\"alert\" style=\"margin-bottom: 0px\" ng-show=\"status_form.number.$dirty && status_form.number.$invalid\">Введите 6 цифр номера свидетельства о рождении</div></div></div><div align=\"center\"><button class=\"btn btn-xs btn-primary\" type=\"button\" ng-disabled=\"!form.surname || !form.serial_one || !form.serial_two || !form.number\" title=\"После ввода всех обязательных полей кнопка будет доступна\" ng-click=\"show()\"><i class=\"fa fa-calendar-check-o\"></i> Показать</button></div></form><div class=\"appl-table-scroll\" ng-show=\"status=='ready'\"><table class=\"appl-table\"><thead><tr><th>Номер в очереди</th><th style=\"white-space: normal\">Дата постановки в очередь</th><th>Номер заявления</th><th>Текущий статус</th><th style=\"white-space: normal\">Муниципальное образование</th><th>Организация</th><th>Категория заявления</th></tr></thead><tbody><tr><td data-th=\"Номер в очереди:\" class=\"no-wrap\">{{list.queuePosition._position}}</td><td data-th=\"Дата постановки в очередь\" class=\"no-wrap\">{{list._declarationDate}}</td><td data-th=\"Номер заявления\" class=\"no-wrap\">{{list._num}}</td><td data-th=\"Текущий статус\" class=\"no-wrap\">{{list._status}}</td><td data-th=\"Муниципальное образование\">{{list.queuePosition._queueName}}</td><td data-th=\"Организация\">{{list.queuePosition._orgName}}</td><td data-th=\"Категория заявления\">{{list.queuePosition._queuetype}}</td></tr></tbody></table></div><div align=\"center\" style=\"padding:10px\" ng-show=\"status=='INFO'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>{{list._status}}</h4></div></div><div align=\"center\" style=\"padding:10px\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div></div><div class=\"st-preloader-bl\" ng-show=\"status=='loading'\"></div></div>"
  );


  $templateCache.put('/personcab/survey/survey.template.html',
    "<div ng-show=\"status=='ready'\"><h4>Готовы ли вы принять участие в проводимом Минэкономразвития России мониторинге качества предоставления государственных и муниципальных услуг в электронной форме, ответив на дополнительные вопросы по электронной почте или по телефону? *</h4><div><label><input type=\"radio\" ng-model=\"data.type\" value=\"phone_email\"> а) Да, по электронной почте и телефону;</label></div><div><label><input type=\"radio\" ng-model=\"data.type\" value=\"email\"> б) Да, только по электронной почте;</label></div><div><label><input type=\"radio\" ng-model=\"data.type\" value=\"phone\"> в) Да, только по телефону;</label></div><div><label><input type=\"radio\" ng-model=\"data.type\" value=\"no\"> г) Нет.</label></div><div class=\"row\" style=\"margin-top: 10px\">*Ответив «Да», вы подтверждаете свое согласие на участие в мониторинге качества предоставления государственных и муниципальных услуг в электронной форме и передачу сведений о вашей электронной почте или телефоне организаторам исследования для связи с вами.</div><div class=\"appl-form-ctrl\"><button class=\"btn btn-blue\" ng-click=\"send(data)\" ng-show=\"data.type\">Отправить</button></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div>"
  );


  $templateCache.put('/personcab/vote.template.html',
    "<style>.votePad {\n" +
    "        /* float: left; */\n" +
    "        /* margin: 20px; */\n" +
    "        border: 1px solid gray;\n" +
    "        padding: 10px;\n" +
    "        width: 350px;\n" +
    "        height: 750px;\n" +
    "        display: inline-flex;\n" +
    "        margin: 5px;\n" +
    "    }\n" +
    "\n" +
    "    .votePad .title {\n" +
    "        text-align: center;\n" +
    "    }\n" +
    "\n" +
    "    .votePad .description {\n" +
    "        font-size: 12pt;\n" +
    "    }\n" +
    "\n" +
    "    .votePad img {\n" +
    "        width: 100%;\n" +
    "        max-height: 470px;\n" +
    "    }\n" +
    "\n" +
    "    .bottomButtons {\n" +
    "        /* float: left; */\n" +
    "        /* width: 100%; */\n" +
    "    }</style><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><img ng-src=\"{{'images/vote/banner.jpg'|s1Url}}\"><h4 style=\"font-size: 30px\" class=\"service-heading\" ng-bind-html=\"vote.description\"></h4><h4>Всего голосов: {{vote.total}}</h4><div><div align=\"center\" style=\"margin: 0 auto\"><div ng-repeat=\"variant in vote.variants\" class=\"votePad\"><label><input ng-if=\"isAdmin\" id=\"{{variant.n}}\" type=\"file\" onchange=\"angular.element(this).scope().uploadFile()\" style=\"display: none\"> <img ng-src=\"{{getImgUrl(variant)|s1Url}}\"><div class=\"progress\" ng-show=\"isVoted\"><div class=\"progress-bar\" style=\"width: {{variant.count / vote.total * 100}}%;min-width: 30px\">{{variant.count}}</div></div><div class=\"title\" style=\"font-size: larger\"><input ng-change=\"onVote(variant)\" style=\"height: 25px; width: 25px; margin-right: 3px\" type=\"checkbox\" ng-model=\"variant.checked\" ng-hide=\"isVoted\"><br><span style=\"padding: 8px 0\">{{variant.title}}</span></div><div class=\"description\" ng-bind-html=\"variant.description\"></div></label></div></div></div><br><br><div class=\"bottomButtons\" align=\"center\"><button ng-hide=\"isVoted\" class=\"btn btn-xs btn-info\" ng-click=\"doVote()\"><i class=\"fa fa-check\" aria-hidden=\"true\"></i> Проголосовать</button></div></div>"
  );


  $templateCache.put('/rgu/caseList.template.html',
    "<section class=\"service\"><div class=\"container-fluid\"><h2 class=\"service-heading\">Выберите ситуацию</h2><div class=\"search\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" placeholder=\"Введите часть названия ситуации...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><section class=\"service\" ng-show=\"status=='ready' && list.length>0\"><div class=\"container-fluid\"><ul class=\"service-list\"><li class=\"col-xs-6 col-sm-4 col-lg-3\" ng-repeat=\"r in list\"><div class=\"service-item\"><figure class=\"service-item-svg\"><img ng-src=\"{{'portal/rest/lifeEvent/'+r.id+'/image'|s1Url}}\" alt=\"\"> <button ng-if=\"isAdmin()\" type=\"file\" ngf-select=\"uploadFile(r.id, $file)\" accept=\"image/*\" class=\"life-event-upload-img-btn\"><i class=\"fa fa-pencil\"></i></button><h3 ng-bind-html=\"r.title\" class=\"service-item-title\">{{r.title}}</h3></figure><div class=\"service-item-desc\" ng-show=\"r.service_count>0\"><ul class=\"service-item-menu\"><li><a href=\"{{'rgu/case_service_list?id='+r.id+'&title='+r.link_title|s1Url}}\"><span>Все услуги</span> <span style=\"font-size:12px;color:#888\">({{r.service_count}})</span></a></li></ul></div><div class=\"service-item-desc\"><ul class=\"service-item-menu\"><li ng-repeat=\"l in r.list\"><a href=\"{{'rgu/case_service_list?id='+l.id+'&title='+l.link_title|s1Url}}\"><span ng-bind-html=\"l.title\"></span> <span style=\"font-size:12px;color:#888\">({{l.service_count}})</span></a></li></ul></div></div></li></ul></div></section></div></section>"
  );


  $templateCache.put('/rgu/caseServiceList.template.html',
    "<section class=\"service\"><div class=\"container-fluid\"><h3 class=\"service-heading\">{{title}}</h3><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"search\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" placeholder=\"Введите часть названия услуги...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div></div></div><div class=\"dept-info\" ng-show=\"status=='ready' && list.length>0\"><div ng-repeat=\"r in list\"><div ng-repeat=\"d in r.list\"><ul class=\"dept-service-docs\"><li ng-repeat=\"s in d.list\"><a href=\"{{'rgu/service_view?id='+s.service_id+'&p='+s.id|s1Url}}\" class=\"dept-service-docs-link\"><span class=\"icon-doc-text\"></span><div><small ng-bind-html=\"d.title\"></small><div ng-bind-html=\"s.title\"></div></div></a></li></ul></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div></div></section>"
  );


  $templateCache.put('/rgu/categoryList.template.html',
    "<section class=\"service\"><div class=\"container-fluid\"><h2 class=\"service-heading\" ng-hide=\"status=='error'\">Выберите услугу</h2><div class=\"search\" ng-hide=\"status=='error'\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding-right: 0\"><input type=\"text\" ng-model=\"search\" placeholder=\"Введите часть названия категории...\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech class=\"search-input\"></div></div><small class=\"search-text\"><mark>Например:</mark> загран паспорт, заключение брака, регистрация собственности...</small></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && list.length>0\"><ul class=\"service-list\"><li class=\"col-sm-6 col-md-4\" ng-repeat=\"r in list\"><div ng-show=\"r.id != 770\" class=\"service-item\"><a href=\"{{'rgu/category_service?id='+r.id|s1Url}}\"><figure class=\"service-item-svg\"><img ng-src=\"{{'assets/images/categories_new/'+r.id+'.svg'|s1Url}}\" alt=\"\"><figcaption><h3 class=\"service-item-title\" ng-bind-html=\"r.title\"></h3></figcaption></figure></a><div class=\"service-item-desc\"><ul class=\"service-item-menu\"><li ng-repeat=\"l in r.list\"><a href=\"{{'rgu/category_service_list?id='+l.id+'&category='+l.link_category+'&title='+l.link_title|s1Url}}\"><span ng-bind-html=\"l.title\"></span> <span style=\"font-size:12px;color:#888\">({{l.service_count}})</span></a></li></ul></div></div><div ng-show=\"r.id == 770\" class=\"service-item\"><a href=\"{{'rgu/category_service?id='+r.id|s1Url}}\"><figure class=\"service-item-svg\"><img ng-src=\"{{'assets/images/categories_new/'+r.id+'.svg'|s1Url}}\" alt=\"\"><figcaption><h3 class=\"service-item-title\" ng-bind-html=\"r.title\"></h3></figcaption></figure></a><div class=\"service-item-desc\"><ul class=\"service-item-menu\"><li><a href=\"{{'rgu/service_view?id=2600000010000004209&rid=2600000010000012158&tab=statement'|s1Url}}\"><span>Зачисление в детский сад</span></a></li><li><a href=\"{{'rgu/service_view?id=2600000010000162236&rid=2600000010000162689&tab=statement'|s1Url}}\"><span>Зачисление в образовательную организацию</span></a></li><li><a href=\"{{'rgu/service_view?id=2600000010000162236&rid=2600000010000162665&tab=statement'|s1Url}}\"><span>Зачисление в муниципальную общеобразовательную организацию</span></a></li><li><a href=\"{{'rgu/service_view?id=2600000010000162236&rid=2600000010000162269&tab=statement'|s1Url}}\"><span>Зачисление в отдельные общеобразовательные организации Ставропольского края</span></a></li><li><a href=\"{{'rgu/service_view?id=2600000010000162236&rid=2600000010000162677&tab=statement'|s1Url}}\"><span>Зачисление в профессиональную образовательную организацию</span></a></li><li><a href=\"{{'personcab/info_pou'|s1Url}}\"><span>Предоставление информации о текущей успеваемости учащегося</span></a></li><li><a href=\"{{'personcab/status_dou'|s1Url}}\"><span>Проверка очереди в приоритетный детский сад</span></a></li></ul></div></div></li><li class=\"col-xs-6 col-sm-4 col-lg-3\"><div class=\"service-item\"><a href=\"https://www.gosuslugi.ru/302869/1\"><figure class=\"service-item-svg\"><img ng-src=\"{{'assets/svg/attestation.svg'|s1Url}}\" alt=\"\"><h3 class=\"service-item-title\">Предоставление предварительных результатов ЕГЭ</h3></figure></a></div></li></ul></div></div></section>"
  );


  $templateCache.put('/rgu/categoryService.template.html',
    "<section class=\"category\"><div class=\"container-fluid\"><div class=\"panel\"><div class=\"row\"><div class=\"col-md-2\"><a href=\"javascript:void(0)\" ng-click=\"goBack()\" class=\"btn btn-md btn-white\"><span class=\"icon-left-open\"></span> Вернуться</a></div><div class=\"col-md-10\"><h2 class=\"service-heading\">{{category.title}}</h2></div></div></div><div ng-hide=\"serviceList.length>0\"><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && serviceList.length>0\"><ul class=\"category-list\"><li ng-repeat=\"sublist in serviceList\"><a ng-show=\"!sublist.url\" href=\"{{'rgu/service_view.jsp?id='+sublist.id|s1Url}}\" class=\"category-link\"><figure class=\"category-link-figure\"><span class=\"icon-doc-text\"></span></figure>{{sublist.full_title}} </a><a ng-show=\"sublist.url\" href=\"{{sublist.url}}\" class=\"category-link\" target=\"_blank\"><figure class=\"category-link-figure\"><span class=\"icon-doc-text\"></span></figure>{{sublist.full_title}}</a></li></ul></div><div ng-show=\"status=='ready' && list.length>0\"><dl class=\"category-accordion\"><div ng-repeat=\"sub in list\"><dt onclick=\"$(this).parent().toggleClass('is-active')\">{{sub.category.title}}</dt><dd><ul class=\"category-list\"><li ng-repeat=\"sublist in sub.list\"><a href=\"{{'rgu/service_view?id='+sublist.id|s1Url}}\" class=\"category-link\"><figure class=\"category-link-figure\"><span class=\"icon-doc-text\"></span></figure>{{sublist.full_title}}</a></li></ul></dd></div></dl></div></div></section>"
  );


  $templateCache.put('/rgu/categoryServiceList.template.html',
    "<section class=\"service\"><div class=\"container-fluid\"><h3 class=\"service-heading\" ng-hide=\"status=='error'\">{{category}}</h3><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"search\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" placeholder=\"Введите часть названия услуги...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div></div></div><div class=\"dept-info\" ng-show=\"status=='ready' && list.length>0\"><div ng-repeat=\"r in list\"><div ng-repeat=\"d in r.list\"><ul class=\"dept-service-docs\"><li ng-repeat=\"s in d.list\"><a href=\"{{'rgu/service_view?id='+s.id|s1Url}}\" class=\"dept-service-docs-link\"><span class=\"icon-doc-text\"></span><div><small ng-bind-html=\"d.title\"></small><div ng-bind-html=\"s.full_title\"></div></div></a></li></ul></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div></div></section>"
  );


  $templateCache.put('/rgu/deptList.template.html',
    "<div class=\"st-main\"><section class=\"dept\"><div class=\"container-fluid\"><h2 class=\"service-heading\">Выбор ведомства</h2><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':isSelected('REGIONAL')}\"><a ng-click=\"selectTab('REGIONAL')\">Региональные</a></li><li ng-class=\"{'is-active':isSelected('MUNICIPAL')}\"><a ng-click=\"selectTab('MUNICIPAL')\">Муниципальные</a></li><li ng-class=\"{'is-active':isSelected('FEDERAL')}\"><a ng-click=\"selectTab('FEDERAL')\">Федеральные</a></li></ul></nav><div ng-show=\"status=='ready' && isSelected('MUNICIPAL')\"><div class=\"row\" style=\"margin: 2px\"><div class=\"form-group\" align=\"center\"><div class=\"col-md-3\"><label>Выберите район из списка:</label></div><div class=\"col-md-4\"><select class=\"form-control\" title=\"Выберите район из списка\" ng-model=\"selected\" ng-options=\"option as option.title for option in options\" placeholser=\"Выберите район из списка\"></select></div></div></div></div><div class=\"search\"><div style=\"padding: 15px\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" placeholder=\"Введите часть названия органа власти...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><style>.rgu-depts.dept-list {\n" +
    "                    padding-left: 0;\n" +
    "                    padding-right: 0;\n" +
    "                }\n" +
    "                .rgu-depts .dept-item {\n" +
    "                    min-height: 300px;\n" +
    "                    border: 1px solid rgba(15,15,15, 0.14);\n" +
    "                    border-radius: 2px;\n" +
    "                    box-shadow: 0 0 6px 0px transparent;\n" +
    "                    transition: box-shadow 0.3s;\n" +
    "                 }</style><ul class=\"rgu-depts dept-list\" ng-show=\"status=='ready' && list.length>0\"><li class=\"col-xs-12 col-md-6\" ng-repeat=\"r in list\"><div class=\"dept-item\"><figure class=\"dept-item-image\"><img ng-src=\"{{'assets/images/img-dept-1.png'|s1Url}}\"> <mark class=\"dept-item-count\">{{r.service_count}} <span class=\"dept-item-count-caption\">Количество оказываемых услуг</span></mark></figure><h2 class=\"dept-item-title\"><a href=\"{{'rgu/dept_view?id='+r.id|s1Url}}\">{{r.title}}</a></h2><a href=\"javascript:void(0)\" class=\"btn btn-default btn-xs\" ng-show=\"r.children_count>0 \" ng-click=\"addToPath(r)\"><i class=\"fa fa-chevron-right\"></i> &nbsp;Структура органов власти</a><div ng-show=\"r.director_person\"><p class=\"dept-item-text\">Руководитель: <b>{{r.director_person}}</b></p><div><ul class=\"dept-item-contacts\"><li ng-show=\"r.call_center_phone\"><span class=\"icon-phone\"></span> {{r.call_center_phone}}</li><li ng-show=\"r.email\"><span class=\"icon-pencil\"></span> <mark>{{r.email}}</mark></li><li ng-show=\"r.web_resource\"><span class=\"icon-globe\"></span> <a href=\"{{r.web_resource}}\" target=\"_blank\">{{r.web_resource}}</a></li></ul></div></div></div></li></ul></div></section></div>"
  );


  $templateCache.put('/rgu/deptView.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && !data.id\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><section class=\"dept\"><div class=\"container-fluid\" ng-show=\"status=='ready' && data.id\"><h1 class=\"service-heading\"><img ng-src=\"{{'assets/images/logo-rus.png'|s1Url}}\" width=\"60\" height=\"65\" alt=\"\"> <span>{{data.title}}</span></h1><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':isSelected('service')}\"><a ng-click=\"selectTab('service')\" href=\"#\">Услуги</a></li><li ng-class=\"{'is-active':isSelected('contacts')}\"><a href ng-click=\"selectTab('contacts')\" href=\"#\">Контактные лица</a></li><li ng-class=\"{'is-active':isSelected('places')}\"><a href ng-click=\"selectTab('places')\" href=\"#\">Места обращений</a></li></ul></nav><div class=\"dept-info\" ng-show=\"tab=='service'\"><div class=\"search\"><div class=\"search-form\"><div class=\"search-form-field\" style=\"padding:0 0 0 0\"><input class=\"search-input\" ng-model=\"search\" placeholder=\"Введите часть названия услуги...\" type=\"text\" autocomplete=\"off\" spellcheck=\"off\" speech x-webkit-speech></div></div></div><div><ul class=\"dept-service-docs\"><li ng-repeat=\"s in list\"><a href=\"{{'rgu/service_view?id='+s.id|s1Url}}\" class=\"dept-service-docs-link\"><span class=\"icon-doc-text\"></span> {{s.full_title}}</a></li></ul></div><div style=\"padding:10px;text-align:center\" ng-show=\"list.length==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div></div><div class=\"dept-info\" ng-show=\"tab=='contacts'\"><address class=\"dept-details\" ng-show=\"data.director_person\"><strong class=\"dept-details-title\">Руководитель</strong><p class=\"dept-details-text\">{{data.director_person}}</p><ul class=\"dept-details-list\"><li ng-show=\"data.call_center_phone\"><span class=\"icon-phone\"></span> {{data.call_center_phone}}</li><li ng-show=\"data.email\"><span class=\"icon-pencil\"></span> <a href=\"mailto:{{data.email}}\">{{data.email}}</a></li><li ng-show=\"data.web_resource\"><span class=\"icon-globe\"></span> <a href=\"{{data.web_resource}}\">{{data.web_resource}}</a></li></ul><a ng-show=\"data.organization\" href=\"{{'personcab/appointments_places?id='+data.organization.id|s1Url}}\" class=\"btn btn-md btn-blue\">Записаться на прием</a></address><address class=\"dept-details\" ng-repeat=\"r in data.contacts\"><strong class=\"dept-details-title\">{{r.functionary}}</strong><p class=\"dept-details-text\">{{r.last_name}} {{r.first_name}} {{r.middle_name}}</p><ul class=\"dept-details-list\"><li ng-show=\"r.work_phone\"><span class=\"icon-phone\"></span> {{r.work_phone}}</li><li ng-show=\"r.email\"><span class=\"icon-pencil\"></span> <a href=\"mailto:{{r.email}}\">{{r.email}}</a></li><li ng-show=\"r.office\"><span class=\"icon-location\"></span> <a href=\"http://map.yandex.ru?text={{r.office.address}}\" target=\"_blank\" title=\"Показать на карте\">{{r.office.address}} </a><span>({{r.office.title}})</span></li></ul></address></div><div class=\"tab-content\" ng-show=\"tab=='places'\"><address class=\"dept-details\" ng-repeat=\"r in data.office\"><strong ng-show=\"r.title\" class=\"dept-details-title\">{{r.title}}</strong><ul class=\"dept-details-list\"><li ng-show=\"r.address\"><span class=\"icon-location\"></span> <a href=\"http://map.yandex.ru?text={{r.search}}\" target=\"_blank\" title=\"Показать на карте\">{{r.address}}</a></li><li ng-show=\"r.phone\"><span class=\"icon-phone\"></span> {{r.phone}}</li><li ng-show=\"r.email\"><span class=\"icon-pencil\"></span> <a href=\"mailto:{{r.email}}\">{{r.email}}</a></li></ul></address></div></div></section></div>"
  );


  $templateCache.put('/rgu/formNew.template.html',
    "<div><h5 align=\"center\">Эл. услуга</h5></div><div>Услуга:<oi-select oi-options=\"getFullName(item) for item in findServiceFn($query)\" ng-model=\"service\" required placeholder=\"Select\" class=\"ng-valid ng-isolate-scope ng-dirty ng-valid-parse ng-touched\"></oi-select></div><br>Ведомство: <input style=\"width : 100%\" readonly value=\"{{ service.dept_title }}\"><br>Паспорт: <input style=\"width : 100%\" readonly value=\"{{ service.pspassport_title }}\">"
  );


  $templateCache.put('/rgu/mfcRecord.template.html',
    "<section class=\"lk\"><div class=\"container-fluid\"><div class=\"appl\"><h3 class=\"lk-heading\">Выберите МФЦ для записи</h3><div class=\"col-md-12\"><div class=\"appl-form\"><form name=\"mfc_form\" role=\"form\" class=\"form-inline\" ng-submit=\"submit(mfc_form)\"><fieldset><div class=\"col-md-8\"><div class=\"c-field\"><label class=\"c-field-label\">Выберите МФЦ из списка</label><select name=\"mfc\" id=\"mfc\" title=\"Выберите МФЦ из списка\" ng-model=\"selectedOption\" ng-options=\"option.name for option in options\" class=\"c-select c-select-white\" required></select></div><button ng-disabled=\"mfc_form.mfc.$invalid\" type=\"submit\" class=\"btn btn-blue\">Записаться</button></div></fieldset></form></div></div></div><div class=\"col-md-12\" align=\"center\"><iframe ng-show=\"show\" width=\"100%\" ng-src=\"{{trustSrc(location)}}\" style=\"min-height: 650px; overflow: hidden\" frameborder=\"1\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"></iframe></div></div></section>"
  );


  $templateCache.put('/rgu/procedureView2600000000164718192.html',
    "<div><div><section class=\"dept\"><div class=\"container-fluid\"><div class=\"panel\"><div class=\"row\"><div class=\"col-md-9\"><div class=\"row\"><div class=\"col-md-3\"><img ng-src=\"assets/svg/29.svg\" style=\"width: 60px;margin-left: 40px;margin-bottom: 40px\"> <a ng-click=\"goBack()\" class=\"btn btn-sm btn-white\"><span class=\"icon-left-open\"></span> Вернуться</a></div><div class=\"col-md-9\"><h1 class=\"panel-text\">{{$ctrl.data.full_title}}</h1></div></div></div><div class=\"col-md-3\"><div class=\"panel-ctrl\"><div><a class=\"btn btn-md btn-blue\" href=\"/personcab/requestConfirm?drguId=5e3936104a17499513ebebbb\" style=\"width: 100%\">Получить услугу <span class=\"icon-right-open\"></span></a><hr></div></div></div></div></div></div><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\"><p>Сроки оказания услуги: в течении <b>25 календарных</b> дней с момента поступления заявления</p><p>Государственная пошлина: услуга предоставляется бесплатно</p><ol class=\"appl-table-details-list\"><li><strong class=\"appl-table-datails-title\">Заполните электронную форму заявления</strong></li><li><strong class=\"appl-table-datails-title\">Дождитесь проверки регистрации заявления</strong></li><li><strong class=\"appl-table-datails-title\">Заберите документ</strong></li></ol></div></div></div></section></div></div>"
  );


  $templateCache.put('/rgu/rguMenu.template.html',
    "<div><nav class=\"navbar navbar-default\" role=\"navigation\"><div class=\"collapse navbar-collapse navbar-ex1-collapse\"><ul class=\"nav navbar-nav\"><li ng-hide=\"select=='dept'\"><a href=\"{{'rgu/dept_list'|s1Url}}\" style=\"color: #0088cc;text-decoration: underline\"><i class=\"fa fa-building-o\"></i> Органы власти</a></li><li class=\"active\" ng-show=\"select=='dept'\"><a href=\"javascript:void(0)\"><i class=\"fa fa-building-o\"></i> Органы власти</a></li><li ng-hide=\"select=='category'\"><a href=\"{{'rgu/category_list'|s1Url}}\" style=\"color: #0088cc;text-decoration: underline\"><i class=\"fa fa-folder-open\"></i> Категории</a></li><li class=\"active\" ng-show=\"select=='category'\"><a href=\"javascript:void(0)\"><i class=\"fa fa-folder-open\"></i> Категории</a></li><li ng-hide=\"select=='case'\"><a href=\"{{'rgu/case_list'|s1Url}}\" style=\"color: #0088cc;text-decoration: underline\"><i class=\"fa fa-fire\"></i> Жизненные ситуации</a></li><li class=\"active\" ng-show=\"select=='case'\"><a href=\"javascript:void(0)\"><i class=\"fa fa-fire\"></i> Жизненные ситуации</a></li><li ng-hide=\"select=='search'\"><a href=\"{{'rgu/search'|s1Url}}\" style=\"color: #0088cc;text-decoration: underline\"><i class=\"fa fa-search\"></i> Поиск по реестру</a></li><li class=\"active\" ng-show=\"select=='search'\"><a href=\"javascript:void(0)\"><i class=\"fa fa-search\"></i> Поиск по реестру</a></li></ul><form class=\"navbar-form navbar-right\" ng-hide=\"hideFilter\"><div class=\"form-group\"><label style=\"font-size:13px;color:#888\">Получатели:</label><select class=\"form-control\" ng-model=\"recieverType\" style=\"display:inline-block;width:auto\"><option value>все</option><option value=\"citizen\">граждане</option><option value=\"businessman\">предприниматели</option><option value=\"organization\">организации</option><option value=\"foreign\">иностранные лица</option><option value=\"nobody\">лица без гражданства</option></select></div><div class=\"form-group\"><label style=\"margin:0 0 0 15px;font-size:13px;color:#888\"><input type=\"checkbox\" ng-model=\"onlyDigital\"> Электронные услуги*</label></div></form></div></nav><div style=\"font-size:10px; text-align:right;color:#333;margin-bottom:20px;margin-top:-20px\" ng-hide=\"hideFilter\"><small>* Показывать только региональные и муниципальные услуги, которые можно заказать в электронном виде с данного портала</small></div></div>"
  );


  $templateCache.put('/rgu/searchRgu.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"serviceStatus=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{serviceError.message}}</p></div></div><section class=\"dept\" ng-hide=\"serviceStatus=='error'\"><div class=\"container-fluid\"><h2 class=\"service-heading\" ng-hide=\"status=='error'\">Поиск услуги<label class=\"service-check\"><input type=\"checkbox\" ng-model=\"onlyDigital\"> <span class=\"service-check-input\"></span> Только электронные услуги</label></h2><div class=\"search\"><form ng-submit=\"submit_rgu()\"><div class=\"search-form\"><div class=\"search-form-field\"><input type=\"text\" placeholder=\"Введите название услуги\" class=\"search-input\" ng-model=\"search\" ng-keydown=\"onSearchKeyDown($event)\"> <input type=\"submit\" value=\"Найти\" class=\"search-btn\"></div></div><small class=\"search-text\"><mark>Например:</mark> загран паспорт, заключение брака, регистрация собственности...</small></form></div><div style=\"padding:10px;text-align:center\" ng-show=\"serviceStatus=='ready' && serviceCount==0\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"serviceStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div class=\"dept-info\"><ul class=\"dept-service-docs\" ng-show=\"serviceStatus=='ready' && serviceCount > 0\"><li ng-repeat=\"s in serviceList\"><a href=\"{{'rgu/service_view?id='+s.id|s1Url}}\" class=\"dept-service-docs-link\"><span class=\"icon-doc-text\"></span><div><small>{{s.dept}}</small><div ng-bind-html=\"s.full_title\"></div></div></a></li></ul><div style=\"margin:10px 0 0 25px\"><s1-paging skip=\"serviceSkip\" max=\"serviceMax\" count=\"serviceCount\" on-change=\"refreshService()\"></s1-paging></div></div></div></section>"
  );


  $templateCache.put('/rgu/serviceView.template.html',
    "<div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='ready' && !data.id\"><div class=\"well well-small\" style=\"display:inline-block\">Не найдено</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready' && data.id\"><section class=\"dept\"><div class=\"container-fluid\"><div class=\"panel\"><div class=\"row\"><div class=\"\"><div class=\"col-md-9\"><div class=\"row\"><div class=\"col-md-3\"><a ng-click=\"goBack()\" class=\"btn btn-sm btn-white\"><span class=\"icon-left-open\"></span> Вернуться</a><div ng-show=\"entered && isAdmin\"><b>Код варианта услуги:</b><br>{{procedure.id}}</div></div><div class=\"col-md-9\"><h1 class=\"panel-text\">{{ isEducationService() ? \"Образовательные услуги\" : data.full_title }}</h1></div><div ng-show=\"isEducationService()\"><div class=\"col-sm-12\"><a class=\"btn btn-white btn-md\" href=\"http://персональныеданные.дети/\">Памятка обучающихся по персональным данным &nbsp;&nbsp;&raquo;</a></div><div class=\"col-sm-12\"><a class=\"btn btn-white btn-md\" href=\"https://pd.rkn.gov.ru/multimedia/video114.htm\">Уроки по защите персональных данных &nbsp;&nbsp;&raquo;</a></div></div></div></div></div><div class=\"col-md-3\"><div class=\"panel-ctrl\"><div ng-show=\"!entered && listDrgu.length > 0\"><button class=\"btn btn-md btn-blue\" ng-click=\"selectProcedureDialog()\" style=\"width: 100%\">Получить услугу <span class=\"icon-right-open\"></span></button><hr></div><div ng-show=\"procedure.id=='2600000010000001845' && entered\"><a class=\"btn btn-md btn-blue\" href=\"{{'personcab/mincult_schedule'|s1Url}}\" style=\"width: 100%\">Получить услугу <span class=\"icon-right-open\"></span></a><hr></div><div ng-show=\"isProcedureForm(procedure) && entered\"><a class=\"btn btn-md btn-blue\" href=\"{{procedureFormUrl(procedure)}}\" style=\"width: 100%\">Получить услугу <span class=\"icon-right-open\"></span></a><hr></div><div ng-show=\"procedure.type=='info' && entered\"><a class=\"btn btn-md btn-blue\" href=\"{{'personcab/infoService?procedure='+procedure.id+'&form='+procedure.idForm|s1Url}}\" style=\"width: 100%\">Получить услугу <span class=\"icon-right-open\"></span></a><hr></div><div ng-show=\"procedure.id == '2600000010000008307' && entered\"><a class=\"btn btn-md btn-blue\" href=\"{{'personcab/info_pou'|s1Url}}\" style=\"width: 100%\">Получить услугу <span class=\"icon-right-open\"></span></a><hr></div><div ng-show=\"id == '2600000000178260245'\"><a class=\"btn btn-md btn-blue\" href=\"https://www.gosuslugi.ru/help/calculator-allowance\" style=\"width: 100%; font-size: 16px\">Получить услугу на gosuslugi.ru</a><hr></div><div ng-if=\"data.idOrganization\"><a class=\"btn btn-md btn-blue\" href=\"{{'personcab/appointments_places?id=' + data.idOrganization + '&service_id=' + data.id|s1Url}}\" style=\"width: 100%\">Записаться на прием <span class=\"icon-right-open\"></span></a><hr></div><div ng-if=\"procedure && entered\"><a class=\"btn btn-md btn-warning\" href=\"{{'personcab/dos_appeal?procedure=' + procedure.id | s1Url}}\" style=\"width: 100%\"><i class=\"fa fa-exclamation-circle\"></i> Жалоба</a></div><div class=\"provide\"><b class=\"provide-title\">Услугу предоставляет</b> <span class=\"provide-link\"><img ng-src=\"{{'assets/images/logo-rus.png'|s1Url}}\" alt=\"\"> <u>{{data.structure_title}}</u></span></div></div></div></div></div></div><div ng-show=\"!entered\" class=\"container-fluid\"><style>.dept-docs-link {\n" +
    "                    padding-left: 4px;\n" +
    "                }\n" +
    "                .icon-doc-text {\n" +
    "                    margin-left: -4px;\n" +
    "                }</style><h2 class=\"dept-title-1\" ng-if=\"listDrgu.length > 0\">Электронные услуги</h2><ul class=\"dept-docs\"><li ng-repeat=\"r in listDrgu\"><a ng-click=\"selectStatement(r)\" class=\"dept-docs-link\"><span class=\"service-ico\"></span> {{r.title}}</a></li></ul><h2 class=\"dept-title-1\" ng-if=\"isEducationService()\">Дополнительные электронные сервисы</h2><ul class=\"dept-docs\" ng-show=\"isEducationService()\"><li><a href=\"{{'personcab/info_pou?tab=performance'|s1Url}}\" class=\"dept-docs-link\"><span class=\"service-ico\"></span> Предоставление информации о текущей успеваемости обучающегося</a></li><li><a class=\"dept-docs-link\" href=\"{{'personcab/status_dou'|s1Url}}\"><span class=\"service-ico\"></span> Проверка номера очереди в приоритетный детский сад</a></li><li><a class=\"dept-docs-link\" href=\"{{'rgu/service_view?id=2600000010000004209'|s1Url}}\"><span class=\"service-ico\"></span> Прием заявлений, постановка на учет и зачисление детей в образовательные организации, реализующие основную образовательную программу дошкольного образования (детские сады)</a></li></ul><h2 class=\"dept-title-1\" ng-if=\"list.length > 0\">Неэлектронные услуги</h2><ul class=\"dept-docs\"><li ng-repeat=\"r in list\"><a ng-click=\"selectStatement(r)\" class=\"dept-docs-link\"><span class=\"icon-doc-text\"></span> {{r.title}}</a></li></ul></div><div ng-show=\"entered\" class=\"container-fluid\"><div class=\"row\"><div class=\"col-sm-4 col-lg-3\"><nav class=\"dept-nav\"><p class=\"dept-nav-heading\">Содержание</p><hr><strong class=\"dept-nav-heading-sub\">Описание услуги</strong><ul class=\"dept-nav-menu\"><li><a ng-click=\"scrollTo('#how-request')\">Способы подачи заявления</a></li><li><a ng-click=\"scrollTo('#how-result')\">Способы получения результата</a></li><li><a ng-click=\"scrollTo('#payments')\">Стоимость и порядок оплаты</a></li><li><a ng-click=\"scrollTo('#period')\">Сроки оказания</a></li><li><a ng-click=\"scrollTo('#recipient')\">Категории получателей</a></li><li><a ng-click=\"scrollTo('#reason-get')\">Основание для получения услуги</a></li><li><a ng-click=\"scrollTo('#reason-reject')\">Основания для отказа / приостановления</a></li><li><a ng-click=\"scrollTo('#result')\">Результат оказания услуги</a></li><hr><strong class=\"dept-nav-heading-sub\">Документы</strong><ul class=\"dept-nav-menu\"><li><a ng-click=\"scrollTo('#doc')\">Документы, необходимые для получения услуги</a></li><li><a ng-click=\"scrollTo('#outDoc')\">Документы, предоставляемые по завершении оказания услуги</a></li><li><a ng-click=\"scrollTo('#npa')\">Нормативно-правовые акты</a></li></ul><hr><strong class=\"dept-nav-heading-sub\">Дополнительная информация</strong><ul class=\"dept-nav-menu\"><li><a ng-click=\"scrollTo('#service_info')\">Сведения о государственной услуге</a></li><li><a ng-click=\"scrollTo('#reject-order')\">Порядок обжалования</a></li><li><a ng-click=\"scrollTo('#depts')\">Участвующие организации</a></li><li><a ng-click=\"scrollTo('#adm_regulations')\">Административный регламент</a></li><li><a ng-click=\"scrollTo('#administrative_procedure')\">Административные процедуры</a></li><li><a ng-click=\"scrollTo('#quality_indicators')\">Показатели доступности и качества</a></li></ul></ul></nav></div><div class=\"col-sm-8 col-lg-9\"><div ng-show=\"loadEntered\" class=\"st-preloader-bl\"></div><div class=\"dept-content\"><h2 class=\"dept-title-1\">{{procedure.title}}</h2><h3 class=\"dept-title-2\">Описание услуги</h3><h4 class=\"dept-title-3\" id=\"how-request\">Способы подачи заявления</h4><hr><ul class=\"dept-ul\"><li ng-repeat=\"r in procedure.requestForms\">{{r.title}}<br><small>{{r.description !== r.title ? r.description : \"\"}}</small></li></ul><h4 class=\"dept-title-3\" id=\"how-result\">Способы получения результата</h4><hr><ul class=\"dept-ul\"><li ng-repeat=\"r in procedure.responseForms\">{{r.title}}<br><small>{{r.description !== r.title ? r.description : \"\"}}</small></li></ul><h4 class=\"dept-title-3\" id=\"payments\">Стоимость и порядок оплаты</h4><hr><p ng-if=\"procedure.payments.length == 0\">Услуга предоставляется бесплатно</p><ul ng-if=\"procedure.payments.length > 0\"><li ng-repeat=\"payment in procedure.payments\">{{payment.title}}<div style=\"margin-top: 20px\"><label>Стоимость:</label><p>{{payment.payment_value}} <span class=\"icon-rouble\"></span></p><label>Варианты оплаты:</label><p>{{payment.type}}</p><label>Основание:</label><p ng-bind-html=\"payment.ground_description\"></p></div></li></ul><h4 class=\"dept-title-3\" id=\"period\">Сроки оказания</h4><hr><p ng-bind-html=\"procedure.term\"></p><h4 class=\"dept-title-3\" id=\"recipient\">Категории получателей</h4><hr><ul class=\"dept-ul\"><li ng-repeat=\"r in procedure.categories\">{{r.title}}</li></ul><h4 class=\"dept-title-3\" id=\"reason-get\">Основание для оказания услуги</h4><hr><p ng-bind-html=\"procedure.ground_for_action\"></p><h4 class=\"dept-title-3\" id=\"reason-reject\">Основания для отказа / приостановления</h4><hr><ul class=\"dept-ul\"><li ng-repeat=\"r in procedure.refuses\"><h4>{{r.title}}</h4><div ng-bind-html=\"r.description\"></div></li></ul><h4 class=\"dept-title-3\" id=\"result\">Результат оказания услуги</h4><hr><p ng-bind-html=\"procedure.result\"></p><h3 class=\"dept-title-2\">Документы</h3><h4 class=\"dept-title-3\" id=\"doc\">Документы, необходимые для получения услуги</h4><hr><ul class=\"dept-ul\"><li ng-repeat=\"r in procedure.inDoc\"><rgu-document doc=\"r\"></rgu-document></li></ul><h4 class=\"dept-title-3\" id=\"outDoc\">Документы, предоставляемые по завершении оказания услуги</h4><hr><ul class=\"dept-ul\"><li ng-repeat=\"scenario in procedure.finalScenarioList\"><h4>{{scenario.type}}</h4><div>{{scenario.title}}</div><ul><li ng-repeat=\"r in scenario.documents\"><rgu-document doc=\"r\"></rgu-document></li></ul></li></ul><h4 class=\"dept-title-3\" id=\"npa\">Нормативно-правовые акты</h4><ul class=\"dept-ul\"><li ng-repeat=\"r in data.acts\">{{r.type}} № {{r.sn}} от {{r.approval_date|dateFormat:'DD.MM.YYYY'}} {{r.title}}</li></ul><h4 class=\"dept-title-2\">Дополнительная информация</h4><dl class=\"dept-accordion\"><dt id=\"service_info\" ng-click=\"openAccordion($event)\"><u>Сведения о государственной услуге</u></dt><dd><p>{{procedure.procedure_name}}</p><label>Реестровый номер услуги:</label><p>{{data.id}}</p><label>Идентификатор цели:</label><p>{{procedure.id}}</p><label>Дата размещения сведений:</label><p>{{data.start_date | dateFormat}}</p><label>Дата последнего обновления сведений:</label><p>{{data.change_date | dateFormat}}</p></dd><dt id=\"reject-order\" ng-click=\"openAccordion($event)\"><u>Порядок обжалования</u></dt><dd><p ng-bind-html=\"data.appeal_description\"></p></dd><dt id=\"depts\" ng-click=\"openAccordion($event)\"><u>Участвующие организации</u></dt><dd><ul><li ng-repeat=\"r in data.organizations\"><b>{{r.title}}</b> <span>{{r.description}}</span></li></ul></dd><dt id=\"adm_regulations\" ng-click=\"openAccordion($event)\"><u>Административный регламент</u></dt><dd><div ng-repeat=\"r in data.admRegulations\"><p>{{r.legal_act_name}}</p><p>{{r.act_type}} от {{r.confirm_date | dateFormat}}</p><label style=\"margin-right: 5px\">Регистрационный номер:</label><span>{{r.registry_number}}</span><div ng-bind-html=\"r.reg_text\"></div></div></dd><dt id=\"administrative_procedure\" ng-click=\"openAccordion($event)\"><u>Административные процедуры</u></dt><dd><div ng-repeat=\"r in procedure.administrativeProcedures\"><h3>{{r.title}}</h3><label>Основания для начала:</label><p ng-bind-html=\"r.starting_reason\"></p><label>Критерии принятия решения для административной процедуры:</label><ul><li ng-repeat=\"dc in r.deciding_criteria\"><label style=\"display: inline\">{{dc.title}}</label><p ng-bind-html=\"dc.description\"></p></li></ul><label>Порядок передачи результата оказания:</label><p ng-bind-html=\"r.result_transfer_order\"></p><label>Результат:</label><p ng-bind-html=\"r.executing_result\"></p></div></dd><dt id=\"quality_indicators\" ng-click=\"openAccordion($event)\"><u>Показатели доступности и качества</u></dt><dd><ul><li ng-repeat=\"r in data.qualityIndicators\"><label>{{r.title}}</label><p>{{r.description}}</p></li></ul></dd></dl></div></div></div></div></section></div></div><div class=\"modal fade\" id=\"selectProcedureTemplate\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog modal-lg\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><p class=\"modal-title h4\">Выберите электронную услугу</p></div><div class=\"modal-body\"><ul class=\"dept-docs\"><li ng-repeat=\"r in listDrgu\"><a ng-click=\"selectProcedureAndShowForm(r)\" class=\"dept-docs-link\"><span class=\"service-ico\"></span> {{r.title}}</a></li></ul><h2 class=\"dept-title-1\" ng-if=\"isEducationService()\" style=\"margin-left: 10px\">Дополнительные электронные сервисы</h2><ul class=\"dept-docs\" ng-show=\"isEducationService()\"><li><a ng-click=\"closeDialogAndGoToURL('personcab/info_pou', {tab: 'performance'})\" class=\"dept-docs-link\"><span class=\"service-ico\"></span> Предоставление информации о текущей успеваемости обучающегося</a></li><li><a ng-click=\"closeDialogAndGoToURL('personcab/status_dou')\" class=\"dept-docs-link\"><span class=\"service-ico\"></span> Проверка номера очереди в приоритетный детский сад</a></li><li><a ng-click=\"closeDialogAndGoToURL('rgu/service_view', {id: '2600000010000004209'})\" class=\"dept-docs-link\"><span class=\"service-ico\"></span> Прием заявлений, постановка на учет и зачисление детей в образовательные организации, реализующие основную образовательную программу дошкольного образования (детские сады)</a></li></ul></div></div></div></div>"
  );


  $templateCache.put('/support/support.template.html',
    "<div ng-show=\"status=='ready'\"><div style=\"padding:10px;text-align:center\"><pre>\n" +
    "            <h5>Ваша заявка {{order}} успешно зарегистрирована!</h5>\n" +
    "       </pre></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='init'\"><section class=\"lk\"><div class=\"container-fluid\"><div class=\"appl\"><h1 class=\"lk-heading\">Обращение в службу поддержки</h1><div class=\"col-md-12\"><div class=\"appl-form\"><form name=\"support_form\" role=\"form\" ng-submit=\"submit(support_form)\"><fieldset><div class=\"row\"><div class=\"col-md-4\"><div class=\"c-field\"><label class=\"c-field-label\" style=\"position:static\">Выберите тему сообщения <sup>*</sup></label><select name=\"select\" id=\"select\" title=\"Это обязательное поле для заполнения заявки\" ng-model=\"selectedOption\" ng-options=\"option.name for option in options\" class=\"form-control new-c-field-select\" required></select></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"c-field\"><label class=\"c-field-label\">Сообщение <sup>*</sup></label><textarea name=\"msg\" id=\"msg\" title=\"Это обязательное поле для заполнения заявки\" ng-model=\"data.msg\" class=\"c-textarea c-textarea-white\" placeholder=\"Напишите обращение\" rows=\"5\" required></textarea></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"c-field\"><label class=\"c-field-label\">Ссылка на страницу</label><input type=\"text\" ng-model=\"data.link\" name=\"link\" id=\"link\" class=\"c-text c-text-white\" placeholder=\"Ссылка на страницу\"></div></div></div><div class=\"row\"><div class=\"col-md-4\"><div class=\"c-field\"><label class=\"c-field-label\">Фамилия <sup>*</sup></label><input name=\"sname\" id=\"sname\" type=\"text\" title=\"Это обязательное поле для заполнения заявки\" ng-model=\"data.lastName\" class=\"c-text c-text-white\" placeholder=\"Фамилия\" required></div></div><div class=\"col-md-4\"><div class=\"c-field\"><label class=\"c-field-label\">Имя <sup>*</sup></label><input name=\"name\" id=\"name\" type=\"text\" title=\"Это обязательное поле для заполнения заявки\" ng-model=\"data.firstName\" class=\"c-text c-text-white\" placeholder=\"Имя\" required></div></div><div class=\"col-md-4\"><div class=\"c-field\"><label class=\"c-field-label\">Отчество <sup>*</sup></label><input name=\"patr\" id=\"patr\" type=\"text\" title=\"Это обязательное поле для заполнения заявки\" ng-model=\"data.middleName\" class=\"c-text c-text-white\" placeholder=\"Отчество\" required></div></div></div><div class=\"row\"><div class=\"col-md-6\"><div class=\"c-field\"><label class=\"c-field-label\">Email <sup>*</sup></label><input type=\"email\" title=\"Это обязательное поле для заполнения заявки\" ng-model=\"data.email\" class=\"c-text c-text-white\" name=\"email\" id=\"email\" placeholder=\"Email\" required><div class=\"alert alert-danger small\" role=\"alert\" ng-show=\"support_form.email.$dirty && support_form.email.$invalid\">Формат example@mail.com</div></div></div><div class=\"col-md-6\"><div class=\"c-field\"><label class=\"c-field-label\">Телефон</label><input type=\"text\" ng-model=\"data.phone\" name=\"phone\" id=\"phone\" class=\"c-text c-text-white\" placeholder=\"Номер телефона для обратной связи\"><div class=\"alert alert-danger small\" role=\"alert\" ng-show=\"support_form.phone.$dirty && support_form.phone.$invalid\">Номер телефона для обратной связи</div></div></div></div><div class=\"row\"><div class=\"col-md-4\"><button ng-disabled=\"support_form.select.$invalid || support_form.msg.$invalid ||\n" +
    "												support_form.sname.$invalid || support_form.name.$invalid || support_form.patr.$invalid ||\n" +
    "												support_form.email.$invalid || support_form.phone.$invalid\" type=\"submit\" class=\"btn btn-blue\" style=\"padding: 6px 12px\">Отправить сообщение</button></div></div></fieldset></form></div></div></div></div></section></div>"
  );


  $templateCache.put('/transport/carriers.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><table class=\"table\" style=\"table-layout: fixed; width: 100%\"><thead style=\"font-size: larger\"><tr><td><strong>Наименование</strong></td><td><strong>Телефон</strong></td><td><strong>Сайт</strong></td><td><strong>E-mail</strong></td><td><strong>ИНН</strong></td><td><strong>Юридический адрес</strong></td><td><strong>Фактический адрес</strong></td><td><strong>Договоры</strong></td></tr></thead><tbody ng-repeat=\"s in list\"><tr><td>{{s.name}}</td><td>{{s.tel}}</td><td>{{s.wwwaddr}}</td><td>{{s.email}}</td><td>{{s.inn}}</td><td>{{s.uraddr}}</td><td>{{s.factaddr}}</td><td>{{s.contracts}}</td></tr></tbody></table></div>"
  );


  $templateCache.put('/transport/routes.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-danger\" role=\"alert\"><strong>Ошибка</strong><br>{{error.message}}</div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><div><img ng-src=\"{{'assets/images/transport/bus.png'|s1Url}}\">&nbsp&nbsp <img ng-src=\"{{'assets/images/transport/tram.png'|s1Url}}\">&nbsp&nbsp <img ng-src=\"{{'assets/images/transport/troll.png'|s1Url}}\">&nbsp&nbsp <input size=\"7\" ng-model=\"findNum\" placeholder=\"№\">&nbsp&nbsp <input size=\"25\" ng-model=\"findStart\" placeholder=\"Остановка от\">&nbsp&nbsp <input size=\"25\" ng-model=\"findFinish\" placeholder=\"Остановка до\"> <span style=\"float: right\"><a href=\"https://transport.stavregion.ru/\" target=\"_blank\" style=\"font-weight: 500;color: #048bd9\">АИС \"Управление транспортом\"</a></span></div><br><table class=\"table\"><tr><th style=\"width: 50px\">Тип ТС</th><th style=\"width: 50px\">Номер</th><th>Наименование</th><th>Начальный пункт</th><th>Конечный пункт</th><th>Стоимость проезда</th><th>Протяженность</th><th style=\"width: 100px\"></th></tr><tbody ng-repeat=\"r in list\"><tr><td><img ng-show=\"r.vehicleType == 'Автобус'\" title=\"Автобус\" ng-src=\"{{'assets/images/transport/bus.png'|s1Url}}\"> <img ng-show=\"r.vehicleType == 'Маршрутное такси'\" title=\"Маршрутное такси\" ng-src=\"{{'assets/images/transport/bus.png'|s1Url}}\"> <img ng-show=\"r.vehicleType == 'Трамвай'\" title=\"Трамвай\" ng-src=\"{{'assets/images/transport/tram.png'|s1Url}}\"> <img ng-show=\"r.vehicleType == 'Троллейбус'\" title=\"Троллейбус\" ng-src=\"{{'assets/images/transport/troll.png'|s1Url}}\"></td><td>{{r.number}}</td><td>{{r.name}}</td><td>{{r.startStop}}</td><td>{{r.endStop}}</td><td>{{r.price}}</td><td>{{r.distance}} <span ng-show=\"r.distance\">&nbspкм</span></td><td><a href ng-click=\"showMap(r)\" title=\"Отобразить карту\" style=\"margin:3px\"><i class=\"fa fa-search\" fa-lg></i> </a><a href ng-click=\"showStops(r)\" data-toggle=\"modal\" data-target=\"#myModal\" title=\"Отобразить расписание\" style=\"margin:3px\"><i class=\"fa fa-calendar\" fa-lg></i> </a><a href ng-click=\"showVehicles(r)\" title=\"Список ТС на маршруте\" style=\"margin:3px\"><i class=\"fa fa-bus\" fa-lg></i> </a><a href ng-click=\"showTickets(r)\" title=\"Пункты продажи билетов\" style=\"margin:3px\"><i class=\"fa fa-ticket\" fa-lg></i></a></td></tr><tr ng-if=\"r.info\"><td colspan=\"8\"><div ng-if=\"infoStatus=='readyMap'\"><span class=\"ol-attribution ol-unselectable ol-control\" style=\"position: relative;z-index: 1;left: -35px;top: 60px;float: right;width: 47px;height: 47px;max-width: none\"><button ng-click=\"hideTracks()\" ng-show=\"tracksShowed\" type=\"button\" title=\"Показать ТС на маршруте\" style=\"width: 40px;height: 40px\"><i class=\"fa fa-bus fa-2x\"></i></button> <button ng-click=\"showTracks(r)\" ng-show=\"!tracksShowed\" type=\"button\" title=\"Показать ТС на маршруте\" style=\"width: 40px;height: 40px;background: rgba(96, 100, 105, 0.5)\"><i class=\"fa fa-bus fa-2x\"></i></button> </span><span class=\"ol-attribution ol-unselectable ol-control animate-hide\" ng-show=\"noTracks\" style=\"position: relative; z-index: 1;left: -45px;top: 63px;float: right;width: 270px;height: 40px;max-width: none;text-align: center;background: #579FCB;text-shadow: none\"><h5 style=\"color: white;font-weight: 400\">На данном маршруте нет транспортных средств</h5></span><span class=\"ol-attribution ol-unselectable ol-control animate-hide\" ng-show=\"loadTracks\" style=\"position: relative; z-index: 1;left: -45px;top: 63px;float: right;width: 270px;height: 40px;max-width: none;text-align: center;background: #579FCB;text-shadow: none\"><h5 style=\"color: white;font-weight: 400; margin-top: 7px\">Загрузка данных по маршуту...</h5></span><div id=\"map\" class=\"appl-table-content\" style=\"height: 500px;width: 100%\"><div id=\"popup\"></div></div></div><div ng-if=\"infoStatus=='readyVehicles'\" class=\"appl-table-content\"><h3>Перечень транспортных средств маршрута</h3><h4 ng-show=\"vehicles.length==0\">Не найдено</h4><table class=\"table\" ng-show=\"vehicles.length>0\"><tr><th>Госномер</th><th>Модель</th><th>Тип ТС</th></tr><tbody ng-repeat=\"v in vehicles\"><tr><td>{{v.number}}</td><td>{{v.model.name}}</td><td>{{v.type.name}}</td></tr></tbody></table></div><div ng-if=\"infoStatus=='readyTickets' || infoStatus=='noTickets'\" class=\"appl-table-content\"><h3>Пункты продажи билетов</h3><div id=\"mapTickets\" ng-if=\"infoStatus!='noTickets'\" style=\"height: 500px;width: 100%\"></div><h4 ng-show=\"infoStatus=='noTickets'\">Не найдено</h4></div><div ng-if=\"infoStatus=='loading'\" style=\"text-align:center; height: 500px;width: 100%\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-if=\"infoStatus=='error'\" style=\"text-align:center; height:500px; width: 100%\"><div class=\"alert alert-danger\" role=\"alert\"><strong>Ошибка</strong><br>{{infoError.message}}</div></div></td></tr></tbody></table><div id=\"myModal\" class=\"modal fade\" role=\"dialog\"><div class=\"modal-dialog modal-lg\"><div class=\"modal-content\"><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h4 class=\"modal-title\" align=\"center\"><i class=\"fa fa-bus\" fa-lg></i>&nbsp&nbsp <b>№ {{selected.number}} &nbsp</b> {{selected.name}}</h4></div><div class=\"modal-body\"><div class=\"row\"><div class=\"col-md-4\"><div style=\"padding:10px;text-align:center\" ng-show=\"stopsStatus=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"stopsStatus=='ready'\" style=\"height: 450px; overflow:auto\"><label class=\"c-label c-label-check\" style=\"display: block\" ng-repeat=\"s in selected.stops track by $index\"><input type=\"radio\" ng-click=\"getSchedule(s.id)\" name=\"chedule\" ng-model=\"$parent.chedule\"> <span class=\"c-radio\"></span> {{s.name}}</label></div><div ng-if=\"stopsStatus=='error'\" style=\"text-align:center\"><div class=\"alert alert-danger\" role=\"alert\"><strong>Ошибка</strong><br></div></div></div><div class=\"col-md-8\" style=\"display: inline-table\"><div class=\"row\" style=\"width: 50%; margin: 0 auto\"><input size=\"7\" ng-model=\"dateSt\" disabled> <button style=\"height: 26px\" uib-datepicker-popup=\"yyyy-MM-dd\" ng-model=\"dt\" is-open=\"popup1.opened\" datepicker-options=\"dateOptions\" ng-required=\"true\" close-text=\"Close\" alt-input-formats=\"altInputFormats\" ng-click=\"open1()\"><span class=\"fa fa-calendar\"></span></button><br><br></div><div class=\"row\"><div ng-if=\"scheduleStatus=='ready'\" style=\"float:left\" ng-repeat=\"s in schedule\"><table style=\"table-layout: fixed\"><tr valign=\"top\"><th style=\"width: 45px; text-align: right\"><h2 style=\"margin-top: -5px; margin-right: 5px; margin-left: 5px\">{{s.hour}}</h2></th><th valign=\"top\" style=\"width: 75px; height: 75px\"><h5>{{s.mins}};</h5></th><th></th></tr></table></div><div ng-if=\"scheduleStatus=='loading'\" style=\"text-align:center\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-if=\"scheduleStatus=='error'\" style=\"text-align:center\"><div class=\"alert alert-danger\" role=\"alert\"><strong>Ошибка</strong><br></div></div></div></div></div></div></div></div></div></div>"
  );


  $templateCache.put('/transport/stops.template.html',
    "<div style=\"padding:10px;text-align:center\" ng-show=\"status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{error.message}}</p></div></div><div style=\"padding:10px;text-align:center\" ng-show=\"status=='loading'\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-show=\"status=='ready'\"><div><img ng-src=\"{{'assets/images/transport/bus.png'|s1Url}}\">&nbsp&nbsp <img ng-src=\"{{'assets/images/transport/tram.png'|s1Url}}\">&nbsp&nbsp <img ng-src=\"{{'assets/images/transport/troll.png'|s1Url}}\">&nbsp&nbsp <input size=\"25\" ng-model=\"findName\" placeholder=\"Название\">&nbsp&nbsp <input size=\"20\" ng-model=\"findRoute\" placeholder=\"№ маршрута\">&nbsp&nbsp</div><br><table class=\"table\"><thead><tr><th>Наименование</th><th>Маршруты</th><th>Карта</th></tr></thead><tbody ng-repeat=\"s in list\"><tr><td>{{s.name}}</td><td>{{s.routesList}}</td><td><a href ng-click=\"showMap(s)\" title=\"Отобразить карту\"><i class=\"fa fa-search\" fa-lg></i> </a>&nbsp&nbsp</td></tr><tr ng-if=\"s.info\"><td colspan=\"7\"><div id=\"map\" ng-if=\"infoStatus=='readyMap'\" class=\"appl-table-content\" style=\"height: 500px;width: 100%\"></div><div ng-if=\"infoStatus=='loading'\" class=\"appl-table-content\" style=\"text-align:center; height: 500px;width: 100%\"><img ng-src=\"{{'assets/images/loader.gif'|s1Url}}\"></div><div ng-if=\"infoStatus=='error'\" class=\"appl-table-content\" style=\"text-align:center; height:500px; width: 100%\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{mapError.message}}</p></div></div></td></tr></tbody></table></div>"
  );


  $templateCache.put('/transport/transport.template.html',
    "<div ng-hide=\"status=='loading' || status=='error'\"><section class=\"lk\"><div class=\"container-fluid\"><nav class=\"nav-tabs\"><ul class=\"nav-tabs-menu\"><li ng-class=\"{'is-active':isSelected('routes')}\"><a ng-click=\"selectTab('routes')\">Маршруты</a></li><li ng-class=\"{'is-active':isSelected('stops')}\"><a href ng-click=\"selectTab('stops')\">Остановки</a></li><li ng-class=\"{'is-active':isSelected('carriers')}\"><a href ng-click=\"selectTab('carriers')\">Автоперевозчики</a></li><li ng-class=\"{'is-active':isSelected('regulatory')}\"><a href ng-click=\"selectTab('regulatory')\">Контролирующие организации</a></li><li ng-class=\"{'is-active':isSelected('rules')}\"><a href ng-click=\"selectTab('rules')\">Правила пользования</a></li></ul></nav><div class=\"tab-content\" ng-show=\"isSelected('routes')\"><routes></routes></div><div class=\"tab-content\" ng-show=\"isSelected('stops')\"><stops></stops></div><div class=\"tab-content\" ng-show=\"isSelected('carriers')\"><carriers></carriers></div><div class=\"tab-content\" ng-show=\"isSelected('regulatory')\"><div class=\"dept-info\"><address class=\"dept-details\"><strong class=\"dept-details-title\">КРАЕВАЯ РОССИЙСКАЯ ТРАНСПОРТНАЯ ИНСПЕКЦИЯ</strong><ul class=\"dept-details-list\"><li><span class=\"icon-location\"></span> <a href=\"https://map.yandex.ru?text=Ставропольский край, г. Ставрополь ул. Маршала Жукова 21\" target=\"_blank\" title=\"Показать на карте\"><span>Ставропольский край, г. Ставрополь ул. Маршала Жукова 21</span></a></li><li><span class=\"icon-phone\"></span> 8 (8652) 94-58-60</li></ul></address></div></div><div class=\"tab-content\" ng-show=\"isSelected('rules')\"><div><center><a style=\"font-weight: 600;color: #048bd9\" href=\"{{'transport/220-FZ.docx'|s1Url}}\" title=\"Об организации регулярных перевозок пассажиров и багажа автомобильным транспортом и городским наземным электрическим транспортом в Российской Федерации и о внесении изменений в отдельные законодательные акты Российской Федерации\">Федеральный закон от 13 июля 2015 г. N 220-ФЗ</a></center></div><br><div class=\"content\"><center><h4><strong>РЕШЕНИЕ Ставропольской городской Думы от 29.10.97 N 182</strong></h4><h4><strong>\"О ПРАВИЛАХ ПОЛЬЗОВАНИЯ ОБЩЕСТВЕННЫМ ТРАНСПОРТОМ В ГОРОДЕ СТАВРОПОЛЕ\"</strong></h4><h4><strong>СТАВРОПОЛЬСКАЯ ГОРОДСКАЯ ДУМА</strong></h4><h5><strong>РЕШЕНИЕ от 29 октября 1997 г. N 182</strong></h5><h5><strong>О ПРАВИЛАХ ПОЛЬЗОВАНИЯ ОБЩЕСТВЕННЫМ ТРАНСПОРТОМ В ГОРОДЕ СТАВРОПОЛЕ</strong></h5></center><br>Рассмотрев ходатайство администрации города Ставрополя об утверждении Правил пользования общественным транспортом в городе Ставрополе, Ставропольская городская Дума решила:<br>Утвердить Правила пользования общественным транспортом в городе Ставрополе (прилагаются).<br>Председатель городской Думы Н.Г.НАУМОВ<br><br>Приложение к решению городской Думы от 29.10.97 N 182<br><br>ПРАВИЛА ПОЛЬЗОВАНИЯ ОБЩЕСТВЕННЫМ ТРАНСПОРТОМ В ГОРОДЕ СТАВРОПОЛЕ<br>Общественный транспорт в городе Ставрополе работает согласно расписанию, утверждаемому главой города Ставрополя.<br><br>1. Водитель обязан:<br>1.1. Проявлять заботу о пассажирах, быть внимательным и предупредительным к ним.<br>1.2. Правильно и четко объявлять название каждого остановочного пункта и следующего за ним, а при изменении маршрута следования троллейбуса, автобуса объявлять об этом на каждом остановочном пункте.<br>1.3. Продавать абонементные талоны только на остановочных пунктах.<br>1.4. Производить посадку и выход пассажиров из троллейбуса, автобуса только на установленных специальными указателями остановочных пунктах.<br><br>2. Пассажиры обязаны:<br>2.1. Соблюдать меры безопасности и очередности при входе в салон и выходе из него.<br>2.2. Входить в салон троллейбусов, автобусов и выходить из них только на остановочных пунктах маршрута, входить только после выхода пассажиров через все имеющиеся двери.<br>2.3. Войдя в салон троллейбуса, автобуса, не ожидая следующей остановки, закомпостировать абонементный талон (при необходимости приобрести его у водителя или кондуктора).<br>2.4. При наличии кондуктора в салоне, предъявить в развернутом виде проездной билет длительного пользования или удостоверение на право бесплатного проезда.<br>2.5. Провоз каждого места багажа размером свыше 60*40*20 см, а также длинномерных предметов более 150 см (кроме лыж), пассажир должен оплатить согласно тарифу проезда пассажира.<br>2.6. При наличии проездных билетов длительного пользования или документов на право бесплатного проезда, провоз каждого места багажа оплачивать на общих основаниях.<br>2.7. При прибытии на конечную остановку маршрута освободить салон троллейбуса, автобуса.<br>2.8. Закомпостированные абонементные талоны и другие проездные документы должны сохраняться пассажиром до конца поездки.<br><br>3. Вход через переднюю дверь разрешается только пассажирам с детьми дошкольного возраста, детям в возрасте до 10 лет, лицам престарелого возраста, беременным женщинам, инвалидам , работникам городского пассажирского транспорта (при исполнении ими служебных обязанностей).<br><br>4. Абонементный талон или проездной билет длительного пользования в городе Ставрополе является единым для троллейбусов и автобусов.<br><br>5. Передние 6 мест в салоне троллейбуса, автобуса, предназначаются для пассажиров с детьми, беременных женщин, инвалидов и лиц престарелого возраста.<br><br>6. Закомпостированный абонементный талон действителен только на одну поездку в одном направлении любого маршрута.<br><br>7. Пассажиры имеют право:<br>7.1. Бесплатно провозить с собой детей в возрасте до 7 лет.<br>7.2. Бесплатно провозить с собой одно место багажа, в том числе: ручную кладь размером не свыше 60*40*20 см, одну пару лыж (в чехле), детские санки, детскую коляску, птиц в клетке.<br>7.3. Бесплатно провозить с собой только собаку - проводника (в наморднике и на коротком поводке, со специальным опознавательным знаком), сопровождающую инвалида - слепого.<br>7.4. Выйти на остановке \"По требованию\", о чем предварительно сообщить водителю или кондуктору троллейбуса, автобуса.<br>7.5. Перевозить на задних накопительных площадках собак (кроме бойцовских пород) в намордниках и на коротких поводках за плату, согласно стоимости провоза одного места багажа.<br>7.6. Проезжать без дополнительной оплаты стоимости проезда и провоза багажа по закомпостированному абонементному талону, проездному билету в следующем за сошедшим с линии по технической неисправности троллейбусе, автобусе.<br><br>8. Пассажирам запрещается:<br>8.1. Проезжать по иногородним абонементным талонам и иногородним проездным билетам длительного пользования.<br>8.2. Передавать именной проездной билет другому лицу для поездки.<br>8.3. Проезжать на подножках, выступающих частях транспортных средств.<br>8.4. Проезжать в пачкающей пассажиров и сиденье одежде и провозить загрязненный багаж.<br>8.5. Высовываться из окон.<br>8.6. Курить и пользоваться открытым огнем в салоне.<br>8.7. Ставить детей и размещать багаж на сиденье.<br>8.8. Приводить в действие механизм для открывания дверей, а также препятствовать закрыванию и открыванию дверей, кроме необходимости предотвращения несчастного случая.<br>8.9. Провозить взрывчатые, легковоспламеняющиеся, зловонные, отравляющие и ядовитые вещества, колющие, режущие предметы, огнестрельное оружие без чехлов и надлежащей упаковки, громоздкий багаж размером более 1000*50*30 см, длинномерные предметы свыше 190 см (кроме лыж).<br>8.10. Находиться в кабине водителя, отвлекать его и разговаривать с ним во время движения.<br><br>9. Пассажир, не оплативший стоимость проезда, подвергается штрафу в сумме 0,1 минимального размера оплаты труда. Штрафы налагаются работниками контрольно - ревизионной службы городского транспорта, органов внутренних дел или специально уполномоченными лицами.<br><br>10. Не оплатившим стоимость проезда считается пассажир:<br>10.1. Вошедший в салон и до следующей, после посадки, остановки не погасивший абонементный талон.<br>10.2. Проезжающий по абонементному талону или проездному билету длительного пользования, выданному в другом городе.<br>10.3. Проезжающий по именному проездному документу, выданному другому лицу.<br><br>11. При обнаружении в салоне троллейбуса, автобуса забытых другими пассажирами вещей, документов, денег и иных ценностей пассажир должен об этом немедленно сообщить водителю или кондуктору, не прикасаясь к ним.<br><br>12. За повреждение троллейбуса, автобуса или его оборудования виновные несут ответственность в установленном законом порядке.</div></div></div></section></div>"
  );


  $templateCache.put('/views/about.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,О портале\"><section class=\"lk\"><div class=\"appl\"><h4 style=\"font-weight: bold;text-align: center\">О портале</h4><p>Портал государственных и муниципальных услуг Ставропольского края является единой точкой доступа для физических и юридических лиц к информации о государственных и муниципальных услугах, предоставляемых органами исполнительной власти и органами местного самоуправления Ставропольского края и обеспечивающей предоставление указанных услуг в электронной форме.</p><p>Портал государственных и муниципальных услуг Ставропольского края доступен каждому пользователю информационно-телекоммуникационной сети Интернет. На портале реализована классификация государственных и муниципальных услуг по органам власти, категориям, типам заявителей и жизненным ситуациям, что позволяет обеспечить простой и эффективный поиск сведений по услугам, предоставляемым органами исполнительной власти и органами местного самоуправления Ставропольского края. Информационная карточка каждой услуги содержит следующую информацию:</p><ul><li>наименование услуги;</li><li>наименование ведомства, предоставляющего услугу;</li><li>типы заявителей, которым предоставляется услуга;</li><li>необходимые документы, подлежащие представлению заявителем для получения услуги;</li><li>размера платы, взимаемой с заявителя в случае оказания услуги на платной основе;</li><li>результат предоставления услуги;</li><li>сроки предоставления услуги;</li><li>основания для приостановления предоставления услуги или отказа в ее предоставлении;</li><li>информация о месте предоставления услуги;</li><li>контакты для получения дополнительной информации (телефоны органа государственной власти или органа местного самоуправления, ответственного за предоставление услуги, телефоны мест предоставления услуги);</li><li>формы заявлений и иных документов, заполнение которых заявителем необходимо для обращения в федеральный орган исполнительной власти, орган исполнительной власти субъекта Российской Федерации, орган местного самоуправления для получения государственной или муниципальной услуги (в электронной форме).</li></ul><p>На портале государственных и муниципальных услуг Ставропольского края реализован модуль «Личный кабинет», позволяющий пользователю после прохождения процедуры регистрации</p><ul><li>просматривать информацию о государственной или муниципальной услуге (функции);</li><li>получить доступ к формам заявлений и иных документов, необходимых для получения государственной или муниципальной услуги (функции), обеспечит их заполнение и представление в электронной форме;</li><li>осуществлять обращение в электронной форме в государственные органы или органы местного самоуправления;</li><li>осуществлять мониторинга хода предоставления государственной или муниципальной услуги или исполнения государственной функции;</li><li>просматривать перечень начислений и оплачивать государственные пошлины, штрафы и сборы.</li></ul><p>Портал государственных и муниципальных услуг Ставропольского края также обеспечивает возможность записи на прием в органы исполнительной власти и местного самоуправления Ставропольского края.</p><p>Правообладатель: «Система управления web-порталами Веблайнер 2.0» Общество с ограниченной ответственностью «Бейкер софт» ИНН 7743894488</p><p>Контактная информация: Москва г, ул.Ангарская, д.6, пом.3, 125635, телефон: +7 (499) 341-01-40</p></div></section></app>"
  );


  $templateCache.put('/views/admin.page.html',
    "<app breadcrumb=\"Главная|,Вход Администратора\"><admin-login></admin-login></app>"
  );


  $templateCache.put('/views/admin/admin_page.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора\"><div ng-controller=\"personcab\"><div class=\"row\"><div class=\"col-md-4\"><div class=\"alert alert-info\" style=\"text-align:left\"><p><i class=\"fa fa-user\"></i> &nbsp;Уважаемый&nbsp; <b>{{user.name.name}} {{user.name.patronymic}}</b>!</p><p>Добро пожаловать в Ваш личный кабинет портала государственных и муниципальных услуг.</p><p>Здесь Вы можете управлять вашими личными данными, а также работать с доступными Вам приложениями.</p></div></div><div class=\"col-md-8\"><style>.apps {\n" +
    "                        display: -webkit-flex;\n" +
    "                        display: -moz-flex;\n" +
    "                        display: -ms-flex;\n" +
    "                        display: -o-flex;\n" +
    "                        display: flex;\n" +
    "                        flex-flow: row wrap;\n" +
    "                        margin-bottom: 5rem;\n" +
    "                    }\n" +
    "\n" +
    "                    .apps>.btn-group,\n" +
    "                    .apps>.btn {\n" +
    "                        flex: 1 0 45%;\n" +
    "                        margin-right: 0.8em;\n" +
    "                        margin-bottom: 0.8em;\n" +
    "                        text-align: left;\n" +
    "                    }\n" +
    "\n" +
    "                    .apps>.btn-group>.dropdown-toggle {\n" +
    "                        width: 100%;\n" +
    "                        text-align: left;\n" +
    "                    }</style><div class=\"apps\"><a class=\"btn btn-md btn-blue\" href=\"/admin/user_page?tab=mydata\"><i class=\"fa fa-cog\"></i> &nbsp;Мои данные </a><a class=\"btn btn-md btn-blue\" href=\"/admin/municipals\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-university\"></i> &nbsp;Справочник поселений по районам </a><a class=\"btn btn-md btn-success\" href=\"/admin/translates\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-file-text-o\"></i> &nbsp;Переводы </a><a class=\"btn btn-md btn-blue\" href=\"/admin/digital-services-list\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-th-list\"></i> &nbsp;Электронные услуги </a><a class=\"btn btn-md btn-blue\" href=\"/admin/forms-templates-list\" ng-show=\"hasRole(ROLES.DEV)\"><i class=\"fa fa-th-list\"></i> &nbsp;Шаблоны форм </a><a class=\"btn btn-md btn-blue\" href=\"/admin/soap-templates-list\" ng-show=\"hasRole(ROLES.DEV)\"><i class=\"fa fa-th-list\"></i> &nbsp;Шаблоны SOAP</a><div class=\"btn-group\" ng-show=\"hasRole(ROLES.ADMIN)\"><button class=\"btn btn-md btn-blue dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"><i class=\"fa fa-list-ul\"></i> &nbsp;Отчеты <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\"><li><a href=\"/admin/serviceRequestReportList\"><i class=\"fa fa-paper-plane-o\"></i> &nbsp;Заявления пользователей</a></li><li><a href=\"/admin/elkReportList\"><i class=\"fa fa-exchange\"></i> &nbsp;Ошибки синхронизации с ЕЛК</a></li></ul></div><a class=\"btn btn-md btn-blue\" href=\"/admin/aspService\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-database\"></i> &nbsp;Услуги АСП </a><a class=\"btn btn-md btn-blue\" href=\"/admin/user_list\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-group\"></i> &nbsp;Управление пользователями</a><div class=\"btn-group\" ng-show=\"hasRole(ROLES.ADMIN)\"><button class=\"btn btn btn-md btn-blue dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"><i class=\"fa fa-list-ul\"></i> &nbsp;Справочная подсистема <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\"><li><a href=\"/admin/dict_list\"><i class=\"fa fa-folder-o\"></i> &nbsp;Локальные словари</a></li><li><a href=\"/admin/remoteDict_list\"><i class=\"fa fa-external-link\"></i> &nbsp;Внешние словари</a></li><li><a href=\"/admin/dict_list\"><i class=\"fa fa-desktop\"></i> &nbsp;Спарвочник ВИС</a></li><li><a href=\"/admin/mvz_list\"><i class=\"fa fa-refresh\"></i> &nbsp;Справочник МВЗ</a></li></ul></div><a class=\"btn btn-md btn-blue\" href=\"/admin/payableServiceList\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-money\"></i> &nbsp;Каталог платных услуг </a><a class=\"btn btn-md btn-blue\" href=\"/admin/org_edit\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-building-o\"></i> &nbsp;Реестр организаций </a><a class=\"btn btn-md btn-blue\" href=\"/admin/org_list\" ng-show=\"hasRole(ROLES.DEPT)\"><i class=\"fa fa-building-o\"></i> &nbsp;Расписание организаций </a><a class=\"btn btn-md btn-blue\" href=\"/personcab/poll_list\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-check-square-o\"></i> &nbsp;Опросы </a><a class=\"btn btn-md btn-blue\" href=\"/admin/theater\" ng-show=\"hasRole(ROLES.DEPT)\"><i class=\"fa fa-university\"></i> &nbsp;Загрузка расписания </a><a class=\"btn btn-md btn-blue\" href=\"/admin/penalty\" ng-show=\"hasRole(ROLES.PENALTY)\"><i class=\"fa fa-university\"></i> &nbsp;Управление штрафами </a><a class=\"btn btn-md btn-warning\" href=\"/admin/form_list\" ng-show=\"hasRole(ROLES.DEV)\"><i class=\"fa fa-th-list\"></i> &nbsp;Формы услуг (старая версия)</a><div class=\"btn-group\"><button class=\"btn btn-md btn-success dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"><i class=\"fa fa-list-ul\"></i> &nbsp;COVID-19 <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\"><li><a href=\"/admin/org_covid_edit\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-building-o\"></i> &nbsp;Реестр организаций COVID19</a></li><li><a href=\"/admin/covid19\" ng-show=\"hasRole(ROLES.COVID19)\"><i class=\"fa fa-id-card-o\"></i> &nbsp;Управление пропусками COVID-19</a></li><li><a href=\"/admin/covid19-infected\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-cloud-upload\"></i> &nbsp;Загрузка инфицированных</a></li><li><a href=\"/admin/covid19-orgs-upload\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-cloud-upload\"></i> &nbsp;Загрузка организаций</a></li><li><a href=\"/admin/covid19-stats\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-table\"></i> &nbsp;Выгрузка статистики</a></li><li><a href=\"/portal/rest/covid19/notify/stats\" ng-show=\"hasRole(ROLES.ADMIN)\" target=\"_blank\"><i class=\"fa fa-table\"></i> &nbsp;Статистика covid19Notify</a></li></ul></div><a class=\"btn btn-md btn-blue\" target=\"_blank\" href=\"/portal/rest/covid19/permanent/org/qr?width=500&height=500\" ng-show=\"hasRole(ROLES.COVID19)\"><i class=\"fa fa-qrcode\"></i> &nbsp;QR-код организации </a><a class=\"btn btn-md btn-blue\" href=\"/admin/service_request_test\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-check-square-o\"></i> &nbsp;Проверка работоспособности и доступности услуг </a><a class=\"btn btn-md btn-blue\" href=\"/admin/announcement\" ng-show=\"hasRole(ROLES.ADMIN)\"><i class=\"fa fa-info-circle\"></i> &nbsp;Информационная строка</a></div></div></div></div></app>"
  );


  $templateCache.put('/views/admin/announcement.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Информационная строка\"><announcement></announcement></app>"
  );


  $templateCache.put('/views/admin/aspService.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Услуги АСП\"><asp-service></asp-service></app>"
  );


  $templateCache.put('/views/admin/covid19-infected.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет администратора\"><covid-19-infected></covid-19-infected></app>"
  );


  $templateCache.put('/views/admin/covid19-orgs-upload.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет администратора\"><covid-19-orgs-upload></covid-19-orgs-upload></app>"
  );


  $templateCache.put('/views/admin/covid19-stats.page.html',
    "<app breadcrumb=\"Главная|,Статистика Covid-19\"><covid-19-admin-stats></covid-19-admin-stats></app>"
  );


  $templateCache.put('/views/admin/covid19.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет администратора\"><covid19-pass-control></covid19-pass-control></app>"
  );


  $templateCache.put('/views/admin/dict_list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Локальные словари\"><dict-list></dict-list></app>"
  );


  $templateCache.put('/views/admin/dict_view.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Словари|admin/dict_list,Словарь\"><dict-view></dict-view></app>"
  );


  $templateCache.put('/views/admin/dict.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Справочная подсистема\"><h4>Справочная подсистема</h4><style>div.apps {\n" +
    "			text-align: left\n" +
    "		}\n" +
    "\n" +
    "		div.apps>a {\n" +
    "			margin: 5px;\n" +
    "		}</style><div class=\"apps\"><a class=\"btn btn-large btn-info\" href=\"{{ $mainCtrl.$context + '/admin/dict_list' }}\"><i class=\"fa fa-th-large\"></i> Локальные словари</a> <a class=\"btn btn-large btn-info\" href=\"{{ $mainCtrl.$context + '/admin/remoteDict_list' }}\"><i class=\"fa fa-th-large\"></i> Внешние словари</a> <a class=\"btn btn-large btn-info\" href=\"{{ $mainCtrl.$context + '/admin/vis_list' }}\"><i class=\"fa fa-th-large\"></i> Справочник ВИС</a> <a class=\"btn btn-large btn-info\" href=\"{{ $mainCtrl.$context + '/admin/mvz_list' }}\"><i class=\"fa fa-th-large\"></i> Справочник МВЗ</a></div></app>"
  );


  $templateCache.put('/views/admin/digital-service.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Электронные услуги|admin/digital-services-list,Редактирование электронной услуги\"><digital-service></digital-service></app>"
  );


  $templateCache.put('/views/admin/digital-services-list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Электронные услуги\"><digital-services-list></digital-services-list></app>"
  );


  $templateCache.put('/views/admin/edit_news.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Новости\"><admin-news-list></admin-news-list></app>"
  );


  $templateCache.put('/views/admin/elkReport.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Ошибка синхронизации статуса с ЕЛК\"><elk-report></elk-report></app>"
  );


  $templateCache.put('/views/admin/elkReportList.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Ошибки синхронизации с ЕЛК\"><elk-report-list></elk-report-list></app>"
  );


  $templateCache.put('/views/admin/form_list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Формы услуг (старая версия)\"><form-list></form-list></app>"
  );


  $templateCache.put('/views/admin/form_view.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Редактор электронных форм|admin/form_list,Просмотр форм\"><form-view></form-view></app>"
  );


  $templateCache.put('/views/admin/formio_view.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Редактор электронных форм|admin/form_list,Просмотр форм\"><formio-view></formio-view></app>"
  );


  $templateCache.put('/views/admin/forms-template/formio.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Список шаблонов форм|admin/forms-templates-list,Редактор шаблона формы (Formio)\"><forms-template-formio></forms-template-formio></app>"
  );


  $templateCache.put('/views/admin/forms-template/schemaform.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Список шаблонов форм|admin/forms-templates-list,Редактор шаблона формы (SchemaForm)\"><forms-template-schemaform></forms-template-schemaform></app>"
  );


  $templateCache.put('/views/admin/forms-templates-list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Список шаблонов форм\"><forms-templates-list></forms-templates-list></app>"
  );


  $templateCache.put('/views/admin/media-files-list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Редактирование списка медиафайлов\"><media-files-list></media-files-list></app>"
  );


  $templateCache.put('/views/admin/municipals.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Справочник поселений по районам\"><admin-municipals></admin-municipals></app>"
  );


  $templateCache.put('/views/admin/mvz_list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Справочник Межведомственных запросов\"><mvz-list></mvz-list></app>"
  );


  $templateCache.put('/views/admin/mvz_view.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Межведомственный запрос\"><mvz-view></mvz-view></app>"
  );


  $templateCache.put('/views/admin/news-edit.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Редактирование новостей|admin/news-list,[newsTitle]\"><admin-news-edit></admin-news-edit></app>"
  );


  $templateCache.put('/views/admin/news-list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Редактирование новостей\"><admin-news-list></admin-news-list></app>"
  );


  $templateCache.put('/views/admin/org_covid_edit.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Реестр организаций COVID19\" show-digital=\"true\"><organization-covid-list edit=\"true\"></organization-covid-list></app>"
  );


  $templateCache.put('/views/admin/org_edit_old.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Реестр организаций\"><organization-list edit=\"true\"></organization-list></app>"
  );


  $templateCache.put('/views/admin/org_edit.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Реестр организаций\" show-digital=\"true\"><organization-list edit=\"true\"></organization-list></app>"
  );


  $templateCache.put('/views/admin/org_list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Расписание организаций\"><organization-list edit=\"false\"></organization-list></app>"
  );


  $templateCache.put('/views/admin/payableServiceList.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Каталог платных услуг\"><payable-service-list></payable-service-list></app>"
  );


  $templateCache.put('/views/admin/paymentDetailsList.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Платежные реквизиты\"><payment-details-list></payment-details-list></app>"
  );


  $templateCache.put('/views/admin/penalty.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/penalty,Штрафы\"><penalty></penalty></app>"
  );


  $templateCache.put('/views/admin/questions.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Мои организации|admin/org_list,Вопросы организации\"><question-list></question-list></app>"
  );


  $templateCache.put('/views/admin/remoteDict_list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Внешние словари\"><remotedict-list></remotedict-list></app>"
  );


  $templateCache.put('/views/admin/remoteDict_view.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Внешние словари|admin/remoteDict_list,Внешний словарь\"><remotedict-view id=\"${param.id}\"></app>"
  );


  $templateCache.put('/views/admin/requestReport.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Список заявлений пользователей|admin/serviceRequestReportList,Заявление пользователя\"><request-report></request-report></app>"
  );


  $templateCache.put('/views/admin/resources.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Мои организации|admin/org_list,Ресурсы организации\"><resource-list></resource-list></app>"
  );


  $templateCache.put('/views/admin/service_request_test_settings.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page/,Проверка работоспособности и доступности услуг|admin/service_request_test/,Настройка тестовых заявлений\"><service-request-test-settings></service-request-test-settings></app>"
  );


  $templateCache.put('/views/admin/service_request_test.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Проверка работоспособности и доступности услуг\"><service-request-test></service-request-test></app>"
  );


  $templateCache.put('/views/admin/serviceRequestReportList.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Список заявлений пользователей\"><service-request-report-list></service-request-report-list></app>"
  );


  $templateCache.put('/views/admin/soap-template.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Список SOAP шаблонов|admin/soap-templates-list,Редактирование SOAP шаблона\"><soap-template></soap-template></app>"
  );


  $templateCache.put('/views/admin/soap-templates-list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Список SOAP шаблонов\"><soap-templates-list></soap-templates-list></app>"
  );


  $templateCache.put('/views/admin/theater.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Загрузка расписания\"><load-theater></load-theater></app>"
  );


  $templateCache.put('/views/admin/translates.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Переводы\"><translates></translates></app>"
  );


  $templateCache.put('/views/admin/unp_catalog.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Каталог услуг УНП\"><unp-catalog></unp-catalog></app>"
  );


  $templateCache.put('/views/admin/user_list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Реестр пользователей\"><user-list></user-list></app>"
  );


  $templateCache.put('/views/admin/user_page.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет администратора\"><user-cab></user-cab></app>"
  );


  $templateCache.put('/views/admin/vis_list.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,Справочники ВИС\"><vis-list></vis-list></app>"
  );


  $templateCache.put('/views/admin/vis_view.page.html',
    "<app breadcrumb=\"Главная|,Кабинет администратора|admin/admin_page,ВИС\"><vis-view></vis-view></app>"
  );


  $templateCache.put('/views/admin/votes.page.html',
    "<app breadcrumb=\"Главная|,Голосования\"><votes-admin></votes-admin></app>"
  );


  $templateCache.put('/views/admin/voteView.page.html',
    "<app breadcrumb=\"Главная|,Просмотр голосования\"><vote-view></vote-view></app>"
  );


  $templateCache.put('/views/covid-19_infected.page.html',
    "<app breadcrumb=\"Главная\"><h1 class=\"ng-binding\">Оформление заявки на выход</h1><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Выявлена опасность заражения.</h4><p>В выдаче пропуска отказано.</p></div></app>"
  );


  $templateCache.put('/views/covid-19_pass.page.html',
    "<app breadcrumb=\"Главная\"><covid-19-pass></covid-19-pass></app>"
  );


  $templateCache.put('/views/covid-19_qr-org.page.html',
    "<covid-19-qr-org org-id=\"$mainCtrl.$routeParams.id\"></covid-19-qr-org>"
  );


  $templateCache.put('/views/covid-19_qr.page.html',
    "<covid-19-qr pass-id=\"$mainCtrl.$routeParams.id\"></covid-19-qr>"
  );


  $templateCache.put('/views/home.page.html',
    "<app reciever-type=\"recieverType\" only-digital=\"onlyDigital\"><index-page></index-page></app>"
  );


  $templateCache.put('/views/login.page.html',
    "<app breadcrumb=\"Главная|,Страница авторизации\"><h1>Вы не авторизованы</h1><p>Войдите или зарегистрируйтесь, чтобы получить полный доступ к электронным госуслугам</p><p><button class=\"btn btn-blue\" ng-click=\"$mainCtrl.login()\">Войти</button></p><p><a href=\"https://esia.gosuslugi.ru/registration/\" target=\"_blank\">пройти процедуру регистрации на портале Госуслуг</a></p></app>"
  );


  $templateCache.put('/views/news/news-list.page.html',
    "<app breadcrumb=\"Главная|,Новости\"><news-list></news-list></app>"
  );


  $templateCache.put('/views/news/news.page.html',
    "<app breadcrumb=\"Главная|,Новости|news,[newsTitle]\"><news></news></app>"
  );


  $templateCache.put('/views/personcab/appointments_places.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Запись на прием\"><appointments-places></appointments-places></app>"
  );


  $templateCache.put('/views/personcab/appointments.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Записаться на прием\"><appointments></appointments></app>"
  );


  $templateCache.put('/views/personcab/archiveRequest.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Архив заявлений\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\"><archive-request></archive-request></app>"
  );


  $templateCache.put('/views/personcab/asp_request.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Список заявлений|personcab/index?tab=statement,Форма АСП\"><asp-request></asp-request></app>"
  );


  $templateCache.put('/views/personcab/covid-19-organization-list.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Записаться на прием\"></app>"
  );


  $templateCache.put('/views/personcab/dos_appeal.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Список жалоб|personcab/index?tab=appeal,Досудебное обжалование\"><dos-appeal></dos-appeal></app>"
  );


  $templateCache.put('/views/personcab/elkRequest.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Заявление - подтверждение\"><elk-request></elk-request></app>"
  );


  $templateCache.put('/views/personcab/index.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет\"><index-cab></index-cab></app>"
  );


  $templateCache.put('/views/personcab/info_pou.page.html',
    "<app breadcrumb=\"Главная|, Предоставление информации о текущей успеваемости обучающегося\"><info-pou-tabs></info-pou-tabs></app>"
  );


  $templateCache.put('/views/personcab/infoService.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Информационная услуга\"><info-service></info-service></app>"
  );


  $templateCache.put('/views/personcab/me.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Мои данные\"><me></me></app>"
  );


  $templateCache.put('/views/personcab/mincult_schedule.page.html',
    "<app breadcrumb=\"Главная|, Расписание театральных представлений\"><mincult-schedule></mincult-schedule></app>"
  );


  $templateCache.put('/views/personcab/pays.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Мои оплаты\"><pays></pays></app>"
  );


  $templateCache.put('/views/personcab/payservice.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Оплата госпошлины\"><pay-service></pay-service></app>"
  );


  $templateCache.put('/views/personcab/poll_list.page.html',
    "<app breadcrumb=\"Главная|,Опросы\"><poll-list></poll-list></app>"
  );


  $templateCache.put('/views/personcab/poll.page.html',
    "<poll-one></poll-one>"
  );


  $templateCache.put('/views/personcab/record_mfc.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Запись на прием|personcab/index?tab=record,Запись в МФЦ\"><record-mfc></record-mfc></app>"
  );


  $templateCache.put('/views/personcab/request.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Список заявлений|personcab/index?tab=statement,Форма заявления\"><request></request></app>"
  );


  $templateCache.put('/views/personcab/requestConfirm.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Заявление - подтверждение\"><request-confirm id-procedure=\"{{$mainCtrl.$routeParams.procedure}}\" id-service-form=\"{{$mainCtrl.$routeParams.form}}\" asp=\"{{$mainCtrl.$routeParams.asp}}\" type=\"{{$mainCtrl.$routeParams.type}}\"></request-confirm></app>"
  );


  $templateCache.put('/views/personcab/requestRate.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Список заявлений|personcab/index?tab=statement,Оценка качества\"><request-rate></request-rate></app>"
  );


  $templateCache.put('/views/personcab/schedule.page.html',
    "<app breadcrumb=\"Главная|,Мои организации|admin/org_list,Ресурсы|admin/resources?id={{$mainCtrl.$routeParams.org}},{{$mainCtrl.$routeParams.organization}}\"><resource-schedule id=\"{{$mainCtrl.$routeParams.org}}\" place=\"{{$mainCtrl.$routeParams.place}}\" resource-id=\"{{$mainCtrl.$routeParams.id}}\" resource=\"local.resource\" data=\"local.interval\" question=\"local.question\"></resource-schedule></app>"
  );


  $templateCache.put('/views/personcab/service-request/archive.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Список заявлений|personcab/index?tab=statement,Архив заявлений\"><service-request-archive></service-request-archive></app>"
  );


  $templateCache.put('/views/personcab/service-request/formio.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Список заявлений|personcab/index?tab=statement,Форма заявления\"><service-request-formio></service-request-formio></app>"
  );


  $templateCache.put('/views/personcab/service-request/schemaform.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Список заявлений|personcab/index?tab=statement,Форма заявления\"><service-request-schemaform></service-request-schemaform></app>"
  );


  $templateCache.put('/views/personcab/status_dou.page.html',
    "<app breadcrumb=\"Главная|, Проверка номера в очереди в приоритетный ДОУ\"><status-dou></status-dou></app>"
  );


  $templateCache.put('/views/personcab/survey_kindergarten.page.html',
    "<app breadcrumb=\"Главная|,Голосование\"><survey digital-rgu-services=\"'5b76cb84fb3e56eea2c4cf74'\"></survey></app>"
  );


  $templateCache.put('/views/personcab/survey.page.html',
    "<app breadcrumb=\"Главная|,Голосование\"><survey digital-rgu-services=\"$mainCtrl.$routeParams.digitalRguServices\"></survey></app>"
  );


  $templateCache.put('/views/personcab/widget_know_inn.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Узнай ИНН\"><widget-know-inn></widget-know-inn></app>"
  );


  $templateCache.put('/views/personcab/widget_law_info.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Судебная задолженность\"><widget-law-info></widget-law-info></app>"
  );


  $templateCache.put('/views/personcab/widget_mutual_settlements.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Взаиморасчеты с государством\"><widget-mutual-settlements></widget-mutual-settlements></app>"
  );


  $templateCache.put('/views/personcab/widget_nalog_debet.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Налоговая задолженность\"><widget-nalog-debet></widget-nalog-debet></app>"
  );


  $templateCache.put('/views/personcab/widget_zagran.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Заграничный паспорт\"><widget-zagran></widget-zagran></app>"
  );


  $templateCache.put('/views/privacy.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Конфиденциальность\"><section class=\"lk\"><div class=\"appl\"><p align=\"CENTER\" style=\"margin-bottom: 0in\"><a name=\"_GoBack\"></a><font face=\"Times New Roman, serif\"><font size=\"4\"><b>Политика конфиденциальности портала</b></font></font></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><br></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Общие положения</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">1.1. Настоящая Политика конфиденциальности (далее – Политика) определяет общие условия обработки персональных данных пользователей на портале государственных и муниципальных услуг (функций), предоставляемых (исполняемых) органами исполнительной власти Ставропольского края и органами местного самоуправления муниципальных образований Ставропольского края (далее — портал).</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">1.2. Министерство энергетики, промышленности и связи Ставропольского края является оператором портала (далее – Оператор портала).</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">1.3. Обработка персональных данных на портале осуществляется на основании:</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Конституции Российской Федерации;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">законодательства Российской Федерации в сфере персональных данных;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">законодательства Российской Федерации в сфере информации, информационных технологиях и о защите информации;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">законодательства Российской Федерации в сфере предоставления государственных и муниципальных услуг;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">законодательства Российской Федерации в сфере электронной подписи;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">постановления Правительства Ставропольского края от 02.07.2012 N 225-п &quot;О государственных информационных системах Ставропольского края, обеспечивающих предоставление (исполнение) в электронной форме государственных и муниципальных услуг (функций) в Ставропольском крае&quot;.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">1.4. Портал осуществляет обработку персональных данных в следующем объеме:</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">фамилия, имя, отчество (при наличии);</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">пол;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">дата рождения;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">сведения о гражданстве;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">страховой номер индивидуального лицевого счета застрахованного лица в системе персонифицированного учета Пенсионного фонда Российской Федерации (СНИЛС);</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">адрес электронной почты пользователя;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">номер абонентского устройства подвижной радиотелефонной связи;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">адрес места жительства (регистрации);</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">реквизиты основного документа, удостоверяющего личность (серия, номер, кем выдан, дата выдачи, код подразделения);</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Цели обработки персональных данных</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">2.1. Оператор портала обрабатывает персональные данные пользователей в целях:</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">предоставления государственных или муниципальных услуг и исполнения государственных или муниципальных функций;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">предоставления иных услуг и сервисов с использованием портала;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">предоставления санкционированного доступа к информации, содержащейся в государственных, муниципальных и других информационных системах;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">передачи персональных данных пользователя третьей стороне на основаниях, предусмотренных законодательством Российской Федерации о персональных данных;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">обеспечения пользователю возможности управления своими согласиями на совершение действий, в том числе юридически значимых;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">в иных целях, предусмотренных федеральными законами, актами Президента Российской Федерации и актами Правительства Российской Федерации.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Доступ третьих лиц к персональным данным</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">3.1. Оператор портала может передать персональные данные пользователя третьей стороне в следующих случаях:</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">если передача персональных данных необходима для предоставления государственной или муниципальной услуги;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">если пользователь дал согласие на осуществление передачи своих данных третьей стороне;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">если передача необходима в рамках установленной законодательством Российской Федерации процедуры.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Способы обработки персональных данных и обязанности Оператора портала по защите персональных данных.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">4.1. Оператор портала обязан принимать необходимые организационные и технические меры для обеспечения конфиденциальности, целостности, сохранности и доступности персональных данных пользователей.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">4.2. Обработка персональных данных на портале осуществляется как автоматическим, так и автоматизированным способом.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">4.3. При обработке персональных данных, осуществляемой без использования средств автоматизации, Оператор портала обязуется соблюдать требования о раздельном хранении персональных данных (материальных носителей), обработка которых осуществляется в различных целях, определении мест хранения персональных данных и лиц, имеющих доступ к персональным данным на портале, и иные требования, установленные законодательством Российской Федерации к обработке персональных данных, осуществляемой без использования средств автоматизации.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">4.4. При обработке персональных данных автоматическим и автоматизированным способом Оператор портала обязан своевременно производить оценку соответствия портала требованиям законодательства Российской Федерации в области защиты информации и соблюдать иные требования к автоматизированной обработке персональных данных.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">4.5. При наличии согласия субъекта персональных данных или соответствующих федерального закона, акта Президента Российской Федерации, акта Правительства Российской Федерации или иных актов, обработка персональных данных на портале может быть поручена Оператором портала третьему лицу, которое, в свою очередь, обязано неукоснительно соблюдать все требования к обработке персональных данных, установленных законодательством Российской Федерации в сфере персональных данных, а также настоящей Политикой.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">4.6. При обработке персональных данных на портале Оператор портала не осуществляет трансграничной передачи персональных данных.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">4.7. Оператор портала обязан соблюдать законные права пользователей портала в сфере обработки персональных данных, в том числе содействовать реализации прав пользователя, указанных в Политике, а также соблюдать иные требования к обработке персональных данных, установленные законодательством Российской Федерации.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Сроки обработки персональных данных</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">5.1. Пользователь дает согласие на обработку персональных данных на портале без ограничения срока.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Права и обязанности пользователей портала при обработке их персональных данных на портале.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">6.1. Пользователь портала имеет право:</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">использовать свои персональные данные в любых законных целях, в том числе в целях, установленных Политикой;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">направлять Оператору портала запросы на получение информации, касающейся обработки его персональных данных;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">оспаривать и обжаловать действия Оператора портала в сфере обработки персональных данных в порядке, установленном законодательством Российской Федерации;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">направлять свои предложения, вопросы и жалобы по использованию портала в службу поддержки портала;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">отозвать свое согласие на обработку своих персональных данных, посредством направления оператору портала соответствующего отзыва с приложением документов, подтверждающих личность субъекта персональных данных (копии паспорта и номера СНИЛС);</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">реализовывать иные права, предоставленные ему законодательством Российской Федерации в сфере персональных данных и возникающие в связи с использованием портала.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">6.2. Пользователь портала обязан:</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">нести ответственность за негативные последствия в виде неправомерного использования своих персональных данных третьими лицами, наступившие в результате небрежного отношения пользователя портала к своему паролю от учетной записи;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">предоставлять необходимую информацию на портале при обязательности ее использования в целях, указанных в пункте 2.1 Политики, а также, если предоставление такой информации обусловлено требованиями законодательства Российской Федерации;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">обновлять обрабатываемые на портале персональные данные в случае их изменения, если автоматическое обновление указанных данных невозможно;</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">осуществлять иные обязанности в сфере персональных данных, когда такие обязанности возникают у субъекта персональных данных в ходе обработки его персональных данных на портале.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"CENTER\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">Дополнительные условия</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><br></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">7.1. Оператор портала вправе вносить в Политику изменения без согласия Пользователя портала по своему усмотрению в том числе, но не ограничиваясь, в случае, когда такие изменения обусловлены изменениями законодательства Российской Федерации, затрагивающего вопросы использования портала.</font></font></p><p align=\"JUSTIFY\" style=\"margin-bottom: 0in\"><font face=\"Times New Roman, serif\"><font size=\"4\">7.2. Пользователь портала всегда может ознакомится с актуальными версиями Политики на Интернет-сайте https://26gosuslugi.ru. Продолжая пользоваться порталом, Пользователь подтверждает согласие с внесенными изменениями в Политику.</font></font></p></div></section></app>"
  );


  $templateCache.put('/views/rgu/bankrupt.page.html',
    "<app breadcrumb=\"Главная|,Жизненные ситуации\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><style>.rslides {\n" +
    "            position: relative;\n" +
    "            list-style: none;\n" +
    "            overflow: hidden;\n" +
    "            width: 100%;\n" +
    "            padding: 0;\n" +
    "            margin: 0;\n" +
    "        }\n" +
    "\n" +
    "        .rslides li {\n" +
    "            -webkit-backface-visibility: hidden;\n" +
    "            position: absolute;\n" +
    "            display: none;\n" +
    "            width: 100%;\n" +
    "            left: 0;\n" +
    "            top: 0;\n" +
    "        }\n" +
    "\n" +
    "        .rslides li:first-child {\n" +
    "            position: relative;\n" +
    "            display: block;\n" +
    "            float: left;\n" +
    "        }\n" +
    "\n" +
    "        .rslides img {\n" +
    "            display: block;\n" +
    "            height: auto;\n" +
    "            float: left;\n" +
    "            width: 100%;\n" +
    "            border: 0;\n" +
    "        }</style><script>$(function() {\n" +
    "            $(\".rslides\").responsiveSlides();\n" +
    "        });</script><div style=\"width: 80%; margin-left: auto; margin-right: auto\"><ul class=\"rslides\"><li><img src=\"/assets/images/bankrupt/1.png\"></li><li><img src=\"/assets/images/bankrupt/2.png\"></li><li><img src=\"/assets/images/bankrupt/3.png\"></li><li><img src=\"/assets/images/bankrupt/4.png\"></li><li><img src=\"/assets/images/bankrupt/5.png\"></li></ul><a href=\"http://umfc26.ru/\" class=\"btn btn-default\">Перейти на сайт</a></div></app>"
  );


  $templateCache.put('/views/rgu/case_list.page.html',
    "<app breadcrumb=\"Главная|,Жизненные ситуации\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><case-list reciever-type=\"$parent.recieverType\" only-digital=\"$parent.onlyDigital\"></case-list></app>"
  );


  $templateCache.put('/views/rgu/case_service_list.page.html',
    "<app breadcrumb=\"Главная|,Жизненные ситуации|rgu/case_list,{{$mainCtrl.$routeParams.title}}\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><case-service-list reciever-type=\"$parent.recieverType\" only-digital=\"$parent.onlyDigital\"></case-service-list></app>"
  );


  $templateCache.put('/views/rgu/category_list.page.html',
    "<app breadcrumb=\"Главная|,Категории услуг\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><category-list reciever-type=\"$parent.recieverType\" only-digital=\"$parent.onlyDigital\"></category-list></app>"
  );


  $templateCache.put('/views/rgu/category_service_list.page.html',
    "<app breadcrumb=\"Главная|,Категории услуг|rgu/category_list,{{$mainCtrl.$routeParams.category}}\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><category-service-list reciever-type=\"$parent.recieverType\" only-digital=\"$parent.onlyDigital\"></category-service-list></app>"
  );


  $templateCache.put('/views/rgu/category_service.page.html',
    "<app breadcrumb=\"Главная|,Категории услуг|rgu/category_list\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><category-service></category-service></app>"
  );


  $templateCache.put('/views/rgu/dept_list.page.html',
    "<app breadcrumb=\"Главная|,Реестр услуг\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><dept-list reciever-type=\"$parent.recieverType\" only-digital=\"$parent.onlyDigital\"></dept-list></app>"
  );


  $templateCache.put('/views/rgu/dept_view.page.html',
    "<app breadcrumb=\"Главная|,Органы власти|rgu/dept_list,Орган власти\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\" show-digital=\"true\"><dept-view></dept-view></app>"
  );


  $templateCache.put('/views/rgu/form_new.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Create Digit Serv\"><form-new></form-new></app>"
  );


  $templateCache.put('/views/rgu/no_pay.page.html',
    "<app breadcrumb=\"Главная|,\"><h4>Cервис оплаты временно неработает. Приносим свои извинения.</h4></app>"
  );


  $templateCache.put('/views/rgu/procedure_view_2600000000164718192.page.html',
    "<app breadcrumb=\"Главная|,Услуга\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\"><procedure-view-2600000000164718192></procedure-view-2600000000164718192></app>"
  );


  $templateCache.put('/views/rgu/search.page.html',
    "<app breadcrumb=\"Главная|,Поиск услуг\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\"><search-rgu reciever-type=\"$parent.recieverType\" only-digital=\"$parent.onlyDigital\" search=\"search\"></search-rgu></app>"
  );


  $templateCache.put('/views/rgu/service_view.page.html',
    "<app breadcrumb=\"Главная|,Услуга\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\"><service-view></service-view></app>"
  );


  $templateCache.put('/views/rgu/social_widget.page.html',
    "<app breadcrumb=\"Главная|,Услуга\" reciever-type=\"recieverType\" only-digital=\"onlyDigital\"><div class=\"row\"><div class=\"col-lg-4\"><ul><li><a href=\"#t1\">Автономная некоммерческая организация «Северо-Кавказский центр профессионально-общественной аккредитации»</a></li><li><a href=\"#t2\">Ассоциация «Общеобразовательная школа № 21 города-курорта Кисловодска»</a></li><li><a href=\"#t3\">Межрегиональная общественная благотворительная организация «Вера, Надежда, Любовь»</a></li><li><a href=\"#t4\">Региональное отделение Общероссийской общественно-государственной организации «Добровольное общество содействия армии, авиации и флоту России» Ставропольского края</a></li><li><a href=\"#t5\">Союз «Торгово-промышленная палата Ставропольского края»</a></li><li><a href=\"#t6\">Ставропольское краевое отделение Всероссийской общественной организации ветеранов «БОЕВОЕ БРАТСТВО»</a></li><li><a href=\"#t7\">Частное образовательное учреждение дополнительного профессионального образования «Северо-Кавказский институт дополнительного образования»</a></li></ul></div><div class=\"col-lg-8\"><p align=\"center\"><strong></strong></p><p align=\"center\"><a name=\"t1\"></a> <strong>Автономная некоммерческая организация «Северо-Кавказский центр</strong></p><p align=\"center\"><strong>профессионально-общественной аккредитации»</strong></p><p align=\"center\">(355037, Ставропольский край, г.Ставрополь, ул Доваторцев, д 30, стр б, тел. +7 928 313-99-91, E-mail: <a href=\"mailto:skcpoa@gmail.com\">skcpoa@gmail.com</a>)</p><p><strong>Перечень оказываемых услуг:</strong></p><p>1. Организация профессиональной ориентации граждан в целях выбора сферы деятельности (профессии), трудоустройства, прохождения профессионального обучения и получения дополнительного профессионального образования</p><p>2. Организация и проведение олимпиад, конкурсов, мероприятий, направленных на выявление и развитие у обучающихся интеллектуальных и творческих способностей, способностей к занятиям физической культурой и спортом, интереса к научной (научно-исследовательской) деятельности, творческой деятельности, физкультурно-спортивной деятельности</p><p>3. Услуги по сбору, обобщению и анализу информации о качестве оказания услуг организациями культуры, социального обслуживания, медицинскими организациями и организациями, осуществляющими образовательную деятельность, осуществляемые организацией-оператором в соответствии с Федеральным законом \"О внесении изменений в отдельные законодательные акты Российской Федерации по вопросам проведения независимой оценки качества оказания услуг организациями в сфере культуры, социального обслуживания, охраны здоровья и образования\" в части популяризации системы независимой оценки качества оказания услуг организациями в сфере культуры, социального обслуживания, охраны здоровья и образования и возможности участия в ней потребителей услуг, вовлечение граждан в независимую оценку</p><p align=\"center\"><a name=\"t2\"></a> <strong>Ассоциация «Общеобразовательная школа № 21</strong></p><p align=\"center\"><strong>города-курорта Кисловодска»</strong></p><p align=\"center\">( Ставропольский край, г. Кисловодск, ул. Фоменко, 25, тел. +7 87937 2-65-69, <a href=\"http://shkola-21.ru/\">http://shkola-21.ru/</a>)</p><p><strong>Перечень оказываемых услуг:</strong></p><p>1. Предоставление социального обслуживания в полустационарной форме</p><p>2. Предоставление социального обслуживания в полустационарной форме</p><p>3. Услуги, предусматривающие реабилитацию и социальную адаптацию инвалидов, социальное сопровождение семей, воспитывающих детей с ограниченными возможностями здоровья</p><p>4. Услуги, предусматривающие реабилитацию и социальную адаптацию инвалидов, социальное сопровождение семей, воспитывающих детей с ограниченными возможностями здоровья</p><p>5. Оказание информационно-справочной поддержки гражданам по вопросам инвалидности, социальной защиты, медико-социальной экспертизы и реабилитации, абилитации инвалидов, в том числе женщин-инвалидов, девочек-инвалидов, а также пострадавших в результате чрезвычайных обстоятельств</p><p>6. Оказание информационно-справочной поддержки гражданам по вопросам инвалидности, социальной защиты, медико-социальной экспертизы и реабилитации, абилитации инвалидов, в том числе женщин-инвалидов, девочек-инвалидов, а также пострадавших в результате чрезвычайных обстоятельств</p><p>7. Проведение социально-средовой реабилитации или абилитации инвалидов</p><p>8. Проведение социально-средовой реабилитации или абилитации инвалидов</p><p>9. Проведение социально-психологической реабилитации или абилитации инвалидов в амбулаторных условиях</p><p>10. Проведение социально-психологической реабилитации или абилитации инвалидов в амбулаторных условиях</p><p>11. Проведение социально-бытовой адаптации</p><p>12. Проведение социально-бытовой адаптации</p><p align=\"center\"><a name=\"t3\"></a> <strong>Межрегиональная общественная благотворительная организация</strong></p><p align=\"center\"><strong>«Вера, Надежда, Любовь»</strong></p><p align=\"center\"><strong>(</strong> 357501, Ставропольский край, город Пятигорск, проспект Кирова, 27 А, тел. +7 8793 39-38-08, +7 8793 97-43-24, e-mail:<a href=\"mailto:vnl@kmv.ru\">vnl@kmv.ru</a>, <a href=\"mailto:idp@kmv.ru\">idp@kmv.ru</a>)</p><p><strong>Перечень оказываемых услуг:</strong></p><p>1. Услуги по оказанию социальной помощи детям, инвалидам, гражданам пожилого возраста, лицам, находящимся в трудной жизненной ситуации, в том числе пострадавшим в результате стихийных бедствий, экологических, техногенных или иных катастроф, социальных, национальных, религиозных конфликтов, беженцам и вынужденным переселенцам, а также по их социальному сопровождению</p><p>2. Услуги по оказанию социальной помощи детям, инвалидам, гражданам пожилого возраста, лицам, находящимся в трудной жизненной ситуации, в том числе пострадавшим в результате стихийных бедствий, экологических, техногенных или иных катастроф, социальных, национальных, религиозных конфликтов, беженцам и вынужденным переселенцам, а также по их социальному сопровождению</p><p>3. Услуги по оказанию социальной помощи детям, инвалидам, гражданам пожилого возраста, лицам, находящимся в трудной жизненной ситуации, в том числе пострадавшим в результате стихийных бедствий, экологических, техногенных или иных катастроф, социальных, национальных, религиозных конфликтов, беженцам и вынужденным переселенцам, а также по их социальному сопровождению</p><p>4. Содействие в предоставлении бесплатной юридической помощи</p><p>5. Содействие в предоставлении бесплатной юридической помощи</p><p>6. Содействие в предоставлении бесплатной юридической помощи</p><p align=\"center\"><a name=\"t4\"></a> <strong>Региональное отделение Общероссийской общественно-государственной организации «Добровольное общество содействия армии, авиации и флоту России» Ставропольского края</strong></p><p align=\"center\">(г. Ставрополь, ул. Лермонтова,189, тел. +7 8652 23-47-94)</p><p><strong>Перечень оказываемых услуг:</strong></p><p>1. Услуги в области физической культуры и массового спорта</p><p>2. Организация и проведение официальных спортивных мероприятий</p><p align=\"center\"><a name=\"t5\"></a> <strong>Союз «Торгово-промышленная палата Ставропольского края»</strong></p><p align=\"center\"><strong>(</strong> 355042, Ставропольский край, г. Ставрополь, ул. Доваторцев, д 55, корп а,</p><p align=\"center\">тел.<strong> </strong>8 (8652) 94-53-34, 8 (962) 401-12-60,<a href=\"http://stavropol.tpprf.ru/ru/\">http://stavropol.tpprf.ru/ru/</a> <strong>)</strong></p><p><strong>Перечень оказываемых услуг:</strong></p><p>1. Организация профессиональной ориентации граждан в целях выбора сферы деятельности (профессии), трудоустройства, прохождения профессионального обучения и получения дополнительного профессионального образования</p><p align=\"center\"><a name=\"t6\"></a> <strong>Ставропольское краевое отделение Всероссийской общественной</strong></p><p align=\"center\"><strong>организации ветеранов «БОЕВОЕ БРАТСТВО»</strong></p><p align=\"center\">(г. Ставрополь, пр. Октябрьской революции, 49, тел. +7 8652 24-39-81, +7 8652 24-39-82, +7 499 518-05-77, <a href=\"https://bbratstvo.com/\">https://bbratstvo.com/</a>)</p><p><strong>Перечень оказываемых услуг:</strong></p><p>1. Услуги, предусматривающие реабилитацию и социальную адаптацию инвалидов, социальное сопровождение семей, воспитывающих детей с ограниченными возможностями здоровья</p><p>2. Услуги по оказанию социальной помощи детям, инвалидам, гражданам пожилого возраста, лицам, находящимся в трудной жизненной ситуации, в том числе пострадавшим в результате стихийных бедствий, экологических, техногенных или иных катастроф, социальных, национальных, религиозных конфликтов, беженцам и вынужденным переселенцам, а также по их социальному сопровождению</p><p>3. Услуги по оказанию социальной помощи детям, инвалидам, гражданам пожилого возраста, лицам, находящимся в трудной жизненной ситуации, в том числе пострадавшим в результате стихийных бедствий, экологических, техногенных или иных катастроф, социальных, национальных, религиозных конфликтов, беженцам и вынужденным переселенцам, а также по их социальному сопровождению</p><p>4. Услуги по оказанию социальной помощи детям, инвалидам, гражданам пожилого возраста, лицам, находящимся в трудной жизненной ситуации, в том числе пострадавшим в результате стихийных бедствий, экологических, техногенных или иных катастроф, социальных, национальных, религиозных конфликтов, беженцам и вынужденным переселенцам, а также по их социальному сопровождению</p><p>5. Содействие в предоставлении бесплатной юридической помощи</p><p>6. Содействие в предоставлении бесплатной юридической помощи</p><p>7. Оказание помощи семье в воспитании детей</p><p>8. Оказание помощи семье в воспитании детей</p><p>9. Оказание помощи семье в воспитании детей</p><p>10. Формирование позитивных интересов (в том числе в сфере досуга)</p><p>11. Формирование позитивных интересов (в том числе в сфере досуга)</p><p>12. Организация и проведение культурно-массовых мероприятий</p><p>13. Организация и проведение культурно-массовых мероприятий</p><p>14. Осуществление экскурсионного обслуживания</p><p>15. Осуществление экскурсионного обслуживания</p><p>16. Показ (организация показа) спектаклей (театральных постановок)</p><p>17. Показ (организация показа) спектаклей (театральных постановок)</p><p>18. Показ (организация показа) концертов и концертных программ</p><p>19. Показ (организация показа) концертов и концертных программ</p><p align=\"center\"><a name=\"t7\"></a> <strong>Частное образовательное учреждение дополнительного профессионального образования «Северо-Кавказский институт дополнительного образования»</strong></p><p align=\"center\">(г. Ставрополь, ул. Ленина,282, тел. +7 8652 26-51-61, +7 962 446-71-00, +7 962 445-30-58,</p><p align=\"center\"><a href=\"https://skidpo.ru/\">https://skidpo.ru/</a> )</p><p><strong>Перечень оказываемых услуг:</strong></p><p>1. Услуги по оказанию социальной помощи детям, инвалидам, гражданам пожилого возраста, лицам, находящимся в трудной жизненной ситуации, в том числе пострадавшим в результате стихийных бедствий, экологических, техногенных или иных катастроф, социальных, национальных, религиозных конфликтов, беженцам и вынужденным переселенцам, а также по их социальному сопровождению</p><p>2. Содействие в предоставлении бесплатной юридической помощи</p></div></div></app>"
  );


  $templateCache.put('/views/soglasie.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Согласие на обработку персональных данных\"><h3>СОГЛАСИЕ</h3><h4>на обработку персональных данных</h4><p style=\"text-indent: 30px\">Я, руководствуясь положениями Федерального закона от 27.07.2006 г. № 152-ФЗ «О персональных данных», даю согласие на обработку государственным казенным учреждением Ставропольского края «Краевой центр информационных технологий», являющемуся оператором государственной информационной системы Ставропольского края «Портал государственных и муниципальных услуг (функций), предоставляемых (исполняемых) органами исполнительной власти и органами местного самоуправления муниципальных образований Ставропольского края» (далее – Оператор 1) и министерству здравоохранения Ставропольского края (далее – Оператор 2), моих персональных данных, включающих фамилию, имя, отчество, дату рождения, контактный номер мобильного телефона, СНИЛС, с целью оперативной рассылки гражданам уведомлений о возможном контакте с заболевшими новой коронавирусной инфекцией (COVID-19), а также в целях недопущения посещения мест массового пребывания граждан, определенных Постановлением Губернатора Ставропольского края от 26 марта 2020 г. № 119 «О комплексе ограничительных и иных мероприятий по снижению рисков распространения новой коронавирусной инфекции (COVID-2019) на территории Ставропольского края» (музеев, выставочных залов, библиотек, театральных, концертных и культурно-досуговых мероприятий, проводимых учреждениями культуры в закрытых помещениях, кинотеатров (кинозалов), предприятий общественного питания в период с 22 часов 00 минут до 06 часов 00 минут, физкультурно-спортивных объектов, закрытых спортивных сооружений, физкультурно-оздоровительных комплексов и организаций) лицами, имеющими положительный результат лабораторного исследования на новую коронавирусную инфекцию (COVID-2019).</p><p style=\"text-indent: 30px\">Предоставляю Оператору 1 и Оператору 2 право осуществлять все действия (операции) с моими персональными данными, включая сбор, систематизацию, накопление, хранение, обновление, изменение, использование, обезличивание, блокирование, уничтожение. Оператор 1, Оператор 2 вправе обрабатывать мои персональные данные посредством внесения их в электронную базу данных, включения в списки (реестры) и отчетные формы, предусмотренные документами, регламентирующими порядок ведения и состав данных в учетно-отчетной документации, а также договорами между Оператором 1 и(или) Оператором 2 и третьими лицами.</p><p style=\"text-indent: 30px\">Оператор 1 и Оператор 2 имеют право во исполнение своих обязательств на обмен (прием и передачу) моими персональными данными между собой, с третьими лицами с использованием машинных носителей информации, по каналам связи и(или) в виде бумажных документов, с соблюдением мер, обеспечивающих их защиту от несанкционированного доступа, без специального уведомления меня об этом, при условии, что их прием и обработка осуществляются лицом, обязанным сохранять профессиональную (служебную) тайну.</p><p style=\"text-indent: 30px\">Настоящее согласие дано мной добровольно на срок действия режима повышенной готовности, введенного постановлением Губернатора Ставропольского края от 16 марта 2020 г. № 101 «О введении на территории Ставропольского края режима повышенной готовности».</p><p style=\"text-indent: 30px\">Я оставляю за собой право отозвать свое согласие посредством составления соответствующего письменного документа, который может быть направлен мной в адрес Оператора 1, Оператора 2 по почте заказным письмом с уведомлением о вручении либо вручен лично под расписку представителю Оператора 1, Оператора 2.</p><p style=\"text-indent: 30px\">В случае получения моего письменного заявления об отзыве настоящего согласия на обработку персональных данных Оператор 1, Оператор 2 обязан:</p><ul><li>а) прекратить их обработку в течение пятидесяти календарных дней;</li><li>б) по истечении указанного выше срока хранения моих персональных данных уничтожить (стереть) все мои персональные данные из баз данных автоматизированной информационной системы Оператора 1, Оператора 2, включая все копии на машинных носителях информации, без уведомления меня об этом.</li></ul></app>"
  );


  $templateCache.put('/views/support.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Обращение в службу поддержки\"><support></support></app>"
  );


  $templateCache.put('/views/terms.page.html',
    "<app breadcrumb=\"Главная|,Личный кабинет|personcab/index,Условия использования\"><section class=\"lk\"><div class=\"appl\"><h4 style=\"font-weight: bold;text-align: center\">Условия использования</h4><p>Использование всех материалов, представленных на Портале государственных и муниципальных услуг Ставропольского края, допустимо исключительно в информационных целях. В случае использования материалов портала обязательным является цитирование источника (исключение составляют материалы, не являющиеся в соответствии с Гражданским кодексом Российской Федерации объектами авторского права). В случае цитирования в сетевых СМИ обязательным условием является указание гиперссылки на соответствующую интернет-страницу с уникальным сетевым адресом. При цитирование внесение каких-либо изменений, добавлений и искажений в используемый материал не допускается.</p><p>Коммерческое использование информации, размещенной на Портале государственных и муниципальных услуг Ставропольского края, допускается только в случае получения письменного разрешения оператора портала (исключение составляют материалы, не являющиеся в соответствии с Гражданским кодексом Российской Федерации объектами авторского права). При получении такого разрешения обязательным при использовании материалов является указание источника цитирования. Под коммерческим использованием подразумевается использование юридическим либо физическим лицом информации, размещенной на Портале государственных и муниципальных услуг Ставропольского края, в целях получения (извлечения) дохода (прибыли), в том числе консультирование по вопросам использования (применения) ресурсов (сервисов) портала. При этом обязательным является выполнение положений Федерального закона №8-ФЗ от 09.02.2009 г. «Об обеспечении доступа к информации о деятельности государственных органов и органов местного самоуправления» в части соблюдения принципа бесплатности предоставления информации о деятельности государственных органов и органов местного самоуправления, размещаемой ими в информационно-телекоммуникационной сети Интернет.</p><p>Оператор Портала государственных и муниципальных услуг Ставропольского края не несет ответственности за моральный вред или материальный ущерб, а также прямые, косвенные или иные убытки, возникшие в связи с доступом, использованием или невозможностью использования портала. Оператор портала не несет ответственности за некорректную информацию, размещенную на портале региональными органами государственной власти. На Портале государственных и муниципальных услуг Ставропольского края могут размещаться ссылки на Интернет-сайты других государственных органов, организаций. Оператор портала не несет ответственности за точность и достоверность информации, размещенной на данных сайтах.</p></div></section></app>"
  );


  $templateCache.put('/views/transport.page.html',
    "<app breadcrumb=\"Главная|,Транспорт\"><transport></transport></app>"
  );


  $templateCache.put('/views/vote.page.html',
    "<app breadcrumb=\"Главная|,Голосование\"><vote id=\"$mainCtrl.$routeParams._id\"></vote></app>"
  );


  $templateCache.put('/widgets/widget.template.html',
    "<div ng-hide=\"$ctrl.status=='loading' || $ctrl.status=='error'\"><div class=\"container\"><div id=\"widget\" ng-controller=\"WidgetController\"></div></div></div><div style=\"padding:10px;text-align:center\" ng-if=\"$ctrl.status=='error'\"><div class=\"alert alert-block alert-error fade in\" style=\"display:inline-block\"><h4>Ошибка</h4><p>{{$ctrl.error.message}}</p></div></div>"
  );

}]);

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("adminMunicipals", {
        templateUrl: "/admin/admin-municipals/admin-municipals.component.html",
        controller: ["municipalsService", "$http", "$window", AdminMunicipalsController]
    });

    function AdminMunicipalsController(municipalsService, $http, $window) {
        var $ctrl = this;

        $ctrl.municipals = [];
        $ctrl.titles = {};

        $ctrl.goBack = function() {
            $window.history.back();
        };

        $ctrl.$onInit = function() {
            $ctrl.status = "LOADING";
            municipalsService
                .getAllMunicipal()
                .then(ready)
                .catch(errHandler);
        };

        $ctrl.addMunicipal = function(pos) {
            $ctrl.municipals[pos === 'top' ? 'unshift' : 'push']({
                title: "Не указано название округа",
                id: [],
            });
        }

        $ctrl.getMunicipalTitle = function(id){
            return municipalsService.getTitle(id)
        };

        $ctrl.removeMunicipal = function($n) {
            $ctrl.municipals.splice($n, 1);
        }

        $ctrl.addId = function($idObj) {
            $ctrl.municipals = $ctrl.municipals.map(function(municipal){
                if (municipal.idObj === $idObj) {
                    municipal.id = municipal.id.concat(["0"]);
                }
                return municipal;
            });
        }

        $ctrl.removeId = function($id, $idObj) {
            $ctrl.municipals = $ctrl.municipals.map(function(municipal){
                if (municipal.idObj === $idObj) {
                    municipal.id = municipal.id.filter(function(id){
                        return id !== $id;
                    });
                }
                return municipal;
            });
        }

        $ctrl.changeVal = function($id, $i, $idObj) {
            $ctrl.municipals = $ctrl.municipals.map(function(municipal){
                if (municipal.idObj === $idObj) {
                    municipal.id[$i] = $id;
                }
                return municipal;
            });
        }

        $ctrl.submit = function() {
            $ctrl.status = "LOADING";
            municipalsService
                .save($ctrl.municipals)
                .then(ready)
                .catch(errHandler);
        }

        function ready(data) {
            $ctrl.municipals = data || [];
            municipalsService.fetchTitles();
            $ctrl.status = "READY";
        }

        function errHandler(err) {
            warn(err);
            var data = err.data;
            $ctrl.status = "ERROR";
            $ctrl.error = data && data.errorMessage ? { message: data.errorMessage } : { message: data };
        }

        ready();
    }

})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("adminNewsEdit", {
        templateUrl: "/admin/admin-news-edit/admin-news-edit.component.html",
        controller: ["$scope", "$routeParams", "$location", "$http", "$window", AdminNewsListController]
    });

    function AdminNewsListController($scope, $routeParams, $location, $http, $window) {
        var $ctrl = this;
        var oldBreadcrumb;

        $ctrl.datepickerIsOpen = false;
        $ctrl.aliasError = false;
        $ctrl.errors = {};
        $ctrl.news = {
            alias: '',
            active: true,
            header: '',
            date: new Date(),
            content: ''
        };

        $ctrl.goBack = function() {
            $window.history.back();
        };

        $ctrl.replaceDate = function(newsObj) {
            var date = new Date(newsObj.date);
            return _.extend(newsObj, { date: date });
        }

        $ctrl.$onInit = function() {
            $ctrl.status = 'LOADING';
            oldBreadcrumb = $scope.$parent.$parent.breadcrumb;

            if ($routeParams.newsID === 'new') {
                $ctrl.status = "READY";
            } else {
                $http
                    .get(apiRoot + "news/" + $routeParams.newsID)
                    .then(function(response) {
                        $ctrl.status = "READY";

                        $ctrl.news = $ctrl.replaceDate(response.data);
                        $scope.$parent.$parent.breadcrumb = oldBreadcrumb.replace('[newsTitle]', $ctrl.news
                            .header);
                    })
                    .catch(function(err) {
                        $ctrl.status = 'ERROR';

                        $ctrl.error = err.data.errorMessage
                            ? { message: err.data.errorMessage }
                            : { message: err.data };
                        $scope.$parent.$parent.breadcrumb = oldBreadcrumb.replace('[newsTitle]', err.data.errorMessage);
                    });
            }
        };

        $ctrl.ckeditorOptions = {
            language: 'en',
            allowedContent: true,
            entities: false
        };

        $ctrl.onReady = function() {};

        $ctrl.openCalendar = function(e) {
            e.preventDefault();
            e.stopPropagation();

            $ctrl.datepickerIsOpen = true;
        };

        $ctrl.handleActive = function() {
            $ctrl.news.active = !$ctrl.news.active;
        };

        $ctrl.validate = function() {
            if ($ctrl.news.header === '') {
                $ctrl.errors.headerError = true;
                return false;
            }
            if ($ctrl.news.content === '') {
                $ctrl.errors.contentError = true;
                return false;
            }
            return true;
        };

        $ctrl.submit = function() {
            $ctrl.errors = {};
            if ($ctrl.validate()) {
                $ctrl.status = 'LOADING';

                if ($ctrl.news.alias === '') {
                    $ctrl.createAlias();
                }

                $http
                    .post(apiRoot + "news", $ctrl.news)
                    .then(function(response) {
                        $ctrl.status = "READY";
                        $ctrl.aliasError = false;

                        $ctrl.news = $ctrl.replaceDate(response.data);
                        $scope.$parent.$parent.breadcrumb = $ctrl.news.header;
                    })
                    .catch(function(err) {
                        var errorMessage = err.data.errorMessage || undefined;
                        if (err.status == 400 && typeof errorMessage !== 'undefined' && errorMessage ===
                            'Новость с таким alias уже существует') {
                            $ctrl.status = "READY";
                            $ctrl.aliasError = true;
                            $ctrl.createAlias(_.uniqueId("__"));
                        } else {
                            $ctrl.status = 'ERROR';

                            $ctrl.error = errorMessage
                                ? { message: errorMessage }
                                : { message: err.data };
                            $scope.$parent.$parent.breadcrumb = oldBreadcrumb.replace('[newsTitle]',
                                errorMessage);
                        }

                    });
            }

        };

        $ctrl.handleDelete = function() {
            $ctrl.status = 'LOADING';

            $http
                .delete(apiRoot + "news/" + $ctrl.news._id)
                .then(function(response) {
                    $ctrl.status = "READY";
                    $ctrl.goBack();
                })
                .catch(function(err) {
                    warn(err, "Error on delete");
                    $ctrl.status = 'ERROR';
                    var errorMessage = err.data.errorMessage || undefined;

                    $ctrl.error = errorMessage
                        ? { message: errorMessage }
                        : { message: err.data };
                    $scope.$parent.$parent.breadcrumb = oldBreadcrumb.replace('[newsTitle]', errorMessage);
                });
        };

        $ctrl.createAlias = function(fix) {
            var header = ''
            var datestring = '';
            if ($ctrl.news.header && $ctrl.news.header.length > 0) {
                header = $ctrl.news.header.trim();
                header = header.replace(" ", "_");
            }
            if ($ctrl.news.date) {
                datestring = moment($ctrl.news.date)
                    .format("d_MM_YYYY");
            }
            var alias = header + "_" + datestring;
            if (typeof fix !== 'undefined') {
                alias = alias + fix;
            }
            $ctrl.news.alias = alias || '';
        }

        $ctrl.status = 'READY';

    }

})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("adminNewsList", {
        templateUrl: "/admin/admin-news-list/admin-news-list.component.html",
        controller: ["$location", "$http", AdminNewsListController]
    });

    function AdminNewsListController($location, $http) {
        var $ctrl = this;

        $ctrl.goTo = function(alias) {
            $location.path("/news/" + alias);
        };

        $ctrl.edit = function(newsID) {
            $location.path("/admin/news/" + newsID);
        };

        $ctrl.addNews = function() {
            $location.path("/admin/news/new");
        };

        $ctrl.$onInit = function() {
            $ctrl.status = "LOADING";

            $http
                .get(apiRoot + "news" + "?limit=0&skip=0")
                .then(function(response) {
                    $ctrl.news = response.data.list;
                    $ctrl.status = "READY";
                })
                .catch(function(err) {
                    var data = err.data;
                    $ctrl.status = "ERROR";
                    $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        };

        $ctrl.status = "READY";
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("adminLogin", {
        templateUrl: "/admin/adminLogin.component.html",
        controller: ["$http", "$localStorage", "STATUS", "session", "ROLES", "$routeParams", AdminLoginController]
    });

    function AdminLoginController($http, $localStorage, STATUS, session, ROLES, $routeParams) {
        var $ctrl = this;
        $localStorage.$reset();

        $ctrl.doLogin = function() {
            $ctrl.status = STATUS.LOADING;
            $http
                .post(globalBackend + "login", null, {
                    params: {
                        username: $ctrl.login,
                        password: $ctrl.password
                    }
                })
                .then(function(response) {
                    $ctrl.isLoggedIn = $ctrl.isLoggedIn || false;
                    if (response.data.indexOf("Your login attempt was not successful") !== -1) {
                        throw Error("Логин или пароль не верны");
                    } else {
                        $ctrl.isLoggedIn = true;
                        $ctrl.status = STATUS.READY;
                        if ($routeParams.backUrl) {
                            return window.location.href = $routeParams.backUrl;
                        }
                        window.location.href = context + "/admin/admin_page";
                    }
                })
                .catch(function(err) {
                    $ctrl.status = STATUS.ERROR;

                    var data = err.data || err;
                    $ctrl.error = data.errorMessage ? { message: data.errorMessage } : data;
                });
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("announcement", {
        templateUrl: "/admin/announcement/announcement.component.html",
        controller: ["AnnouncementService", "utils", "STATUS", function (AnnouncementService, utils, STATUS) {
            var $ctrl = this;
            $ctrl.fontSizeList = [
                10, 12, 14, 16
            ];
            $ctrl.styleList = [
                {name: "Чёрный", value: "an-black"},
                {name: "Красный", value: "an-red"},
            ];

            $ctrl.status = STATUS.LOADING;
            AnnouncementService.get().then(function (data) {
                $ctrl.announcement = data ? data : {};
                $ctrl.status = STATUS.READY;
            }).catch(utils.errorHandler($ctrl));

            $ctrl.save = function () {
                $ctrl.status = STATUS.LOADING;
                AnnouncementService.save($ctrl.announcement).then(function (data) {
                    $ctrl.status = STATUS.READY;
                }).catch(utils.errorHandler($ctrl));
            };
        }]
    });
})();

(function() {
    aspService.$inject = ["$http", "$sce", "STATUS", "$window", "$timeout", "$document", "session", "ROLES"];
    angular.module("rpgu.app").directive("aspService", aspService);
    function aspService($http, $sce, STATUS, $window, $timeout, $document, session, ROLES) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/aspService.template.html',
            link: function ($scope) {
				$scope.status = STATUS.LOADING;
				$scope.tab = "editasp"; // init fist page
				$scope.addStatus = STATUS.LOADING;

			    $scope.request = {
				  schemaform: { example: 'example' },
				  soap: {
				  	  endpoint: '',
                      template: ''
                  }
                };

			    $scope.updateModel = function(value) {
					var temp = value;
					value = undefined;
					$timeout(function(){
						value = temp;
					}, 10);
			    };

				$scope.aceOptions = {
					theme: 'solarized_dark',
					mode: 'json',
					useWrapMode : true, // Tells if the line wrapping is enabled or not.
					showGutter: true, // Tells if the editor gutter is enabled
					firstLineNumber: 1 // The line number of the first line displayed in the editor. The default value is 1.
				};

				$scope.soapOptions = {
					theme: 'solarized_dark',
					mode: 'xml',
					useWrapMode : true, // Tells if the line wrapping is enabled or not.
					showGutter: true, // Tells if the editor gutter is enabled
					firstLineNumber: 1, // The line number of the first line displayed in the editor. The default value is 1.
				};

				$scope.selectTab = function(setTab) {
					$scope.tab = setTab;
					if(setTab == 'editform') {
						$scope.updateModel($scope.request.schemaform);
					}
					else if(setTab == 'editsoap') {
						$scope.updateModel($scope.request.soap.template);
					}
				};

				$scope.visibleButton = function(tab) {
					if(tab == 'editform') {
						return $scope.formStatus === STATUS.READY;
					}
					else if(tab == 'editsoap') {
						return $scope.soapStatus === STATUS.READY;
					}
				};

				$scope.isSelected = function(checkTab){
					return $scope.tab === checkTab;
				};

				$scope.addAsp = function() {
					$window.console.log("addAsp");
					$scope.serviceId = undefined;
					$scope.aspId = undefined;
					$scope.addStatus = STATUS.READY;
				};

				$scope.aspSave = function() {
					$window.console.log("aspSave");
					$scope.status = STATUS.LOADING;
		            $http.post(apiRoot + 'asp/services/' + $scope.serviceId + '/' + $scope.aspId).then(function (data) {
		            	data = data.data;
						$scope.status = STATUS.READY;
						$scope.addStatus = undefined;
						$scope.getAsp();
		            }).catch(function (error) {
		            	error = error.data;
			            $scope.status = STATUS.ERROR;
			            $scope.error = {message: error.errorMessage ? error.errorMessage : error};
		            });
				};

				$scope.aspRemove = function(data){
					$scope.status = STATUS.LOADING;
		            if (confirm('Вы уверерены что хотите удалить запись?')) {
			            $http.delete(apiRoot + 'asp/services/' + data._id).then(function (data) {
                            data = data.data;
				            $scope.aspList.splice($scope.aspList.indexOf(data), 1);
							$scope.status = STATUS.READY;
			            }).catch(function (error) {
                            error = error.data;
				            $scope.status = STATUS.ERROR;
				            $scope.error = {message: error.errorMessage ? error.errorMessage : error};
			            });
		            }
	            };

				$scope.refresh = function(){
					$scope.addStatus = STATUS.LOADING;
					$scope.getAsp();
	            };

				$scope.getAsp = function() {
					$window.console.log("getAsp");
					$http.get(apiRoot + 'asp/services/').then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.aspList = data;
						$scope.status = STATUS.READY;
					}).catch(function (error) {
                        error = error.data;
						$scope.status = STATUS.ERROR;
						$scope.error = {message: error.errorMessage ? error.errorMessage : error};
					});
				};

				$scope.getAspform = function() {
					$scope.formStatus = STATUS.LOADING;
					$window.console.log("getAspform");
					$http.get(apiRoot + 'asp/request/form').then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.request.schemaform = angular.toJson(data.value, true);
						$scope.formStatus = STATUS.READY;
					}).catch(function (error) {
                        error = error.data;
						$scope.formStatus = STATUS.ERROR;
						$scope.formError = {message: error.errorMessage ? error.errorMessage : error};
					});
				};

				$scope.getAspsoap = function() {
					$scope.soapStatus = STATUS.LOADING;
					$window.console.log("getAspsoap");
					$http.get(apiRoot + 'asp/request/soap').then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.request.soap.template = data.value;
						$scope.soapStatus = STATUS.READY;
					}).catch(function (error) {
                        error = error.data;
						$scope.soapStatus = STATUS.ERROR;
						$scope.soapError = {message: error.errorMessage ? error.errorMessage : error};
					});
				};

				$scope.getEndpoint = function() {
					$scope.getAspendpoint();
				};

				$scope.getAspendpoint = function() {
					$scope.soapStatus = STATUS.LOADING;
					$window.console.log("getAspendpoint");
					$http.get(apiRoot + 'asp/request/endpoint').then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.request.soap.endpoint = data.value;
						$scope.soapStatus = STATUS.READY;
					}).catch(function (error) {
                        error = error.data;
						$scope.soapStatus = STATUS.ERROR;
						$scope.soapError = {message: error.errorMessage ? error.errorMessage : error};
					});
				};

				$scope.saveForm = function(data) {
					$scope.status = STATUS.LOADING;
					$window.console.log("saveForm");
					$http.put(apiRoot + 'asp/request/form', { value: data }).then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.status = STATUS.READY;
					}).catch(function (error) {
                        error = error.data;
						$scope.error = STATUS.ERROR;
						$scope.error = {message: error.errorMessage ? error.errorMessage : error};
					});
				};

				$scope.saveSoap = function(data) {
					$scope.status = STATUS.LOADING;
					$window.console.log("saveSoap");
					$http.put(apiRoot + 'asp/request/soap', { value: data }).then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.saveEndpoint($scope.request.soap.endpoint);
					}).catch(function (error) {
                        error = error.data;
						$scope.error = STATUS.ERROR;
						$scope.error = {message: error.errorMessage ? error.errorMessage : error};
					});
				};

				$scope.saveEndpoint = function(data) {
					$scope.status = STATUS.LOADING;
					$window.console.log("saveEndpoint");
					$http.put(apiRoot + 'asp/request/endpoint', { value: data }).then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.status = STATUS.READY;
					}).catch(function (error) {
                        error = error.data;
						$scope.status = STATUS.ERROR;
						$scope.error = {message: error.errorMessage ? error.errorMessage : error};
					});
				};

				$scope.submitdata = function(tab) {
					if(tab == 'editform') {
						try {
							formJson = angular.fromJson($scope.request.schemaform);
						} catch (e) {
							alert(e.message);
							throw e;
						}
						$scope.saveForm(formJson);
					}
					else if(tab == 'editsoap') {
						$scope.saveSoap($scope.request.soap.template);
					}
				};

				$scope.getAsp();
				$scope.getAspform();
				$scope.getAspsoap();
				$scope.getAspendpoint();
			}
         }
    }
})();

/* global moment */
!(function () {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("covid19AdminStats", {
        templateUrl: "/admin/covid19-admin-stats/covid19-admin-stats.component.html",
        controller: ["$scope", "$element", "STATUS", Controller]
    });

    function Controller($scope, $element, STATUS) {
        var $ctrl = this;

        $ctrl.error = false;
        $ctrl.status = STATUS.READY;

        $ctrl.startDate = moment().subtract(1, "month");
        $ctrl.endDate = moment();

        $ctrl.maxDate = moment().add(1, "day");

        $ctrl.download = function () {
            var dates = "start=" + $ctrl.startDate.format("DD.MM.YYYY") + "&end=" + $ctrl.endDate.format("DD.MM.YYYY");

            var link = document.createElement("a");
            link.setAttribute("download", "covid19-stats.xlsx");
            link.setAttribute("target", "_blank");

            link.setAttribute("href", apiRoot + "covid19/permanent/orgs/stat?" + dates);

            link.click();
        }

        $ctrl.$onInit = function () {
            // nothing
        };
    }
})();

(function () {
    angular.module("rpgu.app")
        .component("covid19Infected", {
            templateUrl: '/admin/covid19Infected.template.html',
            controller: [
                "$scope", "$http", "STATUS", "utils", "$routeParams",
                function ($scope, $http, STATUS, utils, $routeParams) {
                    $scope.accept = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    $scope.uploadUrl =  apiRoot + "covid19/permanent/upload";
                }
            ],
        })
})();

(function () {
    angular.module("rpgu.app")
        .component("covid19OrgsUpload", {
            templateUrl: '/admin/covid19OrgsUpload.template.html',
            controller: [
                "$scope", "$http", "STATUS", "utils", "$routeParams",
                function ($scope, $http, STATUS, utils, $routeParams) {
                    $scope.accept = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                    $scope.uploadUrl =  apiRoot + "covid19/permanent/org/upload";

                }
            ],
        })
})();

(function () {
    organizationList.$inject = ["$http", "STATUS", "$q", "$localStorage", "session", "ROLES"];
    angular.module("rpgu.app").directive("covid19PassControl", organizationList);

    function organizationList($http, STATUS, $q, $localStorage, session, ROLES) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/covid19PassControl.html',
            link: function ($scope) {
                //
            }
        };
    }
})();

(function() {
    dictList.$inject = ["$http"];
    angular.module("rpgu.app").directive("dictList", dictList);

    function dictList($http) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/dictList.template.html',
            link: function($scope, $location) {

                $scope.status = 'loading';

                $scope.getDictUrl = function(id) {
                    return "admin/dict_view?id=" + id;
                }

                $http({ method: "GET", url: apiRoot + "dict/" })
                    .then(function(res) {
                        var data = res.data;
                        $scope.list = data;

                        $scope.status = 'ready';

                    }).catch(function(error) {
                        error = error.data || error;
                        $scope.status = 'error';
                        $scope.error = { message: error.errorMessage ? error.errorMessage : error };
                    });

            }
        }

    }
})();

(function() {
    dictView.$inject = ["$http", "$sce", "$timeout", "$q", "session", "STATUS", "$routeParams"];
    angular.module("rpgu.app").directive("dictView", dictView);
    function dictView($http, $sce, $timeout, $q, session, STATUS, $routeParams) {
        return {
            restrict: "E",
            templateUrl: "/admin/dictView.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;
                $scope.renderForm = function(data) {
                    $("#form").alpaca({
                        schema: {
                            type: "object",
                            title: "Словарь",
                            properties: {
                                code: {
                                    title: "Код",
                                    type: "string",
                                    required: true,
                                    default: data.code
                                },
                                name: {
                                    title: "Наименование",
                                    type: "string",
                                    required: true,
                                    default: data.name
                                },
                                items: {
                                    title: "Значения",
                                    type: "array",
                                    default: data.items,
                                    items: {
                                        type: "object",
                                        properties: {
                                            name: {
                                                title: "Наименование",
                                                required: true,
                                                type: "string"
                                            },
                                            value: {
                                                title: "Значение",
                                                required: true,
                                                type: "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        options: {
                            fields: {
                                items: {
                                    type: "table"
                                }
                            },
                            form: {
                                buttons: {
                                    submit: {
                                        title: "Сохранить",
                                        styles: "btn btn-primary",
                                        click: function() {
                                            var req = this.getValue();
                                            if ($scope.id) {
                                                req._id = $scope.id;
                                            }
                                            $http({
                                                method: $scope.meth,
                                                url: apiRoot + "dict",
                                                data: JSON.stringify(req),
                                                contentType: "application/json; charset=utf-8",
                                                dataType: "json"
                                            })
                                                .then(function(data) {
                                                    data = data.data;
                                                    window.location.href = "admin/dict_list";
                                                })
                                                .catch(function(er) {
                                                    er = er.data;
                                                    alert(er.errorMessage ? er.errorMessage : er);
                                                });
                                        }
                                    },
                                    cancel: {
                                        title: "Отмена",
                                        click: function() {
                                            window.location.href = "admin/dict_list";
                                        }
                                    },
                                    delete: {
                                        title: "Удалить",
                                        styles: "btn btn-danger",
                                        click: function() {
                                            if (
                                                confirm(
                                                    "Удалить данный словарь? \nВсе данные будут утеряны безвозвратно!"
                                                )
                                            ) {
                                                $scope.remove($scope.id);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        postRender: function(control) {
                            $scope.configureControls(control);
                            $scope.createClearAllButton(control);
                            $scope.createCsvButton(control);
                        },
                        view: {
                            messages: {
                                en_US: {
                                    notOptional: "Поле обязательно для заполнения.",
                                    required: "Поле обязательно для заполнения.",
                                    invalid: "Поле заполнено не верно.",
                                    stringNotANumber: "Введенное значение не является числом."
                                }
                            }
                        }
                    });
                };

                $scope.status = STATUS.LOADING;
                $scope.meth;
                if ($scope.id) {
                    $http({
                        method: "GET",
                        url: apiRoot + "dict/" + $scope.id
                    })
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.meth = "PUT";
                            $scope.renderForm(data);
                        })
                        .catch(function(er) {
                            er = er.data;
                            $scope.status = STATUS.ERROR;
                            alert(er.errorMessage ? er.errorMessage : er);
                            $scope.error = { message: er.errorMessage ? er.errorMessage : er };
                        });
                } else {
                    $scope.status = STATUS.READY;
                    $scope.meth = "POST";
                    $scope.renderForm({ code: "", name: "", items: [] });
                }

                $scope.remove = function(_id) {
                    $http
                        .delete(apiRoot + "dict/" + _id)
                        .then(function(data) {
                            data = data.data;
                            window.location.href = "admin/dict_list";
                        })
                        .catch(function(er) {
                            er = er.data;
                            alert(er.errorMessage ? er.errorMessage : er);
                            location.reload();
                        });
                };

                $scope.configureControls = function(control) {
                    $("th")
                        .eq(2)
                        .html("");
                    $(":button")
                        .eq(0)
                        .html('<i class="glyphicon glyphicon-plus-sign"></i>');
                    $("span").removeClass("alpaca-icon-required glyphicon glyphicon-star");
                    $("th")
                        .eq(0)
                        .attr("width", "250");
                    $("th")
                        .eq(2)
                        .attr("width", "150");
                };

                $scope.createClearAllButton = function(control) {
                    var button = $("<input type='button' class='btn btn-danger' value='Очистить все'></input>");
                    control
                        .getFieldEl()
                        .append("<br/>")
                        .append(button);
                    $(button).click(function() {
                        if (confirm("Удалить все значения безвозвратно?")) {
                            var req = control.getValue();
                            if ($scope.id) {
                                req._id = $scope.id;
                            }
                            req.items = [];
                            $http({
                                method: $scope.meth,
                                url: apiRoot + "dict",
                                data: JSON.stringify(req),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json"
                            }).then(function(data) {
                                data = data.data;
                                window.location.reload();
                            });
                        }
                    });
                };

                $scope.createCsvButton = function(control) {
                    var csvInput = $(
                        "<input type='file' id='filename' name='filename' style='display:none;fa fa-download'>"
                    );
                    var csvButton = $("<input type='button' class='btn btn-info' value='Добавить из CSV'></input>");
                    csvButton.click(function() {
                        $("#filename").click();
                    });
                    control
                        .getFieldEl()
                        .append(" ")
                        .append(csvInput);
                    control
                        .getFieldEl()
                        .append(" ")
                        .append(csvButton);

                    $("#filename").change(function(e) {
                        var ext = $("input#filename")
                            .val()
                            .split(".")
                            .pop()
                            .toLowerCase();

                        if (e.target.files != undefined) {
                            var reader = new FileReader();

                            reader.onload = function(e) {
                                var txt = e.target.result;

                                var lines = e.target.result.split("\r\n");
                                var line;
                                var newItems = [];
                                for (var i = 0; i < lines.length; i++) {
                                    line = lines[i].split(";");
                                    if (line[0].length > 0 && line[1].length > 0) {
                                        newItems.push({ name: line[0], value: line[1] });
                                    }
                                }
                                var req = control.getValue();
                                if ($scope.id) {
                                    req._id = $scope.id;
                                }
                                req.items = req.items.concat(newItems);
                                $http({
                                    method: $scope.meth,
                                    url: apiRoot + "dict",
                                    data: JSON.stringify(req),
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json"
                                }).then(function(data) {
                                    data = data.data;
                                    window.location.reload();
                                });
                            };
                            reader.readAsText(e.target.files.item(0), "cp1251");
                        }

                        return false;
                    });
                };
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("digitalService", {
        templateUrl: "/admin/digital-services/digital-service.component.html",
        controller: [
            "$scope",
            "$element",
            "$routeParams",
            "$location",
            "$timeout",
            "utils",
            "REQUEST_STATUS",
            "DigitalRGUService",
            "FormsTemplates",
            "SoapTemplates",
            DigitalServiceController
        ]
    });

    function DigitalServiceController(
        $scope,
        $element,
        $routeParams,
        $location,
        $timeout,
        utils,
        REQUEST_STATUS,
        DigitalRGUService,
        FormsTemplates,
        SoapTemplates
    ) {
        var $ctrl = this;

        $ctrl.statusListAvailable = _.map(REQUEST_STATUS, function(val, code) {
            return { code: code, val: val };
        });

        var invalid = { valid: false, changed: false, id: null };

        $ctrl.serviceID = $routeParams.serviceID;
        $ctrl.service = {};

        $ctrl.reqForm = angular.copy(invalid);
        $ctrl.ulForm = angular.copy(invalid);
        $ctrl.reqSoap = angular.copy(invalid);

        $ctrl.statusChange = function statusChange(key, code) {
            if (!$ctrl.service[key]) {
                return $ctrl.service[key] = [code];
            }
            var codeIndex = _.indexOf($ctrl.service[key], code);
            if (codeIndex !== -1) {
                $ctrl.service[key].splice(codeIndex, 1);
            } else {
                $ctrl.service[key].push(code);
            }
        };

        $ctrl.isStatusActive = function isStatusActive(key, code) {
            if (!$ctrl.service[key]) {
                return false;
            }
            return _.indexOf($ctrl.service[key], code) !== -1;
        };

        $ctrl.statusSave = function statusSave(key) {
            $element.find("#" + key).modal("hide");
            $ctrl.service[key] = $ctrl.service[key].filter(Boolean);
            $ctrl.update();
        };

        $ctrl.goToForm = function(form) {
            if ($ctrl[form].changed && $ctrl[form].valid) {
                return $ctrl.update(form);
            }
            if ($ctrl[form].valid) {
                var url = $ctrl[form].format + "/" + $ctrl[form]._id;
                $location.path("/admin/forms-template/" + url)
                    .search("service", $ctrl.service._id);
            }
        };

        $ctrl.goToSoap = function() {
            if ($ctrl.reqSoap.changed && $ctrl.reqSoap.valid) {
                return $ctrl.update("reqSoap");
            }
            if ($ctrl.reqSoap.valid) {
                var soapID = $ctrl.reqSoap._id;
                $location.path("/admin/soap-template/" + soapID)
                    .search("service", $ctrl.service._id);
            }
        };

        $ctrl.getSoapByID = function(id) {
            $ctrl.reqSoap.valid = false;
            SoapTemplates
                .get(id || $ctrl.service.soap)
                .then(function(soap) {
                    if (soap._id) {
                        _.extend($ctrl.reqSoap, soap, {
                            valid: true
                        });
                    }
                })
                .catch(warn);
        };

        function getFormID(id, mod, changed) {
            FormsTemplates
                .get(id)
                .then(function(form) {
                    if (form._id) {
                        _.extend($ctrl[mod], form, {
                            id: id,
                            format: form.formio ? "formio" : "schemaform",
                            valid: true,
                            changed: changed
                        });
                    }
                })
                .catch(warn);
        }

        $ctrl.getFormByID = function(id) {
            $timeout(function(){
                $ctrl.reqForm.valid = false;
                if (!id) return;
                getFormID(id, "reqForm", id != $ctrl.reqForm.id);
            }, 50);
        };

        $ctrl.getUlFormByID = function(id) {
            $timeout(function(){
                $ctrl.ulForm.valid = false;
                if (!id) return;
                getFormID(id, "ulForm", id != $ctrl.ulForm.id);
            }, 50);
        };

        $ctrl.chooseSoap = function chooseSoap(soap) {
            if (soap._id) {
                $element.find("#searchSoap").modal("hide");
                $ctrl.reqSoap.changed = ($ctrl.service.soap !== soap._id);
                $ctrl.service.soap = soap._id;
            }
        };

        $ctrl.searchSoap = _.debounce(function(query) {
            return SoapTemplates.searchSoap(query);
        }, 700);

        $ctrl.chooseForm = function chooseForm(form) {
            if (form._id) {
                $element.find("#searchForm").modal("hide");
                $ctrl.reqForm.changed = ($ctrl.service.form !== form._id);
                $ctrl.service.form = form._id;
            }
        };

        $ctrl.chooseFormUl = function chooseFormUl(form) {
            if (form._id) {
                $element.find("#searchFormUl").modal("hide");
                $ctrl.ulForm.changed = ($ctrl.service.ulForm !== form._id);
                $ctrl.service.ulForm = form._id;
            }
        };

        $ctrl.searchForm = _.debounce(function(query) {
            return FormsTemplates.searchForm(query);
        }, 700);

        $ctrl.searchOption = function(item) {
            if (!item) {
                return "";
            }
            return "[" + (item._id || "") + "] - " + (item.name || "");
        };

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";
            DigitalRGUService
                .get($ctrl.serviceID)
                .then(function(payload) {
                    $ctrl.service = payload || {};
                    $ctrl.reqForm.id = $ctrl.service.form;
                    $ctrl.ulForm.id = $ctrl.service.ulForm;
                    $ctrl.getSoapByID($ctrl.service.soap);
                    $ctrl.getFormByID($ctrl.service.form);
                    $ctrl.getUlFormByID($ctrl.service.ulForm);
                    $ctrl.status = "READY";
                    if (!$ctrl.service.flSign) {
                        $ctrl.service.flSign = "NONE";
                    }
                    if (!$ctrl.service.ulSign) {
                        $ctrl.service.ulSign = "NONE";
                    }
                })
                .catch(utils.errorHandler($ctrl, "status"));
        };

        $ctrl.update = function(form) {
            if (form) {
                $ctrl[form].changed = false;
            }
            $ctrl.status = "LOADING";
            DigitalRGUService
                .update($ctrl.service)
                .then($ctrl.fetch)
                .catch(utils.errorHandler($ctrl, "status"));
        };

        $ctrl.toggle = function(key) {
            $ctrl.service[key] = !$ctrl.service[key];
        };

        $ctrl.toggleType = function(key, type) {
            $ctrl.service[key] = type || "NONE";
        };

        $ctrl.$onInit = $ctrl.fetch;

        $scope.$watch("$ctrl.service.soap", _.debounce($ctrl.getSoapByID, 500));
        $scope.$watch("$ctrl.service.form", _.debounce($ctrl.getFormByID, 500));
        $scope.$watch("$ctrl.service.ulForm", _.debounce($ctrl.getUlFormByID, 500));

    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("digitalServicesList", {
        templateUrl: "/admin/digital-services/digital-services-list.component.html",
        controller: ["$scope", "$element", "$location", "DigitalRGUService", DigitalServicesListController]
    });

    function DigitalServicesListController($scope, $element, $location, DigitalRGUService) {
        var $ctrl = this;

        var defaultService = {
            st_id: "не выбрано",
            st_title: ""
        };

        $ctrl.max = 9;
        $ctrl.skip = 0;
        $ctrl.list = [];

        $ctrl.goTo = function(serviceID) {
            $location.path("/admin/digital-service/" + serviceID);
        };

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";

            DigitalRGUService
                .list($ctrl.search, $ctrl.max, $ctrl.skip)
                .then(function(payload) {
                    $ctrl.list = payload.list || [];
                    $ctrl.listCount = payload.count || 0;
                    $ctrl.status = "READY";
                })
                .catch(errorHandler);
        };

        $ctrl.newRGUTemplate = defaultService;
        $ctrl.create = function() {
            if ($ctrl.newRGUTemplate.st_title === "") {
                return;
            }
            $element.find("#newRGU").modal("hide");
            DigitalRGUService
                .create($ctrl.newRGUTemplate)
                .then($ctrl.fetch)
                .catch(errorHandler);
        };

        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function() {
            if ($ctrl.listCount > 0) {
                $ctrl.fetch();
            }
        });

        $ctrl.searching = function() {
            if (typeof $ctrl.search !== "undefined") {
                $ctrl.fetch();
            }
        };

        $ctrl.findServiceFn = function(query) {
            return DigitalRGUService.getService(query);
        };

        $ctrl.getFullName = function(service) {
            return "[" + service.st_id + "] - " + service.st_title;
        };

        $scope.$watch("$ctrl.search", _.debounce($ctrl.searching, 1500));

        $ctrl.$onInit = $ctrl.fetch;
        $ctrl.pagination = $ctrl.fetch;

        $ctrl.status = "READY";

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "админка digitalServicesList");
        }
    }
})();

(function() {
    "use strict";
    angular.module("rpgu.app").component("signType", {
        templateUrl: "/admin/digital-services/sign-type.component.html",
        bindings: {
            signType: "=",
        },
        controller: function () {
            var $ctrl = this;
            $ctrl.setSignType = function(value) {
                $ctrl.signType = value;
            }
        }
    });
})();

(function() {
    angular
        .module("rpgu.app")
        .directive("elkReport", ["$http", "$timeout", "$window", "STATUS", "REQUEST_STATUS", "$routeParams", function($http, $timeout, $window, STATUS, REQUEST_STATUS, $routeParams) {
            return {
                restrict: "E",
                templateUrl: "/admin/elkReport.template.html",
                link: function($scope) {
                    $scope.idServiceRequest = $routeParams.idServiceRequest;

                    $scope.REQUEST_STATUS = REQUEST_STATUS;
                    $scope.status = STATUS.LOADING;
                    $scope.failSync;

                    function err(data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                    }

                    function refresh() {
                        // TODO: после переноса форм на новый модуль
                        $http
                            .get(apiRoot + "serviceRequest/v2/" + $scope.idServiceRequest)
                            .then(function(data) {
                                data = data.data;
                                $scope.status = STATUS.READY;
                                if (!data.model) data.model = {};
                                data.date = moment(data.date).utc();
                                data.statusList.forEach(function(st) {
                                    st.date = moment(st.date).utc();
                                    st.text = REQUEST_STATUS[st.code];
                                });
                                $scope.request = data;
                                $scope.setFailSync();
                            }).catch(err);
                    }
                    refresh();

                    $scope.resetSync = function() {
                        // TODO: после переноса форм на новый модуль
                        $http
                            .get(apiRoot + "serviceRequest/resetStatusFail/" + $scope.idServiceRequest)
                            .then(function() {
                                $window.location.href = "elkReportList";
                            }).catch(err);
                    };

                    $scope.setFailSync = function() {
                        if ($scope.request) {
                            $scope.request.statusList.forEach(function(item, i, arr) {
                                if (item.elkSyncStatus != null && item.elkSyncStatus.fail) {
                                    $scope.failSync = item.elkSyncStatus;
                                }
                                if (item.elkSyncFiles != null && item.elkSyncFiles.fail) {
                                    $scope.failSync = item.elkSyncFiles;
                                }
                            });
                            if ($scope.failSync) {
                                if ($scope.failSync.soapReq) {
                                    $http.get(apiRoot + "serviceRequest/files/" + $scope.failSync.soapReq).then(function (data) {
                                        $scope.failSync.soapReqText = data.data;
                                    }).catch(err);
                                }
                                if ($scope.failSync.soapResp) {
                                    $http.get(apiRoot + "serviceRequest/files/" + $scope.failSync.soapResp).then(function (data) {
                                        $scope.failSync.soapRespText = data.data;
                                    }).catch(err);
                                }
                            }
                        } else {
                            return null;
                        }
                    };

                    $scope.getLastStatus = function() {
                        return $scope.request ? $scope.request.statusList[$scope.request.statusList.length - 1] : null;
                    };

                    $scope.selectedTab = "request";

                    $scope.selectTab = function(value) {
                        $scope.selectedTab = value;
                    };

                    $scope.isSelected = function(value) {
                        return $scope.selectedTab == value;
                    };
                }
            };
        }]);
})();

(function() {
    angular.module("rpgu.app").directive("elkReportList", ["$http", "STATUS", "REQUEST_STATUS", "session", "$window", function($http, STATUS, REQUEST_STATUS, session, $window) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "/admin/elkReportList.template.html",
            link: function($scope) {
                $scope.requestCount = 0;

                $scope.getlist = function() {
                    var dn = parseInt($scope.search_number);
                    // TODO: после переноса форм на новый модуль
                    $http
                        .get(apiRoot + "serviceRequest/v2/statusFails", {
                            params: {
                                offset: $scope.requestSkip ? $scope.requestSkip : 0,
                                limit: $scope.requestMax ? $scope.requestMax : 10,
                                docNum: isNaN(dn) ? undefined : dn,
                                serviceId: $scope.search_id,
                                serviceName: $scope.search_service
                            }
                        })
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.requests = data.list;
                            $scope.requestCount = data.count;
                            angular.forEach($scope.requests, function(request) {
                                request.statusDate = moment(request.statusDate).utc();
                            });
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.$watchGroup(["requestSkip", "requestMax"], function() {
                    if ($scope.requestCount > 0) $scope.getlist();
                });

                $scope.search = function() {
                    $window.console.log($scope.search_number + $scope.search_id + $scope.search_service);
                };

                $scope.reset = function() {
                    $scope.search_number = undefined;
                    $scope.search_id = undefined;
                    $scope.search_service = undefined;
                    $scope.getlist();
                };

                $scope.resetSync = function() {
                    // TODO: после переноса форм на новый модуль
                    $http
                        .get(apiRoot + "serviceRequest/resetStatusFails")
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.requests = data.list;
                            $scope.requestCount = data.count;
                            angular.forEach($scope.requests, function(request) {
                                request.statusDate = moment(request.statusDate).utc();
                            });
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.status = STATUS.LOADING;
                $scope.getlist();
            }
        };
    }]);
})();

(function() {
    'use strict';
    formioViewController.$inject = ["formioViewService", "$http", "$timeout", "STATUS", "$routeParams", "$q"];
    var soapTemplate = '<AppliedDocuments xmlns="http://smev.gosuslugi.ru/rev111111" xmlns:ns2="http://smev.gosuslugi.ru/request/rev111111">'
    var defaultEditorConfig = {
        theme: "github",
        useWrapMode: true,
        showGutter: true,
        firstLineNumber: 1
    };
    var defaultFormio = {
        display: "form",
        page: 0,
        numPages: 1,
        components: []
    }

    angular.module("rpgu.app").directive("formioView", formioViewController);

    function formioViewController(formioViewService, $http, $timeout, STATUS, $routeParams, $q) {
        return {
            restrict: "E",
            templateUrl: "/admin/formio-view/formio-view.tmpl.html",
            link: function($scope) {
                $scope.id = $routeParams.id;

                $scope.name_form = "";
                $scope.service = undefined;

                _.extend($scope.aceOptions, defaultEditorConfig, { mode: "json" });
                _.extend($scope.soapOptions, defaultEditorConfig, { mode: "xml" });

                $scope.tab = "editformio";
                $scope.data = {
                    name: "",
                    service_id: "",
                    service_name: "",
                    psp_id: "",
                    formio: angular.copy(defaultFormio),
                    soap: {
                        endpoint: "",
                        action: " ",
                        template: soapTemplate,
                    }
                };

                $scope.updateModel = function(value) {
                    var temp = value;
                    value = undefined;
                    $timeout(function() {
                        value = temp;
                    }, 10);
                };

                $scope.selectTab = function(setTab) {
                    $scope.tab = setTab;
                    switch (setTab) {
                        case "editformio":
                            $scope.data.formio = JSON.parse($scope.data.formioJson)
                            $scope.updateModel($scope.data.formio);
                            break;
                        case "editformioJson":
                            $scope.data.formioJson = JSON.stringify($scope.data.formio)
                            $scope.updateModel($scope.data.formioJson);
                            break;
                        default: break;
                    }
                };

                $scope.isSelected = function(checkTab) {
                    return $scope.tab === checkTab;
                };

                $scope.rename = function() {
                    $scope.data.name = $scope.name_form;
                    $scope.submitdata($scope.tab);
                };

                $scope.setFormat = function(format) {
                    // if (format === 'wizard') {
                    //     $scope.data.formio.display = format;
                    // } else {
                    //     $scope.data.formio.display = format;
                    // }
                    // $scope.updateModel($scope.data.formio);
                }

                $scope.atached = function() {
                    $scope.data.service_id = $scope.service.service_id;
                    $scope.submitdata($scope.tab);
                };

                $scope.findServiceFn = function(query) {
                    return findService(query);
                };

                function findService(query) {
                    var deferred = $q.defer();
                    $http
                        .get(apiRoot + "service/search/" + query)
                        .then(function(response) {
                            deferred.resolve(response.data);
                        })
                        .catch(function(err) {
                            warn(err, "findService error");
                        });
                    return deferred.promise;
                }

                $scope.getFullName = function(service) {
                    return "[" + service.service_id + "] - " + service.service_title;
                };

                $scope.getdata = function(id) {
                    $scope.status = STATUS.LOADING;

                    if (!angular.isUndefined(id)) {
                        formioViewService.getFormData(id)
                            .then(function(data) {
                                $scope.name_form = data.name || "";
                                $scope.data.name = data.name || "";
                                $scope.data.service_id = data.service_id || "";
                                $scope.data.service_name = data.service_name || "";
                                $scope.data.psp_id = data.psp_id || "";
                                $scope.data._id = data._id;

                                $scope.data.formio = data.formio;
                                $scope.data.formioJson = JSON.stringify(data.formio);

                                if (!$scope.data.formio.display) {
                                    _.defaults($scope.data.formio, defaultFormio);
                                }

                                $scope.data.smevVer = data.smevVer || 2;
                                $scope.data.localpart = data.localpart || "";

                                $scope.active = data.active;

                                $scope.infoService = data.infoService;
                                $scope.archive_type = data.archive_type ? data.archive_type : "rev120315";
                                $scope.filesSizeLimit = data.filesSizeLimit
                                    ? angular.copy((data.filesSizeLimit / (1024 * 1024)).toFixed(3))
                                    : 0;

                                if (!angular.isUndefined(data.soap)) {
                                    $scope.data.soap = data.soap;
                                    $scope.data.soap.endpoint = data.soap.endpoint;
                                    $scope.data.soap.action = data.soap.action;
                                    $scope.data.soap.template = data.soap.template;

                                    $scope.resultProc = data.soap.resultProc;
                                    $scope.trim = data.soap.trim;
                                }

                                $scope.status = STATUS.READY;
                            })
                            .catch(errorHandler);
                    } else {
                        $scope.status = STATUS.ERROR;
                        $scope.error = { message: "id is undefined" };
                    }
                };

                $scope.isSmevVer = function(ver) {
                    return $scope.data.smevVer === ver;
                };
                $scope.smevVerSelect = function(ver) {
                    $scope.data.smevVer = ver;
                };

                $scope.submitdata = function() {
                    $scope.status = STATUS.LOADING;
                    $scope.save = STATUS.LOADING;

                    $scope.data.active = $scope.active;
                    $scope.data.infoService = $scope.infoService;
                    $scope.data.archive_type = $scope.archive_type;
                    $scope.data.filesSizeLimit = $scope.filesSizeLimit
                        ? angular.copy(($scope.filesSizeLimit * 1024 * 1024).toFixed())
                        : 0;
                    $scope.data.soap.resultProc = angular.copy($scope.resultProc);
                    $scope.data.soap.trim = angular.copy($scope.trim);

                    $scope.status = STATUS.READY; // --
                    $scope.save = STATUS.READY; // --
                    return alert("деактивировано");

                    // formioViewService.submitFormData($scope.data)
                    //     .then(function() {
                    //         // --^
                    //         $timeout(function() {
                    //             $scope.save = null;
                    //         }, 1000);
                    //     })
                    //     .catch(errorHandler);
                };

                $scope.getdata($scope.id);

                function errorHandler(err) {
                    var data = err.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data && data.errorMessage ? { message: data.errorMessage } : data;
                }
            }
        };
    }
})();

(function() {
    formList.$inject = ["$http", "$q", "$sce", "$timeout", "$window", "STATUS"];
    angular.module("rpgu.app").directive("formList", formList);

    function formList($http, $q, $sce, $timeout, $window, STATUS) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "/admin/formList.template.html",
            link: function($scope, $element) {
                $scope.status = STATUS.INIT;
                $scope.listCount = 0;

                // function get list form
                $scope.getlist = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "form", {
                            params: {
                                offset: $scope.listSkip ? $scope.listSkip : 0,
                                limit: $scope.listMax ? $scope.listMax : 10,
                                search: $scope.search ? $scope.search : "",
                                interval: $scope.interval ? $scope.interval : "all"
                            }
                        })
                        .then(function(data) {
                            data = data.data;
                            $scope.listCount = data.count;
                            $scope.status = STATUS.READY;
                            $scope.fullList = data.list;
                            $scope.fullList.forEach(function(el) {
                                el.view_url = 'admin/' + ($scope.isFormio(el) ? 'formio' : 'form') + '_view?id=' + el._id;
                                el.changeDate = moment(el.changeDate).utc();
                            });
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                        });
                };

                var searchTextTimeout;
                $scope.$watch("search", function() {
                    if (searchTextTimeout) $timeout.cancel(searchTextTimeout);
                    searchTextTimeout = $timeout(function() {
                        if ($scope.status == STATUS.READY && $scope.interval && $scope.interval != "all") {
                            $scope.getlist();
                        }
                    }, 500);
                });

                $scope.$watch("interval", function() {
                    if ($scope.status == STATUS.READY) {
                        $scope.getlist();
                    }
                });

                $scope.$watchGroup(["listSkip", "listMax"], function() {
                    if ($scope.listCount > 0) $scope.getlist();
                });

                $scope.returnToList = function() {
                    $scope.getlist();
                };

                $scope.remove = function(value) {
                    if (confirm("Удалить форму?")) {
                        $scope.status = STATUS.LOADING;
                        $http
                            .delete(apiRoot + "form/" + value._id)
                            .then(function() {
                                $scope.status = "deleted";
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = { message: data.errorMessage
                                    ? data.errorMessage : data };
                            });
                    }
                };

                $scope.fullList = [];
                $scope.getlist();

                $scope.newForm = {};
                $scope.newFormData = {
                    name: "",
                    service_id: "",
                };

                $scope.findServiceFn = function(query) {
                    return findService(query);
                };

                function findService(query) {
                    var deferred = $q.defer();

                    $http
                        .get(apiRoot + "service/search/" + query)
                        .then(function(response) {
                            var data = response.data;
                            deferred.resolve(data);
                        })
                        .catch(warn);

                    return deferred.promise;
                }

                $scope.isFormio = function(form) {
                    if (form.formio && form.formio.components && form.formio.components.length > 0) {
                        return true;
                    }
                    return false;
                }

                $scope.getFullName = function(service) {
                    return "[" + service.service_id + "] - " + service.service_title;
                };

                $scope.newFormSubmit = function() {
                    if (typeof $scope.newForm !== "undefined") {
                        var newForm = $scope.newForm;
                        $scope.newFormData.name = newForm.name ? newForm.name : "новая форма ###";
                        $scope.newFormData.service_id = newForm.service.service_id
                            ? newForm.service.service_id
                            : "undefined";
                    }
                    $scope.status = STATUS.LOADING;
                    $element.find("#newForm").modal("hide");

                    return alert("деактивировано");
                    // $http
                    //     .post(apiRoot + "form", $scope.newFormData)
                    //     .then($scope.getlist)
                    //     .catch(function(data) {
                    //         data = data.data;
                    //         $scope.status = STATUS.ERROR;
                    //         $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                    //     });
                };
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("formsTemplateFormio", {
        templateUrl: "/admin/forms-templates/forms-template-formio.component.html",
        controller: ["$scope", "$routeParams", "$location", "$timeout", "utils", "FormsTemplates", FormioTemplateController]
    });

    function FormioTemplateController($scope, $routeParams, $location, $timeout, utils, FormsTemplates) {
        var $ctrl = this;
        var formioDefaults = {
            display: "form",
            page: 0,
            numPages: 1,
            components: []
        }

        $ctrl.serviceID = $routeParams.service || false;
        $ctrl.formID = $routeParams.formID;

        $ctrl.aceEditorOptions = {
            theme: "github",
            useWrapMode: true,
            showGutter: true,
            firstLineNumber: 1,
            mode: "json",
            onLoad: aceLoaded
        };

        $ctrl.form = { name: "", formio: formioDefaults };
        $ctrl.tab = 'builder';

        $ctrl.backToService = function() {
            if ($ctrl.serviceID) {
                $location.path("/admin/digital-service/" + $ctrl.serviceID);
            } else {
                $location.path("/admin/digital-services-list/");
            }
        }

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";

            FormsTemplates
                .get($ctrl.formID)
                .then(function(payload) {
                    $ctrl.form = payload || {};
                    _.defaults($ctrl.form.formio, formioDefaults);

                    $ctrl.form.formioJson = angular.toJson($ctrl.form.formio, true);
                    $ctrl.status = "READY";
                })
                .catch(errorHandler);
        };

        $ctrl.update = function() {
            $ctrl.status = "LOADING";
            $ctrl.form.formioJson = undefined;
            FormsTemplates
                .update($ctrl.form)
                .then($ctrl.fetch)
                .catch(errorHandler);
        };

        $ctrl.isSelectedTab = function(format) {
            return $ctrl.tab === format;
        }

        $ctrl.selectTab = function(setTab) {
            $ctrl.tab = setTab;
            switch (setTab) {
                case "builder":
                    $ctrl.form.formio = angular.fromJson($ctrl.form.formioJson);
                    break;
                case "json":
                    $ctrl.form.formioJson = angular.toJson($ctrl.form.formio, true);
                    break;
                default: break;
            }
        };

        $ctrl.editingJSON = function() {
            if (typeof $ctrl.form.formioJson !== 'undefined') {
                $ctrl.form.formio = angular.fromJson($ctrl.form.formioJson);
            }
        };

        $scope.$watch("$ctrl.form.formioJson", _.debounce($ctrl.editingJSON, 100));

        $ctrl.$onInit = $ctrl.fetch;

        $ctrl.timeout = null;
        $ctrl.copyId = function() {
            var copy = utils.copyToClipboard($ctrl.form._id);
            if (copy) {
                $ctrl.copySuccess = true;
                $ctrl.timeout = $timeout(function() {
                    clearTimeout($ctrl.timeout);
                    $ctrl.copySuccess = false;
                }, 2000);
            }
        };

        $ctrl.status = "READY";

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "админка formsTemplateFormio");

        }

        function aceLoaded(_editor) {
            _editor.setFontSize(14);
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("formsTemplateSchemaform", {
        templateUrl: "/admin/forms-templates/forms-template-schemaform.component.html",
        controller: ["$scope", "$routeParams", "$location", "$timeout", "utils", "FormsTemplates", FormTemplateController]
    });

    function FormTemplateController($scope, $routeParams, $location, $timeout, utils, FormsTemplates) {
        var $ctrl = this;

        $ctrl.aceEditorOptions = {
            theme: "github",
            useWrapMode: true,
            showGutter: true,
            firstLineNumber: 1,
            mode: "json",
            onLoad: aceLoaded
        };

        $ctrl.serviceID = $routeParams.service || false;
        $ctrl.formID = $routeParams.formID;
        $ctrl.form = {};
        $ctrl.schemaform = angular.toJson({}, true);
        $ctrl.debugform = false;

        $ctrl.backToService = function() {
            if ($ctrl.serviceID) {
                $location.path("/admin/digital-service/" + $ctrl.serviceID);
            } else {
                $location.path("/admin/digital-services-list/");
            }
        }

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";

            FormsTemplates
                .get($ctrl.formID)
                .then(function(payload) {
                    $ctrl.form = payload || {};
                    $ctrl.schemaform = angular.toJson($ctrl.form.schemaform, true);
                    $ctrl.debug = $ctrl.form.schemaform;
                    $ctrl.status = "READY";
                })
                .catch(errorHandler);
        };

        $ctrl.update = function() {
            $ctrl.status = "LOADING";
            $ctrl.form.schemaform = angular.fromJson($ctrl.schemaform || "{}");
            FormsTemplates
                .update($ctrl.form)
                .then($ctrl.fetch)
                .catch(errorHandler);
        };

        $ctrl.$onInit = $ctrl.fetch;

        $ctrl.timeout = null;
        $ctrl.copyId = function() {
            var copy = utils.copyToClipboard($ctrl.form._id);
            if (copy) {
                $ctrl.copySuccess = true;
                $ctrl.timeout = $timeout(function() {
                    clearTimeout($ctrl.timeout);
                    $ctrl.copySuccess = false;
                }, 2000);
            }
        };

        $ctrl.editing = function() {
            $ctrl.debug = angular.fromJson($ctrl.schemaform || "{}");
        };

        $scope.$watch("$ctrl.schemaform", $ctrl.editing);

        $ctrl.status = "READY";

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "админка formsTemplateSchemaform");

        }

        function aceLoaded(_editor) {
            _editor.setFontSize(14);
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("formsTemplatesList", {
        templateUrl: "/admin/forms-templates/forms-templates-list.component.html",
        controller: ["$scope", "$element", "$location", "FormsTemplates", FormsTemplatesListController]
    });

    function FormsTemplatesListController($scope, $element, $location, FormsTemplates) {
        var $ctrl = this;

        $ctrl.max = 9;
        $ctrl.skip = 0;
        $ctrl.list = [];

        $ctrl.goTo = function(form) {
            var format = form.formio ? "formio" : "schemaform";
            $location.path("/admin/forms-template/" + format + "/" + form._id);
        };

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";

            FormsTemplates
                .list($ctrl.search, $ctrl.max, $ctrl.skip)
                .then(function(payload) {
                    $ctrl.list = payload.list || [];
                    $ctrl.listCount = payload.count || 0;
                    $ctrl.status = "READY";
                })
                .catch(errorHandler);
        };

        $ctrl.newFormTemplate = {
            name: "",
            formio: {
                display: "form",
                page: 0,
                numPages: 1,
                components: []
            }
        };
        $ctrl.create = function() {
            if ($ctrl.newFormTemplate.name.trim() === "") {
                return;
            }
            if ($ctrl.newFormTemplate.formio.display === "wizard") {
                $ctrl.newFormTemplate.formio.components = [
                    {
                        type: "panel",
                        title: "Страница 1",
                        isNew: true,
                        components: [],
                        input: false,
                        key: "page1",
                        theme: "default",
                        tableView: false
                    }
                ];
            }
            $element.find("#newFormTemplate").modal("hide");
            FormsTemplates
                .create($ctrl.newFormTemplate)
                .then($ctrl.fetch)
                .catch(errorHandler);
        };

        $ctrl.isSelectedFormat = function(format) {
            return format === $ctrl.newFormTemplate.formio.display;
        };
        $ctrl.selectFormat = function(format) {
            $ctrl.newFormTemplate.formio.display = format;
        };

        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function() {
            if ($ctrl.listCount > 0) {
                $ctrl.fetch();
            }
        });

        $ctrl.searching = function() {
            if (typeof $ctrl.search !== 'undefined') {
                $ctrl.fetch();
            }
        };

        $scope.$watch("$ctrl.search", _.debounce($ctrl.searching, 2000));

        $ctrl.$onInit = $ctrl.fetch;
        $ctrl.pagination = $ctrl.fetch;

        $ctrl.status = "READY";

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "админка formsTemplatesList");

        }
    }
})();

(function() {
    formView.$inject = ["$http", "$sce", "$timeout", "$window", "$location", "STATUS", "objectService", "session", "$routeParams", "$q"];
    angular.module("rpgu.app").directive("formView", formView);
    function formView($http, $sce, $timeout, $window, $location, STATUS, objectService, session, $routeParams, $q) {
        return {
            restrict: "E",
            templateUrl: "/admin/formView.template.html",
            link: function($scope, $element, $attrs) {
                $scope.id = $routeParams.id;
                $scope.debug = $routeParams.debug;

                $scope.editforms = "";
                $scope.name_form = "";
                $scope.service = undefined; // control
                $scope.aceOptions = {
                    theme: "solarized_dark",
                    mode: "json",
                    useWrapMode: true, // Tells if the line wrapping is enabled or not.
                    showGutter: true, // Tells if the editor gutter is enabled
                    firstLineNumber: 1 // The line number of the first line displayed in the editor. The default value is 1.
                };

                $scope.soapOptions = {
                    theme: "solarized_dark",
                    mode: "xml",
                    useWrapMode: true, // Tells if the line wrapping is enabled or not.
                    showGutter: true, // Tells if the editor gutter is enabled
                    firstLineNumber: 1 // The line number of the first line displayed in the editor. The default value is 1.
                };

                $scope.tab = "editform"; // init fist page
                $scope.form = {};
                $scope.debug = {};
                $scope.debugform = $attrs.debug == "true" ? true : false;
                $scope.data = {
                    name: "",
                    service_id: "",
                    service_name: "",
                    psp_id: "",
                    formwork: {
                        schema: {}
                    },
                    schemaform: {},
                    soap: {
                        endpoint: "",
                        action: " ",
                        template:
                            '<AppliedDocuments xmlns="http://smev.gosuslugi.ru/rev111111" xmlns:ns2="http://smev.gosuslugi.ru/request/rev111111">'
                    }
                };

                $scope.updateModel = function(value) {
                    var temp = value;
                    value = undefined;
                    $timeout(function() {
                        value = temp;
                    }, 10);
                };

                $scope.selectTab = function(setTab) {
                    $scope.tab = setTab;
                    if (setTab === "editsoap") {
                        $scope.updateModel($scope.editforms);
                    }
                };

                $scope.isSelected = function(checkTab) {
                    return $scope.tab === checkTab;
                };

                $scope.rename = function() {
                    $scope.data.name = $scope.name_form;
                    $scope.submitdata($scope.tab);
                };

                $scope.atached = function() {
                    $scope.data.service_id = $scope.service.service_id ? $scope.service.service_id : "undefined";
                    $scope.submitdata($scope.tab);
                };

                $scope.findServiceFn = function(query, querySelectAs) {
                    return findService(query);
                };

                function findService(query) {
                    var deferred = $q.defer();
                    $http
                        .get(apiRoot + "service/search/" + query)
                        .then(function(data) {
                            data = data.data;
                            deferred.resolve(data);
                        })
                        .catch(function(data) {
                            data = data.data;
                            console.log(data);
                        });

                    return deferred.promise;
                }

                $scope.getFullName = function(service) {
                    return "[" + service.service_id + "] - " + service.service_title;
                };

                // function object by id
                $scope.getdata = function(id, tab) {
                    $scope.status = STATUS.LOADING;
                    if (!angular.isUndefined(id)) {
                        $http
                            .get(apiRoot + "form/" + id)
                            .then(function(data) {
                                data = data.data;
                                //                          $window.console.info(data);
                                $scope.data.name = data.name ? data.name : "";
                                $scope.name_form = data.name ? data.name : "";
                                $scope.data.service_id = data.service_id ? data.service_id : "";
                                $scope.data.service_name = data.service_name ? data.service_name : "";
                                $scope.data.psp_id = data.psp_id ? data.psp_id : "";
                                $scope.data._id = data._id;
                                $scope.active = data.active;
                                $scope.data.smevVer = data.smevVer || 2;
                                $scope.data.localpart = data.localpart || "";
                                $scope.infoService = data.infoService;
                                $scope.archive_type = data.archive_type ? data.archive_type : "rev120315";
                                $scope.filesSizeLimit = data.filesSizeLimit
                                    ? angular.copy((data.filesSizeLimit / (1024 * 1024)).toFixed(3))
                                    : 0;

                                // copy schema
                                if (!angular.isUndefined(data.formwork.schema)) {
                                    $scope.data.formwork.schema = data.formwork.schema; //
                                }

                                // copy schemaform
                                if (!angular.isUndefined(data.schemaform)) {
                                    $scope.data.schemaform = data.schemaform; //
                                    $scope.editforms = angular.toJson(data.schemaform, true);
                                    $scope.debug = data.schemaform;
                                }

                                // copy soap
                                if (!angular.isUndefined(data.soap)) {
                                    $scope.data.soap = data.soap;
                                }

                                // copy soap
                                if (!angular.isUndefined(data.soap)) {
                                    $scope.data.soap.endpoint = data.soap.endpoint; //
                                    $scope.data.soap.action = data.soap.action;
                                    $scope.data.soap.template = data.soap.template;
                                    $scope.resultProc = data.soap.resultProc; // ???
                                    $scope.trim = data.soap.trim; // ??
                                }

                                $scope.status = STATUS.READY;
                            })
                            .catch(function(response) {
                                data = response.data || {};
                                $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                                $scope.status = STATUS.ERROR;
                            });
                    } else {
                        $scope.error = { message: "id is undefined" };
                        $scope.status = STATUS.ERROR;
                    }
                };

                $scope.isSmevVer = function(ver) {
                    return $scope.data.smevVer === ver;
                };
                $scope.smevVerSelect = function(ver) {
                    $scope.data.smevVer = ver;
                };

                $scope.submitdata = function(form) {
                    $scope.data.active = $scope.active;
                    $scope.data.infoService = $scope.infoService;
                    $scope.data.archive_type = $scope.archive_type;
                    $scope.data.filesSizeLimit = $scope.filesSizeLimit
                        ? angular.copy(($scope.filesSizeLimit * 1024 * 1024).toFixed())
                        : 0;
                    $scope.data.schemaform = angular.fromJson($scope.editforms);
                    $scope.data.soap.resultProc = angular.copy($scope.resultProc);
                    $scope.data.soap.trim = angular.copy($scope.trim);
                    $scope.debug = angular.fromJson($scope.editforms);
                    $scope.status = STATUS.LOADING;
                    $scope.save = STATUS.LOADING;
                    $http
                        .put(apiRoot + "form", $scope.data)
                        .then(function() {
                            $scope.status = STATUS.READY;
                            $scope.save = STATUS.READY;
                            $timeout(function() {
                                $scope.save = "undefined";
                            }, 1000);
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data && data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };
                $scope.getdata($scope.id, $scope.tab);
            }
        };
    }
})();

(function() {
	loadTheater.$inject = ["$http", "$sce", "$timeout", "$window", "$location", "STATUS", "objectService", "session", "$routeParams"];
    angular.module("rpgu.app").directive("loadTheater", loadTheater);
    function loadTheater($http, $sce, $timeout, $window, $location, STATUS, objectService, session, $routeParams) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/loadTheater.template.html',
            link: function ($scope) {
				$scope.status = STATUS.LOADING;
				$scope.monthProperty = [
					{ value: 1, name: "Январь" },
					{ value: 2, name: "Февраль" },
					{ value: 3, name: "Март" },
					{ value: 4, name: "Апрель" },
					{ value: 5, name: "Май" },
					{ value: 6, name: "Июнь" },
					{ value: 7, name: "Июль" },
					{ value: 8, name: "Август" },
					{ value: 9, name: "Сентябрь" },
					{ value: 10, name: "Октябрь" },
					{ value: 11, name: "Ноябрь" },
					{ value: 12, name: "Декабрь" }
				];

                $scope.setCurrentDay = function () {
					var now = moment();
					var month = now.month() + 1;
					var year = now.year();
					$scope.monthProperty.forEach(function (obj) {
						if(obj.value == month) {
							$scope.month = obj.value;
							$scope.currMonth = obj.name;
						}
					});

					$scope.yearProperty = []
					for (var i = 0; i < 10; i++) {
						$scope.yearProperty.push({ value: year + i, name: year + i });
					}

					$scope.yearProperty.forEach(function (obj) {
						if(obj.value == year) {
							$scope.year = obj.value;
						}
					});
					$scope.status = STATUS.READY;
				};

				$scope.read = function (workbook) {
					var result = {};
					$window.console.log("file uploaded");
					$window.console.info(workbook);

					workbook.SheetNames.forEach(function(sheetName) {
						var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);
						if(roa.length > 0){
							result[sheetName] = roa;
						}
					});

					$window.console.info(result);
					var request = [];
					for (key in result) {
						result[key].forEach(function(val) {
							var key = false;
							request.forEach(function(obj) {
								var org = val['Организация'];
								if(obj.name == org.trim()) {
									obj.events.push({
										day: val['Число месяца'],
										time: val['Время'],
										name: val['Наименование мероприятия'],
										address: val['Адрес и место проведения'],
										phone: val['Телефон для справок']
									});
									key = true;
								}
							});

							if(key == false) {
								var org = val['Организация'];
								var value = {
									name: org.trim(),
									events: [
										{
											day: val['Число месяца'],
											time: val['Время'],
											name: val['Наименование мероприятия'],
											address: val['Адрес и место проведения'],
											phone: val['Телефон для справок']
										}
									]
								};
								request.push(value);
							}
						});
					}
					$window.console.info(request);

					if (confirm("Файл успешно загружен, загрузить на сервер данное расписание ?")){
						$http.post(apiRoot + 'mincult/' + $scope.year + "/" + $scope.month,
									request).then(function (data) {
                            data = data.data;
							alert("Файл успешно отправлен!");
							$scope.status = STATUS.READY;
						}).catch(function (data) {
                            data = data.data;
							var msg = data.errorMessage ? data.errorMessage : data;
							alert("Ошибка отправки: "+ msg);
						});
					};
				};

				$scope.error = function (e) {
					alert("При загрузке файла произошла ошибка, возможно не правильно выбран тип файла. Попробуйте снова.");
					$window.console.info(e);
				};

				$scope.setCurrentDay();
			}
		}
	};
})();

(function() {
    meDept.$inject = ["$http", "$sce", "$timeout", "$window", "$location", "STATUS", "objectService", "session", "$routeParams", "ROLES"];
    angular.module("rpgu.app")
        .directive("meDept", meDept);

    function meDept($http, $sce, $timeout, $window, $location, STATUS, objectService, session, $routeParams, ROLES) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/meDept.template.html',
            link: function($scope) {
                $scope.editstatus = STATUS.INIT;
                $scope.personal = {
                    _id: '',
                    name: {
                        surname: '',
                        name: '',
                        patronymic: ''
                    },
                    login: '',
                    roleList: [],
                    deptList: []
                };

                $scope.getOrg = function(depts) {
                    var deptList = [];
                    angular.forEach(depts, function(org) {
                        if (org.dept.id) {
                            $http.get(apiRoot + 'organizations/' + org.dept.id)
                                .then(function(data) {
                                    data = data.data;
                                    deptList.push({
                                        id: data.id,
                                        name: data.name,
                                        checked: true
                                    });
                                })
                                .catch(function(err) {
                                    warn(err, ".get(apiRoot + 'organizations/' + org.dept.id)");
                                    var data = err.data;
                                    $scope.status = STATUS.ERROR;
                                    $scope.error = {
                                        message: data.errorMessage ? data.errorMessage : data
                                    };
                                });
                        }
                    });
                    return deptList;
                };

                $scope.getUserData = function() {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'me')
                        .then(function(data) {
                            data = data.data;
                            $scope.personal._id = data._id;
                            $scope.personal.name.name = (!angular.isUndefined(data.name) || data.name !=
                                null) ? data.name.name : '';
                            $scope.personal.name.surname = (!angular.isUndefined(data.name) || data.name !=
                                null) ? data.name.surname : '';
                            $scope.personal.name.patronymic = (!angular.isUndefined(data.name) || data.name !=
                                null) ? data.name.patronymic : '';
                            $scope.personal.login = data.login;

                            angular.forEach(data.roles, function(value) {
                                if (value.name == ROLES.ADMIN) {
                                    $scope.personal.roleList.push({
                                        title: "Администратор",
                                        checked: true,
                                        role: ROLES.ADMIN
                                    });
                                } else if (value.name == ROLES.DEPT) {
                                    $scope.personal.roleList.push({
                                        title: "Сотрудник ведомства",
                                        role: ROLES.DEPT,
                                        checked: true
                                    });
                                }
                            });

                            $scope.personal.deptList = $scope.getOrg(data.depts);
                            if ($scope.status != STATUS.ERROR) $scope.status = STATUS.READY;

                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };

                        });
                };

                function convertUser(user) {
                    var res = angular.copy(user);
                    res.roles = res.roleList.reduce(function(res, role) {
                        if (role.checked)
                            res.push({ name: role.role });
                        return res;
                    }, []);
                    delete res.roleList;
                    res.depts = res.deptList.reduce(function(res, dept) {
                        if (dept.checked)
                            res.push({ dept: { id: dept.id } });
                        return res;
                    }, []);
                    delete res.deptList;
                    delete res.login;
                    return res;
                }

                $scope.edit = function() {
                    $scope.status = STATUS.LOADING;
                    $http.put(
                            apiRoot + 'users/' + $scope.personal._id,
                            convertUser($scope.personal)
                        )
                        .then(function() {
                            $scope.editstatus = STATUS.READY;
                            $scope.status = STATUS.READY;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };
                $scope.getUserData();
            }
        }
    };
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("mediaFilesList", {
        templateUrl: "/admin/media-files-list/media-files-list.component.html",
        controller: ["$http", MediaFilesListController]
    });

    function MediaFilesListController($http) {
        var $ctrl = this;
        $ctrl.$onInit = function() {
            $ctrl.status = "LOADING";

            $http
                .get(apiRoot + "media" + "?limit=0&skip=0")
                .then(function(response) {
                    $ctrl.news = response.data;
                    $ctrl.status = "READY";
                })
                .catch(function(err) {
                    var data = err.data;
                    $ctrl.status = "ERROR";
                    $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        };

        $ctrl.status = "READY";
    }
})();

(function() {
    mvzList.$inject = ["$http", "$sce", "$timeout", "STATUS", "objectService", "session"];
    angular.module("rpgu.app").directive("mvzList", mvzList);

    function mvzList($http, $sce, $timeout, STATUS, objectService, session) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/mvzList.template.html',
            link: function ($scope) {

            	$scope.status = STATUS.LOADING;

				$http({
					method: "GET",
					url: apiRoot + "mvz/",
				}).then(function (data) {
                    data = data.data;
					$scope.status = STATUS.READY;
					$scope.list = data;

					$("#form").alpaca({
						"data" : data,
						"schema": {
							 "type": "array",
							 "items" : {
								 "type" : "object",
								 "properties": {
									 "_id": {
										 "title": "ID",
										 "type": "string"
									 },
									 "name": {
										 "title": "Наименование",
										 "type": "string"
									 },
									 "processKey": {
										 "title": "Ключ процесса",
										 "type": "string"
									 },
									 "federalSID": {
										 "title": "Федеральный SID",
										 "type": "string"
									 },
									 "regionSID": {
										 "title": "Региональный SID",
										 "type": "string"
									 },
								 }
							 }
						 },
						"options": {
							"type" : "table",
							"items" : {
								"fields" : {
									"_id" : { "view" : "bootstrap-display"},
									"name" : { "view" : "bootstrap-display"},
									"processKey" : { "view" : "bootstrap-display"},
									"federalSID" : { "view" : "bootstrap-display"},
									"regionSID" : { "view" : "bootstrap-display"},
								},
							},
							"actionbar": {
								"showLabels": false,
								"actions": [{
									"action": "add",
									"enabled": false
								}, {
									"action": "remove",
									"enabled": false
								}, {
									"action": "up",
									"enabled": false
								}, {
									"action": "down",
									"enabled": false
								}, {
									"label": "Редактирвать",
									"action": "custom",
									"iconClass": "fa fa-pencil",
									"click": function(key, action, itemIndex) {
										window.location.href = 'admin/mvz_view?id=' + data[itemIndex]._id;
									}
								}]
							},
						 },
						 "postRender": function(control) {
							$('th').eq(0).attr("width", "120");
							$('th').eq(5).html("");
							$('th').eq(5).attr("width", "50");
						 },
						 "view": {
							"messages": {
								"en_US": {
									notOptional: "Поле обязательно для заполнения.",
									required: "Поле обязательно для заполнения.",
									invalid: "Поле заполнено не верно.",
									stringNotANumber: "Введенное значение не является числом."
								}
							}
						}
					});
				}).catch(function (data) {
                    data = data.data;
					$scope.status = STATUS.ERROR;
					$scope.error = {message: data.errorMessage ? data.errorMessage : data};
				});

		 	}
        }

    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("mvzView", ["$http", "$sce", "$timeout", "$q", "session", "STATUS", "$routeParams", mvzView]);

    function mvzView($http, $sce, $timeout, $q, session, STATUS, $routeParams) {
        return {
            restrict: "E",
            templateUrl: "/admin/mvzView.template.html",
            link: function($scope) {
                $scope.id = $routeParams.is;

                $scope.renderForm = function(data) {
                    var certs = [];
                    if (data.certFileId) {
                        certs = [{ name: data.certFileName, _id: data.certFileId }];
                    }

                    $("#form").alpaca({
                        schema: {
                            type: "object",
                            title: "Межведомственный запрос",
                            properties: {
                                name: {
                                    title: "Наименование",
                                    type: "string",
                                    required: true,
                                    default: data.name
                                },
                                processKey: {
                                    title: "Ключ процесса",
                                    type: "string",
                                    required: true,
                                    default: data.processKey
                                },
                                federalSID: {
                                    title: "Федеральный SID",
                                    type: "string",
                                    required: true,
                                    default: data.federalSID
                                },
                                regionSID: {
                                    title: "Региональный SID",
                                    type: "string",
                                    required: true,
                                    default: data.regionSID
                                },
                                items: {
                                    title: "Значения",
                                    type: "array",
                                    default: data.items,
                                    items: {
                                        type: "object",
                                        properties: {
                                            name: {
                                                title: "Наименование",
                                                required: true,
                                                type: "string"
                                            },
                                            value: {
                                                title: "Значение",
                                                required: true,
                                                type: "string"
                                            }
                                        }
                                    }
                                },
                                certs: {
                                    title: "Сертификаты",
                                    type: "array",
                                    default: certs,
                                    items: {
                                        type: "object",
                                        properties: {
                                            name: {
                                                title: "Наименование",
                                                readonly: true,
                                                type: "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        options: {
                            fields: {
                                items: {
                                    type: "table"
                                },
                                certs: {
                                    toolbarStyle: "none",
                                    type: "table",
                                    actionbar: {
                                        actions: [
                                            { action: "add", enabled: false },
                                            { action: "up", enabled: false },
                                            { action: "down", enabled: false },
                                            {
                                                label: "Скачать",
                                                action: "custom",
                                                iconClass: "fa fa-download",
                                                click: function() {
                                                    var xhr = new XMLHttpRequest();
                                                    xhr.open("GET", apiRoot + "mvz/file/" + $scope.id, true);
                                                    xhr.responseType = "arraybuffer";
                                                    xhr.onload = function() {
                                                        if (this.status == "200") {
                                                            var filename = "";
                                                            //get the filename from the header.
                                                            var disposition = xhr.getResponseHeader(
                                                                "Content-Disposition"
                                                            );
                                                            if (
                                                                disposition &&
                                                                disposition.indexOf("attachment") !== -1
                                                            ) {
                                                                var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                                                                var matches = filenameRegex.exec(disposition);
                                                                if (matches !== null && matches[1])
                                                                    filename = matches[1].replace(/['"]/g, "");
                                                            }
                                                            var type = xhr.getResponseHeader("Content-Type");
                                                            var blob = new Blob([this.response], { type: type });
                                                            //workaround for IE
                                                            if (typeof window.navigator.msSaveBlob != "undefined") {
                                                                window.navigator.msSaveBlob(blob, filename);
                                                            } else {
                                                                var URL = window.URL || window.webkitURL;
                                                                var download_URL = URL.createObjectURL(blob);
                                                                if (filename) {
                                                                    var a_link = document.createElement("a");
                                                                    if (typeof a_link.download == "undefined") {
                                                                        window.location = download_URL;
                                                                    } else {
                                                                        a_link.href = download_URL;
                                                                        a_link.download = filename;
                                                                        document.body.appendChild(a_link);
                                                                        a_link.click();
                                                                    }
                                                                } else {
                                                                    window.location = download_URL;
                                                                }
                                                                setTimeout(function() {
                                                                    URL.revokeObjectURL(download_URL);
                                                                }, 10000);
                                                            }
                                                        } else {
                                                            alert("Ошибка открытия файла");
                                                        }
                                                    };
                                                    xhr.setRequestHeader("Content-type", "application/*");
                                                    xhr.send();
                                                }
                                            },
                                            {
                                                action: "remove",
                                                enabled: true,
                                                iconClass: "fa fa-remove",
                                                click: function() {
                                                    if (confirm("Удалить сертификат безвозвратно?")) {
                                                        $http({
                                                            method: "DELETE",
                                                            url: apiRoot + "mvz/file/" + $scope.id
                                                        }).then(function(data) {
                                                            data = data.data;
                                                            window.location.reload();
                                                        });
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            },
                            form: {
                                buttons: {
                                    submit: {
                                        title: "Сохранить",
                                        styles: "btn btn-primary",
                                        click: function() {
                                            var req = this.getValue();
                                            if ($scope.id) {
                                                req._id = $scope.id;
                                            }
                                            $http({
                                                method: $scope.meth,
                                                url: apiRoot + "mvz",
                                                data: JSON.stringify(req),
                                                contentType: "application/json; charset=utf-8",
                                                dataType: "json"
                                            }).then(function(data) {
                                                data = data.data;
                                                window.location.href = "admin/mvz_list";
                                            });
                                        }
                                    },
                                    cancel: {
                                        title: "Отмена",
                                        click: function() {
                                            window.location.href = "admin/mvz_list";
                                        }
                                    },
                                    delete: {
                                        title: "Удалить",
                                        styles: "btn btn-danger",
                                        click: function() {
                                            if (
                                                confirm(
                                                    "Удалить данный запрос? \nВсе данные будут утеряны безвозвратно!"
                                                )
                                            ) {
                                                $scope.remove($scope.id);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        postRender: function(control) {
                            $scope.configureControls(control);
                            $scope.createClearAllButton(control);
                            $scope.createCsvButton(control);
                            $scope.createUploadBtn(control);
                        },
                        view: {
                            messages: {
                                en_US: {
                                    notOptional: "Поле обязательно для заполнения.",
                                    required: "Поле обязательно для заполнения.",
                                    invalid: "Поле заполнено не верно.",
                                    stringNotANumber: "Введенное значение не является числом."
                                }
                            }
                        }
                    });
                };

                $scope.status = STATUS.LOADING;
                $scope.meth;
                if ($scope.id) {
                    $http({
                        method: "GET",
                        url: apiRoot + "mvz/" + $scope.id
                    })
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.meth = "PUT";
                            $scope.renderForm(data);
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                        });
                } else {
                    $scope.status = STATUS.READY;
                    $scope.meth = "POST";
                    $scope.renderForm({ code: "", name: "", items: [] });
                }

                $scope.remove = function(_id) {
                    $http
                        .delete(apiRoot + "mvz/" + _id)
                        .then(function(data) {
                            data = data.data;
                            window.location.href = "admin/mvz_list";
                        })
                        .catch(function(data) {
                            data = data.data;
                            alert("Ошибка: " + data.errorMessage);
                            window.location.reload();
                        });
                };

                $scope.configureControls = function(control) {
                    $("th")
                        .eq(2)
                        .html("");
                    $("th")
                        .eq(4)
                        .html("");
                    $(" :button")
                        .eq(0)
                        .html('<i class="glyphicon glyphicon-plus-sign"></i>');
                    $("span").removeClass("alpaca-icon-required glyphicon glyphicon-star");
                    $("th")
                        .eq(0)
                        .attr("width", "250");
                    $("th")
                        .eq(2)
                        .attr("width", "150");
                    $("th")
                        .eq(4)
                        .attr("width", "150");
                };

                $scope.createClearAllButton = function(control) {
                    var button = $("<input type='button' class='btn btn-danger' value='Очистить все'></input>");
                    $("div[data-alpaca-container-item-name='items']").append(button);
                    $(button).click(function() {
                        if (confirm("Удалить все значения безвозвратно?")) {
                            var req = control.getValue();
                            if ($scope.id) {
                                req._id = $scope.id;
                            }
                            req.items = [];
                            $http({
                                method: $scope.meth,
                                url: apiRoot + "mvz",
                                data: JSON.stringify(req),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json"
                            }).then(function() {
                                window.location.reload();
                            });
                        }
                    });
                };

                $scope.createCsvButton = function(control) {
                    var csvInput = $(
                        "<input type='file' id='filename' name='filename' style='display:none;fa fa-download'>"
                    );
                    var csvButton = $("<input type='button' class='btn btn-info' value='Добавить из CSV'></input>");
                    csvButton.click(function() {
                        $("#filename").click();
                    });
                    $("div[data-alpaca-container-item-name='items']")
                        .append(" ")
                        .append(csvInput);
                    $("div[data-alpaca-container-item-name='items']")
                        .append(" ")
                        .append(csvButton)
                        .append("<br><br>");

                    $("#filename").change(function(e) {
                        var ext = $("input#filename")
                            .val()
                            .split(".")
                            .pop()
                            .toLowerCase();

                        if (e.target.files != undefined) {
                            var reader = new FileReader();

                            reader.onload = function(e) {
                                var txt = e.target.result;

                                var lines = e.target.result.split("\r\n");
                                var line;
                                var newItems = [];
                                for (var i = 0; i < lines.length; i++) {
                                    line = lines[i].split(";");
                                    if (line[0].length > 0 && line[1].length > 0) {
                                        newItems.push({ name: line[0], value: line[1] });
                                    }
                                }
                                var req = control.getValue();
                                if ($scope.id) {
                                    req._id = $scope.id;
                                }
                                req.items = req.items.concat(newItems);
                                $http({
                                    method: $scope.meth,
                                    url: apiRoot + "mvz",
                                    data: JSON.stringify(req),
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json"
                                }).then(function() {
                                    window.location.reload();
                                });
                            };
                            reader.readAsText(e.target.files.item(0), "cp1251");
                        }

                        return false;
                    });
                };

                $scope.createUploadBtn = function(control) {
                    var certInput = $(
                        "<input type='file' file-model = 'myFile' id='upload' name='upload' style='display:none'>"
                    );
                    var certButton = $(
                        "<button type='button' class='btn btn-primary'><i class='glyphicon glyphicon-upload'> </i> Загрузить</button>"
                    );
                    certButton.click(function() {
                        $("#upload").click();
                    });
                    $("div[data-alpaca-container-item-name='certs']")
                        .append(" ")
                        .append(certInput);
                    $("div[data-alpaca-container-item-name='certs']")
                        .append(" ")
                        .append(certButton)
                        .append("<br><br>");

                    $("#upload").change(function(e) {
                        var ext = $("input#upload")
                            .val()
                            .split(".")
                            .pop()
                            .toLowerCase();

                        if (e.target.files != undefined) {
                            var file = e.target.files[0];
                            var fd = new FormData();
                            fd.append("file", file);

                            $http({
                                method: "POST",
                                url: apiRoot + "mvz/file/" + $scope.id,
                                data: fd,
                                headers: { "Content-Type": undefined }
                            }).then(function() {
                                window.location.reload();
                            });
                        }

                        return false;
                    });
                };
            }
        };
    }
})();

(function () {
    organizationList.$inject = ["$http", "STATUS", "$q", "$localStorage", "session", "ROLES", "utils"];
    angular.module("rpgu.app").directive("organizationCovidList", organizationList);

    function organizationList($http, STATUS, $q, $localStorage, session, ROLES, utils) {
        return {
            restrict: 'E',
            scope: {
                isEdit: "=edit"
            },
            templateUrl: '/admin/organizationCovidList.template.html',
            link: function ($scope) {
                $scope.onlyDigital = $localStorage.onlyDigital;
                $scope.adding = false;
                $scope.editing = false;
                $scope.removing = false;
                $scope.list = [];

                $scope.organisationList = function () {
                    $http.get(apiRoot + 'covid19/permanent/orgs', {
                        params: {
                            offset: $scope.skip,
                            limit: $scope.max
                        },
                    }).then(function (res) {
                        $scope.addStatus = "ready";
                        $scope.count = res.data.count;
                        $scope.list = res.data.list;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.addStatus = "error";
                        $scope.addError = data.errorMessage ? {message: data.errorMessage} : {message: data};
                    });
                };

                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'covid19/permanent/orgs', {
                        params: {
                            offset: $scope.skip,
                            limit: $scope.max,
                            search: $scope.search ? $scope.search : ""
                        }
                    }).then(function (res) {
                        $scope.status = STATUS.READY;
                        $scope.count = res.data.count;
                        $scope.list = res.data.list;
                    }).catch(function (res) {
                        $scope.status = STATUS.ERROR;
                        $scope.error = res.data.errorMessage ? {message: res.data.errorMessage} : res.data;
                    });
                };

                $scope.onSearchKeyDown = function ($event) {
                    if ($event.which == 13) {
                        $scope.refresh();
                    }
                };

                $scope.add = function () {
                    if ($scope.newObj.name && $scope.newObj.address.city && $scope.newObj.userId) {
                        $scope.addStatus = STATUS.LOADING;
                        $http.post(
                            apiRoot + 'covid19/permanent/org',
                            $scope.newObj
                        ).then(function () {
                            $scope.addStatus = STATUS.READY;
                            $scope.adding = false;
                            $scope.refresh();
                        }).catch(function (data) {
                            data = data.data;
                            $scope.addStatus = STATUS.ERROR;
                            $scope.addError = data.errorMessage ? {message: data.errorMessage} : data;
                        });
                    } else {
                        $scope.addStatus = STATUS.ERROR;
                        $scope.addError = {message: "Не все поля заполнены."};
                    }
                };

                $scope.beforeEdit = function (item) {
                    item.editObj = {
                        userId: item.userId,
                        name: item.name,
                        address: item.address,
                        type: item.type,
                        _id: item._id,
                    };
                    item.editing = true;
                    item.editStatus = STATUS.READY;
                };

                $scope.edit = function (item) {
                    item.editStatus = STATUS.LOADING;
                    if (item.editObj.name && item.editObj.address.city && item.editObj.userId) {
                        $http.put(
                            apiRoot + 'covid19/permanent/org',
                            item.editObj
                        ).then(function () {
                            item.editStatus = STATUS.READY;
                            item.editing = false;
                            $scope.refresh();
                        }).catch(function (data) {
                            data = data.data;
                            item.editStatus = STATUS.ERROR;
                            item.editError = data.errorMessage ? {message: data.errorMessage} : data;
                        });
                    } else {
                        item.editStatus = STATUS.ERROR;
                        item.editError = {message: "Не все поля заполнены."};
                    }
                };

                $scope.beforeRemove = function (item) {
                    item.removing = true;
                    item.removeStatus = STATUS.READY;
                };

                $scope.remove = function (item) {
                    item.removeStatus = STATUS.LOADING;
                    $http.delete(apiRoot + 'covid19/permanent/org/' + item._id).then(function () {
                        item.removeStatus = STATUS.READY;
                        item.removing = false;
                        $scope.refresh();
                    }).catch(function (data) {
                        data = data.data;
                        item.removeStatus = STATUS.ERROR;
                        item.removeError = data.errorMessage ? {message: data.errorMessage} : data;
                    });
                };

                $scope.skip = 0;
                $scope.max = "9";
                $scope.refresh();
                $scope.organisationList();

                $scope.getQRHref = function (id) {
                    return apiRoot + "covid19/permanent/org/" + id + "/qr?width=500&height=500";
                }

                $scope.copyID = function (id) {
                    utils.copyToClipboard(id);
                }

                $scope.copyQR = function (id) {
                    utils.copyToClipboard($scope.getQRHref(id));
                }

                $scope.$watchGroup(["skip", "max"], function (oldValue, newValue) {
                    if (!_.isEqual(oldValue, newValue)) {
                        $scope.refresh();
                    }
                });
            }
        };
    }
})();

(function () {
    organizationList.$inject = ["$http", "STATUS", "$q", "$localStorage", "session", "ROLES"];
    angular.module("rpgu.app").directive("organizationList", organizationList);

    function organizationList($http, STATUS, $q, $localStorage, session, ROLES) {
        return {
            restrict: 'E',
            scope: {
                isEdit: "=edit"
            },
            templateUrl: '/admin/organizationList.template.html',
            link: function ($scope) {
                $scope.onlyDigital = $localStorage.onlyDigital,
                    $scope.adding = false;
                $scope.editing = false;
                $scope.removing = false;

                $scope.service = undefined;
                $scope.tab = "REGIONAL";
                $scope.type = "REGIONAL";
                $scope.selectTab = function (setTab) {
                    $scope.tab = setTab;
                    $scope.type = setTab;
                };

                $scope.isDept = function () {
                    var status = false;
                    if (!session.hasRole(ROLES.ADMIN)) {
                        status = session.hasRole(ROLES.DEPT);
                    }
                    return status;
                };

                $scope.isSelected = function (checkTab) {
                    return $scope.tab === checkTab;
                };

                $scope.filter = function (text) {
                    $scope.deptlist = $scope.fullList ? $scope.fullList.filter(function (item) {
                        return text ? item.title.toLowerCase().lastIndexOf(text.toLowerCase()) != -1 : true;
                    }) : null;
                };

                $scope.findServiceFn = function (query, querySelectAs) {
                    return findService(query);
                };

                function findService(query) {
                    var deferred = $q.defer();
                    $scope.filter(query);
                    deferred.resolve($scope.deptlist);
                    return deferred.promise;
                }

                $scope.getFullName = function (dept) {
                    return '[' + dept.id + '] - ' + dept.title;
                };

                $scope.deptList = function () {
                    $http.get(apiRoot + 'dept/simple', {params: {levelTitle: $scope.type}}).then(function (data) {
                        data = data.data;
                        $scope.addStatus = "ready";
                        $scope.fullList = data;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.addStatus = "error";
                        $scope.addError = data.errorMessage ? {message: data.errorMessage} : {message: data};
                    });
                };

                /* функционал для работы с новым размещением onlyDigital*/
                $scope.$watch(function () {
                    return $localStorage.onlyDigital;
                }, function (value, oldValue) {
                    if (value != oldValue) {
                        $scope.onlyDigital = $localStorage.onlyDigital;
                        $scope.deptList();
                    }
                });

                $scope.$watch(function () {
                    return $localStorage.recieverType;
                }, function (value, oldValue) {
                    if (value != oldValue) $scope.refresh();
                });

                $scope.$watch("type", function (newValue, oldValue) {
                    if (newValue != oldValue) {
                        $scope.deptList();
                    }
                });

                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'organizations', {
                        params: {
                            search: $scope.search ? $scope.search : "",
                            offset: $scope.skip,
                            limit: $scope.max
                        }
                    }).then(function (data) {
                        data = data.data;
                        $scope.status = STATUS.READY;
                        $scope.count = data.count;
                        $scope.list = data.list;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? {message: data.errorMessage} : data;
                    });
                };
                $scope.onSearchKeyDown = function ($event) {
                    if ($event.which == 13) {
                        $scope.refresh();
                    }
                };

                $scope.add = function () {
                    $scope.addStatus = STATUS.LOADING;
                    $scope.newObj.deptId = $scope.service.id;
                    $http.post(
                        apiRoot + 'organizations',
                        $scope.newObj
                    ).then(function () {
                        $scope.addStatus = STATUS.READY;
                        $scope.adding = false;
                        $scope.refresh();
                    }).catch(function (data) {
                        data = data.data;
                        $scope.addStatus = STATUS.ERROR;
                        $scope.addError = data.errorMessage ? {message: data.errorMessage} : data;
                    });
                };

                $scope.beforeEdit = function (item) {
                    item.editObj = {
                        name: item.name,
                        deptId: item.deptId,
                        altEmail: item.altEmail,
                        useAltEmail: item.useAltEmail,
                        isCovid19: item.isCovid19
                    };
                    item.editing = true;
                    item.editStatus = STATUS.READY;
                };

                $scope.edit = function (item) {
                    item.editStatus = STATUS.LOADING;
                    if (item.editObj.service !== undefined) {
                        item.editObj.deptId = item.editObj.service.id;
                        $http.put(
                            apiRoot + 'organizations/' + item._id,
                            item.editObj
                        ).then(function () {
                            item.editStatus = STATUS.READY;
                            item.editing = false;
                            $scope.refresh();
                        }).catch(function (data) {
                            data = data.data;
                            item.editStatus = STATUS.ERROR;
                            item.editError = data.errorMessage ? {message: data.errorMessage} : data;
                        });
                    } else {
                        item.editStatus = STATUS.ERROR;
                        item.editError = {message: "Выберите ведомство для изменения организации"};
                    }
                };

                $scope.beforeRemove = function (item) {
                    item.removing = true;
                    item.removeStatus = STATUS.READY;
                };

                $scope.remove = function (item) {
                    item.removeStatus = STATUS.LOADING;
                    $http.delete(apiRoot + 'organizations/' + item._id).then(function () {
                        item.removeStatus = STATUS.READY;
                        item.removing = false;
                        $scope.refresh();
                    }).catch(function (data) {
                        data = data.data;
                        item.removeStatus = STATUS.ERROR;
                        item.removeError = data.errorMessage ? {message: data.errorMessage} : data;
                    });
                };

                $scope.skip = 0;
                $scope.max = "9"
                $scope.refresh();
                $scope.deptList();

                $scope.$watchGroup(["skip", "max"], function (oldValue, newValue) {
                    if (!_.isEqual(oldValue, newValue)) {
                        $scope.refresh();
                    }
                });
            }
        };
    }
})();

(function () {
    payableServiceList.$inject = ["$http", "$sce", "STATUS", "$window", "$timeout", "$document", "session", "ROLES"];
    angular.module("rpgu.app").directive("payableServiceList", payableServiceList);

    function payableServiceList($http, $sce, STATUS, $window, $timeout, $document, session, ROLES) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/payableServiceList.template.html',
            link: function ($scope) {


                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'payableService').then(function (data) {
                        data = data.data;
                        $scope.list = data;
                        $scope.list.forEach(function (p) {
                            p.status = STATUS.READY;
                        });
                        $scope.status = STATUS.READY;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = {message: data.errorMessage ? data.errorMessage : data};
                    });
                    $http.get(apiRoot + 'paymentDetails').then(function (data) {
                        data = data.data;
                        $scope.paymentDetailsList = data;
                    }).catch(function (data) {
                        data = data.data;
                        console.log(JSON.stringify(data));
                    });
                };

                $scope.refreshIt = function (p) {
                    p.status = STATUS.LOADING;
                    $http.get(apiRoot + 'payableService/' + p._id).then(function (data) {
                        data = data.data;
                        p._id = data._id;
                        p.st_id = data.st_id;
                        p.st_title = data.st_title;
                        p.service_id = data.service_id;
                        p.service_title = data.service_title;
                        p.pspassport_id = data.pspassport_id;
                        p.dept_title = data.dept_title;
                        p.htmlComment = data.htmlComment;
                        p.paymentDetails_id = data.paymentDetails_id;
                        p.status = STATUS.READY;
                    }).catch(function (data) {
                        data = data.data;
                        p.status = STATUS.ERROR;
                        p.error = {message: data.errorMessage ? data.errorMessage : data};
                    });
                };

                $scope.refresh();

                $scope.addOption = function (p) {
                    if (!p.paymentOptions) {
                        p.paymentOptions = [];
                    }
                    p.paymentOptions.push({name: '', paymentOptions: [], htmlComment: ''});
                };

                $scope.save = function (p) {
                    p.status = STATUS.LOADING;
                    p.error = undefined;
                    $http.post(
                        apiRoot + 'payableService', p
                    ).then(function (data) {
                        data = data.data;
                        if (!data) {
                            p.status = STATUS.EDIT;
                            p.error = "Ошибка сохранения.";
                            return;
                        }
                        p._id = data._id;
                        p.st_id = data.st_id;
                        p.st_title = data.st_title;
                        p.service_id = data.service_id;
                        p.service_title = data.service_title;
                        p.pspassport_id = data.pspassport_id;
                        p.dept_title = data.dept_title;
                        p.htmlComment = data.htmlComment;
                        p.paymentDetails_id = data.paymentDetails_id;
                        p.status = STATUS.READY;
                    }).catch(function (data) {
                        data = data.data;
                        p.status = STATUS.EDIT;
                        p.error = {message: data.errorMessage ? data.errorMessage : data};
                    });
                };

                $scope.remove = function (p) {
                    if (confirm('Удалить?')) {
                        p.status = STATUS.LOADING;
                        if (!p._id) {
                            $scope.list.splice($scope.list.indexOf(p), 1);
                            return;
                        }
                        $http.delete(apiRoot + 'payableService/' + p._id).then(function () {
                            $scope.list.splice($scope.list.indexOf(p), 1)
                        }).catch(function (data) {
                            data = data.data;
                            p.status = STATUS.READY;
                            p.error = {message: data.errorMessage ? data.errorMessage : data};
                        });
                    }
                };
            }
        }

    }
})();

(function() {
    paymentDetailsList.$inject = ["$http", "$sce", "STATUS", "$window", "$timeout", "$document", "session", "ROLES"];
    angular.module("rpgu.app").directive("paymentDetailsList", paymentDetailsList);

    function paymentDetailsList($http, $sce, STATUS, $window, $timeout, $document, session, ROLES) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/paymentDetailsList.template.html',
            link: function ($scope) {

	            $scope.refresh = function(){
		            $scope.status = STATUS.LOADING;
		            $http.get(apiRoot + 'paymentDetails').then(function (data) {
                        data = data.data;
			            $scope.list = data;
			            $scope.list.forEach(function(p){
				            p.status = STATUS.READY;
			            });
			            $scope.status = STATUS.READY;
		            }).catch(function (data) {
                        data = data.data;
			            $scope.status = STATUS.ERROR;
			            $scope.error = {message: data.errorMessage ? data.errorMessage : data};
		            });
	            };

	            $scope.refreshIt = function(p){
		            p.status = STATUS.LOADING;
		            $http.get(apiRoot + 'paymentDetails/' + p._id ).then(function (data) {
                        data = data.data;
			            p.name = data.name;
			            p.amount = data.amount;
			            p.narrative = data.narrative;
			            p.kbk = data.kbk;
			            p.supplierOrgInfo = data.supplierOrgInfo;
			            p.budgetIndex = data.budgetIndex;
			            p.status = STATUS.READY;
		            }).catch(function (data) {
                        data = data.data;
			            p.status = STATUS.ERROR;
			            p.error = {message: data.errorMessage ? data.errorMessage : data};
		            });
	            };

	            $scope.refresh();

	            $scope.save = function(p){
		            p.status = STATUS.LOADING;
		            p.error = undefined;
		            $http.post(
			            apiRoot + 'paymentDetails', p
		            ).then(function (data) {
                        data = data.data;
			            if (!data){
				            p.status = STATUS.EDIT;
				            p.error = "Ошибка сохранения.";
				            return;
			            }
			            p._id = data._id;
			            p.name = data.name;
			            p.amount = data.amount;
			            p.narrative = data.narrative;
			            p.kbk = data.kbk;
			            p.supplierOrgInfo = data.supplierOrgInfo;
			            p.budgetIndex = data.budgetIndex;
			            p.status = STATUS.READY;
		            }).catch(function (data) {
                        data = data.data;
			            p.status = STATUS.EDIT;
			            p.error = {message: data.errorMessage ? data.errorMessage : data};
		            });
	            }

	            $scope.add = function(p){
		            $scope.list.push({
			            "_id": null
		            });
		            $scope.list[$scope.list.length-1].status = 'edit';
	            }

	            $scope.remove = function (p) {
		            if (confirm('Удалить?')) {
			            p.status = STATUS.LOADING;
			            if (!p._id) {
				            $scope.list.splice($scope.list.indexOf(p), 1);
				            return;
			            }
			            $http.delete(apiRoot + 'paymentDetails/' + p._id).then(function () {
				            $scope.list.splice($scope.list.indexOf(p), 1)
			            }).catch(function (data) {
                            data = data.data;
				            p.status = STATUS.READY;
				            p.error = {message: data.errorMessage ? data.errorMessage : data};
			            });
		            }
	            };

	            $scope.copy = function (p) {
	            	var newP = angular.copy(p);
	            	newP._id = null;
		            $scope.list.push(newP);
		            $scope.list[$scope.list.length-1].status = 'edit';
	            };

	            $scope.schema = {
		            "type": "object",
		            "properties": {
			            "name": {
				            "title": "Название",
				            "type": "string"
			            },
			            "amount": {
				            "title": "Сумма в копейках",
				            "type": "number"
			            },
			            "narrative": {
				            "title": "Назначение платежа",
				            "type": "string",
				            "format": "html"
			            },
			            "kbk": {
				            "title": "КБК",
				            "type": "string"
			            },
			            "supplierOrgInfo": {
				            "title": "Информация об организации",
				            "type": "object",
				            "properties": {
					            "name": {
						            "title": "Наименование",
						            "type": "string"
					            },
					            "inn": {
						            "title": "ИНН",
						            "type": "string"
					            },
					            "kpp": {
						            "title": "КПП",
						            "type": "string"
					            },
					            "ogrn": {
						            "title": "ОГРН",
						            "type": "string"
					            },
					            "oktmo": {
						            "title": "ОКТМО",
						            "type": "string"
					            },
					            "account": {
						            "title": "Банковский счет организации",
						            "type": "object",
						            "properties": {
							            "account": {
								            "title": "Номер счета",
								            "type": "string"
							            },
							            "bankName": {
								            "title": "Наименование банка",
								            "type": "string"
							            },
							            "bankBik": {
								            "title": "БИК банка",
								            "type": "string"
							            },
							            "bankCorrespondentAccount": {
								            "title": "Корр. счет банка",
								            "type": "string"
							            }
						            }
					            }
				            }
			            },
			            "budgetIndex": {
				            "title": "Налоговые реквизиты п/п на оплату гос. услуги.",
				            "type": "object",
				            "properties": {
					            "status": {
						            "title": "Статус плательщика",
						            "type": "string"
					            },
					            "purpose": {
						            "title": "Показатель основания платежа",
						            "type": "string"
					            },
					            "taxPeriod": {
						            "title": "Налоговый период или код таможенного органа",
						            "type": "string"
					            },
					            "taxDocNumber": {
						            "title": "Показатель номера документа",
						            "type": "string"
					            },
					            "taxDocDate": {
						            "title": "Показатель даты документа",
						            "type": "string"
					            },
					            "paymentType": {
						            "title": "Показатель типа платежа",
						            "type": "string"
					            }
				            }
			            }
		            },

	            };

	            $scope.form = [
	            	"*"
	            ];
            }
        }

    }
})();

(function () {
    "use strict";
    angular.module("rpgu.app").component("penalty", {
        templateUrl: "/admin/penalty/penalty.template.html",
        controller: ["$scope", "$http", "utils", "STATUS", function ($scope, $http, utils, STATUS) {
            var $ctrl = this;
            $ctrl.date = null;
            $ctrl.maxDate = moment().toDate();
            $scope.$watch('$ctrl.date', function (newValue, oldValue) {
                if (newValue != oldValue) {
                    $ctrl.list(newValue);
                }
            });

            $ctrl.status = STATUS.READY;
            $ctrl.list = function (date) {
                $ctrl.status = STATUS.LOADING;
                $ctrl.files = null;
                $http.get(apiRoot + "penalty", {params: {date: date.local().format("YYYY-MM-DD")}}).then(function (data) {
                    var billRegExp =/^bill_([^.]+).csv$/;
                    $ctrl.status = STATUS.READY;
                    $ctrl.files = {};
                    $ctrl.files.users = data.data.filter(function (item) {
                        return item.startsWith("users");
                    });
                    $ctrl.files.bill = data.data.reduce(function (res, item) {
                        var r = billRegExp.exec(item);
                        if (r != null) {
                            var m = r[1];
                            res.push({
                                name: item,
                                error_log: data.data.find(function (item) {
                                    return item === "error_" + m + ".log" && item !== "error_28_01_2020-2.log";
                                }),
                                error_sms_log: data.data.find(function (item) {
                                    return item === "error_sms_" + m + ".log";
                                })
                            });
                        }
                        return res;
                    }, []);
                }).catch(utils.errorHandler($ctrl));
            };

            $ctrl.uploadFile = function (date) {
                $ctrl.status = STATUS.LOADING;
                $http.get(apiRoot + "penalty/upload_file", {params: {date: date.local().format("YYYY-MM-DD")}}).then(function () {
                    $ctrl.list($ctrl.date);
                }).catch(utils.errorHandler($ctrl));
            };

            $ctrl.sendEmail = function (date, fileName, skipEmail) {
                $ctrl.status = STATUS.LOADING;
                $http.get(apiRoot + "penalty/send_email", {params: {
                    date: date.local().format("YYYY-MM-DD"),
                        fileName: fileName,
                        skipEmail:skipEmail
                }}).then(function () {
                    $ctrl.list($ctrl.date);
                }).catch(utils.errorHandler($ctrl));
            }
        }]
    });
}());

(function() {
    angular.module("rpgu.app").directive("questionList", ["$http", "STATUS", "$routeParams",  "$q", "utils", questionList]);

    function questionList($http, STATUS, $routeParams, $q, utils) {
        return {
            restrict: "E",
            templateUrl: "/admin/questionList/questionList.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;

                $scope.adding = false;
                $scope.editing = false;
                $scope.removing = false;
                var restUrl = apiRoot + "organizations/" + $scope.id + "/questions";

                $scope.refresh = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(restUrl)
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.list = data;
                            $http.get(apiRoot + "organizations/" + $scope.id).then(function (resp) {
                                $scope.organization = resp.data;
                            })
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.add = function() {
                    $scope.addStatus = STATUS.LOADING;
                    $http
                        .post(restUrl, {
                            name: $scope.newObj.name,
                            length: $scope.newObj.length * 60 * 1000,
                            isCovid19: $scope.newObj.isCovid19,
                            service_id: $scope.newObj.service ? $scope.newObj.service.id : null
                        })
                        .then(function() {
                            $scope.addStatus = STATUS.READY;
                            $scope.adding = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.addStatus = STATUS.ERROR;
                            $scope.addError = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.beforeEdit = function(item) {
                    $scope.findServiceFn(item.service_id).then(function (items) {
                        var service = items.length > 0 ? items[0] : null;
                        item.editObj = {
                            name: item.name,
                            length: item.length / 60 / 1000,
                            isCovid19: item.isCovid19,
                            service: service ? {id: service.id, full_title: service.full_title} : null
                        };
                        item.editing = true;
                        item.editStatus = STATUS.READY;
                    }).catch(utils.errorHandler(item, "editStatus", "editError"));
                };

                $scope.edit = function(item) {
                    item.editStatus = STATUS.LOADING;
                    $http
                        .put(restUrl + "/" + item.id, {
                            name: item.editObj.name,
                            length: item.editObj.length * 60 * 1000,
                            isCovid19: item.editObj.isCovid19,
                            service_id: item.editObj.service ? item.editObj.service.id : null
                        })
                        .then(function() {
                            item.editStatus = STATUS.READY;
                            item.editing = false;
                            $scope.refresh();
                        })
                        .catch(utils.errorHandler(item, "editStatus", "editError"));
                };

                $scope.beforeRemove = function(item) {
                    item.removing = true;
                    item.removeStatus = STATUS.READY;
                };

                $scope.remove = function(item) {
                    item.removeStatus = STATUS.LOADING;
                    $http
                        .delete(restUrl + "/" + item.id)
                        .then(function() {
                            item.removeStatus = STATUS.READY;
                            item.removing = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.removeStatus = STATUS.ERROR;
                            item.removeError = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.findServiceFn = function(query) {
                    if (!query || query.length < 3) {
                        var deferred = $q.defer();
                        deferred.resolve([]);
                        return deferred.promise;
                    }
                    return $http.get(apiRoot + "ps_passport/search", {
                        params: {
                            search: query,
                            idDept: $scope.organization.deptId,
                            offset: 0,
                            limit: 100
                        }
                    }).then(function(data) {
                        return data.data.list;
                    });
                };

                $scope.getFullName = function(service) {
                    return "[" + service.id + "] - " + service.full_title;
                };

                $scope.refresh();
            }
        };
    }
})();

(function() {
    remotedictList.$inject = ["$http"];
    angular.module("rpgu.app").directive("remotedictList", remotedictList);

    function remotedictList($http) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/remotedictList.template.html',
            link: function($scope) {

                $scope.status = 'loading';

                $http({ method: "GET", url: apiRoot + "remoteDict/" })
                    .then(function(response) {
                    var data = response.data;
                    $scope.list = data;

                    $("#form").alpaca({
                        "data": data,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "_id": {
                                        "title": "ID",
                                        "type": "string"
                                    },
                                    "code": {
                                        "title": "Код",
                                        "type": "string"
                                    },
                                    "name": {
                                        "title": "Наименование",
                                        "type": "string"
                                    },
                                }
                            }
                        },
                        "options": {
                            "type": "table",
                            "items": {
                                "fields": {
                                    "_id": {
                                        "view": "bootstrap-display",
                                    },
                                    "code": {
                                        "view": "bootstrap-display",
                                    },
                                    "name": {
                                        "view": "bootstrap-display",
                                    },
                                },
                            },
                            "actionbar": {
                                "showLabels": false,
                                "actions": [{
                                    "action": "add",
                                    "enabled": false
                                }, {
                                    "action": "remove",
                                    "enabled": false
                                }, {
                                    "action": "up",
                                    "enabled": false
                                }, {
                                    "action": "down",
                                    "enabled": false
                                }, {
                                    "label": "Редактирвать",
                                    "action": "custom",
                                    "iconClass": "fa fa-pencil",
                                    "click": function(key, action, itemIndex) {
                                        window.location.href = 'admin/remoteDict_view?id=' + data[itemIndex]._id;
                                    }
                                }]
                            },
                        },
                        "postRender": function(control) {
                            $('th').eq(0).attr("width", "80");
                            $('th').eq(3).html("");
                            $('th').eq(3).attr("width", "50");

                        },
                        "view": {
                            "messages": {
                                "en_US": {
                                    notOptional: "Поле обязательно для заполнения.",
                                    required: "Поле обязательно для заполнения.",
                                    invalid: "Поле заполнено не верно.",
                                    stringNotANumber: "Введенное значение не является числом."
                                }
                            }
                        }
                    });

                    $scope.status = 'ready';

                }).catch(function(err) {
                    var data = err.data || err;
                    $scope.status = 'error';
                    $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                });

            }
        }

    }
})();

(function() {
    angular
        .module("rpgu.app")
        .directive("remotedictView", [
            "$http",
            "$sce",
            "$timeout",
            "$q",
            "session",
            "STATUS",
            "$routeParams",
            remotedictView
        ]);

    function remotedictView($http, $sce, $timeout, $q, session, STATUS, $routeParams) {
        return {
            restrict: "E",
            templateUrl: "/admin/remotedictView.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;

                $scope.refresh = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "remoteDict/" + $scope.d._id)
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.meth = "PUT";
                            $scope.d = data;
                        })
                        .catch(function(data) {
                            data = data.data;
                            alert(data.errorMessage ? data.errorMessage : data);
                        });
                };

                $scope.refreshResp = function() {
                    $scope.requesting = true;
                    $http
                        .post(apiRoot + "remoteDict/resp", JSON.stringify($scope.d))
                        .then(function(data) {
                            data = data.data;
                            $scope.requesting = false;
                            $scope.d = data;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.requesting = false;
                            $scope.d.responseText = "Error : " + data.errorMessage;
                            $scope.d.items = [];
                        });
                };

                $scope.save = function() {
                    if (!$scope.d.name || $scope.d.name.trim() == "") {
                        alert("Поле Наименование не может быть пустым!");
                        return;
                    }
                    if (!$scope.d.code || $scope.d.code.trim() == "") {
                        alert("Поле Код не может быть пустым!");
                        return;
                    }
                    $scope.isHolding = true;
                    $http({
                        method: $scope.meth,
                        url: apiRoot + "remoteDict/",
                        data: JSON.stringify($scope.d)
                    })
                        .then(function(data) {
                            data = data.data;
                            if (data) $scope.d._id = data;
                            $scope.isHolding = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.isHolding = false;
                            alert(data.errorMessage ? data.errorMessage : data);
                        });
                };

                $scope.remove = function(_id) {
                    if (confirm("Удалить данный словарь? \nВсе данные будут утеряны безвозвратно!")) {
                        $scope.isHolding = true;
                        $http
                            .delete(apiRoot + "remoteDict/" + $scope.d._id)
                            .then(function() {
                                window.location.href = "admin/remoteDict_list";
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.isHolding = false;
                                alert(data.errorMessage ? data.errorMessage : data);
                            });
                    }
                };

                $scope.addOption = function(d) {
                    if (!d.fieldXPaths) {
                        d.fieldXPaths = [];
                    }
                    d.fieldXPaths.push({ fieldName: "", xPath: "" });
                };

                $scope.requesting = false;
                $scope.isHolding = false;
                $scope.status = STATUS.LOADING;

                $scope.d = {};
                $scope.d._id = $scope.id;

                if (!$scope.d._id) {
                    $scope.meth = "POST";
                    $scope.status = STATUS.READY;
                } else {
                    $scope.refresh();
                }
            }
        };
    }
})();

(function() {
    angular
        .module("rpgu.app")
        .component("requestReport", {
            templateUrl: "/admin/requestReport/requestReport.template.html",
            controller: ["$http", "$timeout", "$routeParams", "REQUEST_STATUS", "ServiceRequest", function ($http, $timeout, $routeParams, REQUEST_STATUS, ServiceRequest) {
                var $ctrl = this;
                $ctrl.idServiceRequest = $routeParams.idServiceRequest;
                $ctrl.REQUEST_STATUS = REQUEST_STATUS;
                $ctrl.selectedTab = "request";

                $ctrl.submitForm = function() {
                    var code = $ctrl.request.statusList[$ctrl.request.statusList.length - 1].code;
                    if (code != 5 && code != 45) {
                        alert("Неверный статус заявления.");
                        return;
                    }
                    $ctrl.status = "LOADING";
                    $http
                        .put(apiRoot + "serviceRequest/v2/" + $ctrl.idServiceRequest + "/queue", {
                            formId: $ctrl.request.formId,
                            model: JSON.stringify($ctrl.request.model)
                        })
                        .then(function() {
                            $ctrl.status = "READY";
                            alert("Форма успешно поставлена в очередь на отправку.");
                            refresh();
                        })
                        .catch(errorHandler);
                };

                $ctrl.deleteServiceRequest = function() {
                    if (confirm("Удалить заявление?")) {
                        ServiceRequest.delete($ctrl.idServiceRequest)
                            .then(function () {
                                refresh();
                            })
                            .catch(errorHandler)
                    }
                };

                $ctrl.getStatus = function() {
                    var request = $ctrl.request;
                    return request ? request.statusList[request.statusList.length - 1] : null;
                };

                $ctrl.isFormio = function() {
                    return $ctrl.request && $ctrl.request.type === 'formio';
                }


                $ctrl.selectTab = function(value) {
                    $ctrl.selectedTab = value;
                };

                $ctrl.soapDumpUrl = function(dumpType) {
                    return 'rest/serviceRequest/' + $ctrl.request._id + '/statusDump/' + dumpType;
                }

                $ctrl.isSelected = function(value) {
                    return $ctrl.selectedTab == value;
                };

                function errorHandler(err) {
                    var data = err.data || err;
                    $ctrl.status = "ERROR";
                    $ctrl.error = data && data.errorMessage ? { message: data.errorMessage } : { message: data };
                    report(data, "админка requestReport");

                }

                function refresh() {
                    $http
                        .get(apiRoot + "serviceRequest/v2/" + $ctrl.idServiceRequest)
                        .then(function(response) {
                            if (!$ctrl.request) {
                                $ctrl.request = {};
                            }
                            var data = response.data;
                            if (!data.model) {
                                data.model = {};
                            }
                            data.date = moment(data.date).utc();
                            _.extend($ctrl.request, data);
                            if (data.type === 'formio') {
                                // $ctrl.request.model = { data: $ctrl.request.model };
                            } else {
                                calcFields($ctrl.request.formTemplate.form);
                            }

                            $ctrl.request.model.flagDates = false;
                            $ctrl.request.model.flagTimes = false;
                            angular.forEach($ctrl.request.statusList, function(status) {
                                status.date = moment(status.date).utc();
                                status.text = REQUEST_STATUS[status.code];
                            });
                            $ctrl.status = "READY";
                        })
                        .catch(errorHandler);
                }

                function calcFields(fields) {
                    fields = fields || [];
                    fields.forEach(function(field) {
                        if (field.type == "fieldset") {
                            calcFields(field.items);
                        } else if (field.type == "nwpFileUpload") {
                            field.endpoint =
                                apiRoot + "serviceRequest/v2/" + $ctrl.idServiceRequest + "/" + field.key;
                        }
                    });
                }

                refresh();
            }]
        });
})();

(function() {
    resourceList.$inject = ["$http", "STATUS", "session", "ROLES", "$routeParams"];
    angular.module("rpgu.app").directive("resourceList", resourceList);

    function resourceList($http, STATUS, session, ROLES, $routeParams) {
        return {
            restrict: "E",
            templateUrl: "/admin/resourceList/resourceList.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;
                $scope.organization = $routeParams.org;

                $scope.adding = false;
                $scope.editing = false;
                $scope.removing = false;
                $http
                    .get(apiRoot + "organizations/" + $scope.id + "/questions")
                    .then(function(data) {
                        data = data.data;
                        $scope.status = STATUS.READY;
                        $scope.questions = data;
                    })
                    .catch(function(data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                    });

                $scope.isDept = function() {
                    var status = false;
                    if (!session.hasRole(ROLES.ADMIN)) {
                        status = session.hasRole(ROLES.DEPT);
                    }
                    return status;
                };

                var restUrl = apiRoot + "organizations/" + $scope.id + "/resources";

                $scope.refresh = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(restUrl)
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.list = data;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.add = function() {
                    $scope.addStatus = STATUS.LOADING;
                    $http
                        .post(restUrl, {
                            name: $scope.newObj.name,
                            scheduleBegin: $scope.newObj.scheduleBegin * 60000,
                            scheduleEnd: $scope.newObj.scheduleEnd * 60000,
                            scheduleInterval: $scope.newObj.scheduleInterval,
                            description: $scope.newObj.description,
                            questions: $scope.newObj.questions
                        })
                        .then(function() {
                            $scope.addStatus = STATUS.READY;
                            $scope.adding = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.addStatus = STATUS.ERROR;
                            $scope.addError = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.beforeEdit = function(item) {
                    item.editObj = {
                        name: item.name,
                        scheduleBegin: item.scheduleBegin / 60000,
                        scheduleEnd: item.scheduleEnd / 60000,
                        scheduleInterval: item.scheduleInterval,
                        description: item.description,
                        questions: angular.copy(item.questions)
                    };
                    item.editing = true;
                    item.editStatus = STATUS.READY;
                };

                $scope.edit = function(item) {
                    $scope.editStatus = STATUS.LOADING;
                    $http
                        .put(restUrl + "/" + item.id, {
                            name: item.editObj.name,
                            scheduleBegin: item.editObj.scheduleBegin * 60000,
                            scheduleEnd: item.editObj.scheduleEnd * 60000,
                            scheduleInterval: item.editObj.scheduleInterval,
                            description: item.editObj.description,
                            questions: item.editObj.questions
                        })
                        .then(function() {
                            item.editStatus = STATUS.READY;
                            item.editing = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.editStatus = STATUS.ERROR;
                            item.editError = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.beforeRemove = function(item) {
                    item.removing = true;
                    item.removeStatus = STATUS.READY;
                };

                $scope.remove = function(item) {
                    item.removeStatus = STATUS.LOADING;
                    $http
                        .delete(restUrl + "/" + item.id)
                        .then(function() {
                            item.removeStatus = STATUS.READY;
                            item.removing = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.removeStatus = STATUS.ERROR;
                            item.removeError = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.refresh();
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestReportList", {
        templateUrl: "/admin/serviceRequestReportList/serviceRequestReportList.component.html",
        controller: [ "$scope", "ServiceRequest", "DigitalRGUService", Controller ]
    });

    function Controller($scope, ServiceRequest, DigitalRGUService) {
        var $ctrl = this;

        $ctrl.count = 0;
        $ctrl.paginationOffset = 0;
        $ctrl.paginationMax = 9;

        $ctrl.getlist = function() {
            $ctrl.status = "LOADING";
            var dn = parseInt($ctrl.search_number);
            ServiceRequest.fails({
                offset: $ctrl.paginationOffset || 0,
                limit: $ctrl.paginationMax || 9,
                docNum: isNaN(dn) ? undefined : dn,
                id: $ctrl.search_id,
                service: $ctrl.search_service
            }).then(function(data){
                $ctrl.requests = data.list;
                $ctrl.count = data.count;
                angular.forEach($ctrl.requests, setServiceInfo);
                $ctrl.status = "READY";
            }).catch(function(err) {
                var data = err.data || err;
                $ctrl.status = "ERROR";
                $ctrl.error = data.errorMessage ? { message: data.errorMessage } : data;
            });
        };

        $ctrl.getlist();

        $scope.$watchGroup(["$ctrl.paginationOffset", "$ctrl.paginationMax"], function() {
            if ($ctrl.count > 0) {
                $ctrl.getlist();
            }
        });

        $ctrl.search = function() {
            debug($ctrl.search_number + $ctrl.search_id + $ctrl.search_service, "search");
        };

        $ctrl.reset = function() {
            $ctrl.search_number = undefined;
            $ctrl.search_id = undefined;
            $ctrl.search_service = undefined;
            $ctrl.getlist();
        };

        function setServiceInfo(req) {
            DigitalRGUService
                .get(req.digitalRguServices)
                .then(function(service){
                    req.service = service;
                });
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestTestSettings", {
        templateUrl: "/admin/serviceRequestTest/service-request-test-settings.component.html",
        controller: ["$scope", "$element", "$location", "ServiceRequestTestSettingsService", "STATUS", "utils", Controller]
    });

    function Controller($scope, $element, $location, ServiceRequestTestSettingsService, STATUS, utils) {
        var $ctrl = this;

        $ctrl.max = 9;
        $ctrl.skip = 0;
        $ctrl.data = null;
        $ctrl.search = "";

        $ctrl.fetch = function() {
            $ctrl.status = STATUS.LOADING;

            ServiceRequestTestSettingsService.list($ctrl.search, $ctrl.max, $ctrl.skip)
                .then(function(data){
                    $ctrl.data = data;
                    $ctrl.status = STATUS.READY;
                })
                .catch(utils.errorHandler($ctrl))
        };

        $ctrl.create= function () {
            $ctrl.editItem = {};
            $element.find("#editItem").modal("show");
        };

        $ctrl.edit= function (item) {
            $ctrl.editItem = angular.copy(item);
            $element.find("#editItem").modal("show");
        };

        $ctrl.save = function(item) {
            if (!item.docNum) {
                return;
            }
            $ctrl.status = STATUS.LOADING;
            if (!item._id) {
                ServiceRequestTestSettingsService.post(item).then(function () {
                    $element.find("#editItem").modal("hide");
                    $ctrl.fetch();
                }).catch(utils.errorHandler($ctrl));
            } else {
                ServiceRequestTestSettingsService.put(item).then(function () {
                    $element.find("#editItem").modal("hide");
                    $ctrl.fetch();
                }).catch(utils.errorHandler($ctrl));
            }
        };

        $ctrl.delete = function (_id) {
            if (confirm("Удалить запись?")) {
                ServiceRequestTestSettingsService.delete(_id).then(function () {
                    $element.find("#editItem").modal("hide");
                    $ctrl.fetch();
                }).catch(utils.errorHandler($ctrl));
            }
        };

        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function() {
            if ($ctrl.data && $ctrl.data.count > 0) {
                $ctrl.fetch();
            }
        });

        $scope.$watch("$ctrl.search", _.debounce(function (newValue, oldValue) {
            if (newValue !== oldValue) {
                $ctrl.fetch();
            }
        }, 2000));


        $ctrl.$onInit = $ctrl.fetch;
        $ctrl.status = STATUS.LOADING;
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestTest", {
        templateUrl: "/admin/serviceRequestTest/service-request-test.component.html",
        controller: ["$scope", "$element", "$location", "ServiceRequestTestService", "STATUS", "utils", Controller]
    });

    function Controller($scope, $element, $location, ServiceRequestTestService, STATUS, utils) {
        var $ctrl = this;

        $ctrl.max = 9;
        $ctrl.skip = 0;
        $ctrl.data = null;

        $ctrl.fetch = function() {
            $ctrl.status = STATUS.LOADING;

            ServiceRequestTestService.list($ctrl.max, $ctrl.skip)
                .then(function(data){
                    $ctrl.data = data;
                    $ctrl.status = STATUS.READY;
                })
                .catch(utils.errorHandler($ctrl))
        };

        $ctrl.create = function() {
            if (confirm("Запустить проверку работоспособности и доступности услуг?"))
            ServiceRequestTestService.post()
                .then(function (data) {
                    alert("Создано заявлений и поставлено в очередь на отправку: " + data);
                    $ctrl.fetch();
                }).catch(utils.errorHandler($ctrl));
        };

        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function() {
            if ($ctrl.data && $ctrl.data.count > 0) {
                $ctrl.fetch();
            }
        });

        $ctrl.$onInit = $ctrl.fetch;
        $ctrl.status = STATUS.LOADING;

    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("soapTemplate", {
        templateUrl: "/admin/soap-templates/soap-template.component.html",
        controller: ["$scope", "$routeParams", "$location", "$timeout", "utils", "SoapTemplates", SoapTemplateController]
    });

    function SoapTemplateController($scope, $routeParams, $location, $timeout, utils, SoapTemplates) {
        var $ctrl = this;
        var defaultsSoap = { smevVer: 2 };

        $ctrl.serviceID = $routeParams.service || false;
        $ctrl.soapID = $routeParams.soapID;

        $ctrl.soap = { soap: defaultsSoap };

        $ctrl.aceEditorOptions = {
            theme: "github",
            useWrapMode: true,
            showGutter: true,
            firstLineNumber: 1,
            mode: "xml",
            onLoad: aceLoaded
        };

        $ctrl.backToService = function() {
            if ($ctrl.serviceID) {
                $location.path("/admin/digital-service/" + $ctrl.serviceID);
            } else {
                $location.path("/admin/digital-services-list/");
            }
        }

        $ctrl.update = function() {
            $ctrl.status = "LOADING";
            SoapTemplates.update($ctrl.soap)
                .then($ctrl.fetch)
                .catch(errorHandler);
        };

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";
            SoapTemplates.get($ctrl.soapID)
                .then(function(payload){
                    $ctrl.soap = payload || {};
                    _.defaults($ctrl.soap.soap, defaultsSoap);
                    $ctrl.status = "READY";
                })
                .catch(errorHandler);
        };

        $ctrl.isSmevVer = function(ver) {
            return ver == $ctrl.soap.soap.smevVer;
        };

        $ctrl.smevVerSelect = function(ver) {
            $ctrl.soap.soap.smevVer = ver;
        };

        $ctrl.$onInit = $ctrl.fetch;

        $ctrl.timeout = null;
        $ctrl.copyId = function() {
            var copy = utils.copyToClipboard($ctrl.soap._id);
            if (copy) {
                $ctrl.copySuccess = true;
                $ctrl.timeout = $timeout(function(){
                    clearTimeout($ctrl.timeout);
                    $ctrl.copySuccess = false;
                }, 2000);
            }
        };

        $ctrl.status = "READY";

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "soapTemplate");
        }

        function aceLoaded(_editor) {
            _editor.setFontSize(14);
        }

    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("soapTemplatesList", {
        templateUrl: "/admin/soap-templates/soap-templates-list.component.html",
        controller: ["$scope", "$element", "$location", "SoapTemplates", SoapTemplatesListController]
    });

    function SoapTemplatesListController($scope, $element, $location, SoapTemplates) {
        var $ctrl = this;

        $ctrl.max = 9;
        $ctrl.skip = 0;
        $ctrl.list = [];
        $ctrl.disableSubmit = true;

        $ctrl.goTo = function(soapID) {
            $location.path("/admin/soap-template/" + soapID);
        }

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";

            SoapTemplates.list($ctrl.search, $ctrl.max, $ctrl.skip)
                .then(function(payload){
                    $ctrl.list = payload.list || [];
                    $ctrl.listCount= payload.count || 0;
                    $ctrl.status = "READY";
                })
                .catch(errorHandler)
        }

        $ctrl.newSoapTemplate = { name: "" };
        $ctrl.create = function() {
            if ($ctrl.newSoapTemplate.name.trim() === '') {
                return;
            }
            $element.find("#newSoap").modal("hide");
            SoapTemplates
                .create($ctrl.newSoapTemplate)
                .then($ctrl.fetch)
                .catch(errorHandler);
        };



        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function() {
            if ($ctrl.listCount > 0) {
                $ctrl.fetch();
            }
        });

        $ctrl.searching = function() {
            if (typeof $ctrl.search !== 'undefined') {
                $ctrl.fetch();
            }
        }

        $scope.$watch("$ctrl.search", _.debounce($ctrl.searching, 2000));

        $ctrl.$onInit = $ctrl.fetch;
        $ctrl.pagination = $ctrl.fetch;

        $ctrl.status = "READY";

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "soapTemplatesList");
        }
    }
})();

(function(){
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("translates", {
        templateUrl: "/admin/translates/translates.html",
        controller: ["$scope", "$http", "$window", "utils", Controller]
    });

    function Controller($scope, $http, $window, utils) {
        var $ctrl = this;

        $ctrl.max = 9;
        $ctrl.skip = 0;
        $ctrl.count = 0;
        $ctrl.translates = [];

        $ctrl.fetch = function fetch() {
            $ctrl.status = "LOADING";
            var query = "?limit=" + ($ctrl.skip || 9) + "&offset=" + ($ctrl.skip || 0);
            $http.get(apiRoot + "formio/translate" + encodeURI(query))
                .then(function(res){
                    if (res.data) {
                        $ctrl.translates = res.data.list || [];
                        $ctrl.count = res.data.count || 0;
                    }
                    $ctrl.status = "READY";
                })
                .catch(utils.errorHandler($ctrl));
        };

        $ctrl.submit = function submit(url, opts) {
            return $http.post(apiRoot + url, opts);
        };

        $ctrl.update = function change(translate) {
            var url = "formio/translate/update/" + translate._id;
            $ctrl.submit(url, translate);
        };

        $ctrl.add = function add() {
            $ctrl.submit("formio/translate/create", {
                name: "",
                value: ""
            })
            .then($ctrl.fetch)
            .catch(utils.errorHandler($ctrl));
        };

        $ctrl.change = _.debounce($ctrl.update, 600);

        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function watchPagination() {
            if ($ctrl.count > 0) {
                $ctrl.fetch();
            }
        });

        $ctrl.$onInit = $ctrl.fetch;

        $ctrl.goBack = function() {
            $window.history.back();
        };
    }

}());

(function() {
	unpCatalog.$inject = ["$http", "$sce", "$timeout", "STATUS", "objectService", "session"];
    angular.module("rpgu.app").directive("unpCatalog", unpCatalog);

    function unpCatalog($http, $sce, $timeout, STATUS, objectService, session) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/unpCatalog.template.html',
            link: function ($scope) {
            	$scope.status = 'loading';
            	$scope.list	= [];
            	$http.get(apiRoot + 'unp-catalog', {}).then(function (data) {
                    	data = data.data;
            			$scope.status = 'ready';
						$scope.list	= data.map(function (i){
							if (i.isActive == true) i.isActive = 'Доступна'; else i.isActive = 'Не доступна';
							if (i.paymentKind == '1') i.paymentKind = 'авансовый платеж';
							if (i.paymentKind == '2') i.paymentKind = 'авансовый платеж и оплата выставленного поставщиком услуг счета';
							if (i.paymentKind == '3') i.paymentKind = 'оплата выставленного поставщиком услуг счета';
							i.paymentParameters.descriptionSimpleParameterOrDescriptionComplexParameter.forEach(function(p, i, arr){
								if (p.isId == "1") p.isId = 'Да'; else p.isId = '';
								if (p.required == true) p.required = 'Да'; else p.required = '';
								if (p.visible == true) p.visible = 'Да'; else p.visible = '';
								if (p.readonly == true) p.readonly = 'Да'; else p.readonly = '';
								if (p.forSearch == true) p.forSearch = 'Да'; else p.forSearch = '';
								if (p.forPayment == true) p.forPayment = 'Да'; else p.forPayment = '';
							});

							return i;
						});
            		}).catch(function (data) {
                    	data = data.data;
            			$scope.status = 'error';
            			$scope.erm	= data.errorMessage;
            		})
            	;
            	da = function (attr){
            		if (attr == true) attr = 'Да';
            		else attr = '';
            	}
            }
		}
	}
})();

(function() {
    var app = angular.module("rpgu.app");

    app.directive("uploadInfectedFile", ["$http", "$timeout", function($http, $timeout) {
        return {
            restrict: "E",
            scope: {
                accept: "=",
                uploadUrl: "=",
            },
            templateUrl: "/admin/uploadInfectedFile/uploadInfectedFile.template.html",
            link: function($scope, element, attr) {
                $scope.file = undefined;
                $scope.status = "";
                $scope.msg = "";

                var elem = angular.element("#uploadFile");
                elem.on('change', function () {
                    $scope.file = elem[0].files[0];
                    $scope.$apply();
                })

                $scope.uploadFile = function() {
                    var fData = new FormData();
                    fData.append("file", $scope.file);
                    $http({
                        url: $scope.uploadUrl,
                        headers: {"Content-Type": undefined},
                        method: "POST",
                        data: fData,
                        uploadEventHandlers: {
                            progress: function (e) {
                                if (e.lengthComputable) {
                                    $scope.progressBar = (e.loaded / e.total) * 100;
                                }
                            }
                        }
                    }).then((res) => {
                        if (res.status === 200) {
                            $scope.status = "success";
                            $scope.msg = "Файл успешно загружен";
                        } else {
                            $scope.status = "error";
                            $scope.msg = res.data.errorMessage || "Неизвестная ошибка";
                        }
                    }).catch((err) => {
                        $scope.status = "error";
                        $scope.msg = err.message || err.data.errorMessage || "Неизвестная ошибка";
                    });
                }

                $scope.$watch("status", function(newVal) {
                    if (newVal) {
                        $timeout(function() {
                            $scope.status = "";
                            $scope.msg = "";
                            $scope.file = undefined;
                            $scope.progressBar = 0;
                            elem.val(null)
                        }, 2000);
                    }
                });

            }
        }
    }])
})();

(function() {
    userCab.$inject = ["$http", "$sce", "$timeout", "$window", "$location", "STATUS", "objectService", "session", "$routeParams"];
    angular.module("rpgu.app").directive("userCab", userCab);
    function userCab($http, $sce, $timeout, $window, $location, STATUS, objectService, session, $routeParams) {
        return {
            restrict: "E",
            templateUrl: "/admin/userCab.template.html",
            controller: ["$scope", function($scope) {
                if (!$routeParams.tab) {
                    return $location.path("admin/user_page").search("tab", "mydata");
                }

                $scope.tabset = $routeParams.tab;
                $scope.status = "INIT";

                $scope.selectTab = function(setTab) {
                    $location.path("admin/user_page").search("tab", setTab);
                };

                $scope.isSelected = function(checkTab) {
                    return $scope.tabset === checkTab;
                };
            }]
        };
    }
})();

(function() {
    organizationList.$inject = ["$http", "STATUS", "ROLES", "utils"];
    angular.module("rpgu.app").directive("userList", organizationList);

    function organizationList($http, STATUS, ROLES, utils) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/userList.template.html',
            link: function ($scope) {
                $scope.roleNames = {};
                $scope.roleNames[ROLES.ADMIN] = "Администратор";
                $scope.roleNames[ROLES.DEPT] = "Сотрудник ведомства";
                $scope.roleNames[ROLES.PENALTY] = "Управление штрафами";
                $scope.roleNames[ROLES.COVID19] = "Управление пропусками COVID-19";
                $scope.status = STATUS.LOADING;
                $scope.tabs = [
                    {
                        id: ROLES.ADMIN,
                        role: ROLES.ADMIN,
                        title: "Администраторы",
                        locked: false
                    },
                    {
                        id: ROLES.DEPT,
                        role: ROLES.DEPT,
                        title: "Сотрудники ведомств",
                        locked: false
                    },
                    {
                        id: ROLES.PENALTY,
                        role: ROLES.PENALTY,
                        title: "Управление штрафами",
                        locked: false
                    },
                    {
                        id: ROLES.COVID19,
                        role: ROLES.COVID19,
                        title: $scope.roleNames[ROLES.COVID19],
                        locked: false
                    },
                    {
                        id: "locked",
                        role: null,
                        title: "Заблокированы",
                        locked: true
                    }
                ];
                $scope.activeTab = {id: ROLES.ADMIN};

                $scope.copyToBuffer = utils.copyToClipboard

                $http.get(apiRoot + 'organizations').then(function (data) {
                    data = data.data;
                    $scope.status = STATUS.READY;
                    $scope.organizations = data.list;
                    $scope.deptNames = {};
                    $scope.organizations.forEach(function (item) {
                        $scope.deptNames[item.id] = item.name;
                    });
                }).catch(function (data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? {message: data.errorMessage} : data;
                });

                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'users', {params: {
                        search: $scope.search ? $scope.search : ""
                    }}).then(function (data) {
                        data = data.data;
                        $scope.status = STATUS.READY;
                        $scope.lists = {};
                        $scope.tabs.forEach(function (tab) {
                            $scope.lists[tab.id] = data.filter(function (user) {
                                return (tab.role == null || hasRole(user.roles, tab.role))
                                    && (tab.locked == user.locked);
                            });
                        });
                    }).catch(function (data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? {message: data.errorMessage} : data;
                    });
                };

                $scope.onSearchKeyDown = function($event) {
                    if($event.which == 13) {
                        $scope.refresh();
                    }
                };

                $scope.add = function() {
                    $scope.addStatus = STATUS.LOADING;
                    $http.post(
                        apiRoot + 'users',
                        convertUser($scope.newUser)
                    ).then(function () {
                            $scope.addStatus = STATUS.READY;
                            $scope.adding = false;
                            $scope.refresh();
                        }).catch(function (data) {
                            data = data.data;
                            $scope.addStatus = STATUS.ERROR;
                            $scope.addError = data.errorMessage ? {message: data.errorMessage} : data;
                        });
                };

                function convertUser(user) {
                    var res = angular.copy(user);
                    res.roles = res.rolesList.reduce(function (res, role) {
                        if(role.checked)
                            res.push({name: role.role});
                        return res;
                    }, []);
                    delete res.rolesList;
                    res.depts = res.deptsList.reduce(function (res, dept) {
                        if(dept.checked)
                            res.push({dept: {id: dept.id}});
                        return res;
                    }, []);
                    delete res.deptsList;
                    return res;
                }

                $scope.beforeAdd = function (item) {
                    $scope.adding = true;
                    $scope.addStatus = STATUS.READY;
                    var rolesList = [];
                    angular.forEach($scope.roleNames, function (title, role) {
                        rolesList.push({role: role, title: title, checked: false});
                    });
                    var deptsList = [];
                    angular.forEach($scope.organizations, function (organization) {
                        deptsList.push({
                            id: organization.id,
                            name:    organization.name,
                            checked: false
                        })
                    });

                    $scope.newUser = {
                        rolesList: rolesList,
                        deptsList: deptsList
                    };
                };

                $scope.beforeEdit = function (item) {
                    var rolesList = [];
                    angular.forEach($scope.roleNames, function (title, role) {
                        rolesList.push({
                            role: role,
                            title: title,
                            checked: hasRole(item.roles, role)
                        });
                    });
                    var deptsList = [];
                    angular.forEach($scope.organizations, function (organization) {
                        deptsList.push({
                            id: organization.id,
                            name: organization.name,
                            checked: Array.isArray(item.depts) && item.depts.find(function (dept) {
                                return dept.dept.id == organization.id
                            }) != null
                        });
                    });

                    item.editUser = {
                        _id: item._id,
                        name: angular.copy(item.name),
                        rolesList: rolesList,
                        deptsList: deptsList
                    };
                    item.editing = true;
                    item.editStatus = STATUS.READY;
                };

                function hasRole(roles, role) {
                    return roles.find(function (item) {
                        return item.name == role
                    }) != null;
                }

                $scope.edit = function(item) {
                    item.editStatus = STATUS.LOADING;
                    $http.put(
                        apiRoot + 'users/' + item._id,
                        convertUser(item.editUser)
                    ).then(function () {
                            item.editStatus = STATUS.READY;
                            item.editing = false;
                            $scope.refresh();
                        }).catch(function (data) {
                            data = data.data;
                            item.editStatus = STATUS.ERROR;
                            item.editError = data.errorMessage ? {message: data.errorMessage} : data;
                        });
                };

                $scope.lock = function(item) {
                    item.lockStatus = STATUS.LOADING;
                    $http.delete(apiRoot + 'users/' + item._id).then(function () {
                        item.lockStatus = STATUS.READY;
                        item.locking = false;
                        $scope.refresh();
                    }).catch(function (data) {
                        data = data.data;
                        item.lockStatus = STATUS.ERROR;
                        item.lockError = data.errorMessage ? {message: data.errorMessage} : data;
                    });
                };

                $scope.refresh();
            }
        };
    }
})();

(function() {
    visList.$inject = ["$http", "$sce", "$timeout", "STATUS", "objectService", "session"];
    angular.module("rpgu.app").directive("visList", visList);

    function visList($http, $sce, $timeout, STATUS, objectService, session) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/admin/visList.template.html',
            link: function ($scope) {

            	$scope.status = STATUS.LOADING;

				$http({
					method: "GET",
					url: apiRoot + "vis/",
				}).then(function (data) {
                    data = data.data;
					console.log(JSON.stringify(data));
					$scope.status = STATUS.READY;
					$scope.list = data;

					$("#form").alpaca({
						"data" : data,
						"schema": {
							 "type": "array",
							 "items" : {
								 "type" : "object",
								 "properties": {
									 "_id": {
										 "title": "ID",
										 "type": "string"
									 },
									 "name": {
										 "title": "Наименование",
										 "type": "string"
									 },
									 "mnemonics": {
										 "title": "Мнемоника",
										 "type": "string"
									 },
									 "contact": {
										 "title": "Контакт",
										 "type": "string"
									 },
									 "system": {
										 "title": "Система реализации",
										 "type": "string"
									 },
								 }
							 }
						 },
						"options": {
							"type" : "table",
							"items" : {
								"fields" : {
									"_id" : {
										"view" : "bootstrap-display",
									},
									"name" : {
										"view" : "bootstrap-display",
									},
									"mnemonics" : {
										"view" : "bootstrap-display",
									},
									"contact" : {
										"view" : "bootstrap-display",
									},
									"system" : {
										"view" : "bootstrap-display",
									},
								},
							},
							"actionbar": {
								"showLabels": false,
								"actions": [{
									"action": "add",
									"enabled": false
								}, {
									"action": "remove",
									"enabled": false
								}, {
									"action": "up",
									"enabled": false
								}, {
									"action": "down",
									"enabled": false
								}, {
									"label": "Редактирвать",
									"action": "custom",
									"iconClass": "fa fa-pencil",
									"click": function(key, action, itemIndex) {
										window.location.href = 'admin/vis_view?id=' + data[itemIndex]._id;
									}
								}]
							},
						 },
						 "postRender": function(control) {
							$('th').eq(0).attr("width", "120");
							$('th').eq(4).html("");
							$('th').eq(4).attr("width", "50");
						 },
						 "view": {
							"messages": {
								"en_US": {
									notOptional: "Поле обязательно для заполнения.",
									required: "Поле обязательно для заполнения.",
									invalid: "Поле заполнено не верно.",
									stringNotANumber: "Введенное значение не является числом."
								}
							}
						}
					});
				}).catch(function (data) {
                    data = data.data;
					$scope.status = STATUS.ERROR;
					$scope.error = {message: data.errorMessage ? data.errorMessage : data};
				});

		 	}
        }

    }
})();

(function() {
    visView.$inject = ["$http", "$sce", "$timeout", "$q", "session", "STATUS", "$routeParams"];
    angular.module("rpgu.app").directive("visView", visView);
    function visView($http, $sce, $timeout, $q, session, STATUS, $routeParams) {
        return {
            restrict: "E",
            templateUrl: "/admin/visView.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;

                $scope.renderForm = function(_id, data, meth) {
                    $("#form").alpaca({
                        data: data,
                        schema: {
                            type: "object",
                            title: "Внешная информационная система",
                            properties: {
                                name: {
                                    title: "Наименование",
                                    type: "string",
                                    required: true
                                },
                                mnemonics: {
                                    title: "Мнемоника",
                                    type: "string",
                                    required: true
                                },
                                contact: {
                                    title: "Контакт",
                                    type: "string",
                                    required: true
                                },
                                system: {
                                    title: "Система реализации",
                                    type: "string",
                                    required: true
                                }
                            }
                        },
                        options: {
                            form: {
                                buttons: {
                                    submit: {
                                        title: "Сохранить",
                                        styles: "btn btn-primary",
                                        click: function() {
                                            var req = this.getValue();
                                            if (_id) {
                                                req._id = _id;
                                            }
                                            console.log(JSON.stringify(req));
                                            $http({
                                                method: meth,
                                                url: apiRoot + "vis",
                                                data: JSON.stringify(req),
                                                contentType: "application/json; charset=utf-8",
                                                dataType: "json"
                                            }).then(function() {
                                                window.location.href = "admin/vis_list";
                                            });
                                        }
                                    },
                                    cancel: {
                                        title: "Отмена",
                                        click: function() {
                                            window.location.href = "admin/vis_list";
                                        }
                                    },
                                    delete: {
                                        title: "Удалить",
                                        styles: "btn btn-danger",
                                        click: function() {
                                            if (
                                                confirm("Удалить данную ВИС? \nВсе данные будут утеряны безвозвратно!")
                                            ) {
                                                $scope.remove(_id);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        postRender: function(control) {
                            $("th")
                                .eq(4)
                                .html("");
                            $("span").removeClass("alpaca-icon-required glyphicon glyphicon-star");
                            $("th")
                                .eq(4)
                                .attr("width", "100");
                        },
                        view: {
                            messages: {
                                en_US: {
                                    notOptional: "Поле обязательно для заполнения.",
                                    required: "Поле обязательно для заполнения.",
                                    invalid: "Поле заполнено не верно.",
                                    stringNotANumber: "Введенное значение не является числом."
                                }
                            }
                        }
                    });
                };

                $scope.status = STATUS.LOADING;

                if ($scope.id) {
                    $http({
                        method: "GET",
                        url: apiRoot + "vis/" + $scope.id
                    })
                        .then(function(data) {
                            data = data.data;
                            console.log(JSON.stringify(data));
                            $scope.status = STATUS.READY;
                            $scope.renderForm($scope.id, data, "PUT");
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                        });
                } else {
                    $scope.status = STATUS.READY;
                    $scope.renderForm(null, null, "POST");
                }

                $scope.remove = function(_id) {
                    $http
                        .delete(apiRoot + "vis/" + _id)
                        .then(function() {
                            window.location.href = "admin/vis_list";
                        })
                        .catch(function(data) {
                            data = data.data;
                            alert("Ошибка: " + data.errorMessage);
                            location.reload();
                        });
                };
            }
        };
    }
})();

(function() {
    votesAdmin.$inject = ["$http", "$sce", "STATUS", "$window", "$document"];
    angular.module("rpgu.app").directive("votesAdmin", votesAdmin);

    function votesAdmin($http, $sce, STATUS, $window, $document) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "/admin/votesAdmin.template.html",
            link: function($scope) {
                $scope.show = true;
                $scope.votesCount = 0;
                $scope.varEditValue = false;

                $scope.getVoteCount = function(variants) {
                    var voteCount = 0;
                    if (!angular.isUndefined(variants)) {
                        variants.forEach(function(item) {
                            voteCount = voteCount + item.count;
                        });
                    }
                    return voteCount;
                };

                $scope.beforeRemove = function(item) {
                    item.removing = true;
                    item.removeStatus = STATUS.READY;
                };

                $scope.beforeEdit = function(item) {
                    item.editObj = {
                        title: item.title,
                        description: item.description,
                        onlyAuth: item.onlyAuth,
                        active: item.active
                    };
                    item.editing = true;
                    item.editStatus = STATUS.READY;
                };

                $scope.beforeAddVariants = function(item) {
                    item.varianting = true;
                    item.variantStatus = STATUS.READY;
                };

                $scope.change = function(value) {
                    alert($scope.selectedOption.id);
                };

                $scope.beforeEditVariants = function(item) {
                    $scope.variantEditStatus = STATUS.LOADING;
                    $http
                        .get(apiRoot + "vote/" + item._id + "/edit")
                        .then(function(data) {
                            data = data.data;
                            $scope.variants = [];
                            if (data.variants.length > 0) {
                                data.variants.forEach(function(item, index) {
                                    $scope.variants.push({ name: item.title, id: index });
                                });
                                item.varediting = true;
                                item.varEditValue = false;
                                item.varObj = {};
                                item.variantEditStatus = STATUS.READY;
                            }
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.variantEditStatus = STATUS.ERROR;
                            item.variantEditError = data.errorMessage
                                ? { message: data.errorMessage }
                                : { message: data };
                        });
                };

                $scope.getLegthVariants = function(item) {
                    $http
                        .get(apiRoot + "vote/" + item._id + "/edit")
                        .then(function(data) {
                            data = data.data;
                            return data.variants.length;
                        })
                        .catch(function() {
                            return 0;
                        });
                };

                $scope.addVariant = function(item) {
                    item.variantStatus = STATUS.LOADING;
                    $http
                        .post(apiRoot + "vote/" + item._id + "/variant", item.varObj)
                        .then(function() {
                            item.variantStatus = STATUS.READY;
                            item.varianting = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.variantStatus = STATUS.ERROR;
                            item.variantError = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };

                $scope.beforeEditValue = function(item, index) {
                    item.varObj = {};
                    item.variantEditStatus = STATUS.LOADING;
                    $http
                        .get(apiRoot + "vote/" + item._id + "/edit")
                        .then(function(data) {
                            data = data.data;
                            item.varObj = {
                                title: data.variants[index].title,
                                description: data.variants[index].description
                            };
                            item.varEditValue = true;
                            item.variantEditStatus = STATUS.READY;
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.variantEditStatus = STATUS.ERROR;
                            item.variantEditError = data.errorMessage
                                ? { message: data.errorMessage }
                                : { message: data };
                        });
                };

                $scope.EditVariants = function(item) {
                    item.variantEditStatus = STATUS.LOADING;
                    $http
                        .put(
                            apiRoot + "vote/" + item._id + "/" + $scope.selectedVariant.id.toString(),
                            item.varObj
                        )
                        .then(function() {
                            item.variantEditStatus = STATUS.READY;
                            item.varEditValue = false;
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.variantEditStatus = STATUS.ERROR;
                            item.variantEditError = data.errorMessage
                                ? { message: data.errorMessage }
                                : { message: data };
                        });
                };

                $scope.RemoveVariants = function(item) {
                    item.variantEditStatus = STATUS.LOADING;
                    $http
                        .delete(apiRoot + "vote/" + item._id + "/" + $scope.selectedVariant.id.toString())
                        .then(function() {
                            item.variantEditStatus = STATUS.READY;
                            item.varediting = false;
                            $scope.varEditValue = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.variantEditStatus = STATUS.ERROR;
                            item.variantEditError = data.errorMessage
                                ? { message: data.errorMessage }
                                : { message: data };
                        });
                };

                $scope.exitSelectVariants = function(item) {
                    item.varediting = false;
                    item.varEditValue = false;
                    item.varObj = {};
                };

                $scope.cancelSelectVariants = function(item) {
                    item.varEditValue = false;
                    item.varObj = {};
                };

                $scope.changeValue = function(item, index) {
                    if (!angular.isUndefined(index)) {
                        $scope.beforeEditValue(item, index);
                    }
                };

                $scope.editVote = function(item) {
                    item.editStatus = STATUS.LOADING;
                    $http
                        .put(apiRoot + "vote/" + item._id + "/edit", item.editObj)
                        .then(function() {
                            item.editStatus = STATUS.READY;
                            item.editing = false;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.editStatus = STATUS.ERROR;
                            item.editError = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.refresh = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "vote", {
                            params: {
                                search: $scope.search ? $scope.search : "",
                                offset: $scope.skip,
                                limit: $scope.max
                            }
                        })
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.count = data.count;
                            $scope.list = data.list;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };

                $scope.onSearchKeyDown = function($event) {
                    if ($event.which == 13) {
                        $scope.refresh();
                    }
                };

                $scope.remove = function(item) {
                    item.removeStatus = STATUS.LOADING;
                    $http
                        .delete(apiRoot + "vote/" + item._id)
                        .then(function() {
                            item.removeStatus = STATUS.READY;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            item.removeStatus = STATUS.ERROR;
                            item.removeError = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };

                $scope.activate = function(item, check) {
                    $http
                        .put(apiRoot + "vote/" + item._id + "/enable/" + (check == true ? "true" : "false"))
                        .then(function() {
                            $scope.refresh();
                            $window.console.log("vote checked");
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };

                $scope.onlyAuth = function(item, check) {
                    var editObj = {
                        title: item.title,
                        description: item.description,
                        onlyAuth: check,
                        active: item.active
                    };
                    $scope.status = STATUS.LOADING;
                    $http
                        .put(apiRoot + "vote/" + item._id + "/edit", editObj)
                        .then(function() {
                            $scope.status = STATUS.READY;
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };

                $scope.addVote = function() {
                    $scope.addStatus = STATUS.LOADING;
                    var addObj = {
                        title: $scope.newObj.title,
                        description: $scope.newObj.description,
                        onlyAuth: $scope.newObj.onlyAuth,
                        active: false
                    };
                    $http
                        .post(apiRoot + "vote", addObj)
                        .then(function() {
                            $scope.addStatus = STATUS.READY;
                            $scope.adding = false;
                            $scope.newObj = {};
                            $scope.refresh();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.addStatus = STATUS.ERROR;
                            $scope.addError = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };
                $scope.refresh();
            }
        };
    }
})();

(function() {
    voteView.$inject = ["$http", "$routeParams", "$sce", "STATUS"];
    angular.module("rpgu.app").directive("voteView", voteView);

    function voteView($http, $routeParams, $sce, STATUS) {
        return {
            restrict: "E",
            templateUrl: "/admin/voteView.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;
                $scope.status = undefined;
                $scope.activeStatus = "";
                $scope.onlyAuthStatus = "";
                $scope.variantsCount = 0;

                $scope.getVoteCount = function(variants) {
                    var voteCount = 0;
                    variants.forEach(function(item) {
                        voteCount = voteCount + item.count;
                    });
                    return voteCount;
                };

                $scope.refresh = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "vote/" + $scope.id + "/edit")
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.list = data;
                            $scope.list.activeStatus =
                                data.active == true
                                    ? 'Голосование <span style="color: green;">активно</span>'
                                    : 'Голосование <span style="color: red;">остановленно</span>';
                            $scope.list.onlyAuthStatus =
                                data.onlyAuth == true
                                    ? 'Голосование только для <span style="color: red;">зарегестрированных пользователей</span>'
                                    : 'Голосование <span style="color: green;">доступно всем</span>';
                            $scope.list.variantsCount = $scope.getVoteCount(data.variants);
                            $scope.showResults = false;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.goBack = function() {
                    history.back();
                };

                $scope.refresh();
            }
        };
    }
})();

(function(w) {
    var app = angular.module("rpgu.app");

    app.constant('uiDatetimePickerConfig', {
        dateFormat: 'yyyy-MM-dd HH:mm',
        defaultTime: '00:00:00',
        html5Types: {
            date: 'yyyy-MM-dd',
            'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
            'month': 'yyyy-MM'
        },
        initialPicker: 'date',
        reOpenDefault: false,
        enableDate: true,
        enableTime: true,
        buttonBar: {
            show: true,
            now: {
                show: true,
                text: 'Сейчас',
                cls: 'btn-sm btn-default'
            },
            today: {
                show: true,
                text: 'Сегодня',
                cls: 'btn-sm btn-default mr-1'
            },
            clear: {
                show: true,
                text: 'Сбросить',
                cls: 'btn-sm btn-default'
            },
            date: {
                show: true,
                text: 'Дата',
                cls: 'btn-sm btn-default'
            },
            time: {
                show: true,
                text: 'Время',
                cls: 'btn-sm btn-default'
            },
            close: {
                show: true,
                text: 'Закрыть',
                cls: 'btn-sm btn-default'
            },
            cancel: {
                show: false,
                text: 'Отмена',
                cls: 'btn-sm btn-default'
            }
        },
        closeOnDateSelection: true,
        closeOnTimeNow: true,
        appendToBody: false,
        altInputFormats: [],
        ngModelOptions: { timezone: null },
        saveAs: false,
        readAs: false
    })

    app.config(function() {
        moment.locale("ru");
        //moment.tz.setDefault("Europe/Moscow");
    });

    app.config([
        "$httpProvider",
        function($httpProvider) {
            $httpProvider.defaults.headers.get = {};
        }
    ]);

    app.config(['$compileProvider', function ($compileProvider) {
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|javascript):/);
    }]);

    app.constant("STATUS", {
        INIT: "init",
        LOADING: "loading",
        READY: "ready",
        EDIT: "edit",
        ERROR: "error"
    });

    app.constant("ROLES", {
        ADMIN: "admin",
        DEV: "dev",
        DEPT: "dept",
        BACK: "back",
        REGISTER: "register",
        PENALTY: "penalty",
        COVID19: "covid19"
    });

    app.constant("REQUEST_STATUS", {
        "-1": "Ошибка обработки результата",
        "0": "Черновик заявления",
        "1": "В очереди на отправку",
        "2": "Принято ведомством",
        "3": "Исполнено",
        "4": "Отказ",
        "5": "Ошибка отправки в ведомство",
        "6": "Зарегистрировано в ведомстве",
        "7": "Промежуточные результаты от ведомства",
        "9": "В процессе отмены, удаления",
        "10": "Отменено",
        "14": "Ожидание дополнительной информации от пользователя",
        "20": "Создание черновика дела в МФЦ",
        "30": "Ожидает оплаты",
        "31": "Оплата произведена",
        "42": "Принято СМЭВ",
        "45": "Ошибка отправки СМЭВ",
        "99": "Принято от заявителя",
        "100": "Удалено",
        "101": "Ожидание подписи вторым заявителем"
    });

    app.constant("TIMEZONES", [
        { name: "(UTC-12) Линия перемены дат", val: -12 },
        { name: "(UTC-11) Американское Самоа", val: -11 },
        { name: "(UTC-10) Гавайи", val: -10 },
        { name: "(UTC-9) Аляска", val: -9 },
        { name: "(UTC-8) Тихоокеанское время (США)", val: -8 },
        { name: "(UTC-7) Горное время (США)", val: -7 },
        { name: "(UTC-6) Ц. Америка, ц. время (США)", val: -6 },
        { name: "(UTC-5) Восточное время (США иКанада)", val: -5 },
        { name: "(UTC-4) Атлантическое время (Канада)", val: -4 },
        { name: "(UTC-3) Бразилия, Буэнос-Айрес,Гренландия", val: -3 },
        { name: "(UTC-2) Среднеатлантическое время", val: -2 },
        { name: "(UTC-1) Азорские о-ва, о-ва ЗеленогоМыса", val: -1 },
        { name: "(UTC+0) Дублин, Лиссабон, Лондон,Эдинбург", val: 0 },
        { name: "(UTC+1) Берлин, Мадрид, Париж, Вена,Рим", val: 1 },
        { name: "(UTC+2) Калининград, Киев, Рига", val: 2 },
        { name: "(UTC+3) Москва,Санкт-Петербург, Ставрополь", val: 3 },
        { name: "(UTC+4) Самара, Ижевск, страныЗакавказья", val: 4 },
        { name: "(UTC+5) Екатеринбург, ЗападныйКазахстан", val: 5 },
        { name: "(UTC+6) Омск", val: 6 },
        { name: "(UTC+7) Красноярск, Новосибирск,Томск", val: 7 },
        { name: "(UTC+8) Иркутск, Улан-Удэ, Гонконг,Пекин", val: 8 },
        { name: "(UTC+9) Якутск, Чита, Осака, Токио,Сеул", val: 9 },
        { name: "(UTC+10) Владивосток, Хабаровск,Уссурийск", val: 10 },
        { name: "(UTC+11) Магадан, Южно-Сахалинск", val: 11 },
        { name: "(UTC+12) Камчатское время, Анадырь,Окленд", val: 12 },
        { name: "(UTC+13) Самоа, Тонга", val: 13 },
        { name: "(UTC+14) Острова Лайн", val: 14 }
    ]);

    app.config(["$datepickerProvider", function($datepickerProvider) {
        angular.extend($datepickerProvider.defaults, {
            startWeek: 1
        });
    }]);

    app.config(["$translateProvider", function($translateProvider) {
        $.get(apiRoot + "formio/translate").done(function(res){
            if (res.list) {
                var translations = res.list.reduce(function(acc, translation){
                    acc[translation.name] = translation.value;
                    return acc;
                }, {});
                $translateProvider.translations("ru", translations);
                $translateProvider.use("ru");
                $translateProvider.useSanitizeValueStrategy(null);
                $translateProvider.preferredLanguage('ru');
            } else {
                $.get("/translations.json").done(function(translations){
                    $translateProvider.translations("ru", translations);
                    $translateProvider.use("ru");
                    $translateProvider.useSanitizeValueStrategy(null);
                    $translateProvider.preferredLanguage('ru');
                });
            }
        });
    }]);

    app.config(["schemaFormDecoratorsProvider", "sfBuilderProvider", function(schemaFormDecoratorsProvider, sfBuilderProvider) {
        schemaFormDecoratorsProvider.defineAddOn(
            "bootstrapDecorator", // Name of the decorator you want to add to.
            "inputDropdown", // Form type that should render this add-on
            "/components/inputDropdown.template.html", // Template name in $templateCache
            sfBuilderProvider.stdBuilders // List of builder functions to apply.
        );
    }]);

    // app.config([
    //     'formioComponentsProvider',
    //     function(formioComponentsProvider) {
    //         formioComponentsProvider.register('icons', {
    //             title: 'Icons',
    //             template: '/formio/icons.html',
    //             controller: ['$scope', function($scope) {}],
    //             group: 'advanced',
    //             icon: 'fa fa-heart-o',
    //             settings: {},
    //             views: []
    //         });
    //     }
    // ]);

    app.run(['formioComponents', function(formioComponents) {
        /**
         * Formio Отключение бесполезных шаблонов
         */
        formioComponents.components.selectboxes.disabled = true;
        formioComponents.components.number.disabled = true;
        //formioComponents.components.htmlelement.disabled = true;
        formioComponents.components.password.disabled = true;
        formioComponents.components.custom.disabled = true;
        formioComponents.components.address.disabled = true;
        formioComponents.components.currency.disabled = true;
        formioComponents.components.day.disabled = true;
        formioComponents.components.email.disabled = true;
        formioComponents.components.phoneNumber.disabled = true;
        formioComponents.components.resource.disabled = true;
        formioComponents.components.signature.disabled = true;
        formioComponents.components.survey.disabled = true;
        formioComponents.components.time.disabled = true;
        formioComponents.components.form.disabled = true;
    }]);

    app.run([
        "$rootScope",
        "$location",
        "$timeout",
        "session",
        function($rootScope, $location, $timeout, session) {
            $rootScope.$on("$routeChangeStart", function(event, newUrl) {
                var backUrl = $location.url();
                if ($.isEmptyObject(session.sessionData) && !session.loaded) {
                    session.getSessionData().then(function () {
                        session.loaded = true;
                        checkAuth();
                    });
                } else {
                    checkAuth();
                }

                function checkAuth() {
                    if (newUrl.requireAuth && !session.isLoggedIn()) {
                        $location.path("/login").search("backUrl", encodeURIComponent(backUrl));
                    }

                }
            });
        }
    ]);

})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.config([
        "$routeProvider",
        "$locationProvider",
        function($routeProvider, $locationProvider) {
            $locationProvider.html5Mode(true);

            var originalWhen = $routeProvider.when;

            $routeProvider.when = function(path, route) {
                route.resolve || (route.resolve = {});

                angular.extend(route.resolve, {
                    session: function(session, $q) {
                        var deferred = $q.defer();
                        session.getSessionData()
                            .then(function(bool){
                                deferred.resolve(bool);
                            }).catch(function(err) {
                                warn(err, "Error in route.resolve");
                            });
                        return deferred.promise;
                    }
                });

                return originalWhen.call($routeProvider, path, route);
            };

            $routeProvider
                .when("/", {
                    templateUrl: "/views/home.page.html"
                })

                /**  ADMIN ROUTES  **/
                .when("/admin", {
                    templateUrl: "/views/admin.page.html"
                })
                .when("/admin/:templateName", {
                    requireAuth: true,
                    templateUrl: function(urlattr) {
                        return "/views/admin/" + urlattr.templateName + ".page.html";
                    }
                })
                .when("/admin/soap-template/:soapID", {
                    requireAuth: true,
                    templateUrl: "/views/admin/soap-template.page.html"
                })
                .when("/admin/forms-template/:formFormat/:formID", {
                    requireAuth: true,
                    templateUrl: function(urlattr) {
                        return "/views/admin/forms-template/" + urlattr.formFormat + ".page.html";
                    }
                })
                .when("/admin/digital-service/:serviceID", {
                    requireAuth: true,
                    templateUrl: "/views/admin/digital-service.page.html"
                })
                .when("/admin/news/:newsID", {
                    requireAuth: true,
                    templateUrl: "/views/admin/news-edit.page.html"
                })

                /**  USER ROUTES  **/
                .when("/login", {
                    templateUrl: "/views/login.page.html"
                })
                .when("/about", {
                    templateUrl: "/views/about.page.html"
                })
                .when("/news", {
                    templateUrl: "/views/news/news-list.page.html"
                })
                .when("/news/:newsAlias", {
                    templateUrl: "/views/news/news.page.html"
                })
                .when("/privacy", {
                    templateUrl: "/views/privacy.page.html"
                })
                .when("/soglasie", {
                    templateUrl: "/views/soglasie.page.html"
                })
                .when("/support", {
                    templateUrl: "/views/support.page.html"
                })
                .when("/vote", {
                    templateUrl: "/views/vote.page.html"
                })
                .when("/transport", {
                    templateUrl: "/views/transport.page.html"
                })
                .when("/personcab/service-request/:reqType", {
                    requireAuth: true,
                    templateUrl: function(urlattr) {
                        return "/views/personcab/service-request/" + urlattr.reqType + ".page.html";
                    },
                })
                .when("/personcab/survey/:digitalRguServices", {
                    requireAuth: true,
                    templateUrl: function() {
                        return "/views/personcab/survey.page.html";
                    }
                })
                .when("/personcab/poll/:pollId", {
                    requireAuth: true,
                    templateUrl: function() {
                        return "/views/personcab/poll.page.html";
                    }
                })
                .when("/personcab/:templateName", {
                    requireAuth: true,
                    templateUrl: function(urlattr) {
                        return "/views/personcab/" + urlattr.templateName + ".page.html";
                    }
                })
                .when("/covid-19_pass", {
                    templateUrl: "/views/covid-19_pass.page.html"
                })
                .when("/covid-19_infected", {
                    templateUrl: "/views/covid-19_infected.page.html"
                })
                .when("/covid-19_qr/:id", {
                    templateUrl: "/views/covid-19_qr.page.html"
                })
                .when("/covid-19_qr-org/:id", {
                    templateUrl: "/views/covid-19_qr-org.page.html"
                })
                .when("/rgu/:templateName", {
                    templateUrl: function(urlattr) {
                        return "/views/rgu/" + urlattr.templateName + ".page.html";
                    }
                })
                .otherwise({
                    redirectTo: "/"
                });
        }
    ]);
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("addStudentsModalSmolensk", {
        templateUrl: "/components/add-students-modal/add-students-modal-smolensk.component.html",
        bindings: {
            id: "<"
        },
        controller: ["$http", "$q", "$route", "session", AddStudentsModalController]
    });

    function AddStudentsModalController($http, $q, $route, session) {
        var $ctrl = this;

        $ctrl.saved = false;

        $ctrl.schools = [];
        $ctrl.schoolItem = null;

        $ctrl.students = [];
        $ctrl.studentItem = null;

        $ctrl.$onInit = function() {
            $ctrl.user = session.sessionData.user || null;

            $http
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=so_getOUV2")
                .then(function(response) {
                    $ctrl.schools = response.data.map(function(school) {
                        school.readableName = school.name;
                        return school;
                    });
                })
                .catch(errorHandler);
        };

        $ctrl.filterSchoolList = function(userInput) {
            $ctrl.saved = false;
            $ctrl.noStudents = false;

            var filter = $q.defer();
            var normalisedInput = userInput ? userInput.toLowerCase() : "";

            var filteredArray = $ctrl.schools.filter(function(school) {
                return school.readableName.toLowerCase().indexOf(normalisedInput) !== -1;
            });

            filter.resolve(filteredArray);
            return filter.promise;
        };

        $ctrl.schoolObjectSelected = function(item) {
            $ctrl.schoolItem = item;
            $ctrl.saved = false;
            $ctrl.noStudents = false;

            if (!$ctrl.user) {
                return;
            }

            $ctrl.snils = $ctrl.user.oAuthUser.snils.replace(/-/g, "").replace(/\s/g, "");

            var query = "&snils=" + $ctrl.snils + "&ouid=" + $ctrl.schoolItem.value;
            $http
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=so_getChildV2" + query)
                .then(function(response) {
                    $ctrl.students = response.data;
                })
                .catch(errorHandler);
        };

        $ctrl.addStudentsToUser = function() {
            $ctrl.saved = false;

            if ($ctrl.students.length === 0) {
                return ($ctrl.noStudents = true);
            }

            $http
                .post(
                    apiRoot + "me/child/",
                    $ctrl.students.map(function(student) {
                        student.ouId = $ctrl.schoolItem.value;
                        student.ouName = $ctrl.schoolItem.name;
                        student.childId = student.value;
                        student.name = student.name;
                        return student;
                    })
                )
                .then(function() {
                    jQuery("#" + $ctrl.id)
                        .modal("hide")
                        .on("hidden.bs.modal", function(e) {
                            $route.reload();
                        });
                })
                .catch(errorHandler);
        };

        function errorHandler(err) {
            $ctrl.status = "ERROR";
            $ctrl.error = err.data.errorMessage ? { message: err.data.errorMessage } : { message: err.data };
        }
    }
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("addStudentsModalStavropol", {
        templateUrl: "/components/add-students-modal/add-students-modal-stavropol.component.html",
        bindings: {
            id: "<"
        },
        controller: ["$http", "$q", "$route", "session", AddStudentsModalController]
    });

    function AddStudentsModalController($http, $q, $route, session) {
        var $ctrl = this;

        $ctrl.saved = false;

        $ctrl.regions = [];
        $ctrl.regionItem = null;

        $ctrl.schools = [];
        $ctrl.schoolItem = null;
        $ctrl.showSchoolsSelector = false;

        $ctrl.students = [];
        $ctrl.studentItem = null;

        $ctrl.$onInit = function() {
            $ctrl.user = session.getUser() || null;

            $http
                .get(apiRoot + "dict/okato_avers/values")
                .then(function(response) {
                    $ctrl.regions = response.data.map(function(region) {
                        region.readableName = region.name;
                        return region;
                    });
                })
                .catch(errorHandler);
        };

        $ctrl.filterRegionsList = function(userInput) {
            var filter = $q.defer();
            var normalisedInput = userInput ? userInput.toLowerCase() : "";

            var filteredArray = $ctrl.regions.filter(function(region) {
                return region.readableName.toLowerCase().indexOf(normalisedInput) !== -1;
            });

            filter.resolve(filteredArray);
            return filter.promise;
        }

        $ctrl.regionObjectSelected = function(item) {
            $ctrl.region = item;
            $ctrl.getSchools();
        }

        $ctrl.getSchools = function() {
            $http
                // .get('/mocks/avers_itu_GetOU.json')
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=avers_itu_GetOUV2&okato=" + $ctrl.region.value)
                .then(function(response) {
                    $ctrl.schools = response.data.map(function(school) {
                        school.readableName = school.name;
                        return school;
                    });
                    $ctrl.showSchoolsSelector = $ctrl.schools.length > 0;
                })
                .catch(errorHandler);
        }

        $ctrl.filterSchoolList = function(userInput) {
            $ctrl.saved = false;
            $ctrl.noStudents = false;

            var filter = $q.defer();
            var normalisedInput = userInput ? userInput.toLowerCase() : "";

            var filteredArray = $ctrl.schools.filter(function(school) {
                return school.readableName.toLowerCase().indexOf(normalisedInput) !== -1;
            });

            filter.resolve(filteredArray);
            return filter.promise;
        };

        $ctrl.schoolObjectSelected = function(item) {
            $ctrl.schoolItem = item;
            $ctrl.saved = false;
            $ctrl.noStudents = false;

            if (!$ctrl.user || !$ctrl.user.oAuthUser) {
                return;
            }

            var query =
                "&ouid=" + $ctrl.schoolItem.value +
                "&Surname=" + $ctrl.user.oAuthUser.lastName +
                "&Name=" + $ctrl.user.oAuthUser.firstName +
                "&Middlename=" + $ctrl.user.oAuthUser.middleName;

            $http
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=avers_itu_GetChildV2" + query)
                // .get('/mocks/avers_itu_GetChild.json')
                .then(function(response) {
                    $ctrl.students = response.data;
                })
                .catch(errorHandler);
        };

        $ctrl.addStudentsToUser = function() {
            $ctrl.saved = false;

            if ($ctrl.students.length === 0) {
                return ($ctrl.noStudents = true);
            }

            $http
                .post(
                    apiRoot + "me/child/",
                    $ctrl.students.map(function(student) {
                        student.ouId = $ctrl.schoolItem.value;
                        student.ouName = $ctrl.schoolItem.name;
                        student.childId = student.value;
                        student.name = student.name;
                        return student;
                    })
                )
                .then(function() {
                    jQuery("#" + $ctrl.id)
                        .modal("hide")
                        .on("hidden.bs.modal", function(e) {
                            $route.reload();
                        });
                })
                .catch(errorHandler);
        };

        function errorHandler(err) {
            $ctrl.status = "ERROR";
            $ctrl.error = err.data.errorMessage ? { message: err.data.errorMessage } : { message: err.data };
        }
    }
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("addStudentsModal", {
        templateUrl: "/components/add-students-modal/add-students-modal.component.html",
        bindings: {
            id: "<"
        },
        controller: ["$http", "$q", "$route", "session", AddStudentsModalController]
    });

    function AddStudentsModalController($http, $q, $route, session) {
        var $ctrl = this;

        $ctrl.saved = false;

        $ctrl.schools = [];
        $ctrl.schoolItem = null;

        $ctrl.students = [];
        $ctrl.studentItem = null;

        $ctrl.$onInit = function() {
            $ctrl.user = session.sessionData.user || null;

            $http
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=so_getOUV2")
                .then(function(response) {
                    $ctrl.schools = response.data.map(function(school) {
                        school.readableName = school.name;
                        return school;
                    });
                })
                .catch(errorHandler);
        };

        $ctrl.filterSchoolList = function(userInput) {
            $ctrl.saved = false;
            $ctrl.noStudents = false;

            var filter = $q.defer();
            var normalisedInput = userInput ? userInput.toLowerCase() : "";

            var filteredArray = $ctrl.schools.filter(function(school) {
                return school.readableName.toLowerCase().indexOf(normalisedInput) !== -1;
            });

            filter.resolve(filteredArray);
            return filter.promise;
        };

        $ctrl.schoolObjectSelected = function(item) {
            $ctrl.schoolItem = item;
            $ctrl.saved = false;
            $ctrl.noStudents = false;

            if (!$ctrl.user) {
                return;
            }

            $ctrl.snils = $ctrl.user.oAuthUser.snils.replace(/-/g, "").replace(/\s/g, "");

            var query = "&snils=" + $ctrl.snils + "&ouid=" + $ctrl.schoolItem.value;
            $http
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=so_getChildV2" + query)
                .then(function(response) {
                    $ctrl.students = response.data;
                })
                .catch(errorHandler);
        };

        $ctrl.addStudentsToUser = function() {
            $ctrl.saved = false;

            if ($ctrl.students.length === 0) {
                return ($ctrl.noStudents = true);
            }

            $http
                .post(
                    apiRoot + "me/child/",
                    $ctrl.students.map(function(student) {
                        student.ouId = $ctrl.schoolItem.value;
                        student.ouName = $ctrl.schoolItem.name;
                        student.childId = student.value;
                        student.name = student.name;
                        return student;
                    })
                )
                .then(function() {
                    jQuery("#" + $ctrl.id)
                        .modal("hide")
                        .on("hidden.bs.modal", function(e) {
                            $route.reload();
                        });
                })
                .catch(errorHandler);
        };

        function errorHandler(err) {
            $ctrl.status = "ERROR";
            $ctrl.error = err.data.errorMessage ? { message: err.data.errorMessage } : { message: err.data };
        }
    }
})();

(function () {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("addressComponent", {
        templateUrl: "/components/address/address.component.html",
        bindings: {
            "address": "<"
        },
        controller: ["$scope", function ($scope) {
            var $ctrl = this;
            $ctrl.address = $scope.address;
        }]
    });
}());

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("announcementView", {
        templateUrl: "/components/announcement-view/announcement-view.component.html",
        controller: ["AnnouncementService", "utils", "STATUS", "$location", "userStatusCovid19", function (AnnouncementService, utils, STATUS, $location, userStatusCovid19) {
            var $ctrl = this;

            $ctrl.userCovid19Info = userStatusCovid19.getUserCovid19Info();

            $ctrl.status = STATUS.LOADING;
            AnnouncementService.get().then(function (data) {
                $ctrl.announcement = data ? data : {};
                $ctrl.status = STATUS.READY;
            }).catch(utils.errorHandler($ctrl));

            $ctrl.isVisible = function () {
                return $ctrl.status === STATUS.READY && $ctrl.announcement.active
                    && ($location.path() === "/" || !$ctrl.announcement.mainOnly);
            };

            $ctrl.getStyles = function () {
                return $ctrl.announcement.style + " an-font" + $ctrl.announcement.fontSize;
            };
        }]
    });
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("appHeader", {
        templateUrl: "/components/app-header/app-header.html",
        controller: ["$rootScope", "session", "esiaAuth", "$location", "ROLES", Controller]
    });

    function Controller($rootScope, session, esiaAuth, $location, ROLES) {
        var $ctrl = this;

        $ctrl.user = session.sessionData.user || null;

        $ctrl.isLKOpen = false;
        $ctrl.toggleLKOpen = function() {
            if ($ctrl.user) {
                $ctrl.isLKOpen = !$ctrl.isLKOpen;
                return;
            }
            esiaAuth.login($location.url());
        };

        $ctrl.isMenuOpen = false;
        $ctrl.toggleMenu = function() {
            $ctrl.isMenuOpen = !$ctrl.isMenuOpen;
        };

        $ctrl.logout = function() {
            esiaAuth.logout($location.url());
        };

        /**
        $ctrl.esiaLoginWindow = null;

        $ctrl.isDept = session.hasRole(ROLES.DEPT);
        $ctrl.isAdmin = session.hasRole(ROLES.ADMIN);


        if ($ctrl.user != null && $ctrl.user.name != null) {
            var names = session.getUserName();
            $ctrl.title = names.shortOrgName ? names.shortOrgName : names.shortUserName;
        }



        $ctrl.logout = function() {
            esiaAuth.logout($location.path());
        };

        $ctrl.dropdown = function() {
            $ctrl.isOpen = $ctrl.isOpen ? "" : "is-open";
        };
        */

    }
})();

(function() {
    angular.module("rpgu.app").directive("app", [
        "session",
        "$localStorage",
        "$location",
        "$timeout",
        "ROLES",
        function(session, $localStorage, $location, $timeout, ROLES) {
            return {
                restrict: "E",
                transclude: {
                    'top': '?top',
                    'bottom': '?bottom'
                },
                scope: {
                    label: "@",
                    breadcrumb: "@",
                    showDigital: "@"
                },
                templateUrl: "/components/app.template.html",
                link: function($scope, $element, $attrs) {
                    $scope.includes = {
                        headerMobile: "/includes/header-mobile.tmpl.html",
                        headerDesktop: "/includes/header-desktop.tmpl.html",
                        footer: "/includes/footer.tmpl.html"
                    };

                    $scope.isIndex = $location.path().replace(window.context, "") === "/";

                    $scope.showDigital = angular.isDefined($scope.showDigital);
                    $scope.onlyDigital = $localStorage.onlyDigital ? $localStorage.onlyDigital : false;

                    $scope.showRgu =
                        $attrs && angular.isDefined($attrs.onlyDigital) && angular.isDefined($attrs.recieverType);

                    $element.addClass("app");

                    $scope.$watch("breadcrumb", function() {
                        $scope.breadcrumbs = [];
                        try {
                            var splited = ("" + $scope.breadcrumb).split(",");
                            jQuery.each(splited, function(i, item) {
                                item = item.split("|");
                                if (item.length == 1) {
                                    $scope.breadcrumbs.push({ label: item[0].trim() });
                                } else {
                                    $scope.breadcrumbs.push({
                                        label: item[0].trim(),
                                        href: context + "/" + item[1].trim()
                                    });
                                }
                            });
                        } catch (exception) {
                            warn(exception, "Breadcrumb format error");
                            $scope.breadcrumbs = [];
                        }
                    });

                    $scope.onlyDigitalChange = function() {
                        $localStorage.onlyDigital = $scope.onlyDigital;
                    };

                    $scope.viewLoaded = "is-load";

                    $scope.mobileApp = null;
                    // $timeout(function() {
                    //     if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                    //         $scope.mobileApp = "https://itunes.apple.com/ru/app/id1382887964";
                    //     } else if (/Android|webOS/i.test(navigator.userAgent)) {
                    //         $scope.mobileApp = "https://play.google.com/store/apps/details?id=ru.pkd.gosuslugi";
                    //     }
                    // }, 2000);

                    $scope.hideMobileApp = $localStorage.hideMobileApp;
                    $scope.doHideMobileApp = function () {
                        $scope.hideMobileApp = true;
                        $localStorage.hideMobileApp = true;
                    }
                }
            };
        }
    ]);
})();

angular.module("rpgu.app").directive('autoSubmitForm', ['$interpolate', function($complie) {
    return {
        replace: true,
        scope: {
            formData: '='
        },
        template: '',
        link: function($scope, element, $attrs) {
            $scope.$on($attrs['event'], function(event, data) {
                var formData = $scope.formData;
                var html = '<form action="' + formData.redirectUrl + '" method="' + formData.redirectMethod + '">';
                if($scope.formData.params) {
                    $scope.formData.params.forEach(function (param) {
                        html += '<input name="' + param.name + '" type="text" type="hidden" value="' + param.value + '"/>';
                    });
                }
                html += '</form>';
/*
                var form = $complie($('<form action="{{formData.redirectUrl}}" method="{{formData.redirectMethod}}">' +
                    '<div ng-repeat="param in formData.params"><input name="{{param.name}}" type="text" type="hidden" value="{{param.value}}"/></div></form>'))($scope);
*/
                //console.log(form);
                $(html).appendTo('body').submit();
            })
        }
    }
}]);
(function() {
    "use strict";

    angular.module("rpgu.app").directive("breadcrumbs", [
        "$localStorage",
        function($localStorage) {
            return {
                restrict: "A",
                templateUrl: "/components/breadcrumbs.tmpl.html",
                scope: {
                    links: "@"
                },
                link: function($scope, $element, $attrs) {
                    $scope.showDigital = angular.isDefined($scope.showDigital);
                    $scope.onlyDigital = $localStorage.onlyDigital || false;
                    $scope.onlyDigitalChange = function() {
                        $localStorage.onlyDigital = $scope.onlyDigital;
                    };
                    $scope.$watch("breadcrumb", function() {
                        try {
                            var splited = ("" + $scope.links).split(",");
                            $scope.links = [];
                            $.each(splited, function(i, item) {
                                item = item.split("|");
                                if (item.length == 1) {
                                    $scope.links.push({ label: item[0].trim() });
                                } else {
                                    $scope.links.push({
                                        label: item[0].trim(),
                                        href: "/" + item[1].trim()
                                    });
                                }
                            });
                        } catch (exception) {
                            console.log("Breadcrumb format error:" + exception);
                            $scope.links = [];
                        }
                    });
                }
            };
        }
    ]);
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("cabinet", {
        templateUrl: "/components/cabinet/cabinet.component.html",
        controller: ["$rootScope", "$scope", "session", "esiaAuth", "$location", "ROLES", CabinetController]
    });

    function CabinetController($rootScope, $scope, session, esiaAuth, $location, ROLES) {
        var $ctrl = this;

        $ctrl.esiaLoginWindow = null;

        $ctrl.isDept = session.hasRoleAny([ROLES.DEPT, ROLES.PENALTY, ROLES.COVID19]);
        $ctrl.isDeptWithoutCovid = session.hasRoleAny([ROLES.DEPT, ROLES.PENALTY]);
        $ctrl.isAdmin = session.hasRole(ROLES.ADMIN);

        $ctrl.user = session.sessionData.user || null;

        if ($ctrl.user != null && $ctrl.user.name != null) {
            var names = session.getUserName();
            $ctrl.title = names.shortOrgName ? names.shortOrgName : names.shortUserName;
        }

        function checkServiceRequestModifiedSinceLastLogin(noCache) {
            session.serviceRequestModifiedSinceLastLogin(noCache).then(function (data) {
                $ctrl.serviceRequestModifiedSinceLastLogin = data;
                //$ctrl.serviceRequestModifiedSinceLastLogin = 99;
            });
        }
        checkServiceRequestModifiedSinceLastLogin(false);

        var listener =  $rootScope.$on('checkServiceRequestModifiedSinceLastLogin', function (event, data) {
            checkServiceRequestModifiedSinceLastLogin(true);
        });

        $scope.$on('destroy', listener);


        $ctrl.login = function() {
            esiaAuth.login($location.url());
        };

        $ctrl.logout = function() {
            esiaAuth.logout($location.url());
        };

        $ctrl.dropdown = function() {
            $ctrl.isOpen = $ctrl.isOpen ? "" : "is-open";
        };

    }
})();

angular.module("rpgu.app").directive("datePicker", function () {
    return {
        restrict: 'E',
        scope: {
            ngRequired: "=",
            ngDisabled: "=",
            ngModel: "=",
            ngChange: "@",
            minDate: "=",
            maxDate: "="
        },
        require: "ngModel",
        templateUrl: '/components/datePicker.template.html',
        link: function ($scope, $element, $attrs, $ctrl) {
            $scope.datepickerOptions = {
                "clear-text": "Очистить"
            };
            $scope.state = {isOpen: false};
            $scope.date = moment.isMoment($scope.ngModel) ? $scope.ngModel.toDate() : null;
            /*$scope.$watch("ngModel", function () {
                $scope.date = moment.isMoment($scope.ngModel) ? $scope.ngModel.toDate() : null;
            });*/
            $scope.$watch("minDate", function () {
                $scope.min = moment.isMoment($scope.minDate) ? $scope.minDate.toDate() : null;
            });
            $scope.$watch("maxDate", function () {
                $scope.max = moment.isMoment($scope.maxDate) ? $scope.maxDate.toDate() : null;
            });

            $scope.open = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.state.isOpen = !$scope.state.isOpen;
            };
            $scope.onChange = function () {
                if($scope.date) {
                    if($scope.max && moment($scope.date).isAfter(moment($scope.max))) {
                        $scope.date = $scope.max;
                    }
                    if($scope.min && moment($scope.date).isBefore(moment($scope.min))) {
                        $scope.date = $scope.min;
                    }
                }
                //$ctrl.$setViewValue(moment($scope.date));
                $scope.ngModel = $scope.date && $scope.date instanceof Date ? moment($scope.date) : null;
                $scope.$parent.$eval($scope.ngChange);
            };
            $ctrl.$render = function () {
                $scope.date = moment.isMoment($scope.ngModel) ? $scope.ngModel.toDate() : null;
            }
        }
    }
});
(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("deleteStudentsModal", {
        templateUrl: "/components/delete-students-modal/delete-students-modal.component.html",
        bindings: {
            id: "<",
            students: "<"
        },
        controller: ["$http", "$route", DeleteStudentsModalController]
    });

    function DeleteStudentsModalController($http, $route) {
        var $ctrl = this;

        $ctrl.saved = false;
        $ctrl.students = [];

        $ctrl.chooseToDelete = function(student) {
            $ctrl.students = $ctrl.students.map(function(st) {
                if (st.ouId === student.ouId) {
                    st.toDelete = st.toDelete ? !st.toDelete : true;
                }
                return st;
            });
        };

        $ctrl.saveStudentsToUser = function() {
            $ctrl.saved = false;

            $ctrl.students.forEach(function(student) {
                if (student.toDelete) {
                    $http
                        .delete(apiRoot + "me/child/" + student.childId)
                        .then(function() {
                            jQuery("#" + $ctrl.id)
                                .modal("hide")
                                .on("hidden.bs.modal", function(e) {
                                    $route.reload();
                                });
                        })
                        .catch(errorHandler);
                }
            });
        };

        function errorHandler(err) {
            $ctrl.status = "ERROR";
            $ctrl.error = err.data.errorMessage ? { message: err.data.errorMessage } : { message: err.data };
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module('rpgu.app');

    app.component('footerAddress', {
        templateUrl: "/components/footer-address/footer-address.component.html",
        controller: [FooterAddressController]
    });

    function FooterAddressController() {
        var $ctrl = this;

        $ctrl.footerAddress = "Россия, Ставропольский край, г.Ставрополь, ул.Пирогова, д 18 / 6";
        $ctrl.technicalSupport = "Техподдержка: +7(8652) 748 - 768, +7(800) 200-8351";
    }

}());

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("gibddSettings", {
        templateUrl: "/components/gibdd-settings/gibdd-settings.component.html",
        controller: ["$routeParams", "$http", "session", GibddSettingsController]
    });

    function GibddSettingsController($routeParams, $http, session) {
        var $ctrl = this;

        $ctrl.$onInit = function() {
            $ctrl.fullName = session.getUserName().fullUserName;
            $ctrl.email = session.getUserEmail();

            if ($routeParams.scrollTo === "gibdd") {
                var $collapse = jQuery("#js-gibdd-collapse");
                $collapse.removeClass("closed");
                $collapse.show();
                jQuery("html, body").animate({ scrollTop: jQuery(document).height() }, "slow");
            }

            $http
                .get(apiRoot + "me/settings")
                .then(function(response) {
                    $ctrl.penalty = response.data.penalty ? response.data.penalty.checking : false;
                })
                .catch(function(err) {
                    warn(err);
                });
        };

        $ctrl.trusted = function() {
            return session.isTrusted() && session.isEmailVerified();
        };

        $ctrl.collapse = function() {
            var $collapse = jQuery("#js-gibdd-collapse");

            if ($collapse.hasClass("closed")) {
                $collapse.slideDown({
                    complete: function() {
                        jQuery(this).removeClass("closed");
                    }
                });
            } else {
                $collapse.slideUp({
                    complete: function() {
                        jQuery(this).addClass("closed");
                    }
                });
            }
        };

        $ctrl.savePenalty = function(decision) {
            if ($ctrl.email === "") {
                var $modal = jQuery("#gibdd-email-error-modal");
                $modal.find(".modal-title").text($ctrl.emailErrorText.notFound);
                $modal.modal("show");
            } else {
                $ctrl.collapse();
                $http
                    .post(apiRoot + "me/settings/penalty/" + decision)
                    .then(function(response) {
                        if (response.data.penalty) {
                            $ctrl.penalty = response.data.penalty.checking;
                        }
                    })
                    .catch(function(err) {
                        warn(err);
                    });
            }
        };

        $ctrl.emailErrorText = {
            notFound:
                "Для подключения возможности получения постановлений ЦАФАП ГИБДД " +
                "по электронной почте Вам необходимо указать Вашу электронную почту и подтвердить ее",
            notVerified:
                "Для подключения  возможности получения постановлений ЦАФАП ГИБДД " +
                "по электронной почте Вам необходимо подтвердить Вашу электронную почту"
        };
    }
})();

(function(){
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("infoPouTabs", {
        templateUrl: "/components/info-pou/info-pou-tabs.html",
        controller: ["$routeParams", Controller]
    });

    function Controller($routeParams) {
        var $ctrl = this;

        $ctrl.$onInit = function() {
            if ($routeParams.tab == "performance" || $routeParams.tab == "schedule") {
                return $ctrl.tab = "new";
            }
            $ctrl.tab = "new";
        };

        $ctrl.selectTab = function(tab) {
            $ctrl.tab = tab;
        };

        $ctrl.isSelected = function(tab) {
            return (tab == $ctrl.tab);
        }
    }

}());

(function () {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("infoPouBeta", {
        templateUrl: "/components/info-pou/info-pou.component.html",
        controller: ["$location", "$routeParams", "$http", "$window", InfoPouController]
    });

    function InfoPouController($location, $routeParams, $http, $window) {
        var $ctrl = this;

        if (!$routeParams.tab) {
            return $location.path($location.path()).search("tab", "performance");
        }

        $ctrl.addStudentsModalID = "add-students-modal";
        $ctrl.deleteStudentsModalID = "delete-students-modal";

        $ctrl.tabset = $routeParams.tab;
        $ctrl.students = [];
        $ctrl.selectedStudent = {

        };
        $ctrl.studentShedule = [];
        $ctrl.date = new Date();
        $ctrl.datepickerIsOpen = false;

        $ctrl.openCalendar = function (e) {
            e.preventDefault();
            e.stopPropagation();

            $ctrl.datepickerIsOpen = true;
        };

        $ctrl.$onInit = function () {
            $ctrl.status = "LOADING";
            $http
                .get(apiRoot + "me/child/")
                .then(function (response) {
                    $ctrl.status = "READY";
                    $ctrl.students = response.data;

                    var defaultStudent = $ctrl.students.find(function (student) {
                        return student._default === true;
                    });

                    $ctrl.studentSelect(defaultStudent || $ctrl.students[0]);
                })
                .catch(errorHandler);
        };

        $ctrl.studentSelect = function (student) {
            if (typeof student === "undefined") {
                return;
            }
            $ctrl.selectedStudent = student;

            var students = $ctrl.students.map(function (s) {
                s._default = student.childId === s.childId;
                return s;
            });

            $ctrl.status = "LOADING";

            $http
                .post(apiRoot + "me/child/", students)
                .then(function (response) {
                    $ctrl.status = "READY";

                    if (response.data.length > 0) {
                        $ctrl.students = response.data;
                        fetchSchedule($ctrl.selectedStudent);
                    }
                })
                .catch(errorHandler);
        };

        $ctrl.isDefaultStudent = function (student) {
            return student._default;
        };

        $ctrl.closePicker = function () {
            if (typeof $ctrl.selectedStudent !== "undefined" && $ctrl.selectedStudent !== null) {
                $ctrl.studentSelect($ctrl.selectedStudent);
            }
        };

        $ctrl.selectTab = function (setTab) {
            $location.path($location.path()).search("tab", setTab);
        };

        $ctrl.isSelected = function (checkTab) {
            return $ctrl.tabset === checkTab;
        };

        $ctrl.goBack = function () {
            $window.history.back();
        };

        function fetchSchedule(student) {
            var begin = moment($ctrl.date)
                .startOf("isoWeek")
                .format("YYYY-MM-DD");
            var end = moment($ctrl.date)
                .endOf("isoWeek")
                .format("YYYY-MM-DD");

            // avers_itu_GetInfo ouid=381_1&chid=894&s=2018-05-08&po=2018-06-08
            var query = "&ouid=" + student.ouId + "&childId=" + student.childId + "&start=" + begin + "&end=" + end;

            $ctrl.status = "LOADING";

            // забрать данные с json info-pou.json в корне проекта;
            // $.get("/info-pou.json").done(function(json){
            //     console.log(json)
            //     $ctrl.status = "READY";
            //     $ctrl.studentShedule = json;
            // });

            $http
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=avers_itu_GetInfoV2" + query)
                .then(function (response) {
                    $ctrl.status = "READY";
                    $ctrl.studentShedule = response.data;
                })
                .catch(errorHandler);
        }

        function errorHandler(err) {
            $ctrl.status = "ERROR";
            $ctrl.error = err.data.errorMessage ? {message: err.data.errorMessage} : {message: err.data};
        }
    }
})();

(function () {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("studentFinal", {
        templateUrl: "/components/info-pou/student-final/student-final.component.html",
        bindings: {
            student: "<"
        },
        controller: ["$http", Controller]
    });

    var rateColors = {
        1: "#C22253",
        2: "#F5831F",
        3: "#F5831F",
        4: "#60BC46",
        5: "#60BC46",
    };

    function Controller($http) {
        var $ctrl = this;
        $ctrl.periods = [];

        $ctrl.$onChanges = function $onChanges(changes) {
            if (changes.student && changes.student.currentValue) {
                handleStudentChanges(changes.student);
            }
        };

        $ctrl.isSelected = function isSelected(period) {
            if ($ctrl.period && period) {
                return $ctrl.period === period;
            }
            return false;
        };

        $ctrl.selectPeriod = function selectPeriod(period) {
            if (!period || period === $ctrl.period) {
                return null;
            }
            $ctrl.ratings = [];
            $ctrl.period = period;
            $ctrl.ratingsStatus = "LOADING";
            var query = "&ouid=" + $ctrl.student.ouId + "&chid=" + $ctrl.student.childId + "&period=" + period;
            $http
                .get(apiRoot + "remoteDict/values/custom?remoteDict_code=avers_itu_GetInfoPV2" + query)
                .then(function (response) {
                    var data = response.data;
                    if (_.isArray(data) && !_.isEmpty(data)) {
                        data = data.map(function (item) {
                            var mapped = mapRates(item.JournalRating);
                            return {
                                rates: mapped.rates,
                                avg: mapped.avg,
                                journalSubject: item.JournalSubject
                            }
                        });
                        $ctrl.ratings = data;
                    }
                    $ctrl.ratingsStatus = "READY";
                })
                .catch(errorHandler);
        };

        $ctrl.rateBGColor = function rateBGColor(rate) {
            return rateColors[Math.floor(Number(rate))];
        };

        function handleStudentChanges(studentChanges) {
            if (!_.isEqual(studentChanges.currentValue, studentChanges.previousValue)) {
                $ctrl.periods = [];
                $ctrl.period = null;
                $ctrl.ratings = [];
                $ctrl.periodsStatus = "LOADING";
                var query = "&ouid=" + $ctrl.student.ouId + "&chid=" + $ctrl.student.childId;
                $http
                    .get(apiRoot + "remoteDict/values/custom?remoteDict_code=avers_itu_GetPeriods" + query)
                    .then(function (response) {
                        var data = response.data;
                        if (_.isArray(data) && !_.isEmpty(data)) {
                            $ctrl.periods = data;
                            $ctrl.selectPeriod(data[0].value);
                        } else {
                            $ctrl.periods = [];
                        }
                        $ctrl.periodsStatus = "READY";
                    })
                    .catch(errorHandler);
            }
        }

        function errorHandler(err) {
            $ctrl.error = err.data && err.data.errorMessage
                ? {message: err.data.errorMessage}
                : {message: err};
        }

        function mapRates(ratings) {
            let avg = "";
            let regExpAvg = / *\((.+)\)/;
            let avgMath = ratings.match(regExpAvg);
            if (avgMath) {
                avg = avgMath[1];
            }

            let rates = ratings.replace(regExpAvg, "").split(/, */);
            return {
                avg: avg,
                rates: rates.map(function (rate, idx) {
                    return {
                        idx: idx,
                        value: rate
                    };
                })
            };
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("studentPerformanceDaytableMobile", {
        templateUrl: "/components/info-pou/student-performance/student-performance-daytable-mobile.component.html",
        bindings: {
            daydata: "<",
            dayname: "<",
            date: "<"
        },
        controller: [StudentPerformanceDaytableController]
    });

    function StudentPerformanceDaytableController() {
        var $ctrl = this;
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("studentPerformanceDaytable", {
        templateUrl: "/components/info-pou/student-performance/student-performance-daytable.component.html",
        bindings: {
            daydata: "<",
            dayname: "<",
            date: "<"
        },
        controller: [StudentPerformanceDaytableController]
    });

    function StudentPerformanceDaytableController() {
        var $ctrl = this;
    }
})();

(function () {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("studentPerformance", {
        templateUrl: "/components/info-pou/student-performance/student-performance.component.html",
        bindings: {
            tabledata: "<",
            date: "<"
        },
        controller: [StudentPerformanceController]
    });

    function StudentPerformanceController() {
        var $ctrl = this;
        $ctrl.tabledata = $ctrl.tabledata || [];

        $ctrl.$onChanges = function (changes) {
            if (changes.tabledata && changes.tabledata.currentValue) {
                $ctrl.daytable = $ctrl.tabledata.reduce(function (acc, data) {
                    var _date = data.date;
                    if (_date) {
                        var weekDay = moment(_date).isoWeekday();
                        if (!acc[weekDay]) {
                            acc[weekDay] = {
                                date: _date,
                                daydata: []
                            };
                        }
                        acc[weekDay].daydata.push(data);
                    }
                    return acc;
                }, {});
                $ctrl.ratings = $ctrl.tabledata.reduce(function (acc, data) {
                    acc = acc || {};
                    var rating = data.rating !== "" ? data.rating.split(" ") : [];
                    rating.forEach(function (val) {
                        if (val !== "") {
                            acc[val] = acc[val] || {};
                            acc[val].value = val;
                            acc[val].count = acc[val].count + 1 || 1;
                        }
                    });
                    return acc;
                }, {});
            }
        };

        $ctrl.isActiveDate = function (date, daytableDate) {
            return moment(date).isSame(daytableDate, "day");
        };
    }
})();


(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("studentSchedule", {
        templateUrl: "/components/info-pou/student-schedule/student-schedule.component.html",
        bindings: {
            tabledata: "<",
            date: "<"
        },
        controller: [StudentScheduleController]
    });

    function StudentScheduleController() {
        var $ctrl = this;
        $ctrl.tabledata = $ctrl.tabledata || [];
        $ctrl.$onChanges = function(changes) {
            if (changes.tabledata && changes.tabledata.currentValue) {
                $ctrl.daysdata = $ctrl.tabledata.reduce(function (acc, data) {
                    var _date = data.date;
                    if (_date) {
                        var weekDay = moment(_date).isoWeekday();
                        if (!acc[weekDay]) {
                            acc[weekDay] = {
                                date: _date,
                                schedule: []
                            };
                        }
                        acc[weekDay].schedule.push(data);
                    }
                    return acc;
                }, {});
            }
        };

        $ctrl.isActiveDate = function(date, daysdataDate) {
            if (date && daysdataDate) {
                return moment(date).isSame(daysdataDate, "day");
            }
            return false;
        };
    }
})();

angular.module("rpgu.app").directive("inputDropdown2", function () {
    return {
        restrict:    'E',
        scope:       {
            ngModel:     "=",
            callback: "=",
            placeholder: "@"
        },
        templateUrl: '/components/inputDropdown2.template.html',
        link:        function ($scope) {
            $scope.fnCallback = $scope.$parent.evalExpr($scope.callback);
            $scope.filter = function (userInput) {
                $scope.ngModel = userInput;
                return $scope.fnCallback(null, userInput).then(function (data) {
                    data = data.data;
                    data.forEach(function (item) {
                        item.readableName = item.name;
                    });
                    return data;
                });
            };
            $scope.selected = function (item) {
                $scope.ngModel = item.readableName;
            }
        }
    }
});

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("navCatalog", {
        templateUrl: "/components/navCatalog.component.html",
        controller: CabinetController
    });

    function CabinetController() {
        var $ctrl = this;
        $ctrl.open = function() {
            $ctrl.isOpen = !$ctrl.isOpen || false;
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("navRecepients", {
        templateUrl: "/components/navRecepients.component.html",
        controller: ["$localStorage", NavRecepientController]
    });

    function NavRecepientController($localStorage) {
        var $ctrl = this;

        $ctrl.dropdown = $ctrl.dropdown || false;

        switch ($localStorage.recieverType) {
            case undefined:
                $ctrl.recieverTypeName = "Все получатели";
                break;
            case "citizen":
                $ctrl.recieverTypeName = "Граждане";
                break;
            case "businessman":
                $ctrl.recieverTypeName = "Предприниматели";
                break;
            case "organization":
                $ctrl.recieverTypeName = "Организации";
                break;
            case "foreign":
                $ctrl.recieverTypeName = "Иностранные лица";
                break;
            case "nobody":
                $ctrl.recieverTypeName = "Лица без гражданства";
                break;
            default:
                $ctrl.recieverTypeName = "Все получатели";
                break;
        }

        $ctrl.changeRecieverType = function(newVal) {
            $localStorage.recieverType = newVal;
        };

        $ctrl.toggle = function() {
            $ctrl.dropdown = !$ctrl.dropdown;
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("newsList", {
        templateUrl: "/components/news/news-list/news-list.component.html",
        controller: ["$scope", "$location", "$http", NewsListController]
    });

    function NewsListController($scope, $location, $http) {
        var $ctrl = this;

        $ctrl.max = 9;
        $ctrl.skip = 0;

        $ctrl.includes = {
            compact: "/components/news-list/news-list.compact-tmpl.html",
            full: "/components/news-list/news-list.full-tmpl.html"
        };

        $ctrl.listView = $location.path() === "/" ? $ctrl.includes.compact : $ctrl.includes.full;

        $ctrl.goTo = function(newsID) {
            $location.path("/news/" + newsID);
        };

        $ctrl.$onInit = fetchData;

        $ctrl.pagination = fetchData;

        $scope.$watchGroup(["$ctrl.max", "$ctrl.skip"], function() {
            fetchData();
        });

        $ctrl.status = "READY";

        function fetchData() {
            $ctrl.status = "LOADING";

            var query = $location.path() === "/" ? "&limit=3&skip=0" : "&limit=" + $ctrl.max + "&skip=" + $ctrl.skip;

            $http
                .get(apiRoot + "news?active=true" + query)
                .then(function(response) {
                    $ctrl.news = response.data.list;
                    $ctrl.count = response.data.count;
                    $ctrl.status = undefined;
                })
                .catch(function(err) {
                    var data = err.data;
                    $ctrl.status = "ERROR";
                    $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module('rpgu.app');

    app.component('news', {
        templateUrl: "/components/news/news.component.html",
        controller: ["$scope", "$routeParams", "$location", "$http", "$sce", "$window", NewsController]
    });

    function NewsController($scope, $routeParams, $location, $http, $sce, $window) {
        var $ctrl = this;

        $ctrl.goBack = function() {
            $window.history.back();
        }

        $ctrl.$onInit = function() {
            $ctrl.status = 'LOADING';
            var oldBreadcrumb = $scope.$parent.$parent.breadcrumb;

            $http
                .get(apiRoot + "news/" + encodeURIComponent($routeParams.newsAlias))
                .then(function(response) {
                    $ctrl.status = "READY";

                    $ctrl.news = {};

                    _.extend($ctrl.news, {
                        header: response.data.header,
                        date: response.data.date,
                        thumbnail: response.data.thumbnail,
                        content: $sce.trustAsHtml(response.data.content)
                    });

                    $scope.$parent.$parent.breadcrumb = oldBreadcrumb.replace('[newsTitle]', $ctrl.news.header);
                })
                .catch(function(err) {
                    $ctrl.status = 'ERROR';

                    $ctrl.error = err.data.errorMessage ? { message: err.data.errorMessage } : { message: err.data };
                    $scope.$parent.$parent.breadcrumb = oldBreadcrumb.replace('[newsTitle]', err.data.errorMessage);
                })
        }
    }

}());

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("orgChooserModal", {
        templateUrl: "/components/org-chooser-modal/org-chooser-modal.html",
        controller: ["$rootScope", "$http", "session", "$localStorage", OrgChooserModalController],
    });

    function OrgChooserModalController($rootScope, $http, session, $localStorage) {
        var $ctrl = this;

        $ctrl.status = "OK";
        $ctrl.orgId = -1;

        $rootScope.$on("showOrgsModal", function() {
            $localStorage.orgsModalShown = true;
            $ctrl.status = "OK";
            $ctrl.orgId = session.getChosenOrg().oid || -1;
            $ctrl.fullUserName = session.getUserName().fullUserName; //$localStorage.fullUserName;
            $ctrl.orgs = session.getUserOrgs() || [];
            jQuery("#org-сhooser-modal").modal("show");
        });

        $ctrl.changeOrg = function(id) {
            $ctrl.orgId = id;
        }

        $ctrl.submitOrg = function() {
            $ctrl.closeModal();
            var prevOrgId = session.getChosenOrg().oid || -1;
            if (prevOrgId != $ctrl.orgId) {
                window.location.href = apiRoot + "oauth/org?id=" + $ctrl.orgId;
            }
        };

        $ctrl.closeModal = function() {
            jQuery("#org-сhooser-modal").modal("hide");
        };
    }
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("paymentWidget", {
        templateUrl: "/components/payment/payment-widget.html",
        bindings: {
            onChoose: "&",
            returnUrl: "<",
            serviceid: "<"
        },
        controller: ["$scope", "$http", "utils", Controller]
    });

    function Controller($scope, $http, utils) {
        var $ctrl = this;

        $ctrl.status = "ready";
        $ctrl.type = "list";

        $ctrl.$onInit = function init() {
            $ctrl.status = "loading"
            $http.get(apiRoot + "me/pays/as_dict")
                .then(function(data) {

                    // $ctrl.payments = data;
                    $ctrl.payments = [{"name":"Платеж 245,00 руб. от 10:39 13.11.2018, назначение: \"Заключение брака\", организация: \"Главное управление Министерства юстиции Российской Федерации по СК\"","value":"6c3e3d97-ebfa-40e8-9c5b-f2ef368ceb54"},{"name":"Платеж 245,00 руб. от 12:33 13.11.2018, назначение: \"Заключение брака\", организация: \"Главное управление Министерства юстиции Российской Федерации по СК\"","value":"6bf996eb-66bd-4576-9f38-f6243243f679"},{"name":"Платеж 245,00 руб. от 12:35 13.11.2018, назначение: \"Заключение брака\", организация: \"Главное управление Министерства юстиции Российской Федерации по СК\"","value":"539c1562-7b60-4a3d-8ab0-320da19cf695"},{"name":"Платеж 245,00 руб. от 11:09 14.11.2018, назначение: \"Заключение брака\", организация: \"Главное управление Министерства юстиции Российской Федерации по СК\"","value":"14d6cda7-9add-4762-b93c-7d15c80c0ce9"},{"name":"Платеж 245,00 руб. от 11:52 15.11.2018, назначение: \"Заключение брака\", организация: \"Главное управление Министерства юстиции Российской Федерации по СК\"","value":"4e0d1660-24b8-4fd7-9b3b-413fb710eae5"}];
                    $ctrl.status = "ready";
                })
                .catch(utils.errorHandler($ctrl, "status"))
        }

        $ctrl.togglePaymentType = function(type) {
            if (type == "manual") {
                $ctrl.uuid = null;
            }
            $ctrl.type = type;
        }

        $ctrl.paymentUrl = function() {
            return (
                '/personcab/payservice?serviceid=' +
                $ctrl.serviceid +
                ($ctrl.returnUrl ? ('&returnUrl=' + $ctrl.returnUrl) : "")
            );
        };

        $scope.$watch("$ctrl.uuid", _.debounce(function(uuid){
            $ctrl.onChoose({ val: uuid });
        }, 300));
    }

}());

(function() {
    "use strict";
    var app = angular.module('rpgu.app');

    app.component('popularServices', {
        templateUrl: "/components/popular-services/popular-services.component.html",
        controller: ["$http", PopularServicesController]
    });

    function PopularServicesController($http) {
        var $ctrl = this;

        $ctrl.$onInit = function() {
            $http
                .get("/pop-services." + "26" + ".json?build_date=2021-05-13T07:40:56.081Z")
                .then(function(response) {
                    $ctrl.services = response.data;
                })
                .catch(function(err) {
                    warn(err, "services loading error");
                });
        };
    }
}());

angular.module("rpgu.app").component("rguDocument", {
    templateUrl: "/components/rgu/rgu-document.html",
    bindings: {
        doc: "<"
    },
    controller: function () {
        this.getFileUrl = function(id) {
            return 'http://rgu.26gosuslugi.ru/RGU_WAR_2/servlet.gdnld?dfid=' + id;
        };
    }
});

(function() {
    angular.module("rpgu.app").directive("s1Autosize", s1Autosize);

    function s1Autosize(){
        return{
            restrict: "A",
            link: function($scope, element){
                if("textarea" == (""+element[0].tagName).toLowerCase()) {
                    autosize(element);
                }
            }
        }
    }
})();

(function() {
    angular.module("rpgu.app").directive("s1Paging", s1Paging);

    function s1Paging() {
        return {
            restrict: "E",
            transclude: true,
            scope: {
                skip: "=",
                max: "=",
                count: "="
            },
            templateUrl: "/components/s1Paging.template.html",
            link: function($scope) {
                $scope.useCount = true;
                $scope.skip = 0;
                $scope.max = "9";
                //                $scope.mathMin = Math.min;

                $scope.mathMin = function() {
                    return Math.min($scope.skip + Number($scope.max), $scope.count);
                };

                $scope.page = Math.floor($scope.skip / $scope.max) + 1;
                $scope.totalPages = Math.floor(($scope.count - 1) / $scope.max) + 1;
                $scope.$watch("page", function(value, oldValue) {
                    value = Number(value);
                    if (isNaN(value)) value = oldValue;
                    if ($scope.totalPages > 0) {
                        if (value < 1) value = 1;
                        else if (value > $scope.totalPages) value = $scope.totalPages;
                    }
                    $scope.page = Math.max(value, 1);
                    $scope.skip = Math.max(($scope.page - 1) * $scope.max, 0);
                });
                $scope.$watch("max", function(value, oldValue) {
                    if (value != oldValue) {
                        $scope.totalPages = Math.floor(($scope.count - 1) / $scope.max) + 1;
                        if ($scope.page > $scope.totalPages) $scope.page = Math.max($scope.totalPages, 1);
                    }
                });
                $scope.$watch("count", function(value, oldValue) {
                    if (value != oldValue) {
                        $scope.totalPages = Math.floor(($scope.count - 1) / $scope.max) + 1;
                        if ($scope.page > $scope.totalPages) $scope.page = Math.max($scope.totalPages, 1);
                    }
                });
            }
        };
    }
})();

(function() {
    s1Tab.$inject = ["$parse"];
    angular.module("rpgu.app").directive("s1Tab", s1Tab);

    function s1Tab($parse) {
        return {
            require: "^s1Tabset",
            restrict: "EA",
            replace: true,
            template: '<li ng-class="{active: active, disabled: disabled}">    <a ng-click="select()" s1-tab-heading-transclude>{{heading}}</a></li>',
            transclude: true,
            scope: {
                heading: "@",
                onSelect: "&select",
                onDeselect: "&deselect"
            },
            controller: function() {},
            compile: function(scope, element, transclude) {
                return function(scope, element, attrs, controller) {
                    var active, assign;
                    if(attrs.active) {
                        active = $parse(attrs.active);
                        assign = active.assign;
                        scope.$parent.$watch(active, function(value, oldValue) {
                            if(value != oldValue)
                                scope.active = !!value;
                        });
                        scope.active = active(scope.$parent)
                    } else {
                        assign = active = angular.noop
                    }
                    scope.$watch("active", function(value) {
                        assign(scope.$parent, value);
                        if(value) {
                            controller.select(scope);
                            scope.onSelect();
                        } else {
                            scope.onDeselect();
                        }
                    });
                    scope.disabled = false;
                    if(attrs.disabled) {
                        scope.$parent.$watch($parse(attrs.disabled), function(value) {
                            scope.disabled = !!value
                        });
                    }
                    scope.select = function() {
                        scope.disabled || (scope.active = !0)
                    };
                    controller.addTab(scope);
                    scope.$on("$destroy", function() {
                        controller.removeTab(scope)
                    });
                    scope.$transcludeFn = transclude;
                }
            }
        }
    }
})();

(function() {
    angular.module("rpgu.app").directive("s1TabContentTransclude", s1TabContentTransclude);

    function s1TabContentTransclude() {
        function a(a) {
            return a.tagName && (a.hasAttribute("tab-heading") || a.hasAttribute("data-tab-heading") || "tab-heading" === a.tagName.toLowerCase() || "data-tab-heading" === a.tagName.toLowerCase())
        }
        return {
            restrict: "A",
            require: "^s1Tabset",
            link: function(scope, element, attrs) {
                var content = scope.$eval(attrs.s1TabContentTransclude);
                content.$transcludeFn(content.$parent, function(b) {
                    angular.forEach(b, function(b) {
                        a(b) ? content.headingElement = b : element.append(b)
                    })
                })
            }
        }
    }
})();

(function() {
    angular.module("rpgu.app").directive("s1TabHeadingTransclude", s1TabHeadingTransclude);

    function s1TabHeadingTransclude() {
        return {
            restrict: "A",
            require: "^s1Tab",
            link: function(scope, element) {
                scope.$watch("headingElement", function(value) {
                    if(value) {
                        element.html("");
                        element.append(value);
                    }
                });
            }
        }
    }
})();

(function() {
    s1TabsetController.$inject = ["$scope"];
    angular.module("rpgu.app").controller("s1TabsetController", s1TabsetController);

    function s1TabsetController($scope) {
        var that = this,
            tabs = that.tabs = $scope.tabs = [];
        that.select = function(tab) {
            angular.forEach(tabs, function(tab) {
                tab.active = false;
            });
            tab.active = true;
        };
        that.addTab = function(tab) {
            tabs.push(tab);
            if(tabs.length == 1 || tab.active)
                that.select(tab);
        };
        that.removeTab = function(tab) {
            var index = tabs.indexOf(tab);
            if (tab.active && tabs.length > 1) {
                that.select(tabs[index == tabs.length - 1 ? index - 1 : index + 1])
            }
            tabs.splice(index, 1)
        };
    }
})();

(function() {
    angular.module("rpgu.app").directive("s1Tabset", s1Tabset);

    function s1Tabset() {
        return {
            restrict: "EA",
            transclude: true,
            replace: true,
            require: "^s1Tabset",
            scope: {},
            controller: ["$scope", function ($scope) {
                var that = this,
                    tabs = that.tabs = $scope.tabs = [];
                that.select = function(tab) {
                    angular.forEach(tabs, function(tab) {
                        tab.active = false;
                    });
                    tab.active = true;
                };
                that.addTab = function(tab) {
                    tabs.push(tab);
                    if(tabs.length == 1 || tab.active)
                        that.select(tab);
                };
                that.removeTab = function(tab) {
                    var index = tabs.indexOf(tab);
                    if (tab.active && tabs.length > 1) {
                        that.select(tabs[index == tabs.length - 1 ? index - 1 : index + 1])
                    }
                    tabs.splice(index, 1)
                };
            }],
            template: '<div class="tabbable" ng-class="{\'tabs-right\': direction == \'right\', \'tabs-left\': direction == \'left\', \'tabs-below\': direction == \'below\'}">  <div s1-tabset-titles="tabsAbove"></div>  <div class="tab-content">    <div class="tab-pane"         ng-repeat="tab in tabs"         ng-class="{active: tab.active}"         s1-tab-content-transclude="tab">    </div>  </div>  <div s1-tabset-titles="!tabsAbove"></div></div>',
            compile: function(element, attrs, tTransclude) {
                return function(scope, element, attrs, controller) {
                    scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
                    scope.type = angular.isDefined(attrs.type) ? scope.$parent.$eval(attrs.type) : "tabs";
                    scope.direction = angular.isDefined(attrs.direction) ? scope.$parent.$eval(attrs.direction) : "top";
                    scope.tabsAbove = "below" != scope.direction;
                    controller.$scope = scope;
                    controller.$transcludeFn = tTransclude
                }
            }
        }
    }
})();

(function() {
    angular.module("rpgu.app").directive("s1TabsetTitles", s1TabsetTitles);

    function s1TabsetTitles() {
        return {
            restrict: "A",
            require: "^s1Tabset",
            template: "<ul class=\"nav {{type && 'nav-' + type}}\" ng-class=\"{'nav-stacked': vertical}\"></ul>",
            replace: !0,
            link: function(scope, element, attrs, controller) {
                window.setTimeout(function() {
                    if(scope.$eval(attrs.s1TabsetTitles))
                        controller.$transcludeFn(controller.$scope.$parent, function(a) {
                            element.append(a)
                        });
                    else
                        element.remove();
                }, 0);
            }
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("searchForm", {
        templateUrl: "/components/search-form/search-form.component.html",
        bindings: {
            show: "<",
            onSearch: "&",
            placeholder: "@"
        },
        controller: ["$scope", Controller]
    });

    function Controller($scope) {
        var $ctrl = this;

        $ctrl.isShown = function() {
            return Boolean($ctrl.show);
        };

        $ctrl.handleSearch = function(val) {
            if (typeof $ctrl.search !== 'undefined') {
                $ctrl.onSearch({ val: String(val || "") });
            }
        };

        $scope.$watch("$ctrl.search", $ctrl.handleSearch);
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestArchive", {
        templateUrl: "/components/service-request/archive.component.html",
        controller: ["$scope", "$element", "$location", "REQUEST_STATUS", "ServiceRequest", Controller]
    });

    function Controller($scope, $element, $location, REQUEST_STATUS, ServiceRequest) {
        var $ctrl = this;
        $ctrl.REQUEST_STATUS = REQUEST_STATUS;

        $ctrl.max = 9;
        $ctrl.skip = 0;

        $ctrl.collapse = function(ID) {
            $element.find("." + ID).toggleClass("is-active");
        };

        $ctrl.copy = function(id) {
            ServiceRequest.old(id)
                .then(function(oldRequest){
                    var procedureID = _.property("id")(oldRequest.service);
                    var model = _.property("model")(oldRequest);
                    var type = oldRequest.service.formio ? "formio" : "schemaform";
                    if (procedureID) {
                        ServiceRequest.create(procedureID, type, model)
                            .then(function(data){
                                $location
                                    .path("/personcab/service-request/" + (data.type || type))
                                    .search({ idServiceRequest: (data.id || -1) });
                            });
                    }
                })
                .catch(errorHandler);
        }

        $ctrl.show = function(_id) {
            $location.path("/personcab/request").search("idServiceRequest", _id);
        };

        $ctrl.isEdit = function(request) {
            return request.statusList[request.statusList.length - 1].code == 0;
        };

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";
            ServiceRequest.oldList($ctrl.max, $ctrl.skip, $ctrl.search)
                .then(function(data) {
                    $ctrl.listCount = data.count;
                    $ctrl.requests = angular.forEach(data.list, function(req) {
                        req.date = moment(req.date).utc();
                        angular.forEach(req.statusList, function(status) {
                            status.date = moment(status.date).utc();
                            status.text = REQUEST_STATUS[status.code];
                        });
                    });
                    $ctrl.status = "READY";
                })
                .catch(errorHandler);
        };

        $ctrl.$onInit = $ctrl.fetch;
        $ctrl.pagination = $ctrl.fetch;

        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function() {
            if ($ctrl.listCount > 0) $ctrl.fetch();
        });


        $ctrl.onSearch = function(val) {
            if (typeof val === "string") $ctrl.search = val;
        };
        $scope.$watch("$ctrl.search", _.debounce($ctrl.fetch, 600));

        $ctrl.status = "READY";

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "archive.component.js")
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestFormio", {
        templateUrl: "/components/service-request/formio.component.html",
        controller: [
            "$scope",
            "$routeParams",
            "$location",
            "$timeout",
            "$http",
            "$q",
            "utils",
            "REQUEST_STATUS",
            "DigitalRGUService",
            "ServiceRequest",
            "$window",
            Controller
        ]
    });

    function calcFormio(idServiceRequest, template) {

        function recurse(obj) {
            if (obj.type == "file") {
                obj.storage = "url";
                obj.url = apiRoot + "serviceRequest/" + idServiceRequest + "/formioFileV2/";
            }
            if (obj.type == "datetime") {
                obj.defaultDate = moment(obj.defaultDate, ["YYYY-MM-DD", "DD-MM-YYYY"]);
            }
            if (obj.components) {
                obj.components.forEach(recurse);
            }
            if (obj.columns) {
                obj.columns.forEach(recurse);
            }
        }

        template.components.forEach(recurse);
    }

    function Controller(
        $scope, $routeParams, $location, $timeout, $http, $q, utils, REQUEST_STATUS, DigitalRGUService,
        ServiceRequest, $window
    ) {
        var $ctrl = this;

        $ctrl.reqId = $routeParams.idServiceRequest;
        $ctrl.saving = false;
        $ctrl.filled = false;
        $ctrl.sign = "NONE";
        $ctrl.request = {};
        $ctrl.mfcList = [];
        $ctrl.mfcReceiveSelected = null;

        try {
            $ctrl.isEditable = function isEditable() {
                if (_.has($ctrl.request, "statusList")) {
                    var currStatus = $ctrl.request.statusList[$ctrl.request.statusList.length - 1];
                    return currStatus.code === 0;
                }
                return false;
            };

            $ctrl.isErrorStatus = function isErrorStatus() {
                if (_.has($ctrl.request, "statusList")) {
                    return $ctrl.request.statusList[$ctrl.request.statusList.length - 1].code == 5;
                }
                return false;
            };

            $ctrl.isDoneStatus = function isDoneStatus() {
                if (_.has($ctrl.request, "statusList")) {
                    var code = $ctrl.request.statusList[$ctrl.request.statusList.length - 1].code;
                    return (code == 3 || code == 4);
                }
                return false;
            }

            $ctrl.ready = function ready() {
                return _.has($ctrl.request, "formTemplate") && $ctrl.status == "READY";
            }

            $ctrl.report = function report() {
                $ctrl.status = 'REPORT';
            };

            $ctrl.fetch = function fetch() {
                $ctrl.status = "LOADING";
                var serviceRequest;
                ServiceRequest.get($ctrl.reqId)
                    .then(function(response) {
                        if (response) {
                            if (!response.model.data) {
                                response.model.data = {};
                            }
                            calcFormio($ctrl.reqId, response.formTemplate);
                            serviceRequest = response;
                        }
                        return DigitalRGUService.get(serviceRequest.digitalRguServices);
                    })
                    .then(function(service) {
                        if ($ctrl.request.ulServiceRequest) {
                            $ctrl.sign = service.ulSign || "NONE";
                        } else {
                            $ctrl.sign = service.flSign || "NONE";
                        }
                        $ctrl.drgu = service;
                        $ctrl.smsStatusList = !_.isEmpty(service.smsStatusList)
                            ? service.smsStatusList.filter(Boolean).map(function(statusCode) {
                                if (statusCode) {
                                    return REQUEST_STATUS[statusCode];
                                }
                            })
                            : [];
                        $ctrl.emailStatusList = !_.isEmpty(service.emailStatusList)
                            ? service.emailStatusList.filter(Boolean).map(function(statusCode) {
                                if (statusCode) {
                                    return REQUEST_STATUS[statusCode];
                                }
                            })
                            : [];
                        if (!serviceRequest.receiveResultType) {
                            serviceRequest.receiveResultType = "SIMPLE";
                        }
                        $ctrl.request = serviceRequest;
                        if ($ctrl.drgu.mfcRecive) {
                            var query = "?idPsPassport=" + $ctrl.drgu.pspassport_id + "&idService=" + $ctrl
                                .drgu.st_id;
                            return $http.get(apiRoot + "getMfcList" + encodeURI(query))
                        } else {
                            return $ctrl.status = "READY";
                        }
                    })
                    .then(function(response) {
                        if (response) {
                            $ctrl.mfcList = response.data;
                            $ctrl.status = "READY";
                        }
                    })
                    .catch(errorHandler);
            };

            $scope.$on('wizardPage', function onWizardPage(event) {
                wizardProcess(event.targetScope.currentPage);
            });

            $scope.$on('wizardNext', function onWizardNext(event) {
                wizardProcess(event.targetScope.currentPage);
            });

            $scope.$on('fileUploaded', function onFileUploaded() {
                $ctrl.filled = false;
                $timeout(function() {
                    $ctrl.filled = true;
                }, 10);
            });

            $ctrl.isWizard = function isWizard() {
                return ($ctrl.request.formTemplate.display == "wizard");
            };

            $ctrl.wizardLastPage = function wizardLastPage() {
                var template = $ctrl.request.formTemplate;
                return (template.display == "wizard" && $ctrl.wizardPage == (template.numPages - 1));
            };

            $ctrl.isValid = function () {
                if (!_.has($ctrl.request, "formTemplate")) {
                    return false;
                }
                if ($ctrl.isWizard() && !$ctrl.wizardLastPage()) {
                    return false;
                }
                var payment = _.property('payment')($ctrl.drgu);
                if (payment && payment != "NONE" && !$ctrl.request.model.data.payUUID) {
                    return false;
                }
                return $ctrl.isFormValid();
            };

            $ctrl.isFormValid = function () {
                var data = $ctrl.getFormioData();
                return (data && data.$formController && data.$formController.$valid && $ctrl.filled) || false;
            };

            $ctrl.isFilled = function isFilled() {
                return $ctrl.filled || false;
            };

            $scope.$watch("$ctrl.request.model", function watchModelData(model) {
                var data = _.property('data')(model);
                if (data) {
                    $timeout(function() {
                        if (!_.isEmpty(data)) {
                            $ctrl.filled = true;
                        }
                    }, 100);
                }
            });

            $ctrl.isNeedSign = function isNeedSign() {
                return $ctrl.sign !== "NONE";
            };

            $ctrl.copy = function copy() {
                ServiceRequest.copy($ctrl.request._id)
                    .then(function(id) {
                        $location
                            .path("/personcab/service-request/" + $ctrl.request.type)
                            .search({ idServiceRequest: id });
                    })
                    .catch(errorHandler);
            };

            $ctrl.queue = function queue() {
                $ctrl.status = "LOADING";
                ServiceRequest.queue($ctrl.request.model)
                    .then(function(reqUrl) {
                        if ($ctrl.request.receiveResultType == "MFC") {
                            $ctrl.request.mfcReceive = $ctrl.mfcReceiveSelected || {};
                        }
                        return ServiceRequest.queuePut($ctrl.request, reqUrl, $ctrl.soapReq);
                    })
                    .then(function(response) {
                        $ctrl.status = "READY";
                        if (!response.data.paymentRequired) {
                            alert("Форма успешно поставлена в очередь на отправку.");
                            $location.path("/personcab/index").search("tab", "statement");
                        } else {
                            alert("Необходима оплата услуги. Вы будете перенаправлены на страницу оплаты.");
                            if (response.data.paymentUrl) {
                                $window.location.href = response.data.paymentUrl;
                            } else {
                                $location.path("/personcab/payservice").search({serviceid: $ctrl.drgu.st_id, idServiceRequest: $ctrl.request._id});
                            }
                        }
                    })
                    .catch(errorHandler);
            };

            $ctrl.showIF = function showIF(key) {
                if ($ctrl.isWizard() && !$ctrl.wizardLastPage()) {
                    return false;
                }
                return Boolean($ctrl[key]);
            };

            $ctrl.returnUrl = function returnUrl() {
                return $location.absUrl();
            };

            $ctrl.showPayment = function showPayment() {
                if (_.has($ctrl.drgu, "payment") && _.property('payment')($ctrl.drgu) != "NONE") {
                    return true;
                }
                return false;
            };

            $ctrl.onChoosePayment = function onChoosePayment(payUUID) {
                if (payUUID) {
                    $ctrl.request.model.data.payUUID = payUUID;
                }
            };

            $ctrl.signByCadesPlugin = function signByCadesPlugin() {
                $ctrl.signing = true;
                ServiceRequest.soap($ctrl.request._id, {
                        formId: $ctrl.request.formId,
                        model: angular.toJson($ctrl.request.model)
                    })
                    .then(function(response) {
                        $ctrl.soapReq = response;
                    })
                    .catch(errorHandler);
            };

            $ctrl.onSign = function onSign(data) {
                $ctrl.signing = false;
                if (data) {
                    $ctrl.soapReq = data;
                    $ctrl.queue();
                }
            };

            $ctrl.onCancelSign = function onCancelSign() {
                $ctrl.soapReq = null;
                $ctrl.signing = false;
            };

            $ctrl.handleSubmit = function handleSubmit() {
                if ($ctrl.request.receiveResultType == 'MFC' && !$ctrl.mfcReceiveSelected) {
                    return false;
                }

                $ctrl.submit();
            };

            $ctrl.submit = function submit() {
                if (!$ctrl.isEditable()) {
                    return;
                }
                if (!$ctrl.isFormValid()) {
                    $ctrl.showErrors();
                }
                if (!$ctrl.isValid()) {
                    return;
                }
                switch ($ctrl.sign.toUpperCase()) {
                    case "NONE":
                        {
                            $ctrl.queue();
                            break;
                        }
                    case "SIMPLE":
                        {
                            if (utils.checkTrusted()) {
                                $ctrl.queue();
                            }
                            break;
                        }
                    default:
                        {
                            $ctrl.signByCadesPlugin();
                        }
                }
            };

            $ctrl.getFormioData = function () {
                return $("form[name='formioForm']").data();
            };

            $ctrl.showErrors = function() {
                var data = $ctrl.getFormioData();
                data.$scope.checkErrors(data.$formController);
                data.$scope.formioAlerts = [{
                    type: 'danger',
                    message: 'Пожалуйста, исправьте неверно заполненные поля перед отправкой'
                }];
                $ctrl.formioAlerts = data.$scope.formioAlerts;
            };

            $ctrl.save = function save() {
                $ctrl.status = "LOADING";
                ServiceRequest.update($ctrl.request._id, {
                        formId: $ctrl.request.formId,
                        isSMSReceive: $ctrl.request.isSMSReceive,
                        isEmailReceive: $ctrl.request.isEmailReceive,
                        model: angular.toJson($ctrl.request.model)
                    })
                    .then($ctrl.fetch)
                    .catch(errorHandler);
            };

            $ctrl.$onInit = function onInit() {
                document.addEventListener("focusin", dadataEvent);
                $ctrl.fetch();
            };

            $ctrl.$onDestroy = function onDestroy() {
                document.removeEventListener("focusin", dadataEvent);
            };

            // function setDataValue(components, data, key, value) {
            //     components.forEach(function(component) {
            //         if (component.components && component.type != "datagrid") {
            //             data[component.key] = data[component.key] || {};
            //             setDataValue(component.components, data[component.key], key, value);
            //         }
            //     });
            //     data[key] = value;
            // }

            $ctrl.errorHandler = errorHandler;

        } catch (e) {
            console.warn(e);
        }

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "formio.component.js")
        }

        function wizardProcess(currentPage) {
            $ctrl.wizardPage = currentPage;
            if (currentPage > 0) {
                $timeout(function() {
                    $ctrl.filled = true;
                }, 10);
            }
        }

        function dadataEvent(ev) {
            var $elem = $(ev.target);
            var $elemID = $elem.prop("id");
            if ($elemID && $elemID.indexOf("jsDadataAddress") !== -1) {
                var $mod = $elemID.replace("jsDadataAddress", "");
                $elem.suggestions({
                    token: "5161206f58f8f82f083bf666557c70d0e4d4b2c8",
                    type: "ADDRESS",
                    count: 5,
                    /* Вызывается, когда пользователь выбирает одну из подсказок */
                    onSelect: function(suggestion) {
                        var fias = suggestion.data
                            ? {
                                fias_id: suggestion.data.fias_id,
                                country: suggestion.data.country,
                                postal_code: suggestion.data.postal_code,
                                region: suggestion.data.region,
                                city_district: suggestion.data.city_district,
                                city: suggestion.data.city,
                                settlement: suggestion.data.settlement,
                                street: suggestion.data.street,
                                house: suggestion.data.house,
                                block: suggestion.data.block,
                                flat: suggestion.data.flat
                            }
                            : {};
                        // $ctrl.request.model.data[$elemID] = suggestion.value;
                        $ctrl.request.model.data["jsDadataFias" + $mod] = fias;
                    }
                });
            }
        }

    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestHeader", {
        templateUrl: "/components/service-request/header.component.html",
        bindings: { request: "<" },
        controller: ["$scope", "REQUEST_STATUS", "DigitalRGUService", Controller]
    });

    function Controller($scope, REQUEST_STATUS, DigitalRGUService) {
        var $ctrl = this;

        $ctrl.REQUEST_STATUS = REQUEST_STATUS;

        $ctrl.status = {
            code: 0
        };
        $ctrl.service = {
            dept_title: "",
            service_title: ""
        };

        $ctrl.openRguUrl = function() {
            return (
                "rgu/service_view?id="
                + $ctrl.service.pspassport_id
                + "&rid="
                + $ctrl.service.service_id
                + "&tab=statement"
            );
        };

        $ctrl.fetch = function fetch(ID) {
            DigitalRGUService.get(ID)
                .then(function(service){
                    $ctrl.service = service;
                })
                .catch(errorHandler);
        }

        $ctrl.$onChanges = function(changes) {
            var curr = _.property("currentValue")(changes.request) || {};
            var prev = _.property("previousValue")(changes.request) || {};
            if (curr && (curr.digitalRguServices !== prev.digitalRguServices)) {
                $ctrl.fetch(curr.digitalRguServices);
            }
            if (curr.statusList !== prev.statusList) {
                $ctrl.status = curr.statusList[curr.statusList.length - 1];
            }
        }

        function errorHandler(e) {
            warn(e, "error in serviceRequestHeader");
            report(e, "forms-header.component.js");
        }

    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestList", {
        templateUrl: "/components/service-request/list.component.html",
        controller: ["$scope", "$rootScope", "$element", "$location", "session", "ServiceRequest", Controller]
    });

    function Controller($scope, $rootScope, $element, $location, session, ServiceRequest) {
        var $ctrl = this;

        $ctrl.max = 9;
        $ctrl.skip = 0;
        $ctrl.search = "";

        $ctrl.collapse = function(targetID) {
            $element.find("." + targetID).toggleClass("is-active");
        };

        $ctrl.isRecordAvailable = function(request) {
            return request.organization && !$ctrl.isErrorStatus(request);
        };

        $ctrl.deptLink = function(request) {
            return request.organization ?
                "/personcab/appointments_places?id=" + request.organization.id + "&service_id=" + request.service.pspassport_id :
                null;
        };

        $ctrl.copy = function(request) {
            ServiceRequest.copy(request._id)
                .then(function(data){
                    if (data.formChanged) {
                        alert("Форма заявления была изменена, будет использована новая незаполненная форма");
                    }
                    $location
                        .path("/personcab/service-request/" + request.type)
                        .search({ idServiceRequest: data.id });
                })
                .catch(errorHandler);
        };

        $ctrl.show = function(request) {
            $location
                .path("/personcab/service-request/" + request.type)
                .search({ idServiceRequest: request._id });
        };

        $ctrl.edit = function(request) {
            if (request.type) {
                $location
                    .path("/personcab/service-request/" + request.type)
                    .search({ idServiceRequest: request._id });
            }
        }

        $ctrl.delete = function(request) {
            var res = confirm("Вы уверены в удалении заявления \"" + request.service.service_title + "\"");
            if (res) {
                ServiceRequest.delete(request._id).then($ctrl.fetch);
            }
        };

        $ctrl.ratingUrl = function(request) {
            return request.ratingId
                ? "/personcab/requestRate?rating=" + request.ratingId
                : "/personcab/requestRate?request=" + request._id;
        };

        $ctrl.isRateable = function(request) {
            return request.statusList[request.statusList.length - 1].code != 0;
        };

        $ctrl.isEditable = function(request) {
            return request.statusList[request.statusList.length - 1].code == 0;
        };

        $ctrl.isErrorStatus = function(request) {
            return request.statusList[request.statusList.length - 1].code == 5;
        };

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";
            ServiceRequest.list($ctrl.search, $ctrl.max, $ctrl.skip)
                .then(function(data) {
                    $ctrl.listCount = data.count;
                    $ctrl.requests = data.list;
                    angular.forEach($ctrl.requests, ServiceRequest.setServiceInfo);
                    $ctrl.status = "READY";
                    $rootScope.$emit("checkServiceRequestModifiedSinceLastLogin");
                })
                .catch(errorHandler);
        };

        //$ctrl.$onInit = $ctrl.fetch;

        $ctrl.onSearch = function(val) {
            if (typeof val === "string") $ctrl.search = val;
        };
        $scope.$watch("$ctrl.search", _.debounce($ctrl.fetch, 600));

        $ctrl.pagination = $ctrl.fetch;
        $scope.$watchGroup(["$ctrl.skip", "$ctrl.max"], function() {
            if ($ctrl.listCount > 0) $ctrl.fetch();
        });

        $ctrl.status = "READY";

        $ctrl.report = function(request) {
            $ctrl.reportRequest = request;
            $ctrl.status = 'REPORT';
        };

        $ctrl.openAppealUrl = function(request) {
            return '/personcab/dos_appeal?idService=' +
                request.digitalRguServices + '&date=' +
                request.date.toISOString();
        };

        $ctrl.getLastStatus = function (request) {
            return request.statusList[request.statusList.length - 1];
        };

        $ctrl.getPaymentId = function (request) {
            var status = $ctrl.getLastStatus(request);
            if (status.code !== 30) {
                return null;
            }
            var regExp = /\d{25}/;
            var res = regExp.exec(status.comment);
            if (!res) {
                return null;
            }
            return res[0];
        };

        $ctrl.getSignedFile = function (fileName, files) {
            if (fileName.toLowerCase().endsWith(".sig")) {
                var originalFile = fileName.toLowerCase().substr(0, fileName.length - 4);
                return files.find(function (item) {
                    return item.filename.toLowerCase() === originalFile;
                });
            }
            return undefined;
        };

        $ctrl.isNeedPayment = function (request) {
            return $ctrl.getLastStatus(request).code === 30;
        };

        $ctrl.errorHandler = errorHandler;

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "service-request/list.component.js");
        }
    }
})();

(function() {
    "use strict";
    angular.module("rpgu.app").component("receiveResultType", {
        templateUrl: "/components/service-request/receiveResultType.component.html",
        bindings: {
            receiveResultType: "=",
            mfcReceiveSelected: "=",
            drgu: "<",
            mfcList: "<"
        },
        controller: ["$q", function ($q) {
            var $ctrl = this;

            $ctrl.setReceiveResultType = function (receiveResultType) {
                $ctrl.receiveResultType = receiveResultType;
            };

            $ctrl.searchMFC = function searchMFC(query) {
                var deferred = $q.defer();
                var data = $ctrl.mfcList.filter(function(item) {
                    return (item.name.indexOf(query) !== -1);
                });
                if (data.length > 0) {
                    deferred.resolve(data);
                } else {
                    deferred.resolve("Не найдено МФЦ");
                }
                return deferred.promise;
            };

            $ctrl.searchOption = function searchOption(item) {
                return item ? item.name : "";
            };

        }]
    });
})();

(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestReport", {
        templateUrl: "/components/service-request/report.component.html",
        bindings: {
            status: "=",
            request: "<",
            onError: "&"
        },
        controller: ["$scope", "session", "ServiceRequest", Controller]
    });

    function Controller($scope, session, ServiceRequest) {
        var $ctrl = this;

        $ctrl.reportData = {
            idRequest: null,
            fio: session.getUserName().fullUserName || "",
            email: session.getUserEmail() || "",
            phone: session.getUserPhone() || ""
        };

        $ctrl.sendReport = function() {
            $ctrl.status = "LOADING";
            ServiceRequest.report($ctrl.reportData)
                .then(function(){
                    $ctrl.status = "READY";
                    alert("Успешно отправлено.");
                })
                .catch(function(err){
                    report(err, "serviceRequestReport");
                    $ctrl.onError({ err: err });
                });
        }

        $scope.$watch("$ctrl.request", function(request){
            if (request) {
                $ctrl.reportData.idRequest = request._id;
                $ctrl.service = request.service;
            }
        })
    }
}());

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("serviceRequestSchemaform", {
        templateUrl: "/components/service-request/schemaform.component.html",
        controller: [
            "$scope",
            "$routeParams",
            "$location",
            "$sce",
            "$q",
            "$http",
            "$timeout",
            "utils",
            "REQUEST_STATUS",
            "DigitalRGUService",
            "ServiceRequest",
            "$window",
            Controller
        ]
    });

    function Controller(
        $scope, $routeParams, $location, $sce, $q, $http, $timeout, utils, REQUEST_STATUS, DigitalRGUService,
        ServiceRequest, $window
    ) {
        var $ctrl = this;

        $ctrl.reqID = $routeParams.idServiceRequest;
        $ctrl.saving = false;
        $ctrl.template = false;
        $ctrl.soapReq = null;
        $ctrl.sign = "NONE";
        $ctrl.submitting = false;
        $ctrl.request = {};
        $ctrl.receiveSelect = false;
        $ctrl.mfcList = [];
        $ctrl.errorHandler = errorHandler;
        $ctrl.mfcReceiveSelected = null;

        $ctrl.showIF = function showIF(key) {
            return Boolean($ctrl[key]);
        }

        $ctrl.isEditable = function() {
            if (_.has($ctrl.request, "statusList")) {
                var currStatus = $ctrl.request.statusList[$ctrl.request.statusList.length - 1];
                return currStatus.code === 0;
            }
            return false;
        };

        $ctrl.ready = function() {
            return (
                _.has($ctrl.request, "formTemplate")
                && _.has($ctrl.request.formTemplate, "schema")
                && _.has($ctrl.request.formTemplate, "form")
            );
        }

        $ctrl.isDoneStatus = function isDoneStatus() {
            if (_.has($ctrl.request, "statusList")) {
                var code = $ctrl.request.statusList[$ctrl.request.statusList.length - 1].code;
                return (code == 3 || code == 4);
            }
            return false;
        }

        $ctrl.isErrorStatus = function() {
            if (_.has($ctrl.request, "statusList")) {
                return $ctrl.request.statusList[$ctrl.request.statusList.length - 1].code == 5;
            }
            return false;
        };

        $ctrl.copy = function() {
            ServiceRequest.copy($ctrl.request._id)
                .then(function(id) {
                    $location
                        .path("/personcab/service-request/" + $ctrl.request.type)
                        .search({ idServiceRequest: id });
                })
                .catch(errorHandler);
        };

        $ctrl.report = function() {
            $ctrl.status = 'REPORT';
        };

        $ctrl.fetch = function() {
            $ctrl.status = "LOADING";
            return ServiceRequest.get($ctrl.reqID)
                .then(function(serviceRequest) {
                    $ctrl.request = serviceRequest;
                    if ($ctrl.request.date) {
                        $ctrl.request.date = moment($ctrl.request.date).utc();
                    }
                    $ctrl.populate();
                    return DigitalRGUService.get($ctrl.request.digitalRguServices);
                })
                .then(function(service) {
                    if ($ctrl.request.ulServiceRequest) {
                        $ctrl.sign = service.ulSign || "NONE";
                    } else {
                        $ctrl.sign = service.flSign || "NONE";
                    }
                    $ctrl.drgu = service;
                    $ctrl.smsStatusList = !_.isEmpty(service.smsStatusList)
                        ? service.smsStatusList.filter(Boolean).map(function(statusCode) {
                            if (statusCode) {
                                return REQUEST_STATUS[statusCode];
                            }
                        })
                        : [];
                    $ctrl.emailStatusList = !_.isEmpty(service.emailStatusList)
                        ? service.emailStatusList.filter(Boolean).map(function(statusCode) {
                            if (statusCode) {
                                return REQUEST_STATUS[statusCode];
                            }
                        })
                        : [];
                    if (!$ctrl.request.receiveResultType) {
                        $ctrl.request.receiveResultType = "SIMPLE";
                    }
                    if ($ctrl.drgu.mfcRecive) {
                        var query = "?idPsPassport=" + $ctrl.drgu.pspassport_id + "&idService=" + $ctrl.drgu.st_id;
                        return $http.get(apiRoot + "getMfcList" + encodeURI(query))
                    } else {
                        return $ctrl.status = "READY";
                    }
                })
                .then(function(response) {
                    if (response) {
                        $ctrl.mfcList = response.data;
                        $ctrl.status = "READY";
                    }
                })
                .catch(errorHandler);
        };

        $ctrl.isValid = function() {
            $scope.$broadcast("schemaFormValidate");
            if (_.has($ctrl, "form")) {
                return $ctrl.form.$valid;
            }
            return false;
        };

        $ctrl.queue = function() {
            $ctrl.status = "LOADING";
            ServiceRequest.queue($ctrl.request.model)
                .then(function(reqUrl) {
                    if ($ctrl.request.receiveResultType == "MFC") {
                        $ctrl.request.mfcReceive = $ctrl.mfcReceiveSelected || {};
                    }
                    return ServiceRequest.queuePut($ctrl.request, reqUrl, $ctrl.soapReq);
                })
                .then(function(response) {
                    $ctrl.status = "READY";
                    if (!response.data.paymentRequired) {
                        alert("Форма успешно поставлена в очередь на отправку.");
                        $location.path("/personcab/index").search("tab", "statement");
                    } else {
                        alert("Необходима оплата услуги. Вы будете перенаправлены на страницу оплаты.");
                        if (response.data.paymentUrl) {
                            $window.location.href = response.data.paymentUrl;
                        } else {
                            $location.path("/personcab/payservice").search({serviceid: $ctrl.drgu.st_id, idServiceRequest: $ctrl.request._id});
                        }
                    }
                })
                .catch(errorHandler);
        };

        $ctrl.showSigning = function() {
            return Boolean($ctrl.signing);
        };

        $ctrl.signByCadesPlugin = function() {
            $ctrl.template = false;
            $ctrl.signing = true;
            ServiceRequest.soap($ctrl.request._id, {
                    formId: $ctrl.request.formId,
                    model: angular.toJson($ctrl.request.model)
                })
                .then(function(response) {
                    $ctrl.soapReq = response;
                })
                .catch(errorHandler);
        };

        $ctrl.onSign = function(data) {
            if (data) {
                $ctrl.signing = false;
                $ctrl.soapReq = data;
                $ctrl.queue();
            }
        };

        $ctrl.onCancelSign = function() {
            $ctrl.soapReq = null;
            $ctrl.signing = false;
        };

        $ctrl.isNeedSign = function() {
            return ($ctrl.sign !== "NONE");
        };

        $ctrl.handleSubmit = function handleSubmit() {
            if ($ctrl.request.receiveResultType == 'MFC' && !$ctrl.mfcReceiveSelected) {
                return false;
            }
            $ctrl.submit();
        };

        $ctrl.submit = function() {
            $scope.$broadcast("schemaFormValidate");
            if (!$ctrl.isEditable() || !$ctrl.isValid()) {
                return $ctrl.errors = true;
            }
            switch ($ctrl.sign.toUpperCase()) {
                case "NONE":
                    {
                        $ctrl.queue();
                        break;
                    }
                case "SIMPLE":
                    {
                        if (utils.checkTrusted()) {
                            $ctrl.queue();
                        }
                        break;
                    }
                default:
                    {
                        $ctrl.signByCadesPlugin();
                    }
            }
        };

        $ctrl.save = function() {
            $ctrl.status = "LOADING";
            ServiceRequest.update($ctrl.request._id, {
                    formId: $ctrl.request.formId,
                    isSMSReceive: $ctrl.request.isSMSReceive,
                    isEmailReceive: $ctrl.request.isEmailReceive,
                    model: angular.toJson($ctrl.request.model)
                })
                .then($ctrl.fetch)
                .catch(errorHandler);
        };

        $ctrl.$onInit = function onInit() {
            document.addEventListener("focusin", clearErrors);
            document.addEventListener("focusin", dadataEvent);
            $ctrl.fetch();
        };

        $ctrl.$onDestroy = function onDestroy() {
            document.removeEventListener("focusin", clearErrors);
            document.removeEventListener("focusin", dadataEvent);
        };

        function clearErrors() {
            if ($ctrl.errors) {
                return $ctrl.errors = false;
            }
        }

        function dadataEvent(ev) {
            var $elem = $(ev.target);
            var dadataClass = $elem.parent().hasClass("dadata");
            if (dadataClass) {
                if (!$ctrl.request.model.dadata) {
                    $ctrl.request.model.dadata = {};
                }
                var $elemID = $elem.prop("id");
                $elem.suggestions({
                    token: "5161206f58f8f82f083bf666557c70d0e4d4b2c8",
                    type: "ADDRESS",
                    count: 5,
                    /* Вызывается, когда пользователь выбирает одну из подсказок */
                    onSelect: function(suggestion) {
                        var fias = suggestion.data
                            ? {
                                fias_id: suggestion.data.fias_id,
                                country: suggestion.data.country,
                                postal_code: suggestion.data.postal_code,
                                region: suggestion.data.region,
                                city_district: suggestion.data.city_district,
                                city: suggestion.data.city,
                                settlement: suggestion.data.settlement,
                                street: suggestion.data.street,
                                house: suggestion.data.house,
                                block: suggestion.data.block,
                                flat: suggestion.data.flat
                            }
                            : {};
                        // $ctrl.request.model.data[$elemID] = suggestion.value;
                        $ctrl.request.model.dadata[$elemID] = fias;
                    }
                });
            }
        }

        $ctrl.populate = function() {
            calcFields(
                $ctrl.request.formTemplate.form,
                $ctrl.request.model, !$ctrl.isEditable(),
                $ctrl.request.formTemplate.schema
            );
            emailReq($ctrl.request.formTemplate.schema);
            if ($ctrl.isEditable()) {
                $ctrl.request.model.flagTimes = false;
                $ctrl.request.model.date = undefined;
                $ctrl.request.model.time = undefined;
                setField($ctrl.request.formTemplate.form, "time", [
                    { name: "Выберите дату регистрации", value: "" }
                ]);
            }
        }

        $scope.changeFlagDates = function() {
            $ctrl.request.model.flagDates = false;
            setField($ctrl.request.formTemplate.form, "time", [{ name: "Выберите дату", value: "" }]);
            if ($ctrl.request.model.type && $ctrl.request.model.idZags) {
                $ctrl.request.model.time = undefined;
                $timeout(function() {
                    $ctrl.request.model.flagDates = true;
                }, 1);
            }
        };

        $scope.getDates = function() {
            var request = new XMLHttpRequest();
            request.open("GET", getDatesUrl($ctrl.request.model), false);
            request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            request.send(null);
            if (request.status === 200) {
                return angular.fromJson(request.responseText);
            } else {
                return [];
            }
        };

        $scope.fromKladr = function(fPath) {
            var fiasId = deep_value($ctrl.request.model, fPath);
            if (fiasId && fiasId !== '') {
                $http
                    .get("https://fias.pkd-dev.ru/kladr?query=" + fiasId)
                    .then(function(response) {
                        set_deep_value($ctrl.request.model, fPath, response.data.address.fullAddress);
                    })
                    .catch(function(err) {
                        warn(err, "https://fias.pkd-dev.ru/kladr?query=" + fiasId)
                    });
            }
        };

        $scope.setFromKladr = function(form, val) {
            console.log({ form: form, val: val });
            var keys = form.key.slice();
            keys.pop();
            var adr = eval("$scope.getModel()." + keys.join("."));
            $http
                .get("https://fias.pkd-dev.ru/kladr?query=" + val)
                .then(function(response) {
                    var data = response.data;
                    if (data.address && data.address.elements && data.address.elements.length > 0) {
                        data.address.elements.forEach(function(el) {
                            adr.gos = "Российская Федерация";
                            switch (el.level) {
                                case 1:
                                    adr.subGos = el.data + " " + el.shortType;
                                    if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                    break;
                                case 3:
                                    adr.rayon = el.data + " " + el.shortType;
                                    if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                    break;
                                case 4:
                                    adr.gorod = el.data + " " + el.shortType;
                                    if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                    break;
                                case 6:
                                    adr.nasPun = el.data + " " + el.shortType;
                                    if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                    break;
                                case 7:
                                    adr.street = el.data + " " + el.shortType;
                                    break;
                            }
                        });
                    } else {
                        adr.fiasID = undefined;
                        adr.manual = true;
                        $timeout(function() {
                            adr.manual = false;
                        }, 1);
                    }
                })
                .catch(function() {
                    adr.fiasID = undefined;
                    adr.manual = true;
                    $timeout(function() {
                        adr.manual = false;
                    }, 1);
                });
        };

        $scope.checkDuplicates = function(form, val, mess) {
            var keys = form.key.slice();
            var fName = keys.pop();
            var fIndex = keys.pop();
            var array = eval("$ctrl.request.model." + keys.join("."));
            var valuesSoFar = [];
            for (var i = 0; i < array.length; ++i) {
                var value = array[i][fName];
                if (valuesSoFar.indexOf(value) !== -1) {
                    alert(mess ? mess : "Значения не должны повторяться!");
                    array[fIndex] = undefined;
                    return;
                }
                valuesSoFar.push(value);
            }
            return;
        };

        $scope.getModel = function() {
            return $ctrl.request.model;
        };

        $scope.isBlock = function() {
            if ($ctrl.request && $ctrl.request.formTemplate.blockConditions) {
                return $scope.$eval(
                    "(" + $ctrl.request.formTemplate.blockConditions.join(") || (") + ")"
                );
            }
            return false;
        };

        $scope.prepareGet = function(options) {
            var params = "";
            if (options.httpGet && options.httpGet.variables) {
                params = "?";
                options.httpGet.variables.forEach(function(item, i, arr) {
                    var p = item.param.toString();
                    var v =
                        item.value.toString().indexOf("model.") == 0
                        ? $ctrl.request.model[item.value.toString().split(".")[1]]
                        : item.value.toString();
                    params = params + p + "=" + v;
                    if (i < arr.length - 1) {
                        params += "&";
                    }
                });
            }
            options.httpGet.url = options.httpGet.url + params;
            if (options.httpGet.url.indexOf("http") != 0) {
                options.httpGet.url = (context || "") + options.httpGet.url;
            }
            return options;
        };

        $scope.createPay = function() {
            $ctrl.save();
            $location.path("/personcab/payservice").search({
                serviceid: $ctrl.drgu.service_id // $scope.request.service_id,
            });
        };

        $scope.findFiasAsync = utils.findFiasAsync;

        $scope.findFias = function(options, search) {
            if (search.length > 3) {
                var request = new XMLHttpRequest();
                request.open("GET", "https://fias.pkd-dev.ru/fias?query=" + encodeURIComponent(search),
                    false);
                request.send(null);
                if (request.status === 200) {
                    var res = angular.fromJson(request.responseText);
                    return res;
                } else {
                    return [];
                }
            } else {
                return [];
            }
        };

        $scope.$watch("$ctrl.request.model.date", function(value, oldValue) {

            if (value != oldValue && $ctrl.isEditable) {
                var model = $scope.getModel();
                model.time = undefined;
                var request = new XMLHttpRequest();
                request.open("POST", apiRoot + "zags_zb/times", false); // `false` makes the request synchronous
                request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                request.send(
                    JSON.stringify({
                        idZags: model.idZags,
                        type: model.type,
                        date: model.date,
                        remoteDict_id: model.idTimesDict
                    })
                );
                if (request.status === 200) {
                    var list = angular.fromJson(request.responseText);
                    if (list.length == 0) {
                        list = [{ name: "Нет свободного времени для регистрации", value: "" }];
                    }
                    setField($ctrl.request.formTemplate.form, "time", list);
                    model.flagTimes = true;
                } else {
                    console.log(request.responseText);
                }
            }
        });

        $ctrl.status = "READY";

        /*  проверяет с помощью бекенда допустимый размер файла
        function isFilesSizeExceeded() {
            var request = new XMLHttpRequest();
            request.open("GET", apiRoot + "serviceRequest/v2/" + $ctrl.reqID + "/filesSize", false);
            request.send(null);
            if (request.status === 200) {
                if (request.responseText > $scope.request.serviceForm.filesSizeLimit) {
                    alert(
                        "Превышен максимальный размер прикрепляемых файлов" +
                            "\n" +
                            "Текущий размер: " +
                            (request.responseText / (1024 * 1024)).toFixed(3) +
                            " МБ" +
                            "\n" +
                            "Максимальный размер: " +
                            ($scope.request.serviceForm.filesSizeLimit / (1024 * 1024)).toFixed(3) +
                            " МБ"
                    );
                    return true;
                } else {
                    return false;
                }
            } else {
                return true;
            }
        }
        */

        function getDatesUrl(model) {
            return apiRoot
                + "remoteDict/values/custom?remoteDict_id="
                + model.idDatesDict
                + "&idZags="
                + model.idZags
                + "&type="
                + model.type;
        }

        function setField(fields, key, value) {
            if (fields) {
                fields.forEach(function(field) {
                    if (field.type == "fieldset" || field.type == "section") {
                        setField(field.items, key, value);
                    } else if (field.key && field.key.toString() == key) {
                        $timeout(function() {
                            field.titleMap = value;
                        }, 1);
                    }
                });
            }
        }

        function calcFields(fields, dataModel, isReadOnly, schema) {
            if (!fields || fields.length < 1) {
                return;
            }
            fields.forEach(function(field) {
                if (field.type == "fieldset" || field.type == "section") {
                    calcFields(field.items, dataModel, isReadOnly, schema);
                } else {
                    if (field.type == "nwpFileUpload") {
                        field.endpoint = apiRoot + "serviceRequest/v2/" + $ctrl.reqID + "/" + field.key;
                        try {
                            var nwp_schema = eval(
                                "schema.properties."
                                + field.key
                                .toString()
                                .split(",")
                                .join(".")
                                .split(".")
                                .join(".properties.")
                            );
                            if (nwp_schema && !nwp_schema.maxSize) {
                                field.schema = nwp_schema;
                                field.schema.maxSize = {
                                    maximum: "5MB",
                                    validationMessage: "Превышен допустимый размер файла: ",
                                    validationMessage2: "Текущий размер файла: "
                                };
                            }
                        } catch (err) {
                            warn(err, "error in calcFields");
                        }
                        if (isReadOnly) {
                            field.type = "help";
                            var val = eval("dataModel." + field.key.toString().split(",").join("."));
                            if (typeof val !== "undefined") {
                                var filename = val.filename;
                                var url = val.url;
                                field.helpvalue = function() {
                                    return $sce.trustAsHtml(
                                        "<div class='file-upload'><div class='row mb'><div class='col-sm-4 mb-sm'><label title='Предпросмотр' class='text-info'>Предпросмотр</label>"
                                        + "<img src='"
                                        + url
                                        + "' class='img-thumbnail img-responsive'></div>"
                                        +
                                        "<div class='col-sm-4 mb-sm'><label title='Имя файла' class='text-info'>Имя файла</label>"
                                        + "<a download='"
                                        + url
                                        + "' href='"
                                        + url
                                        + "' target='_blank'>"
                                        + "<span class='filename' title='Скачать файл'>"
                                        + filename
                                        + "</span></a><br></div></div></div>"
                                    );
                                }.call(undefined);
                            } else {
                                field.helpvalue = function() {
                                    return $sce.trustAsHtml(
                                        "<div class='alert alert-success'>Нет загруженных файлов для просмотра</div>"
                                    );
                                }.call(undefined);
                            }
                        }
                    }
                    if (typeof field.minAge !== "undefined") {
                        field.dateOptions.maxDate = new Date().getTime() - 31536000000 * field.minAge;
                    }
                    if (typeof field.maxAge !== "undefined") {
                        field.dateOptions.minDate = new Date().getTime() + 31536000000 * field.maxAge;
                    }
                    if (typeof field.options !== "undefined" && field.options.asyncCallback === "findFiasAsync") {
                        // var fPath = field.key.toString().split(",").join(".");
                        // $scope.fromKladr(fPath);
                        /**
                         * !!!
                         * заменена работа метода findFiasAsync на внешний сервис DADATA, так как старый сервис перестал работать
                         */
                        field.type = "text";
                        field.htmlClass = "dadata";
                    }
                    if (typeof field.dateOptions !== "undefined") {
                        field.dateOptions.autoclose = true;
                        if (field.dateOptions.startView == "undefined") {
                            field.dateOptions.startView = 0;
                        }
                    }
                    if ((field.type == "strapcustom" || field.type == "uiselect") && isReadOnly) {
                        field.type = "text";
                    }
                    if (field.type == "radiobuttonsvertical" && isReadOnly) {
                        field.type = "help";
                        field.helpvalue = function() {
                            return $sce.trustAsHtml(
                                "<p><b>"
                                + field.title
                                + ": </b><br>"
                                + parseTimeZags(dataModel[field.key])
                                + "</p>"
                            );
                        }.call(undefined);
                    }
                    if (
                        field.onChange
                        && (field.onChange.indexOf("function") == 0 || field.onChange.indexOf("$scope.")
                            == 0)
                    ) {
                        field.onChange = eval("(" + field.onChange + ")");
                    }
                }

            });
        }

        function deep_value(obj, path) {
            path = path.split(".");
            var len = path.length;
            for (var i = 0; i < len; i++) {
                obj = obj[path[i]];
            }
            return obj;
        }

        function set_deep_value(obj, path, value) {
            var i;
            path = path.split(".");
            for (i = 0; i < path.length - 1; i++) obj = obj[path[i]];
            obj[path[i]] = value;
        }

        function parseTimeZags(value) {
            var res = "",
                start, end, min;
            if (value != undefined && value.indexOf("<hourZB>") != -1) {
                start = value.indexOf("<hourZB>") + 8;
                end = value.indexOf("</hourZB>");
                res = res + value.substring(start, end);
                start = value.indexOf("<minZB>") + 7;
                end = value.indexOf("</minZB>");
                min = value.substring(start, end);
                if (min == "0") {
                    min = "00";
                }
                res = res + ":" + min;
            }
            if (value != undefined && value.indexOf("<hourQue>") != -1) {
                start = value.indexOf("<hourQue>") + 9;
                end = value.indexOf("</hourQue>");
                res = res + value.substring(start, end);
                start = value.indexOf("<minQue>") + 8;
                end = value.indexOf("</minQue>");
                min = value.substring(start, end);
                if (min == "0") {
                    min = "00";
                }
                res = res + ":" + min;
            }
            return res;
        }

        function emailReq(schema) {
            if (_.has(schema.properties, "requestor.properties.person.properties.email.required")) {
                schema.properties.requestor.properties.person.properties.email.required = false;
            }
        }

        function errorHandler(err) {
            var data = err.data || err;
            $ctrl.status = "ERROR";
            $ctrl.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
            report(data, "service-request/schemaform.component.js");

        }
    }

}());

(function() {
    angular.module("rpgu.app").directive('sfDateMask', function() {
	return {
	    restrict: 'A',
	    require: 'ngModel',
		link: function (scope, elem, attrs, controller) {
			var mask = '99-99-9999';
			var format = attrs.dateFormat;
			if (format.indexOf(".") != -1) mask = "99.99.9999";
			else if (format.indexOf("-") != -1) mask = "99-99-9999";
			else if (format.indexOf("/") != -1) mask = "99/99/9999";
			$(elem).inputmask(mask);

			elem.bind('keyup', function() {
				 controller.$setViewValue(elem.val());
                // do not call $render() since cursor will make this move to end
			});

            elem.bind('focus', function() {
                controller.$setViewValue(elem.val());
                controller.$render();
            });

            elem.bind('blur', function() {
                controller.$setViewValue(controller.$viewValue);
                controller.$render();

                if (controller.$viewValue && controller.$viewValue.length > 0) {
                    var value = controller.$viewValue;
                    controller.$setValidity('', value && value.indexOf('_') > -1 ? false : true);
                }
            });

            controller.$formatters.push(function(value) {
                controller.$setViewValue(value);
                controller.$render();

                if (controller.$viewValue && controller.$viewValue.length > 0) {
                    var value = controller.$viewValue;
                    controller.$setValidity('', value && value.indexOf('_') > -1 ? false : true);
                }
                else
                    controller.$setPristine();
					controller.$setValidity('', true); // false

                return value;
            });

		}
	};
});
})();

(function() {
    sfDatePicker.$inject = ["$http", "$routeParams", "session", "ROLES", "STATUS", "$window"];
    angular.module("rpgu.app").directive("sfDatePicker", sfDatePicker);
    function sfDatePicker($http, $routeParams, session, ROLES, STATUS, $window) {
        return {
            restrict: 'E',
            scope: {
				dateFormat: "@", // формат представления даты (dd-MM-yyyy)
				dateAutoclose: "@", // автозакрытие (1)
				dateView: "@", // номер представления (2)
                dateTitle: "@", // шапка поля
                dateType: "@", // тип данных (string)
                minDate: "@", // мин дата (date)
                maxDate: "@", // макс дата (date)
                placeHolder: "@", // подсказка
                ngRequired: "@", // required
                ngDisabled: "@", // disabled
				extView: "@", // формат представления год: 0 - год + 12   1 - год - 12
                ngModel: "="
            },
			require:  'ngModel',
            templateUrl: '/components/sfDatePicker.template.html',
            link: function ($scope, $element, $attrs, $ctrl) {
				$scope.dataModel = moment.isDate($scope.ngModel) ? $scope.ngModel : undefined;

                $scope.vMask = function (format) {
                    var value;
                    if (format.indexOf(".") != -1) value = "День.Месяц.Год";
                    else if (format.indexOf("-") != -1) value = "День-Месяц-Год";
                    return value;
                };

				$scope.err_desc = {
                    default: "* Введите правильную дату в формате " + $scope.vMask($scope.dateFormat),
                    required: "* Это поле обязательное для заполнения"
                };
				$scope.description = $scope.err_desc.default;

                // при первоначальной прогрузке datapicker просто необходимо указывать
                // отформатированное значение даты в date-value
                // иначе будет ошибка валидации

                if(($scope.dateFormat !== undefined) && ($scope.dateFormat !== null) && ($scope.dateFormat != ""))
                {
                    $scope.dateFormat = (($scope.dateFormat.indexOf("dd.MM.yyyy") != -1) || ($scope.dateFormat.indexOf("dd-MM-yyyy") != -1)) ?
                        $scope.dateFormat : "dd-MM-yyyy";
                }

                // смотрит на соответвие форматов между датой и компонентой moment
                // компонент strap datepicker в модели возвращает значение уже оформатирование
                // но не формат date
                $scope.checkFormat = function (format) {
                    var value;
                    if (format.indexOf("dd.MM.yyyy") != -1) value = "DD.MM.YYYY";
                    else if (format.indexOf("dd-MM-yyyy") != -1) value = "DD-MM-YYYY";
                    return value;
                };

                $scope.showTitle = function () {
                    var result = false;
                    if(!angular.isUndefined($scope.dateTitle)) result = true;
                    return result;
                };

                // модель поменялась
                $scope.onChange = function() {
                    if (($scope.dataModel !== undefined)) {
                        var mask = $scope.checkFormat($scope.dateFormat);
                        if (moment($scope.dataModel, [mask]).isValid()) {
                            $scope.ngModel = moment($scope.dataModel, [mask, "YYYY-MM-DD"]).toDate();

                            if($scope.max && moment($scope.dataModel, mask).isAfter(moment($scope.max))) {
                                $scope.dataModel = $scope.max;
                            }
                            else if($scope.min && moment($scope.dataModel, mask).isBefore(moment($scope.min))) {
                                $scope.dataModel = $scope.min;
                            }
                        }
                    }
                };

                $scope.$watch("minDate", function () {
                    $scope.min = moment.isDate($scope.minDate) ? $scope.minDate : null;
                });
                $scope.$watch("maxDate", function () {
                    $scope.max = moment.isDate($scope.maxDate) ? $scope.maxDate : null;
                });
            }
        }
    }
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("signCades", {
        templateUrl: "/components/sign-cades/sign-cades.html",
        bindings: {
            data: "<",
            onSign: "&",
            onCancel: "&",
        },
        controller: ["$scope", "$window", "$timeout", Controller]
    });

    function Controller($scope, $window, $timeout) {
        var $ctrl = this;

        $ctrl.plugin = {};
        $ctrl.certs = [];
        $ctrl.signing = false;

        $ctrl.pluginReady = function() {
            return Boolean($ctrl.plugin.status);
        };

        $ctrl.$onInit = function() {
            $window.cadesplugin.then(function() {
                if ($window.cadesplugin.CreateObjectAsync) {
                    var pluginInfo = {},
                        userCerts = [];
                    $window.initCadesPlugin_Async(pluginInfo).then(function() {
                        if ($ctrl.certs.length == 0) {
                            $window.getCertList_Async(function(certs) {
                                userCerts = certs;
                                $timeout(function() {
                                    $ctrl.certs = userCerts;
                                }, 50);
                            });
                        }
                        $timeout(function() {
                            $ctrl.plugin = pluginInfo;
                        }, 50);
                    });
                } else {
                    $timeout(function() {
                        $window.initCadesPlugin_NPAPI($scope.cadesinfo);
                        if ($scope.certs.length == 0) $scope.certs = $window.getCertList_Cades();
                    }, 50);
                }
            });
        };

        $ctrl.signCades = function(cert) {
            if ($ctrl.data) {
                $ctrl.signing = true;
                var data = angular.copy($ctrl.data);
                if ($window.cadesplugin.CreateObjectAsync) {
                    $window.signCadesPlugin_Async(data, cert)
                        .then(function(result) {
                            $ctrl.signing = false;
                            $ctrl.onSign({ val: result });
                        })
                        .catch(warn);
                } else {
                    cert = $window.GetCertificate_NPAPI(cert);
                    try {
                        data = $window.signCadesPlugin_NPAPI(data, cert);
                    } catch (e) {
                        alert("Ошибка подписи: " + e.message);
                        warn(e);
                        return;
                    }
                    $ctrl.signing = false;
                    $ctrl.onSign({ val: data });
                }
            }
        }
    }

}());

(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("statusWrapper", {
        templateUrl: "/components/status-wrapper/status-wrapper.component.html",
        bindings: {
            status: "<",
            error: "<"
        },
        transclude : true,
        controller: ["$scope", "$element", Controller]
    });

    function Controller($scope, $element) {
        var $ctrl = this;
    }

}());

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("topHeaderMenu", {
        templateUrl: "/components/top-header-menu/top-header-menu." + "26" + ".component.html",
        controller: [TopHeaderMenuController]
    });

    function TopHeaderMenuController() {}
})();

(function() {
    "use strict";
    angular.module("rpgu.app").component("certInfo", {
        templateUrl: "/components/verify-cades/cert-info.html",
        bindings: {
            value: "<",
        }
    });
}());

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("verifyCades", {
        templateUrl: "/components/verify-cades/verify-cades.html",
        bindings: {
            sign: "<",
            signedFile: "<",
            onReady: "&"
        },
        controller: ["$scope", "$window", "$uibModal", Controller]
    });

    function Controller($scope, $window, $uibModal) {
        var $ctrl = this;


        $ctrl.showModal = function () {
            $uibModal.open({
                templateUrl: '/components/verify-cades/modal.html',
                size: 'lg',
                controllerAs: '$ctrl',
                resolve: {
                    sign: function () {
                        return $ctrl.sign;
                    },
                    signedFile: function () {
                        return $ctrl.signedFile;
                    }
                },
                controller: function ($uibModalInstance, sign, signedFile, $q, $http, STATUS) {
                    var $ctrl = this;
                    $ctrl.plugin = {};
                    $ctrl.verifing = false;
                    $ctrl.sign = sign;
                    $ctrl.signedFile = signedFile;
                    $ctrl.cert = null;
                    $ctrl.status = STATUS.READY;
                    $ctrl.error = null;

                    $ctrl.$onInit = function() {
                        $window.signVersion().then(function (version) {
                            $scope.$apply(function () {
                                $ctrl.plugin.version = version;
                                // Загружаем файлы
                                $ctrl.status = STATUS.LOADING;
                                $q.all({
                                    signedFileData: $http.get($ctrl.signedFile.url, {responseType: 'arraybuffer'}),
                                    signData: $http.get($ctrl.sign.url)
                                }).then(function (res) {
                                    $ctrl.status = STATUS.READY;
                                    var data = $ctrl.toBase64(res.signedFileData.data);
                                    $window.signVerifyPKCS7(res.signData.data, data).then(function (res) {
                                        $scope.$apply(function () {
                                            console.log(res);
                                            $ctrl.cert = res;
                                            $ctrl.certSubjectNameMap = $ctrl.getMap($ctrl.cert.subjectName);
                                            $ctrl.certIssuerNameMap = $ctrl.getMap($ctrl.cert.issuerName);
                                        });
                                    }).catch(function (err) {
                                        $scope.$apply(function () {
                                            $ctrl.plugin.error = err;
                                        });
                                    });
                                }, function (err) {
                                    $ctrl.status = STATUS.ERROR;
                                    $ctrl.error = err;
                                });
                            });
                        }).catch(function (err) {
                            $scope.$apply(function () {
                                $ctrl.plugin.error = err;
                            });
                        });
                    };
                    $ctrl.getMap = function (value) {
                        var res = {};
                        value.split(", ").forEach(function (line) {
                            var fields = line.match("^([^=]+)=(.+)$");
                            if (fields) {
                                res[fields[1]] = fields[2];
                            }
                        });
                        return res;
                    };
                    $ctrl.toBase64 = function(arrayBuffer) {
                        var u8 = new Uint8Array(arrayBuffer);
                        var b64encoded = btoa([].reduce.call(new Uint8Array(arrayBuffer),function(p,c){return p+String.fromCharCode(c)},''));
                        return b64encoded;
                    }
                    $ctrl.close = function () {
                        $uibModalInstance.close();
                    };
                }
            });
        };


        $ctrl.verify = function (data, sign) {
            debugger;
        }

/*
        $ctrl.signCades = function(cert) {
            if ($ctrl.data) {
                $ctrl.signing = true;
                var data = angular.copy($ctrl.data);
                if ($window.cadesplugin.CreateObjectAsync) {
                    $window.signCadesPlugin_Async(data, cert)
                        .then(function(result) {
                            $ctrl.signing = false;
                            $ctrl.onSign({ val: result });
                        })
                        .catch(warn);
                } else {
                    cert = $window.GetCertificate_NPAPI(cert);
                    try {
                        data = $window.signCadesPlugin_NPAPI(data, cert);
                    } catch (e) {
                        alert("Ошибка подписи: " + e.message);
                        warn(e);
                        return;
                    }
                    $ctrl.signing = false;
                    $ctrl.onSign({ val: data });
                }
            }
        }
*/
    }

}());

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.controller("MainController", [
        "$scope",
        "$rootScope",
        "$routeParams",
        "$location",
        "$localStorage",
        "session",
        "esiaAuth",
        MainController
    ]);

    function MainController($scope, $rootScope, $routeParams, $location, $localStorage, session, esiaAuth) {
        var $mainCtrl = this;

        $mainCtrl.$context = window.context;
        $mainCtrl.$routeParams = $routeParams;

        $mainCtrl.view = "loading";

        $mainCtrl.user = session.sessionData.user || null;

        $scope.$on("$viewContentLoaded", function() {
            $mainCtrl.view = undefined;
        });

        $mainCtrl.login = function() {
            esiaAuth.login();
        };

        $rootScope.$on("userLogin", function() {
            if ($localStorage.orgsModalShown) {
                return null;
            }
            var orgs = session.getUserOrgs();
            if (orgs && orgs.length > 0) {
                $rootScope.$emit("showOrgsModal");
            }
        });

    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("request", [
        "$http",
        "$timeout",
        "$routeParams",
        "$location",
        "STATUS",
        "REQUEST_STATUS",
        "$sce",
        "$q",
        "session",
        "utils",
        "$templateCache",
        RequestController
    ]);

    function RequestController(
        $http,
        $timeout,
        $routeParams,
        $location,
        STATUS,
        REQUEST_STATUS,
        $sce,
        $q,
        session,
        utils,
        $templateCache
    ) {
        return {
            restrict: "E",
            templateUrl: "/deprecated/request/request.template.html",
            link: function($scope) {
                $scope.tab = $routeParams.tab;
                $scope.type = $routeParams.tab;
                $scope.idServiceRequest = $routeParams.idServiceRequest;
                $scope.rUrl = $routeParams.rUrl;

                $scope.sessionUserId = session.sessionData.user.id;
                $scope.thisPage = window.location.href;
                $scope.saving = false;
                $scope.certs = [];
                $scope.block = true;

                $scope.selectTab = function(setTab) {
                    var params = _.extend(_.pick($routeParams, ["tab", "idServiceRequest", "rUrl"]), {
                        tab: setTab
                    });
                    $location.path($location.path()).search(params);
                };

                $scope.canAsync;
                $scope.isEditable;
                $scope.signer;
                $scope.form = { data: null };

                $scope.signCades = function(certValue) {
                    if ($scope.canAsync) {
                        window.signCadesPlugin_Async($scope.soapReq, certValue).then(
                            function(result) {
                                $scope.soapReq = result;
                                console.log("signed soapReq Async: \n" + $scope.soapReq);
                                if ($scope.isNeedSignTwoCabinet()) {
                                    alert(
                                        "Успешно поставлена подпись первого заявителя." +
                                        "\n" +
                                        "Необходимо поставить подпись второго заявителя."
                                    );
                                    $scope.putWaitSecondSign();
                                } else if ($scope.signer && $scope.signer == "1") {
                                    alert(
                                        "Успешно поставлена подпись первого заявителя." +
                                        "\n" +
                                        "Необходимо поставить подпись второго заявителя."
                                    );
                                    $scope.signer = "2";
                                    $timeout(function() {
                                        $scope.$apply();
                                    }, 1);
                                } else {
                                    $scope.queue();
                                }
                            },
                            function(result) {
                                alert("Error: " + result);
                            }
                        );
                    } else {
                        var cert = window.GetCertificate_NPAPI(certValue);
                        try {
                            $scope.soapReq = window.signCadesPlugin_NPAPI($scope.soapReq, cert);
                        } catch (e) {
                            alert("Ошибка подписи: " + e.message);
                            console.log(e.message);
                            return;
                        }
                        console.log("signed soapReq NPAPI: \n" + $scope.soapReq);
                        if ($scope.isNeedSignTwoCabinet()) {
                            alert(
                                "Успешно поставлена подпись первого заявителя.-Необходимо поставить подпись второго заявителя."
                            );
                            $scope.putWaitSecondSign();
                        } else if ($scope.signer && $scope.signer == "1") {
                            alert(
                                "Успешно поставлена подпись первого заявителя." +
                                    "\n" +
                                    "Необходимо поставить подпись второго заявителя."
                            );
                            $scope.signer = "2";
                        } else {
                            $scope.queue();
                        }
                    }
                };

                $scope.isBlock = function() {
                    if ($scope.request && $scope.request.serviceForm.schemaform.blockConditions) {
                        return $scope.$eval(
                            "(" + $scope.request.serviceForm.schemaform.blockConditions.join(") || (") + ")"
                        );
                    }
                    return false;
                };

                $scope.isNeedSign = function() {
                    if ($scope.request && $scope.request.serviceForm.schemaform.signConditions) {
                        return $scope.$eval(
                            "(" + $scope.request.serviceForm.schemaform.signConditions.join(") || (") + ")"
                        );
                    }
                    return false;
                };

                $scope.isNeedSignTwice = function() {
                    if ($scope.request && $scope.request.serviceForm.schemaform.signConditionsTwice) {
                        return $scope.$eval(
                            "(" + $scope.request.serviceForm.schemaform.signConditionsTwice.join(") || (") + ")"
                        );
                    }
                    return false;
                };

                $scope.isNeedSignTwoCabinet = function() {
                    if (
                        $scope.request &&
                        $scope.reqStatus.code != 101 &&
                        $scope.request.serviceForm.schemaform.signConditionsTwoCabinet
                    ) {
                        return $scope.$eval(
                            "(" + $scope.request.serviceForm.schemaform.signConditionsTwoCabinet.join(") || (") + ")"
                        );
                    }
                    return false;
                };

                $scope.isSelected = function(checkTab) {
                    return $scope.tab === checkTab;
                };

                $scope.template = false;
                $scope.REQUEST_STATUS = REQUEST_STATUS;
                $scope.status = STATUS.LOADING;

                $http
                    .get(apiRoot + "serviceRequest/" + $scope.idServiceRequest)
                    .then(function(response) {
                        var data = response.data;
                        $scope.status = STATUS.READY;
                        if (!data.model) {
                            data.model = {};
                        }
                        if (data.date) {
                            data.date = moment(data.date).utc();
                        }
                        $scope.reqStatus = data.statusList[data.statusList.length - 1];
                        $scope.isEditable = $scope.reqStatus.code == 0;
                        $scope.request = data;

                        if ($scope.isFormio()) {
                            calcFormio($scope.request.serviceForm.formio);
                            $scope.request.model = { data: $scope.request.model };

                            // Задать значение для вложенных компонентов рекурсивно

                            setDataValue(
                                $scope.request.serviceForm.formio.components,
                                $scope.request.model.data,
                                "samlUser",
                                session.sessionData.user.samlUser
                            );
                        } else {
                            calcFields(
                                data.serviceForm.schemaform.form,
                                data.model,
                                !$scope.isEditable,
                                data.serviceForm.schemaform.schema
                            );

                            emailReq(data.serviceForm.schemaform.schema);
                            if ($scope.request.serviceForm.schemaform.blockConditions) {
                                $scope.request.serviceForm.schemaform.blockConditions = $scope.request.serviceForm.schemaform.blockConditions.map(
                                    function(cond) {
                                        return cond.replace(new RegExp("model.", "g"), "request.model.");
                                    }
                                );
                            }
                            if ($scope.request.serviceForm.schemaform.signConditions) {
                                $scope.request.serviceForm.schemaform.signConditions = $scope.request.serviceForm.schemaform.signConditions.map(
                                    function(cond) {
                                        return cond.replace(new RegExp("model.", "g"), "request.model.");
                                    }
                                );
                            }
                            if ($scope.request.serviceForm.schemaform.signConditionsTwice) {
                                $scope.request.serviceForm.schemaform.signConditionsTwice = $scope.request.serviceForm.schemaform.signConditionsTwice.map(
                                    function(cond) {
                                        return cond.replace(new RegExp("model.", "g"), "request.model.");
                                    }
                                );
                            }
                            if ($scope.request.serviceForm.schemaform.signConditionsTwoCabinet) {
                                $scope.request.serviceForm.schemaform.signConditionsTwoCabinet = $scope.request.serviceForm.schemaform.signConditionsTwoCabinet.map(
                                    function(cond) {
                                        return cond.replace(new RegExp("model.", "g"), "request.model.");
                                    }
                                );
                            }
                            // for zags
                            if ($scope.isEditable) {
                                $scope.request.model.flagTimes = false;
                                $scope.request.model.date = undefined;
                                $scope.request.model.time = undefined;
                                setField($scope.request.serviceForm.schemaform.form, "time", [
                                    { name: "Выберите дату регистрации", value: "" }
                                ]);
                            }
                        }
                        if (
                            $scope.reqStatus.code == 101 &&
                            $scope.sessionUserId != $scope.request.userId &&
                            !$scope.request.model.isSimpleSign
                        ) {
                            $scope.signer = "2";
                            $scope.sign();
                        }
                    })
                    .catch(console.warn);

                $scope.createPay = function() {
                    $scope.save();
                    window.location.href = context + "/personcab/payservice?serviceid=" + $scope.request.service.id;
                };

                $scope.getModel = function() {
                    if ($scope.isFormio()) {
                        var res = angular.copy($scope.request.model.data);
                        // Убрать значение для вложенных компонентов рекурсивно

                        unsetDataValue($scope.request.serviceForm.formio.components, res, "samlUser");
                        return res;
                    } else {
                        return $scope.request.model;
                    }
                };

                $scope.save = function() {
                    console.log($templateCache);
                    $scope.template = false;
                    $scope.saving = true;
                    $http
                        .put(apiRoot + "serviceRequest/" + $scope.idServiceRequest, {
                            formId: $scope.request.formId,
                            model: JSON.stringify($scope.getModel())
                        })
                        .then(function(data) {
                            $scope.saving = false;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.saving = false;
                            console.error({
                                ref: "$scope.save",
                                err: data.errorMessage ? data.errorMessage : data
                            });
                        });
                };

                $scope.backToDraft = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "serviceRequest/" + $scope.idServiceRequest + "/toDraft")
                        .then(function() {
                            location.reload();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                        });
                };

                $scope.sign = function() {
                    $scope.template = false;
                    $scope.signing = true;
                    $scope.block = true;
                    if (!$scope.signer || $scope.signer == "1") {
                        $http
                            .put(apiRoot + "serviceRequest/" + $scope.idServiceRequest + "/soap", {
                                formId: $scope.request.formId,
                                model: JSON.stringify($scope.getModel())
                            })
                            .then(function(data) {
                                data = data.data;
                                $scope.soapReq = data;
                                $scope.loadCadesPlugin();
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.signing = false;
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                            });
                    } else if ($scope.reqStatus.code == 101 && $scope.signer == "2") {
                        $scope.soapReq = $scope.reqStatus.soapReq;
                        $scope.loadCadesPlugin();
                    }
                };

                $scope.loadCadesPlugin = function() {
                    console.log("start loading cades");
                    $scope.cadesinfo = {};
                    var canPromise = !!window.Promise;
                    if (canPromise) {
                        window.cadesplugin.then(function() {
                            $scope.canAsync = !!window.cadesplugin.CreateObjectAsync;
                            if ($scope.canAsync) {
                                window.initCadesPlugin_Async($scope.cadesinfo).then(function() {
                                    if ($scope.certs.length == 0) {
                                        window.getCertList_Async($scope.certs);
                                    }
                                    $timeout(function() {
                                        $scope.$apply();
                                    }, 500);
                                });
                            } else {
                                $timeout(function() {
                                    window.initCadesPlugin_NPAPI($scope.cadesinfo);
                                    if ($scope.certs.length == 0) $scope.certs = window.getCertList_Cades();
                                }, 500);
                            }
                        });
                    } else {
                        $timeout(function() {
                            window.initCadesPlugin_NPAPI($scope.cadesinfo);
                            if ($scope.certs.length == 0) $scope.certs = window.getCertList_Cades();
                        }, 500);
                    }
                };

                $scope.submitForm = function() {
                    $scope.template = false;
                    if ($scope.reqStatus.code != 0 && $scope.reqStatus.code != 5) {
                        alert("Неверный статус заявления.");
                        return;
                    }
                    $scope.$broadcast("schemaFormValidate");
                    if ($scope.form.data && !$scope.form.data.$valid) {
                        alert("Форма заполнена неверно.");
                        return;
                    }
                    if (
                        $scope.request.serviceForm.filesSizeLimit &&
                        $scope.request.serviceForm.filesSizeLimit > 0 &&
                        isFilesSizeExceeded()
                    )
                        return;
                    if ($scope.isNeedSign() && $scope.getModel().isSimpleSign) {
                        if ($scope.checkTrusted()) {
                            $scope.queue();
                        }
                    } else if ($scope.isNeedSignTwoCabinet() && $scope.getModel().isSimpleSign) {
                        if ($scope.checkTrusted()) {
                            $scope.putWaitSecondSign();
                        }
                    } else if ($scope.isNeedSign()) {
                        $scope.sign();
                    } else if ($scope.isNeedSignTwice() || $scope.isNeedSignTwoCabinet()) {
                        $scope.signer = "1";
                        $scope.sign();
                    } else {
                        $scope.queue();
                    }
                };

                $scope.checkTrusted = function() {
                    try {
                        if (session.sessionData.user.samlUser.person.personTrusted != "Y") {
                            alert(
                                "Отправка заявления возможна только для пользователей с подтвержденной учетной записью"
                            );
                            return false;
                        }
                    } catch (e) {
                        alert("Отправка заявления возможна только для пользователей с подтвержденной учетной записью");
                        console.log(e.message);
                        return false;
                    }
                    return true;
                };

                $scope.queue = function() {
                    $scope.status = STATUS.LOADING;
                    var model = $scope.getModel();
                    if (model.idPropertyMapTypeToUrl && model.type) {
                        $http
                            .get(apiRoot + "dict/" + model.idPropertyMapTypeToUrl + "/values")
                            .then(function(data) {
                                data = data.data;
                                var url;
                                data.forEach(function(item) {
                                    if (item.name == model.type) {
                                        url = item.value;
                                    }
                                });
                                $scope.queuePut(url);
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.READY;
                            });
                    } else {
                        $scope.queuePut(null);
                    }
                };

                $scope.submitSecond = function() {
                    if ($scope.checkTrusted()) {
                        $scope.queuePut(null);
                    }
                };

                $scope.queuePut = function(reqUrl) {
                    $http
                        .put(apiRoot + "serviceRequest/v2/" + $scope.idServiceRequest + "/queue", {
                            formId: $scope.request.formId,
                            model: JSON.stringify($scope.getModel()),
                            soapReq: $scope.soapReq,
                            reqUrl: reqUrl
                        })
                        .then(function() {
                            $scope.status = STATUS.READY;
                            alert("Форма успешно поставлена в очередь на отправку.");
                            if ($scope.rUrl != undefined && $scope.rUrl != null && $scope.rUrl != "") {
                                window.location.href = $scope.rUrl;
                            } else {
                                window.location = context + "/personcab/index?tab=statement";
                            }
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            console.error({
                                ref: "$scope.queuePut",
                                err: data.errorMessage ? data.errorMessage : data
                            });
                        });
                };

                $scope.putWaitSecondSign = function() {
                    $http
                        .put(apiRoot + "serviceRequest/" + $scope.idServiceRequest + "/wait2sign", {
                            formId: $scope.request.formId,
                            model: JSON.stringify($scope.getModel()),
                            soapReq: $scope.soapReq
                        })
                        .then(function() {
                            location.reload();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            // console.error({
                            //     ref: "$scope.putWaitSecondSign",
                            //     err: data.errorMessage ? data.errorMessage : data
                            // });
                        });
                };

                function dadataEvent(ev) {
                    var $elem = $(ev.target);
                    var $elemID = $elem.prop("id");
                    if ($elemID && $elemID.indexOf("jsDadataAddress") !== -1) {
                        var $mod = $elemID.replace("jsDadataAddress", "");
                        $elem.suggestions({
                            token: "5161206f58f8f82f083bf666557c70d0e4d4b2c8",
                            type: "ADDRESS",
                            count: 5,
                            /* Вызывается, когда пользователь выбирает одну из подсказок */
                            onSelect: function(suggestion) {
                                var fias = suggestion.data
                                    ? {
                                          fias_id: suggestion.data.fias_id,
                                          country: suggestion.data.country,
                                          postal_code: suggestion.data.postal_code,
                                          region: suggestion.data.region,
                                          city_district: suggestion.data.city_district,
                                          city: suggestion.data.city,
                                          settlement: suggestion.data.settlement,
                                          street: suggestion.data.street,
                                          house: suggestion.data.house,
                                          block: suggestion.data.block,
                                          flat: suggestion.data.flat
                                      }
                                    : {};
                                $scope.request.model.data[$elemID] = suggestion.value;
                                $scope.request.model.data["jsDadataFias" + $mod] = fias;
                            }
                        });
                    }
                }

                document.addEventListener("focusin", dadataEvent);
                $scope.$on("$destroy", function() {
                    document.removeEventListener("focusin", dadataEvent);
                });

                // эту супер функцию удалить после введения в работу АСП
                function emailReq(schema) {
                    if (schema.properties != undefined) {
                        if (schema.properties.requestor != undefined) {
                            if (schema.properties.requestor.properties != undefined) {
                                if (schema.properties.requestor.properties.person != undefined) {
                                    if (schema.properties.requestor.properties.person.properties != undefined) {
                                        if (
                                            schema.properties.requestor.properties.person.properties.email != undefined
                                        ) {
                                            if (
                                                schema.properties.requestor.properties.person.properties.email
                                                    .required != undefined
                                            ) {
                                                schema.properties.requestor.properties.person.properties.email.required = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    window.console.info(schema);
                }

                function calcFields(fields, dataModel, isReadOnly, schema) {
                    fields = fields || [];
                    fields.forEach(function(field) {
                        if (field.type == "datepicker") {
                            console.log("picker tik tak");
                        }
                        if (field.type == "fieldset" || field.type == "section") {
                            calcFields(field.items, dataModel, isReadOnly, schema);
                        } else {
                            if (field.type == "nwpFileUpload") {
                                field.endpoint =
                                    apiRoot + "serviceRequest/" + $scope.idServiceRequest + "/" + field.key;
                                try {
                                    var nwp_schema = eval(
                                        "schema.properties." +
                                            field.key
                                                .toString()
                                                .split(",")
                                                .join(".")
                                                .split(".")
                                                .join(".properties.")
                                    );
                                    if (nwp_schema && !nwp_schema.maxSize) {
                                        field.schema = nwp_schema;
                                        field.schema.maxSize = {
                                            maximum: "1MB",
                                            validationMessage: "Превышен допустимый размер файла: ",
                                            validationMessage2: "Текущий размер файла: "
                                        };
                                    }
                                } catch (err) {
                                    console.error(err);
                                }

                                if (isReadOnly) {
                                    field.type = "help";
                                    var val = eval(
                                        "dataModel." +
                                            field.key
                                                .toString()
                                                .split(",")
                                                .join(".")
                                    );
                                    if (typeof val !== "undefined") {
                                        var filename = val.filename;
                                        var url = val.url;

                                        console.log({
                                            ref: "var url = val.url;",
                                            url: val.url
                                        });

                                        field.helpvalue = function() {
                                            return $sce.trustAsHtml(
                                                "<div class='file-upload'><div class='row mb'><div class='col-sm-4 mb-sm'><label title='Предпросмотр' class='text-info'>Предпросмотр</label>" +
                                                    "<img src='" +
                                                    url +
                                                    "' class='img-thumbnail img-responsive'></div>" +
                                                    "<div class='col-sm-4 mb-sm'><label title='Имя файла' class='text-info'>Имя файла</label>" +
                                                    "<a download='" +
                                                    url +
                                                    "' href='" +
                                                    url +
                                                    "' target='_blank'>" +
                                                    "<span class='filename' title='Скачать файл'>" +
                                                    filename +
                                                    "</span></a><br></div></div></div>"
                                            );
                                        }.call(undefined);

                                        // MEGA HACK
                                    } else {
                                        field.helpvalue = function() {
                                            return $sce.trustAsHtml(
                                                "<div class='alert alert-success'>Нет загруженных файлов для просмотра</div>"
                                            );
                                        }.call(undefined);
                                    }
                                }
                            }

                            if (field.minAge != undefined) {
                                var date = new Date();
                                field.dateOptions.maxDate = date.getTime() - 31536000000 * field.minAge;
                            }

                            if (field.maxAge != undefined) {
                                var date1 = new Date();
                                field.dateOptions.minDate = date1.getTime() + 31536000000 * field.maxAge;
                            }

                            if (field.options != undefined && field.options.asyncCallback === "findFiasAsync") {
                                var fPath = field.key
                                    .toString()
                                    .split(",")
                                    .join(".");
                                $scope.fromKladr(fPath);
                            }

                            if (field.dateOptions != undefined) {
                                field.dateOptions.autoclose = true;
                                if (field.dateOptions.startView == undefined) field.dateOptions.startView = 0;
                            }

                            if ((field.type == "strapcustom" || field.type == "uiselect") && isReadOnly) {
                                field.type = "text";
                            }

                            if (field.type == "radiobuttonsvertical" && isReadOnly) {
                                field.type = "help";
                                field.helpvalue = function() {
                                    return $sce.trustAsHtml(
                                        "<p><b>" +
                                            field.title +
                                            ": </b><br>" +
                                            parseTimeZags(dataModel[field.key]) +
                                            "</p>"
                                    );
                                }.call(undefined);
                            }

                            if (
                                field.onChange &&
                                (field.onChange.indexOf("function") == 0 || field.onChange.indexOf("$scope.") == 0)
                            ) {
                                field.onChange = eval("(" + field.onChange + ")");
                            }
                        }
                    });
                }

                function calcFormio(obj) {
                    obj.components.forEach(function(component) {
                        if (component.type === "file") {
                            component.storage = "url";
                            component.url = apiRoot + "serviceRequest/formioFile/";
                        } else if (Array.isArray(component.components)) {
                            calcFormio(component);
                        }
                    });
                }

                $scope.changeFlagDates = function() {
                    $scope.getModel().flagDates = false;
                    setField($scope.request.serviceForm.schemaform.form, "time", [
                        { name: "Выберите дату", value: "" }
                    ]);
                    if ($scope.getModel().type && $scope.getModel().idZags) {
                        $scope.getModel().time = undefined;
                        $timeout(function() {
                            $scope.getModel().flagDates = true;
                        }, 1);
                    }
                };

                $scope.getDates = function(options) {
                    var request = new XMLHttpRequest();
                    request.open(
                        "GET",
                        apiRoot +
                            "remoteDict/values/custom?" +
                            "remoteDict_id=" +
                            $scope.getModel().idDatesDict +
                            "&idZags=" +
                            $scope.getModel().idZags +
                            "&type=" +
                            $scope.getModel().type,
                        false
                    ); // `false` makes the request synchronous
                    request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                    request.send(null);
                    if (request.status === 200) {
                        return angular.fromJson(request.responseText);
                    } else {
                        return [];
                    }
                };

                $scope.prepareGet = function(options) {
                    var params = "";
                    if (options.httpGet.variables) {
                        params = "?";
                        options.httpGet.variables.forEach(function(item, i, arr) {
                            var p = item.param.toString();
                            var v =
                                item.value.toString().indexOf("model.") == 0
                                    ? $scope.getModel()[item.value.toString().split(".")[1]]
                                    : item.value.toString();
                            params = params + p + "=" + v;
                            if (i < arr.length - 1) params = params + "&";
                        });
                    }
                    options.httpGet.url = options.httpGet.url + params;
                    if (options.httpGet.url.indexOf("http") != 0) options.httpGet.url = context + options.httpGet.url;
                    return options;
                };

                $scope.$watch("request.model.date", function(value, oldValue) {
                    if (value != oldValue && $scope.isEditable) {
                        $scope.getModel().time = undefined;
                        var request = new XMLHttpRequest();
                        request.open("POST", apiRoot + "zags_zb/times", false); // `false` makes the request synchronous
                        request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                        request.send(
                            JSON.stringify({
                                idZags: $scope.getModel().idZags,
                                type: $scope.getModel().type,
                                date: $scope.getModel().date,
                                remoteDict_id: $scope.getModel().idTimesDict
                            })
                        );
                        if (request.status === 200) {
                            var list = angular.fromJson(request.responseText);
                            if (list.length == 0) {
                                list = [{ name: "Нет свободного времени для регистрации", value: "" }];
                            }
                            setField($scope.request.serviceForm.schemaform.form, "time", list);
                            $scope.getModel().flagTimes = true;
                        } else {
                            console.log(request.responseText);
                        }
                    }
                });

                $scope.findFiasAsync = utils.findFiasAsync;

                $scope.findFias = function(options, search) {
                    if (search.length > 3) {
                        var request = new XMLHttpRequest();
                        request.open("GET", "https://fias.pkd-dev.ru/fias?query=" + encodeURIComponent(search), false); // `false` makes the request synchronous
                        request.send(null);
                        if (request.status === 200) {
                            var res = angular.fromJson(request.responseText);
                            return res;
                        } else {
                            return [];
                        }
                    } else {
                        return [];
                    }
                };

                $scope.setFromKladr = function(form, val) {
                    var keys = form.key.slice();
                    keys.pop();
                    var adr = eval("$scope.getModel()." + keys.join("."));
                    $http
                        .get("https://fias.pkd-dev.ru/kladr?query=" + val)
                        .then(function(data) {
                            data = data.data;
                            if (data.address && data.address.elements && data.address.elements.length > 0) {
                                data.address.elements.forEach(function(el) {
                                    adr.gos = "Российская Федерация";
                                    switch (el.level) {
                                        case 1:
                                            adr.subGos = el.data + " " + el.shortType;
                                            if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                            break;
                                        case 3:
                                            adr.rayon = el.data + " " + el.shortType;
                                            if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                            break;
                                        case 4:
                                            adr.gorod = el.data + " " + el.shortType;
                                            if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                            break;
                                        case 6:
                                            adr.nasPun = el.data + " " + el.shortType;
                                            if (el.kladrCode) adr.cityKladr = el.kladrCode;
                                            break;
                                        case 7:
                                            adr.street = el.data + " " + el.shortType;
                                            break;
                                    }
                                });
                            } else {
                                adr.fiasID = undefined;
                                adr.manual = true;
                                $timeout(function() {
                                    adr.manual = false;
                                }, 1);
                            }
                        })
                        .catch(function() {
                            adr.fiasID = undefined;
                            adr.manual = true;
                            $timeout(function() {
                                adr.manual = false;
                            }, 1);
                        });
                };

                $scope.fromKladr = function(fPath) {
                    var fiasId = $scope.deep_value($scope.request.model, fPath);
                    $http
                        .get("https://fias.pkd-dev.ru/kladr?query=" + fiasId)
                        .then(function(data) {
                            $scope.set_deep_value($scope.request.model, fPath, data.data.address.fullAddress);
                        })
                        .catch(function(e) {
                            console.info(e);
                        });
                };

                $scope.checkDuplicates = function(form, val, mess) {
                    var keys = form.key.slice();
                    var fName = keys.pop();
                    var fIndex = keys.pop();
                    var array = eval("$scope.getModel()." + keys.join("."));
                    var valuesSoFar = [];
                    for (var i = 0; i < array.length; ++i) {
                        var value = array[i][fName];
                        if (valuesSoFar.indexOf(value) !== -1) {
                            alert(mess ? mess : "Значения не должны повторяться!");
                            array[fIndex] = undefined;
                            return;
                        }
                        valuesSoFar.push(value);
                    }
                    console.log("no duplicates");
                    return;
                };

                $scope.isValid = function() {
                    if (!$scope.request) return false;
                    if (!$scope.isFormio()) return true;
                    var ctrl = jQuery("form[name='formioForm']").data("$formController");
                    return ctrl && ctrl.$valid;
                };

                $scope.isFormio = function() {
                    return (
                        $scope.request &&
                        $scope.request.serviceForm.formio &&
                        $scope.request.serviceForm.formio.components.length
                    );
                };

                function isFilesSizeExceeded() {
                    var request = new XMLHttpRequest();
                    request.open("GET", apiRoot + "serviceRequest/" + $scope.idServiceRequest + "/filesSize", false); // `false` makes the request synchronous
                    request.send(null);
                    if (request.status === 200) {
                        console.log("request.responseText: " + request.responseText);
                        if (request.responseText > $scope.request.serviceForm.filesSizeLimit) {
                            alert(
                                "Превышен максимальный размер прикрепляемых файлов" +
                                    "\n" +
                                    "Текущий размер: " +
                                    (request.responseText / (1024 * 1024)).toFixed(3) +
                                    " МБ" +
                                    "\n" +
                                    "Максимальный размер: " +
                                    ($scope.request.serviceForm.filesSizeLimit / (1024 * 1024)).toFixed(3) +
                                    " МБ"
                            );
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        alert(data.errorMessage ? data.errorMessage : data);
                        return true;
                    }
                }

                $scope.deep_value = function(obj, path) {
                    path = path.split(".");
                    var len = path.length;
                    for (var i = 0; i < len; i++) {
                        obj = obj[path[i]];
                    }
                    return obj;
                };

                $scope.set_deep_value = function setToValue(obj, path, value) {
                    var i;
                    path = path.split(".");
                    for (i = 0; i < path.length - 1; i++) obj = obj[path[i]];

                    obj[path[i]] = value;
                };

                function setField(fields, key, value) {
                    fields.forEach(function(field) {
                        if (field.type == "fieldset" || field.type == "section") {
                            setField(field.items, key, value);
                        } else if (field.key && field.key.toString() == key) {
                            $timeout(function() {
                                field.titleMap = value;
                            }, 1);
                        }
                    });
                }
            }
        };
    }

    function setDataValue(components, data, key, value) {
        components.forEach(function(component) {
            if (component.components && component.type != "datagrid") {
                data[component.key] = data[component.key] || {};
                setDataValue(component.components, data[component.key], key, value);
            }
        });
        data[key] = value;
    }

    function unsetDataValue(components, data, key) {
        components.forEach(function(component) {
            if (component.components) {
                data[component.key] = data[component.key] || {};
                unsetDataValue(component.components, data[component.key], key);
            }
        });
        delete data[key];
    }

    function parseTimeZags(value) {
        var res = "",
            start,
            end,
            min;
        if (value != undefined && value.indexOf("<hourZB>") != -1) {
            start = value.indexOf("<hourZB>") + 8;
            end = value.indexOf("</hourZB>");
            res = res + value.substring(start, end);
            start = value.indexOf("<minZB>") + 7;
            end = value.indexOf("</minZB>");
            min = value.substring(start, end);
            if (min == "0") {
                min = "00";
            }
            res = res + ":" + min;
        }
        if (value != undefined && value.indexOf("<hourQue>") != -1) {
            start = value.indexOf("<hourQue>") + 9;
            end = value.indexOf("</hourQue>");
            res = res + value.substring(start, end);
            start = value.indexOf("<minQue>") + 8;
            end = value.indexOf("</minQue>");
            min = value.substring(start, end);
            if (min == "0") {
                min = "00";
            }
            res = res + ":" + min;
        }
        return res;
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("includeReplace", function() {
        return {
            require: "ngInclude",
            restrict: "A",
            link: function(scope, el) {
                el.replaceWith(el.children());
            }
        };
    });
})();

(function() {
    angular.module("rpgu.app").filter("dateFormat", dateFormat);

    function dateFormat() {return function(date, format){
        if(!date) return "";
        format || (format="DD.MM.YYYY");
        if(date instanceof Date || typeof date === 'string') {
            date = moment(date);
        }
        return date.isValid() ? date.local().format(format) : "";
    }}
})();

(function() {
    angular.module("rpgu.app").filter("json", json);

    function json() {return function(value){
        return JSON.stringify(value, " ", 2);
    }}
})();

(function() {
    angular.module("rpgu.app")
        .filter("rub", rub);

    function rub() {
        return function(value, postfix) {
            if (value == null) return "";
            if (!postfix) {
                postfix = "р.";
            }

            return value.toFixed(2) + postfix;
        }
    }
})();

(function() {
    angular.module("rpgu.app").filter("s1Url", function() {
        return function(url) {
            if ( url.indexOf(".jsp") !== -1) {
                url = url.replace(".jsp", "");
            }
            return window.context + "/" + url;
        };
    });
})();

(function() {
    var app = angular.module("rpgu.app");

    app.filter('stripTags', function() {
        return function(text) {
            if (!text) {
                return "";
            }
            return String(text).replace(/<[^>]+>/gm, '');
        };
    });

}());

(function() {
    var app = angular.module("rpgu.app");

    app.filter('substr', function() {
        return function(text, limit) {
            if (!text) {
                return "";
            }
            return String(text).substr(0, limit ? limit : 100);
        };
    });

}());

(function() {
    var app = angular.module("rpgu.app");

    app.directive("indexPage", [
        "$http",
        "$sce",
        "STATUS",
        "$window",
        "$timeout",
        "session",
        "ROLES",
        "$location",
        "userStatusCovid19",
        function($http, $sce, STATUS, $window, $timeout, session, ROLES, $location, userStatusCovid19) {
            return {
                restrict: "E",
                scope: {},
                templateUrl: "/homepage/homepage." + "26" + ".template.html",
                link: function($scope) {
                    $scope.includes = {
                        searchForm: "/includes/searchForm.tmpl.html",
                        poll: "/includes/poll.tmpl.html",
                        stats: "/includes/stats.tmpl.html",
                        record: "/includes/record.tmpl.html",
                        gibddBanner: "/includes/gibddBanner.tmpl.html",
                        dosAppeal: "/includes/dos-appeal.tmpl.html"
                    };

                    $scope.search_service = function(text) {
                        if (typeof text !== "undefined" && text !== "" && text !== null) {
                            $location.path(context + "/rgu/search")
                                .search("text", text);
                        }
                    };

                    $scope.ROOT_URL = context;

                    $scope.user = session.sessionData ? session.sessionData.user : null;

                    if (session.isLoggedIn()) {
                        userStatusCovid19.userCovid19Info();
                    }

                    $http
                        .get(apiRoot + "digitalRGUService/stats")
                        .then(function(data) {
                            data = data.data;
                            $scope.formStats = data;
                        })
                        .catch(function(data) {
                            data = data.data;
                            warn(data, "Ошибка загрузки опроса");
                        });

                    if (session.hasRole(ROLES.ADMIN)) {
                        $http
                            .get(apiRoot + "users/stats")
                            .then(function(data) {
                                data = data.data;
                                $scope.usersStats = data;
                            })
                            .catch(function(data) {
                                data = data.data;
                                warn(data, "Ошибка загрузки опроса");
                            });
                    }

                    $http
                        .get(apiRoot + "poll/onMain")
                        .then(function(data) {
                            data = data.data;
                            if (!data) return;
                            $scope.poll = data;
                            $scope.poll.count = 0;
                            $scope.poll.variants.forEach(function(v) {
                                $scope.poll.count += v.count;
                            });
                            if ($scope.poll.count > 0) {
                                var persent = 0;
                                var last_index = $scope.poll.variants.length - 1;
                                $scope.poll.variants.forEach(function(v, index) {
                                    if (last_index == index) {
                                        v.percent = (100 - persent)
                                            .toString();
                                    } else {
                                        persent += Math.round(v.count * 100 / $scope.poll.count);
                                        v.percent = (v.count * 100 / $scope.poll.count)
                                            .toFixed(0);
                                    }
                                });
                            }
                            $scope.poll.status = STATUS.READY;
                        })
                        .catch(function(err) {
                            warn(err, ".get(apiRoot + 'poll/onMain')");
                        });

                    $scope.vote = function(p) {
                        $http
                            .put(apiRoot + "poll/" + p._id + "/" + p.selected)
                            .then(function(data) {
                                data = data.data;
                                p.status = STATUS.LOADING;
                                p.count = 0;
                                p.variants = data.variants;
                                p.variants.forEach(function(v) {
                                    p.count += v.count;
                                });
                                var persent = 0;
                                var last_index = p.variants.length - 1;
                                p.variants.forEach(function(v, index) {
                                    if (last_index == index) {
                                        v.percent = (100 - persent)
                                            .toString();
                                    } else {
                                        persent += Math.round(v.count * 100 / p.count);
                                        v.percent = (v.count * 100 / p.count)
                                            .toFixed(0);
                                    }
                                });
                                p.isSubmitted = true;
                                p.status = STATUS.READY;
                            })
                            .catch(function(data) {
                                data = data.data;
                                p.error = { message: data.errorMessage ? data.errorMessage : data };
                            });
                    };

                    function goToGibdd() {
                        $location.path("personcab/index").search('tab', "mydata").search("scrollTo", "gibdd");
                    };

                    $scope.goToGibdd = goToGibdd

                    $scope.goToGibddFromModal = function() {
                        jQuery("#gibddPromoBannerModal").modal("hide")
                            .on("hidden.bs.modal", function(e) {
                                $timeout(goToGibdd, 0);
                            });
                    };
                }
            };
        }
    ]);
})();

(function() {
    appealList.$inject = ["$http", "$q", "utils", "STATUS"];
    angular.module("rpgu.app").directive("appealList", appealList);

    function appealList($http, $q, utils, STATUS) {
        function link($scope) {
            $scope.filter = { state: "" };

            $scope.refresh = function() {
                $scope.status = STATUS.LOADING;
                var params = {};
                if ($scope.filter.state) {
                    params.state = $scope.filter.state;
                }
                $http
                    .get(apiRoot + 'appeal', { params: params })
                    .then(function(response) {
                        $scope.list = response.data;
                        $scope.list.sort(function(a, b) {
                            let aTitle = a.serviceResult ? a.serviceResult.title : null;
                            let bTitle = b.serviceResult ? b.serviceResult.title : null;
                            return (aTitle > bTitle) ? -1 : ((bTitle > aTitle)
                                ? 1 : 0);
                        });
                        $scope.status = STATUS.READY;
                    })
                    .catch(utils.errorHandler($scope));
            };

            $scope.refresh();

            $scope.isAdditionDetails = function(details) {
                return (
                    (details.replyType && details.replyType.items) ||
                    (details.fileFromApplic && details.fileFromApplic.objectsStr) ||
                    (details.fileRedirect && details.fileRedirect.objectsStr) ||
                    (details.fileFromAgent && details.fileFromAgent.objectsStr) ||
                    (details.fileFromOIV && details.fileFromOIV.objectsStr) ||
                    (details.printFrom && details.printFrom.objectsStr) ||
                    (details.medoFiles && details.medoFiles.objectsStr)
                );
            };

            $scope.onExpandClick = function(item) {
                item.expanded = !item.expanded;
            };

            $scope.moment = moment;

            $scope.addInterval = function(date, interval) {
                if (!interval || !date)
                    return null;
                var momentInterval = null;
                switch (interval.interval) {
                    case 'DAY':
                        momentInterval = 'days';
                        break;
                    case 'HOUR':
                        momentInterval = 'hours';
                        break;
                    case 'MINUTE':
                        momentInterval = 'minutes';
                        break;
                    case 'SECOND':
                        momentInterval = 'seconds';
                        break;
                    case 'MILLISECOND':
                        momentInterval = 'milliseconds';
                        break;
                }
                if (momentInterval === null)
                    throw 'Нераспозананный интервал: ' + interval.interval;
                date.add(interval.length, momentInterval);
                return date;
            };

            $scope.statusList = [
                { key: "CREATING", value: "Отправка жалобы в ведомство"},
                { key: "EDITING", value: "Отправка результатов редактирования"},
                { key: "LOADING", value: "В процессе загрузки обновлённых данных"},
                { key: "READY", value: "Готово"},
                { key: "ERROR", value: "Ошибка"},
                { key: "CREATING", value: "В процессе создания"},
                { key: "CREATING", value: "В процессе создания"},
                { key: "CREATING", value: "В процессе создания"},
            ];

            $scope.stateList = [
                { key: "", value: "Без фильтра" },
                { key: "registered", value: "Проверка" },
                { key: "waitCorrect", value: "Отправлена на корректировку" },
                { key: "waitWork", value: "Ожидает обработки" },
                { key: "waitToRed", value: "Ожидает перенаправления" },
                { key: "redirect", value: "Перенаправлена" },
                { key: "inwork", value: "В обработке" },
                { key: "downInternal", value: "Расписана" },
                { key: "downInternal2", value: "Расписана 2" },
                { key: "waitToSolved", value: "Ожидает подтвеждения" },
                { key: "solved", value: "Решение предоставлено" },
                { key: "closed", value: "Закрыта" }
            ];

            $scope.getStateText = function(appeal) {
                if (appeal.status !== 'READY') {
                    let statusItem = $scope.statusList.find((item) => {
                        return item.key === appeal.status
                    });
                    if (statusItem == null) {
                        return appeal.status;
                    }
                    if (statusItem.key === "ERROR" && appeal.error) {
                        return statusItem.value + " (" + appeal.error + ")";
                    }
                    return statusItem.value;
                }
                let stateItem = $scope.stateList.find(function(item) {
                    return item.key === appeal.serviceResult.state;
                });
                if (stateItem == null) {
                    return appeal.serviceResult.state;
                }
                return stateItem.value;
            }
        }
        return {
            restrict: 'E',
            templateUrl: '/personcab/appealList.template.html',
            link: link
        }
    }
}());

(function() {
    appointments.$inject = ["$http", "STATUS", "session"];
    angular.module("rpgu.app")
        .directive("appointments", appointments);

    function appointments($http, STATUS, session) {
        return {
            restrict: 'E',
            scope: {
                onShow: "="
            },
            templateUrl: '/personcab/appointments.template.html',
            link: function($scope) {
                $scope.session = session;
                $scope.orgType = 'REGIONAL';
                $scope.orgCount = 0;
                $scope.status = "loading";

                $scope.requestChecked = function(check) {
                    return ($scope.orgType == check);
                };

                $scope.$watch("onShow", function(value, oldValue) {
                    if (value != oldValue) {
                        $scope.organizationList();
                    }
                });

                $scope.organizationList = function() {
                    if ($scope.onShow == true) {
                        $scope.status = STATUS.LOADING;
                        if ($scope.orgType != 'MFC') {
                            getOrgList();
                        } else {
                            getMfcList();
                        }
                    }
                };

                $scope.$watch("orgType", function() {
                    $scope.organizationList();
                });

                $scope.$watchGroup(["requestSkip", "requestMax"], function() {
                    if ($scope.orgCount > 0)
                        $scope.organizationList();
                });

                $scope.organizationList();

                $scope.onSearch = function filterList(s) {
                    s = s.toLowerCase();
                    var filteredList = $scope.data.filter(function filter(item) {
                        var found = false;
                        if (item.name) {
                            found = item.name.toLowerCase().indexOf(s) != -1;
                        }
                        if (item.mfcName && !found) {
                            found = item.mfcName.toLowerCase().indexOf(s) != -1;
                        }
                        return found;
                    });
                    $scope.mfcList = filteredList;
                };

                function getOrgList() {
                    var params = {
                        levelType: $scope.orgType,
                        offset: $scope.requestSkip ? $scope.requestSkip : 0,
                        limit: $scope.requestMax ? $scope.requestMax : 10
                    };
                    $http.get(apiRoot + 'organizations', { params: params })
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.data = data.list;
                            $scope.orgCount = data.count;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage }
                                : data;
                        });
                }

                function getMfcList() {
                    $http.get(apiRoot +
                            'remoteDict/values/custom?remoteDict_code=mfc_booking_getListOrganization'
                        )
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.data = data;
                            $scope.mfcList = data;
                            $scope.orgCount = 2;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage }
                                : data;
                        });
                }

            }
        };
    }
})();

(function() {
    appointmentsPlaces.$inject = ["$http", "$routeParams", "STATUS"];
    angular.module("rpgu.app").directive("appointmentsPlaces", appointmentsPlaces);

    function appointmentsPlaces($http, $routeParams, STATUS) {
        return {
            restrict: "E",
            templateUrl: "/personcab/appointmentsPlaces/appointmentsPlaces.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;
                $scope.select = STATUS.INIT;
                $scope.local = {};
                $scope.local.question = {};

                $scope.initData = function() {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + "organizations/" + $scope.id)
                        .then(function(data) {
                            data = data.data;
                            $scope.org = data;
                            $http.get(
                                apiRoot + "organizations/" + $scope.id + "/questions",
                                {params: {isCovid19: $routeParams.isCovid19 === "true"}}
                            ).then(function (data) {
                                data = data.data;
                                $scope.local.questions = data;
                                if ($scope.local.questions.length === 1) {
                                    $scope.local.question = $scope.local.questions[0];
                                } else if ($routeParams.service_id) {
                                    $scope.local.questions.forEach(function (item) {
                                        if (item.service_id === $routeParams.service_id) {
                                            $scope.local.question = item;
                                        }
                                    });
                                }
                                $scope.select = STATUS.READY;
                            });
                        });
                };

                $scope.$watch("local.question", function(newValue, oldValue) {
                    if (newValue != oldValue) {
                        $scope.local.resource = null;
                        $scope.status = STATUS.LOADING;
                        $http
                            .get(
                                apiRoot + "organizations/" +
                                    $scope.id +
                                    "/questions/" +
                                    newValue.id +
                                    "/resources"
                            )
                            .then(function(data) {
                                data = data.data;
                                $scope.local.resources = data;
                                $scope.status = STATUS.READY;
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = data.errorMessage
                                    ? { message: data.errorMessage } : { message: data };
                            });
                    }
                });

                $scope.initData();
            }
        };
    }
})();

(function() {
    archiveRequest.$inject = ["$http", "$sce", "$timeout", "$window", "$location", "STATUS", "objectService", "session", "$routeParams"];
    angular.module("rpgu.app").directive("archiveRequest", archiveRequest);
    function archiveRequest($http, $sce, $timeout, $window, $location, STATUS, objectService, session, $routeParams) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/personcab/archiveRequest/archiveRequest.template.html',
            link: function ($scope) {
				$scope.status = STATUS.LOADING;

				$scope.getArchive = function () {
					$scope.status = STATUS.LOADING;
					$http.get(apiRoot + 'serviceRequestArchive').then(function (data) {
                        data = data.data;
						$scope.requestList = data || [];
						$scope.status = STATUS.READY;
					}).catch(function (data) {
                        data = data.data;
						$scope.status = STATUS.ERROR;
						$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
					});
				};

				$scope.refresh = function(){
					$scope.addStatus = STATUS.LOADING;
					$scope.getArchive();
	            };

				$scope.getArchive();
            }
        }
    };
})();

(function() {
    angular.module("rpgu.app").directive("aspRequest", [
        "$http",
        "$timeout",
        "STATUS",
        "REQUEST_STATUS",
        "$sce",
        "$q",
        "session",
        "$window",
        "$routeParams",
        function($http, $timeout, STATUS, REQUEST_STATUS, $sce, $q, session, $window, $routeParams) {
            return {
                restrict: "E",
                templateUrl: "/personcab/asp_request.template.html",
                link: function($scope) {
                    $scope.idService = $routeParams.idService;
                    $scope.status = STATUS.LOADING;
                    $scope.status_form = STATUS.LOADING;
                    $scope.request = {};
                    $scope.debugShow = false;
                    $scope.user = angular.copy(session.sessionData.user);
                    $window.console.info($scope.user);

                    $scope.super_model = {
                        schema: {},
                        form: [],
                        model: {}
                    };

                    $scope.request.schema = {
                        type: "object",
                        title: "",
                        properties: {
                            PredstavBlock: {
                                type: "object",
                                properties: {
                                    PredstavCheck: {
                                        type: "boolean",
                                        title: "Являюсь представителем заявителя",
                                        description: "",
                                        default: false
                                    },
                                    PredstavInfo: {
                                        title: "Поле ввода информации о документе– основании представительства",
                                        type: "string",
                                        description: "",
                                        required: true
                                    }
                                }
                            },
                            RegBlock: {
                                type: "object",
                                properties: {
                                    Reginfo: {
                                        title: "Выберите СЗН,в которое надо направить заявление",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        placeholder: "- выберите СЗН"
                                    }
                                }
                            },
                            Persinfo1Block: {
                                type: "object",
                                properties: {
                                    Persinfo1LastName1: {
                                        title: "Фамилия заявителя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "name.lastName"
                                    },
                                    Persinfo1LastName1_predstav: {
                                        title: "Фамилия заявителя",
                                        type: "string",
                                        description: "",
                                        required: true
                                    },
                                    Persinfo1FirstName1: {
                                        title: "Имя заявителя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "name.firstName"
                                    },
                                    Persinfo1FirstName1_predstav: {
                                        title: "Имя заявителя",
                                        type: "string",
                                        description: "",
                                        required: true
                                    },
                                    Persinfo1MiddleName1: {
                                        title: "Отчество заявителя",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "name.middleName"
                                    },
                                    Persinfo1MiddleName1_predstav: {
                                        title: "Отчество заявителя",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo1BirthDate1: {
                                        title: "Дата рождения заявителя",
                                        required: true,
                                        readonly: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker",
                                        defaultFieldName: "birthDate"
                                    },
                                    Persinfo1BirthDate1_predstav: {
                                        title: "Дата рождения заявителя",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker"
                                    },
                                    Persinfo1Snils1: {
                                        title: "СНИЛС заявителя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        pattern: "^[0-9]{3}-[0-9]{3}-[0-9]{3} [0-9]{2}$",
                                        validationMessage: "Укажите в формате 000-000-000 00",
                                        defaultFieldName: "person.snils"
                                    },
                                    Persinfo1Snils1_predstav: {
                                        title: "СНИЛС заявителя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        pattern: "^[0-9]{3}-[0-9]{3}-[0-9]{3} [0-9]{2}$",
                                        validationMessage: "Укажите в формате 000-000-000 00"
                                    },
                                    Persinfo1email1: {
                                        title: "E-Mail заявителя",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "person.email"
                                    },
                                    Persinfo1email1_predstav: {
                                        title: "E-Mail заявителя",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo1mphone1: {
                                        title: "Мобильный телефон заявителя",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "person.personMobilePhone"
                                    },
                                    Persinfo1mphone1_predstav: {
                                        title: "Мобильный телефон заявителя",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo1hphone1: {
                                        title: "Домашний телефон заявителя",
                                        type: "string",
                                        description: "",
                                        readonly: true
                                    },
                                    Persinfo1hphone1_predstav: {
                                        title: "Домашний телефон заявителя",
                                        type: "string",
                                        description: ""
                                    }
                                }
                            },
                            Dockinfo1Block: {
                                type: "object",
                                properties: {
                                    Dockinfo1Type1: {
                                        title: "Документ, удостоверяющий личность",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        placeholder: "- выберите документ",
                                        default: "1"
                                    },
                                    Dockinfo1Series1_pasp: {
                                        title: "Серия документа",
                                        readonly: true,
                                        type: "string",
                                        description: "",
                                        pattern: "^[0-9]{4}$",
                                        validationMessage: "Введите правильную серию паспорта",
                                        defaultFieldName: "passpRF.series"
                                    },
                                    Dockinfo1Series1_prepasp: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[0-9]{4}$",
                                        validationMessage: "Введите правильную серию паспорта"
                                    },
                                    Dockinfo1Series1_svid: {
                                        title: "Серия документа",
                                        readonly: true,
                                        type: "string",
                                        description: "",
                                        pattern: "^[IVXLC]{1,4}-[А-Я]{2}$",
                                        validationMessage:
                                            "Серия свидетельства о рождении может содержать буквы латинского алфавита, дефис и буквы русского алфавита, например IV-БА",
                                        defaultFieldName: "svid.series"
                                    },
                                    Dockinfo1Series1_presvid: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[IVXLC]{1,4}-[А-Я]{2}$",
                                        validationMessage:
                                            "Серия свидетельства о рождении может содержать буквы латинского алфавита, дефис и буквы русского алфавита, например IV-БА"
                                    },
                                    Dockinfo1Series1: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo1Number1_pasp: {
                                        title: "Номер документа",
                                        readonly: true,
                                        type: "string",
                                        required: true,
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер паспорта",
                                        defaultFieldName: "passpRF.number"
                                    },
                                    Dockinfo1Number1_prepasp: {
                                        title: "Номер документа",
                                        type: "string",
                                        required: true,
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер паспорта"
                                    },
                                    Dockinfo1Number1_svid: {
                                        title: "Номер документа",
                                        readonly: true,
                                        type: "string",
                                        required: true,
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер свидетельства о рождении",
                                        defaultFieldName: "svid.number"
                                    },
                                    Dockinfo1Number1_presvid: {
                                        title: "Номер документа",
                                        type: "string",
                                        required: true,
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер свидетельства о рождении"
                                    },
                                    Dockinfo1Number1: {
                                        title: "Номер документа",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo1IssuedBy1_pasp: {
                                        readonly: true,
                                        title: "Кем выдан",
                                        type: "string",
                                        description: "",
                                        defaultFieldName: "passpRF.issuedBy"
                                    },
                                    Dockinfo1IssuedBy1_prepasp: {
                                        title: "Кем выдан",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo1IssuedBy1_svid: {
                                        readonly: true,
                                        title: "Кем выдан",
                                        type: "string",
                                        description: "",
                                        defaultFieldName: "svid.issuedBy"
                                    },
                                    Dockinfo1IssuedBy1_presvid: {
                                        title: "Кем выдан",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo1IssuedBy1: {
                                        title: "Кем выдан",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo1IssueDate1_pasp: {
                                        title: "Дата выдачи документа",
                                        readonly: true,
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker",
                                        defaultFieldName: "passpRF.issueDateFormatted"
                                    },
                                    Dockinfo1IssueDate1_prepasp: {
                                        title: "Дата выдачи документа",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker"
                                    },
                                    Dockinfo1IssueDate1_svid: {
                                        title: "Дата выдачи документа",
                                        readonly: true,
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker",
                                        defaultFieldName: "svid.issueDateFormatted"
                                    },
                                    Dockinfo1IssueDate1_presvid: {
                                        title: "Дата выдачи документа",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker"
                                    },
                                    Dockinfo1IssueDate1: {
                                        title: "Дата выдачи документа",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker"
                                    }
                                }
                            },
                            Persinfo2Block: {
                                type: "object",
                                properties: {
                                    Persinfo2LastName2: {
                                        title: "Фамилия представителя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "name.lastName"
                                    },
                                    Persinfo2FirstName2: {
                                        title: "Имя представителя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "name.firstName"
                                    },
                                    Persinfo2MiddleName2: {
                                        title: "Отчество представителя",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "name.middleName"
                                    },
                                    Persinfo2BirthDate2: {
                                        title: "Дата рождения представителя",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker",
                                        readonly: true,
                                        defaultFieldName: "birthDate"
                                    },
                                    Persinfo2Snils2: {
                                        title: "СНИЛС представителя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "person.snils"
                                    },
                                    Persinfo2email2: {
                                        title: "E-Mail представителя",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "person.email"
                                    },
                                    Persinfo2mphone2: {
                                        title: "Мобильный телефон представителя",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "person.personMobilePhone"
                                    },
                                    Persinfo2hphone2: {
                                        title: "Домашний телефон заявителя",
                                        type: "string",
                                        description: "",
                                        readonly: true
                                    }
                                }
                            },
                            Dockinfo2Block: {
                                type: "object",
                                properties: {
                                    Dockinfo2Type2: {
                                        title: "Документ, удостоверяющий личность",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        placeholder: "- выберите документ",
                                        default: "1"
                                    },
                                    Dockinfo2Series2_pasp: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[0-9]{4}$",
                                        validationMessage: "Введите правильную серию паспорта",
                                        readonly: true,
                                        defaultFieldName: "passpRF.series"
                                    },
                                    Dockinfo2Series2_svid: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[IVXLC]{1,4}-[А-Я]{2}$",
                                        validationMessage:
                                            "Серия свидетельства о рождении может содержать буквы латинского алфавита, дефис и буквы русского алфавита, например IV-БА",
                                        readonly: true,
                                        defaultFieldName: "svid.series"
                                    },
                                    Dockinfo2Series2: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo2Number2_pasp: {
                                        title: "Номер документа",
                                        type: "string",
                                        required: true,
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер паспорта",
                                        readonly: true,
                                        defaultFieldName: "passpRF.number"
                                    },
                                    Dockinfo2Number2_svid: {
                                        title: "Номер документа",
                                        type: "string",
                                        required: true,
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер свидетельства о рождении",
                                        readonly: true,
                                        defaultFieldName: "svid.number"
                                    },
                                    Dockinfo2Number2: {
                                        title: "Номер документа",
                                        type: "string",
                                        required: true,
                                        description: ""
                                    },
                                    Dockinfo2IssuedBy2_pasp: {
                                        title: "Кем выдан",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "passpRF.issuedBy"
                                    },
                                    Dockinfo2IssuedBy2_svid: {
                                        title: "Кем выдан",
                                        type: "string",
                                        description: "",
                                        readonly: true,
                                        defaultFieldName: "svid.issuedBy"
                                    },
                                    Dockinfo2IssuedBy2: {
                                        title: "Кем выдан",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo2IssueDate2_pasp: {
                                        title: "Дата выдачи документа",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker",
                                        readonly: true,
                                        defaultFieldName: "passpRF.issueDateFormatted"
                                    },
                                    Dockinfo2IssueDate2_svid: {
                                        title: "Дата выдачи документа",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker",
                                        readonly: true,
                                        defaultFieldName: "svid.issueDateFormatted"
                                    },
                                    Dockinfo2IssueDate2: {
                                        title: "Дата выдачи документа",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        format: "datepicker"
                                    }
                                }
                            },
                            Persinfo3Block: {
                                type: "object",
                                properties: {
                                    Persinfo3LastName3: {
                                        title: "Фамилия ребенка",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo3FirstName3: {
                                        title: "Имя ребенка",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo3MiddleName3: {
                                        title: "Отчество ребенка",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo3BirthDate3: {
                                        title: "Дата рождения ребенка",
                                        type: "string",
                                        description: "",
                                        format: "datepicker"
                                    },
                                    Persinfo3Snils3: {
                                        title: "СНИЛС ребенка",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo3email3: {
                                        title: "E-Mail ребенка",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo3mphone3: {
                                        title: "Мобильный телефон ребенка",
                                        type: "string",
                                        description: ""
                                    },
                                    Persinfo3hphone3: {
                                        title: "Домашний телефон ребенка",
                                        type: "string",
                                        description: ""
                                    }
                                }
                            },
                            Dockinfo3Block: {
                                type: "object",
                                properties: {
                                    Dockinfo3Type3: {
                                        title: "Документ, удостоверяющий личность",
                                        type: "string",
                                        description: "",
                                        placeholder: "- выберите документ",
                                        default: "1"
                                    },
                                    Dockinfo3Series3_pasp: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[0-9]{4}$",
                                        validationMessage: "Введите правильную серию паспорта"
                                    },
                                    Dockinfo3Series3_svid: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[IVXLC]{1,4}-[А-Я]{2}$",
                                        validationMessage:
                                            "Серия свидетельства о рождении может содержать буквы латинского алфавита, дефис и буквы русского алфавита, например IV-БА"
                                    },
                                    Dockinfo3Series3: {
                                        title: "Серия документа",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo3Number3_pasp: {
                                        title: "Номер документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер паспорта"
                                    },
                                    Dockinfo3Number3_svid: {
                                        title: "Номер документа",
                                        type: "string",
                                        description: "",
                                        pattern: "^[0-9]{6}$",
                                        validationMessage: "Введите правильный номер свидетельства о рождении"
                                    },
                                    Dockinfo3Number3: {
                                        title: "Номер документа",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo3IssuedBy3: {
                                        title: "Кем выдан",
                                        type: "string",
                                        description: ""
                                    },
                                    Dockinfo3IssueDate3: {
                                        title: "Дата выдачи документа",
                                        type: "string",
                                        description: "",
                                        format: "datepicker"
                                    }
                                }
                            },
                            RegAdressBlock: {
                                type: "object",
                                properties: {
                                    RegAdressCheckNotKLADR1: {
                                        type: "boolean",
                                        title: "Ввод адреса вручную",
                                        description: "",
                                        default: true
                                    },
                                    RegAdressIndex1: {
                                        title: "Индекс",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdressTown1: {
                                        title: "Населенный пункт",
                                        type: "string",
                                        description: "",
                                        required: true
                                    },
                                    RegAdressStreet1: {
                                        title: "Улица",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdressHouse1: {
                                        title: "Дом",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdressBuilding1: {
                                        title: "Строение (корпус)",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdressApartment1: {
                                        title: "Квартира",
                                        type: "string",
                                        description: ""
                                    }
                                }
                            },
                            RegAdress: {
                                type: "object",
                                properties: {
                                    RegAdressCheckTempAdress: {
                                        type: "boolean",
                                        title: "Адрес временной регистрации",
                                        description: "",
                                        default: false
                                    },
                                    RegAdressCheckLivingAddress: {
                                        type: "boolean",
                                        title: "Адрес фактического проживания",
                                        description: "",
                                        default: false
                                    }
                                }
                            },
                            RegAdress2Block: {
                                type: "object",
                                properties: {
                                    RegAdress2CheckNotKLADR2: {
                                        type: "boolean",
                                        title: "Ввод адреса вручную",
                                        description: "",
                                        default: true
                                    },
                                    RegAdress2Index2: {
                                        title: "Индекс",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress2Town2: {
                                        title: "Населенный пункт",
                                        type: "string",
                                        description: "",
                                        required: true
                                    },
                                    RegAdress2Street2: {
                                        title: "Улица",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress2House2: {
                                        title: "Дом",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress2Building2: {
                                        title: "Строение (корпус)",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress2Apartment2: {
                                        title: "Квартира",
                                        type: "string",
                                        description: ""
                                    }
                                }
                            },
                            RegAdress3Block: {
                                type: "object",
                                properties: {
                                    RegAdress3CheckNotKLADR3: {
                                        type: "boolean",
                                        title: "Ввод адреса вручную",
                                        description: "",
                                        default: true
                                    },
                                    RegAdress3Index3: {
                                        title: "Индекс",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress3Town3: {
                                        title: "Населенный пункт",
                                        type: "string",
                                        description: "",
                                        required: true
                                    },
                                    RegAdress3Street3: {
                                        title: "Улица",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress3House3: {
                                        title: "Дом",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress3Building3: {
                                        title: "Строение (корпус)",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress3Apartment3: {
                                        title: "Квартира",
                                        type: "string",
                                        description: ""
                                    }
                                }
                            },
                            RegAdress4Block4: {
                                type: "object",
                                properties: {
                                    RegAdress4CheckNotKLADR4: {
                                        type: "boolean",
                                        title: "Ввод адреса вручную",
                                        description: "",
                                        default: true
                                    },
                                    RegAdress4Index4: {
                                        title: "Индекс",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress4Town4: {
                                        title: "Населенный пункт",
                                        type: "string",
                                        description: "",
                                        required: true
                                    },
                                    RegAdress4Street4: {
                                        title: "Улица",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress4House4: {
                                        title: "Дом",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress4Building4: {
                                        title: "Строение (корпус)",
                                        type: "string",
                                        description: ""
                                    },
                                    RegAdress4Apartment4: {
                                        title: "Квартира",
                                        type: "string",
                                        description: ""
                                    }
                                }
                            },
                            PaymentBlock: {
                                type: "object",
                                properties: {
                                    PaymentCheckPredstav: {
                                        type: "boolean",
                                        title: "Пособие будет получено через представителя",
                                        description: "",
                                        default: false
                                    },
                                    PaymentMethod: {
                                        title: "Способы получения выплат",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        default: "PaymentPost",
                                        enum: ["PaymentPost", "PaymentBank", "PaymentKard", "PaymentList"]
                                    },
                                    PaymentPostAdress: {
                                        title: "Адрес для почтового перевода",
                                        required: true,
                                        type: "string",
                                        description: "",
                                        placeholder: "- выберите адрес"
                                    },
                                    PaymentCheckNotKLADR4: {
                                        type: "boolean",
                                        title: "Ввод адреса для почтового перевода вручную",
                                        description: "",
                                        default: true
                                    },
                                    PaymentIndex4: {
                                        title: "Индекс почтового перевода",
                                        type: "string",
                                        description: ""
                                    },
                                    PaymentTown4: {
                                        title: "Населенный пункт почтового перевода",
                                        type: "string",
                                        description: "",
                                        required: true
                                    },
                                    PaymentStreet4: {
                                        title: "Улица почтового перевода",
                                        type: "string",
                                        description: ""
                                    },
                                    PaymentHouse4: {
                                        title: "Дом почтового перевода",
                                        type: "string",
                                        description: ""
                                    },
                                    PaymentBuilding4: {
                                        title: "Строение почтового перевода",
                                        type: "string",
                                        description: ""
                                    },
                                    PaymentApartment4: {
                                        title: "Квартира почтового перевода",
                                        type: "string",
                                        description: ""
                                    },
                                    PaymentBankName: {
                                        title: "Банк получателя/Наименование банка получателя",
                                        type: "string",
                                        required: true,
                                        description: ""
                                    },
                                    PaymentBankBik: {
                                        title: "БИК банка получателя",
                                        type: "string",
                                        description: ""
                                    },
                                    PaymentAccount: {
                                        title: "Номер расчетного (лицевого) счета получателя",
                                        type: "string",
                                        required: true,
                                        description: ""
                                    },
                                    PaymentNumberCard: {
                                        title: "Номер карты",
                                        type: "string",
                                        required: true,
                                        description: ""
                                    }
                                }
                            },
                            Documets: {
                                type: "object",
                                properties: {}
                            }
                        }
                    };

                    $scope.request.form = [
                        {
                            title: "Predstav.Block",
                            type: "fieldset",
                            items: [
                                {
                                    key: "PredstavBlock.PredstavCheck"
                                },
                                {
                                    key: "PredstavBlock.PredstavInfo",
                                    condition: "model.PredstavBlock.PredstavCheck",
                                    type: "textarea"
                                }
                            ]
                        },
                        {
                            title: "Reg.Block",
                            type: "fieldset",
                            items: [
                                {
                                    key: "RegBlock.Reginfo",
                                    type: "strapselect",
                                    titleMap: {
                                        "0": "Нет данных"
                                    }
                                }
                            ]
                        },
                        {
                            title: "Persinfo1.Block",
                            type: "fieldset",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1LastName1",
                                                    condition: "!model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1LastName1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1FirstName1",
                                                    condition: "!model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1FirstName1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1MiddleName1",
                                                    condition: "!model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1MiddleName1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1BirthDate1",
                                                    condition: "!model.PredstavBlock.PredstavCheck",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1BirthDate1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1Snils1",
                                                    condition: "!model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1Snils1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1email1",
                                                    condition: "!model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1email1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1mphone1",
                                                    condition: "!model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1mphone1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Persinfo1Block.Persinfo1hphone1",
                                                    condition: "!model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Persinfo1Block.Persinfo1hphone1_predstav",
                                                    condition: "model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "Dockinfo1.Block",
                            type: "fieldset",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Type1",
                                                    type: "strapselect",
                                                    titleMap: {
                                                        "1": "Паспорт гражданина Российской Федерации",
                                                        "2": "Миграционная карта",
                                                        "3": "Свидетельство о рождении гражданина",
                                                        "4": "Паспорт моряка (удостоверение личности моряка)",
                                                        "5":
                                                            "Удостоверение личности военнослужащего Российской Федерации",
                                                        "6": "Военный билет",
                                                        "7":
                                                            "Временное удостоверение личности гражданина Российской Федерации",
                                                        "8": "Справка об освобождении из мест лишения свободы",
                                                        "9": "Паспорт иностранного гражданина (лица без гражданства)",
                                                        "10": "Вид на жительство в Российской Федерации",
                                                        "11": "Разрешение на временное проживание",
                                                        "12": "Удостоверение беженца",
                                                        "13": "Паспорт гражданина СССР образца 1974 года"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssueDate1",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 != '1' && model.Dockinfo1Block.Dockinfo1Type1 != '3' && !model.PredstavBlock.PredstavCheck",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssueDate1_pasp",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && !model.PredstavBlock.PredstavCheck",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssueDate1_svid",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && !model.PredstavBlock.PredstavCheck",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssueDate1_prepasp",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && model.PredstavBlock.PredstavCheck",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssueDate1_presvid",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && model.PredstavBlock.PredstavCheck",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Series1_pasp",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && !model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Series1_svid",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && !model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Series1_prepasp",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Series1_presvid",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Series1",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 != '1' && model.Dockinfo1Block.Dockinfo1Type1 != '3' && !model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Number1_pasp",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && !model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Number1_svid",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && !model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Number1_prepasp",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Number1_presvid",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1Number1",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 != '1' && model.Dockinfo1Block.Dockinfo1Type1 != '3' && !model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssuedBy1",
                                                    type: "textarea",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 != '1' && model.Dockinfo1Block.Dockinfo1Type1 != '3' && !model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssuedBy1_pasp",
                                                    type: "textarea",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && !model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssuedBy1_svid",
                                                    type: "textarea",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && !model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssuedBy1_prepasp",
                                                    type: "textarea",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '1' && model.PredstavBlock.PredstavCheck"
                                                },
                                                {
                                                    key: "Dockinfo1Block.Dockinfo1IssuedBy1_presvid",
                                                    type: "textarea",
                                                    condition:
                                                        "model.Dockinfo1Block.Dockinfo1Type1 == '3' && model.PredstavBlock.PredstavCheck"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "Persinfo2.Block",
                            condition: "model.PredstavBlock.PredstavCheck",
                            type: "fieldset",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2LastName2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2FirstName2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2MiddleName2"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2BirthDate2",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2Snils2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2email2"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2mphone2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Persinfo2Block.Persinfo2hphone2"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "Dockinfo2.Block",
                            condition: "model.PredstavBlock.PredstavCheck",
                            type: "fieldset",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2Type2",
                                                    type: "strapselect",
                                                    titleMap: {
                                                        "1": "Паспорт гражданина Российской Федерации",
                                                        "2": "Миграционная карта",
                                                        "3": "Свидетельство о рождении гражданина",
                                                        "4": "Паспорт моряка (удостоверение личности моряка)",
                                                        "5":
                                                            "Удостоверение личности военнослужащего Российской Федерации",
                                                        "6": "Военный билет",
                                                        "7":
                                                            "Временное удостоверение личности гражданина Российской Федерации",
                                                        "8": "Справка об освобождении из мест лишения свободы",
                                                        "9": "Паспорт иностранного гражданина (лица без гражданства)",
                                                        "10": "Вид на жительство в Российской Федерации",
                                                        "11": "Разрешение на временное проживание",
                                                        "12": "Удостоверение беженца",
                                                        "13": "Паспорт гражданина СССР образца 1974 года"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2IssueDate2_pasp",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '1'",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2IssueDate2_svid",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '3'",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2IssueDate2",
                                                    condition:
                                                        "model.Dockinfo2Block.Dockinfo2Type2 != '1' && model.Dockinfo2Block.Dockinfo2Type2 != '3'",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2Series2_pasp",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '1'"
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2Series2_svid",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '3'"
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2Series2",
                                                    condition:
                                                        "model.Dockinfo2Block.Dockinfo2Type2 != '1' && model.Dockinfo2Block.Dockinfo2Type2 != '3'"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2Number2_pasp",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '1'"
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2Number2_svid",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '3'"
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2Number2",
                                                    condition:
                                                        "model.Dockinfo2Block.Dockinfo2Type2 != '1' && model.Dockinfo2Block.Dockinfo2Type2 != '3'"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2IssuedBy2_pasp",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '1'",
                                                    type: "textarea"
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2IssuedBy2_svid",
                                                    condition: "model.Dockinfo2Block.Dockinfo2Type2 == '3'",
                                                    type: "textarea"
                                                },
                                                {
                                                    key: "Dockinfo2Block.Dockinfo2IssuedBy2",
                                                    condition:
                                                        "model.Dockinfo2Block.Dockinfo2Type2 != '1' && model.Dockinfo2Block.Dockinfo2Type2 != '3'",
                                                    type: "textarea"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "Persinfo3.Block",
                            type: "fieldset",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3LastName3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3FirstName3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3MiddleName3"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3BirthDate3",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3Snils3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3email3"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3mphone3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Persinfo3Block.Persinfo3hphone3"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "Dockinfo3.Block",
                            type: "fieldset",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3Type3",
                                                    type: "strapselect",
                                                    titleMap: {
                                                        "1": "Паспорт гражданина Российской Федерации",
                                                        "2": "Миграционная карта",
                                                        "3": "Свидетельство о рождении гражданина",
                                                        "4": "Паспорт моряка (удостоверение личности моряка)",
                                                        "5":
                                                            "Удостоверение личности военнослужащего Российской Федерации",
                                                        "6": "Военный билет",
                                                        "7":
                                                            "Временное удостоверение личности гражданина Российской Федерации",
                                                        "8": "Справка об освобождении из мест лишения свободы",
                                                        "9": "Паспорт иностранного гражданина (лица без гражданства)",
                                                        "10": "Вид на жительство в Российской Федерации",
                                                        "11": "Разрешение на временное проживание",
                                                        "12": "Удостоверение беженца",
                                                        "13": "Паспорт гражданина СССР образца 1974 года"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3IssueDate3",
                                                    dateOptions: {
                                                        autoclose: true,
                                                        startView: "2",
                                                        dateFormat: "dd.MM.yyyy"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3Series3_pasp",
                                                    condition: "model.Dockinfo3Block.Dockinfo3Type3 == '1'"
                                                },
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3Series3_svid",
                                                    condition: "model.Dockinfo3Block.Dockinfo3Type3 == '3'"
                                                },
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3Series3",
                                                    condition:
                                                        "model.Dockinfo3Block.Dockinfo3Type3 != '1' && model.Dockinfo3Block.Dockinfo3Type3 != '3'"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3Number3_pasp",
                                                    condition: "model.Dockinfo3Block.Dockinfo3Type3 == '1'"
                                                },
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3Number3_svid",
                                                    condition: "model.Dockinfo3Block.Dockinfo3Type3 == '3'"
                                                },
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3Number3",
                                                    condition:
                                                        "model.Dockinfo3Block.Dockinfo3Type3 != '1' && model.Dockinfo3Block.Dockinfo3Type3 != '3'"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "Dockinfo3Block.Dockinfo3IssuedBy3",
                                                    type: "textarea"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "RegAdress.Block",
                            type: "fieldset",
                            items: [
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "RegAdressBlock.RegAdressCheckNotKLADR1"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdressBlock.RegAdressTown1"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdressBlock.RegAdressStreet1"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdressBlock.RegAdressIndex1"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdressBlock.RegAdressHouse1"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdressBlock.RegAdressBuilding1"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdressBlock.RegAdressApartment1"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: " ",
                            type: "fieldset",
                            items: [
                                {
                                    key: "RegAdress.RegAdressCheckTempAdress"
                                },
                                {
                                    key: "RegAdress.RegAdressCheckLivingAddress"
                                }
                            ]
                        },
                        {
                            title: "RegAdress2.Block",
                            condition: "model.RegAdress.RegAdressCheckTempAdress",
                            type: "fieldset",
                            items: [
                                {
                                    key: "RegAdress2Block.RegAdress2CheckNotKLADR2"
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdress2Block.RegAdress2Town2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdress2Block.RegAdress2Street2"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress2Block.RegAdress2Index2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress2Block.RegAdress2House2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress2Block.RegAdress2Building2"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress2Block.RegAdress2Apartment2"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "RegAdress3.Block",
                            condition: "model.RegAdress.RegAdressCheckLivingAddress",
                            type: "fieldset",
                            items: [
                                {
                                    key: "RegAdress3Block.RegAdress3CheckNotKLADR3"
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdress3Block.RegAdress3Town3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdress3Block.RegAdress3Street3"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress3Block.RegAdress3Index3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress3Block.RegAdress3House3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress3Block.RegAdress3Building3"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress3Block.RegAdress3Apartment3"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "RegAdress4.Block4",
                            type: "fieldset",
                            items: [
                                {
                                    key: "RegAdress4Block4.RegAdress4CheckNotKLADR4"
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdress4Block4.RegAdress4Town4"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "RegAdress4Block4.RegAdress4Street4"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress4Block4.RegAdress4Index4"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress4Block4.RegAdress4House4"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress4Block4.RegAdress4Building4"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "RegAdress4Block4.RegAdress4Apartment4"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            title: "Payment.Block",
                            type: "fieldset",
                            items: [
                                {
                                    key: "PaymentBlock.PaymentCheckPredstav"
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentMethod",
                                                    type: "radios",
                                                    titleMap: [
                                                        {
                                                            value: "PaymentPost",
                                                            name: "Почтовый перевод"
                                                        },
                                                        {
                                                            value: "PaymentBank",
                                                            name: "Банковский перевод"
                                                        },
                                                        {
                                                            value: "PaymentKard",
                                                            name: "Перевод на банковскую карту"
                                                        },
                                                        {
                                                            value: "PaymentList",
                                                            name: "Платежная ведомость"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    condition:
                                        "model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList'",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentPostAdress",
                                                    type: "strapselect",
                                                    titleMap: {
                                                        "0": "Адрес вводится вручную",
                                                        "1": "Адрес регистрации",
                                                        "2": "Адрес временной регистрации",
                                                        "3": "Адрес проживания",
                                                        "4": "Адрес регистрации представителя"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    condition:
                                        "model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList'",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentCheckNotKLADR4"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentTown4",
                                                    condition:
                                                        "(model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList')"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentStreet4",
                                                    condition:
                                                        "(model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList')"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentIndex4",
                                                    condition:
                                                        "(model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList')"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentHouse4",
                                                    condition:
                                                        "(model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList')"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentBuilding4",
                                                    condition:
                                                        "(model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList')"
                                                }
                                            ]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-3",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentApartment4",
                                                    condition:
                                                        "(model.PaymentBlock.PaymentMethod == 'PaymentPost' || model.PaymentBlock.PaymentMethod == 'PaymentList')"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentBankName",
                                                    condition:
                                                        "model.PaymentBlock.PaymentMethod == 'PaymentBank' || model.PaymentBlock.PaymentMethod == 'PaymentKard'"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentBankBik",
                                                    condition:
                                                        "model.PaymentBlock.PaymentMethod == 'PaymentBank' || model.PaymentBlock.PaymentMethod == 'PaymentKard'"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentAccount",
                                                    condition: "model.PaymentBlock.PaymentMethod == 'PaymentBank'"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-12",
                                            items: [
                                                {
                                                    key: "PaymentBlock.PaymentNumberCard",
                                                    condition: "model.PaymentBlock.PaymentMethod == 'PaymentKard'"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ];

                    $scope.controls = [
                        {
                            name: "applicationDateBox",
                            type: "DateBox",
                            valueName: "applicationDateBox",
                            title: "DateBox Наименование изделия",
                            comment: "DateBox comment",
                            require: 1,
                            valuedefault: "01.01.2012"
                        },
                        {
                            name: "applicationCheckBox",
                            type: "CheckBox",
                            valueName: "applicationCheckBox",
                            title: "CheckBox Наименование изделия",
                            comment: "CheckBox comment",
                            require: 1,
                            valuedefault: 1
                        },
                        {
                            name: "applicationLongTextBox",
                            type: "LongTextBox",
                            valueName: "applicationLongTextBox",
                            title: "applicationLongTextBox Наименование изделия",
                            require: 1,
                            comment: "LongTextBox comment",
                            valuedefault: "LongTextBox"
                        },
                        {
                            name: "applicationTextBox",
                            type: "TextBox",
                            valueName: "applicationTextBox",
                            title: "Наименование изделия",
                            require: 1,
                            comment: "TextBox comment",
                            valuedefault: "TextBox"
                        },
                        {
                            name: "applicationTextBox",
                            type: "TextBox",
                            valueName: "applicationTextBox",
                            title: "Наименование изделия",
                            require: 1,
                            comment: "TextBox comment",
                            valuedefault: "TextBox"
                        },
                        {
                            name: "applicationlabel",
                            type: "Label",
                            valueName: "applicationlabel",
                            title: "Label Наименование изделия",
                            require: 1
                        },
                        {
                            name: "applicationSubjectRadioGroup",
                            type: "RadioGroup",
                            valueName: "applicationSubject.subjType",
                            title: "Прошу обеспечить",
                            require: 1
                        },
                        {
                            name: "applicationSubjectRadioGroup.TSR",
                            type: "RadioItem",
                            valueName: "applicationSubject.subjType.TSR",
                            title: "Техническим средством реабилитации (ТСР)",
                            valueDefault: "tsr"
                        },
                        {
                            name: "applicationSubjectRadioGroup.Compens",
                            type: "RadioItem",
                            valueName: "applicationSubject.subjType.Compens",
                            title: "Компенсацией за самостоятельно приобретенные ТСР или оказанные услуги",
                            valueDefault: "compens"
                        },
                        {
                            name: "disabilityGroupDropDown",
                            type: "DropDown",
                            valueName: "disabilityGroup",
                            title: "Группа инвалидности",
                            require: 1
                        },
                        {
                            name: "disabilityGroupDropDown.Item1",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item1",
                            title: "I группа",
                            valueDefault: 1
                        },
                        {
                            name: "disabilityGroupDropDown.Item2",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item2",
                            title: "II группа",
                            valueDefault: 2
                        },
                        {
                            name: "disabilityGroupDropDown.Item3",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item3",
                            title: "III группа",
                            valueDefault: 3
                        },
                        {
                            name: "applicationSubject",
                            type: "GroupBox",
                            valueName: "applicationSubject",
                            title: "Предмет заявления"
                        },
                        {
                            name: "applicationSubject.subjType",
                            type: "RadioGroup",
                            valueName: "applicationSubject.subjType",
                            title: "Прошу обеспечить",
                            require: 1
                        },
                        {
                            name: "applicationSubject.subjType.TSR",
                            type: "RadioItem",
                            valueName: "applicationSubject.subjType.TSR",
                            title: "Техническим средством реабилитации (ТСР)",
                            valueDefault: "tsr"
                        },
                        {
                            name: "applicationSubject.subjType.Compens",
                            type: "RadioItem",
                            valueName: "applicationSubject.subjType.Compens",
                            title: "Компенсацией за самостоятельно приобретенные ТСР или оказанные услуги",
                            valueDefault: "compens"
                        },
                        {
                            name: "applicationSubject.disabilityGroupDropDown",
                            type: "DropDown",
                            valueName: "disabilityGroup",
                            title: "Группа инвалидности",
                            require: 1
                        },
                        {
                            name: "applicationSubject.disabilityGroupDropDown.Item1",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item1",
                            title: "I группа",
                            valueDefault: 1
                        },
                        {
                            name: "applicationSubject.disabilityGroupDropDown.Item2",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item2",
                            title: "II группа",
                            valueDefault: 2
                        },
                        {
                            name: "applicationSubject.disabilityGroupDropDown.Item3",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item3",
                            title: "III группа",
                            valueDefault: 3
                        },
                        {
                            name: "applicationSubject.applicationDateBox",
                            type: "DateBox",
                            valueName: "applicationDateBox",
                            title: "DateBox Наименование изделия",
                            comment: "DateBox comment",
                            require: 1,
                            valuedefault: "01.01.2012"
                        },
                        {
                            name: "applicationSubject.applicationCheckBox",
                            type: "CheckBox",
                            valueName: "applicationCheckBox",
                            title: "CheckBox Наименование изделия",
                            comment: "CheckBox comment",
                            require: 1,
                            valuedefault: 1
                        },
                        {
                            name: "applicationSubject.applicationLongTextBox",
                            type: "LongTextBox",
                            valueName: "applicationLongTextBox",
                            title: "applicationLongTextBox Наименование изделия",
                            require: 1,
                            comment: "LongTextBox comment",
                            valuedefault: "LongTextBox"
                        },
                        {
                            name: "applicationSubject.applicationlabel",
                            type: "Label",
                            valueName: "applicationlabel",
                            title: "Label Наименование изделия",
                            require: 1
                        },
                        {
                            name: "applicationSubject.subjName",
                            type: "TextBox",
                            valueName: "applicationSubject.subjName",
                            title: "Наименование изделия",
                            require: 1
                        },
                        {
                            name: "applicationSubject.worksType",
                            type: "RadioGroup",
                            valueName: "applicationSubject.worksType",
                            title: "Вид работ",
                            require: 1
                        },
                        {
                            name: "applicationSubject.worksType.Item1",
                            type: "RadioItem",
                            valueName: "applicationSubject.worksType.Item1",
                            title: "Получение",
                            valueDefault: "1"
                        },
                        {
                            name: "applicationSubject.worksType.Item2",
                            type: "RadioItem",
                            valueName: "applicationSubject.worksType.Item2",
                            title: "Ремонт",
                            valueDefault: "2"
                        },
                        {
                            name: "applicationSubject.worksType.Item3",
                            type: "RadioItem",
                            valueName: "applicationSubject.worksType.Item3",
                            title: "Досрочная замена",
                            valueDefault: "3"
                        },
                        {
                            name: "additionalInfo",
                            type: "GroupBox",
                            valueName: "additionalInfo",
                            title: "Дополнительные сведения"
                        },
                        {
                            name: "additionalInfo.height",
                            type: "TextBox",
                            valueName: "additionalInfo.height",
                            title: "Рост",
                            comment: "см"
                        },
                        {
                            name: "additionalInfo.height",
                            type: "TextBox",
                            valueName: "additionalInfo.height",
                            title: "Рост",
                            comment: "см"
                        },
                        {
                            name: "additionalInfo.weight",
                            type: "TextBox",
                            valueName: "additionalInfo.weight",
                            title: "Вес",
                            comment: "кг"
                        },
                        {
                            name: "additionalInfo.leftSize",
                            type: "TextBox",
                            valueName: "additionalInfo.leftSize",
                            title: "Левая нога",
                            comment: "кг"
                        },
                        {
                            name: "additionalInfo.rightSize",
                            type: "TextBox",
                            valueName: "additionalInfo.rightSize",
                            title: "Правая нога",
                            comment: "Размер обуви"
                        },
                        {
                            name: "additionalInfo.waistSize",
                            type: "TextBox",
                            valueName: "additionalInfo.waistSize",
                            title: "Объем талии",
                            comment: "см"
                        },

                        {
                            name: "applicationSubj",
                            type: "GroupBox",
                            valueName: "applicationSubject",
                            title: "Предмет заявления"
                        },
                        {
                            name: "applicationSubj.subjType",
                            type: "RadioGroup",
                            valueName: "applicationSubject.subjType",
                            title: "Прошу обеспечить",
                            require: 1
                        },
                        {
                            name: "applicationSubj.subjType.TSR",
                            type: "RadioItem",
                            valueName: "applicationSubject.subjType.TSR",
                            title: "Техническим средством реабилитации (ТСР)",
                            valueDefault: "tsr"
                        },
                        {
                            name: "applicationSubj.subjType.Compens",
                            type: "RadioItem",
                            valueName: "applicationSubject.subjType.Compens",
                            title: "Компенсацией за самостоятельно приобретенные ТСР или оказанные услуги",
                            valueDefault: "compens"
                        },
                        {
                            name: "applicationSubj.applicationSubjGroupBox",
                            type: "GroupBox",
                            valueName: "applicationSubject",
                            title: "Предмет заявления"
                        },
                        {
                            name: "applicationSubj.applicationSubjGroupBox.disabilityGroupDropDown",
                            type: "DropDown",
                            valueName: "disabilityGroup",
                            title: "Группа инвалидности",
                            require: 1
                        },
                        {
                            name: "applicationSubj.applicationSubjGroupBox.disabilityGroupDropDown.Item1",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item1",
                            title: "I группа",
                            valueDefault: 1
                        },
                        {
                            name: "applicationSubj.applicationSubjGroupBox.disabilityGroupDropDown.Item2",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item2",
                            title: "II группа",
                            valueDefault: 2
                        },
                        {
                            name: "applicationSubj.applicationSubjGroupBox.disabilityGroupDropDown.Item3",
                            type: "DropDownItem",
                            valueName: "disabilityGroup.Item3",
                            title: "III группа",
                            valueDefault: 3
                        },
                        {
                            name: "applicationSubj.applicationSubjGroupBox.waistSize",
                            type: "TextBox",
                            valueName: "additionalInfo.waistSize",
                            title: "Объем талии",
                            comment: "см"
                        }
                    ];

                    // prepare data from esia
                    function prepareUserData(user) {
                        if (user.samlUser != undefined) {
                            user.samlUser["passpRF"] = {
                                series: "",
                                number: "",
                                issuedBy: "",
                                issueDateFormatted: ""
                            };
                            user.samlUser["svid"] = {
                                series: "",
                                number: "",
                                issuedBy: "",
                                issueDateFormatted: ""
                            };
                            user.samlUser.person.principalDoc.forEach(function(obj) {
                                if (obj.documentType == "01") {
                                    // passport
                                    user.samlUser.passpRF = {
                                        series: obj.series,
                                        number: obj.number,
                                        issuedBy: obj.issuedBy,
                                        issueDateFormatted: obj.issueDateFormatted
                                    };
                                } else if (obj.documentType == "08") {
                                    // свидетельство о рождении
                                    user.samlUser.svid = {
                                        series: obj.series,
                                        number: obj.number,
                                        issuedBy: obj.issuedBy,
                                        issueDateFormatted: obj.issueDateFormatted
                                    };
                                }
                            });
                        }
                    }

                    // submit empty model
                    $scope.emptyModel = function() {
                        $scope.super_model.model = {};
                        $scope.debugShow = false;
                    };

                    // submit send request
                    $scope.Submit = function() {
                        $window.console.log("Submit model");
                        $window.console.info($scope.super_model.model);
                        $scope.debugShow = true;
                    };

                    // get sprav function
                    $scope.GetSprav = function(serviceId, idForm) {
                        $http
                            .get(apiRoot + "asp/sprav/" + serviceId + "/" + idForm)
                            .then(function(data) {
                                data = data.data;
                                $window.console.log("GetSprav " + idForm);
                                if (idForm == "REG") {
                                    calcSprav($scope.request.form, data, "RegBlockReginfo");
                                }
                                $window.console.info(data);
                                FillUserData($scope.request.schema.properties);
                                $scope.GetCustomControls(serviceId);
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    };

                    // fill step 4 required documents
                    $scope.fillDocuments = function(request, list) {
                        $window.console.log("fillDocuments");
                        if (list != undefined && list.length > 0) {
                            var form = {
                                title: "Документы, требуемые для подачи заявления",
                                type: "fieldset",
                                items: []
                            };

                            list.forEach(function(field, index) {
                                var name = "doc" + index;
                                var object = {
                                    type: "array",
                                    format: "singlefile",
                                    required: field.strict == "1" ? true : false,
                                    maxSize: {
                                        maximum: "5MB",
                                        validationMessage: "Превышен допустимый размер файла: ",
                                        validationMessage2: "Текущий размер файла: "
                                    }
                                };
                                request.schema.properties.Documets.properties[name] = object;
                                var obj = {
                                    key: "Documets." + name,
                                    title: field.name,
                                    description: field.comment,
                                    type: "nwpFileUpload",
                                    endpoint: ""
                                };
                                form.items.push(obj);
                            });
                            request.form.push(form);
                        }
                        $window.console.info($scope.request);
                    };

                    // GetReqDocument service
                    $scope.GetReqDocument = function(serviceId) {
                        $http
                            .get(apiRoot + "asp/requiredDoc/" + serviceId)
                            .then(function(data) {
                                data = data.data;
                                $scope.docList = data;
                                $window.console.log("GetReqDocument");
                                $window.console.info($scope.docList);
                                $scope.fillDocuments($scope.request, $scope.docList);
                                $scope.GetSprav(serviceId, "REG");
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    };

                    // 	HIDEN blocks from setting
                    $scope.hiddeBlocks = function(setting, form) {
                        setting.forEach(function(field) {
                            form.forEach(function(value) {
                                if (value.title == field.name) {
                                    if (field.hide == "1") {
                                        value["condition"] = "false";
                                    } else {
                                        if (field.require == "1") {
                                            value.title = field.title + " *";
                                        } else {
                                            value.title = field.title;
                                        }
                                    }
                                }
                            });
                        });
                    };

                    // fill schema from setting value
                    $scope.fillBlocks = function(setting, schema) {
                        for (var value in schema.properties) {
                            if (schema.properties[value].properties != undefined) {
                                for (var dept in schema.properties[value].properties) {
                                    setting.forEach(function(field) {
                                        var name = field.name.replace(/\./g, "");
                                        if (dept.indexOf("_pasp") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = field.title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (dept.indexOf("_svid") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = field.title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        }
                                        if (dept.indexOf("_prepasp") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = field.title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (dept.indexOf("_presvid") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = field.title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (dept.indexOf("_predstav") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = field.title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (name == dept) {
                                            schema.properties[value].properties[dept].title = field.title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        }
                                    });
                                }
                            }
                        }
                    };

                    // fill radio button
                    function fillRadio(data, setting, fieldId) {
                        data.forEach(function(obj) {
                            if (obj.type == "fieldset" || obj.type == "section") {
                                fillRadio(obj.items, setting, fieldId);
                            } else {
                                var object = obj.key.replace(/\./g, "");
                                if (object.indexOf(fieldId) != -1) {
                                    obj.titleMap = [];
                                    setting.forEach(function(setting) {
                                        var name = setting.name.replace(/\./g, "");
                                        ["PaymentPost", "PaymentBank", "PaymentKard", "PaymentList"].forEach(function(
                                            arr
                                        ) {
                                            if (arr.indexOf(name) != -1) {
                                                if (setting.hide != "1") {
                                                    obj.titleMap.push({
                                                        value: arr,
                                                        name: setting.title
                                                    });
                                                }
                                            }
                                        });
                                    });
                                }
                            }
                        });
                    }

                    function FillUserData(schema) {
                        $window.console.log("FillUserData");
                        for (var value in schema) {
                            if (schema[value].type == "object") {
                                FillUserData(schema[value].properties);
                            } else {
                                if (schema[value].defaultFieldName != undefined) {
                                    if ($scope.user.samlUser != undefined) {
                                        var name = "$scope.user.samlUser." + schema[value].defaultFieldName;
                                        $window.console.info(name);
                                        schema[value].default = eval(name);

                                        //							if(eval(name) != '') {
                                        //								schema[value].readonly = true;
                                        //							}
                                    }
                                }
                            }
                        }
                        $window.console.info(schema);
                    }

                    function deleteReadonly(block) {
                        $window.console.log("deleteReadonly");
                        for (var value in block.properties) {
                            block.properties[value].readonly = false;
                        }
                        $window.console.info(block);
                    }

                    //		$scope.$watch("super_model.model.PredstavBlock.PredstavCheck", function (value, oldValue) {
                    //            if (value != oldValue) {
                    //                if(value == true) {
                    //					$scope.super_model.model.Persinfo1Block = {};
                    //					deleteReadonly($scope.request.schema.properties.Persinfo1Block);
                    //					$scope.super_model.model.Dockinfo1Block = {};
                    //					deleteReadonly($scope.request.schema.properties.Dockinfo1Block);
                    //				}
                    //           }
                    //        });

                    // hide fields in block function
                    function calcCondition(data, setting) {
                        data.forEach(function(obj) {
                            if (obj.type == "fieldset" || obj.type == "section") {
                                calcCondition(obj.items, setting);
                            } else {
                                setting.forEach(function(setting) {
                                    var name = setting.name.replace(/\./g, "");
                                    var object = obj.key.split(".")[1];
                                    if (object.indexOf(name) != -1) {
                                        if (setting.hide == "1") obj["condition"] = "false";
                                    }
                                });
                            }
                        });
                    }

                    function calcSprav(data, spravList, setting) {
                        data.forEach(function(obj) {
                            if (obj.type == "fieldset" || obj.type == "section") {
                                calcSprav(obj.items, spravList, setting);
                            } else {
                                var object = obj.key.replace(/\./g, "");
                                if (object.indexOf(setting) != -1) {
                                    var list = {};
                                    if (spravList != undefined && spravList.length > 0) {
                                        spravList.forEach(function(szn) {
                                            list[szn.spravId] = szn.spravInfo;
                                        });

                                        if (obj.titleMap != undefined) {
                                            obj.titleMap = list;
                                        } else {
                                            obj["titleMap"] = list;
                                        }
                                    }
                                }
                            }
                        });
                    }

                    // GetCustomControls service
                    $scope.GetCustomControls = function(serviceId) {
                        $http
                            .get(apiRoot + "asp/controls/" + serviceId)
                            .then(function(data) {
                                data = data.data;
                                $window.console.log("GetCustomControls");
                                $window.console.info(data);
                                if (data.length > 0) {
                                    $scope.customControl(data, $scope.request);
                                    createSoap(data, $scope.request);
                                }

                                $scope.super_model.schema = angular.copy($scope.request.schema);
                                $scope.super_model.form = angular.copy($scope.request.form);
                                $scope.status = STATUS.READY; // the end of promises
                                $window.console.log("Past update");
                                $window.console.info($scope.request);
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    };

                    // prepareCustom service
                    $scope.customControl = function(customList, request) {
                        customList.forEach(function(element) {
                            var list = element.name.split(".");
                            if (element.type == "DropDown") {
                                var schema = {
                                    title: element.title,
                                    type: "string",
                                    placeholder: "- выберите"
                                };
                                var form = {
                                    key: element.name.replace(/\./g, ""),
                                    type: "strapselect",
                                    titleMap: {}
                                };
                                calcType(list, schema, form, element, request);
                            } else if (element.type == "DropDownItem") {
                                var i = 0;
                                if (list.length > 0) {
                                    i = list.length - 1;
                                }

                                var name = "";
                                for (var n = 0; n < i; n++) {
                                    name += list[n];
                                }
                                calcForm(request.form, name, element, null);
                            } else if (element.type == "GroupBox") {
                                var form = {
                                    title: element.title,
                                    type: "fieldset",
                                    ident: element.name.replace(/\./g, ""),
                                    items: []
                                };
                                calcType(list, null, form, element, request);
                            } else if (element.type == "RadioGroup") {
                                var schema = {
                                    title: element.title,
                                    type: "string",
                                    enum: []
                                };

                                var form = {
                                    key: element.name.replace(/\./g, ""),
                                    type: "radios",
                                    titleMap: []
                                };
                                calcType(list, schema, form, element, request);
                            } else if (element.type == "RadioItem") {
                                calcType(list, null, null, element, request);
                            } else if (element.type == "TextBox") {
                                var schema = {
                                    title: element.title,
                                    type: "string",
                                    description: element.comment != undefined ? element.comment : " ",
                                    default: element.valuedefault != undefined ? element.valuedefault : "",
                                    required: element.required == 1 ? true : false
                                };
                                var form = {
                                    key: element.name.replace(/\./g, "")
                                };
                                calcType(list, schema, form, element, request);
                            } else if (element.type == "LongTextBox") {
                                var schema = {
                                    title: element.title,
                                    description: element.comment != undefined ? element.comment : " ",
                                    type: "string",
                                    default: element.valuedefault != undefined ? element.valuedefault : ""
                                };

                                var form = {
                                    key: element.name.replace(/\./g, "")
                                };
                                calcType(list, schema, form, element, request);
                            } else if (element.type == "CheckBox") {
                                var schema = {
                                    title: element.title,
                                    required: element.required == 1 ? true : false,
                                    description: element.comment != undefined ? element.comment : " ",
                                    type: "boolean",
                                    default: element.valuedefault == 1 ? true : false
                                };

                                var form = {
                                    key: element.name.replace(/\./g, "")
                                };
                                calcType(list, schema, form, element, request);
                            } else if (element.type == "Label") {
                                var form = {
                                    type: "help",
                                    helpvalue: '<div class="alert alert-info">' + element.title + "</div>"
                                };
                                calcType(list, null, form, element, request);
                            } else if (element.type == "DateBox") {
                                var schema = {
                                    title: element.title,
                                    required: element.required == 1 ? true : false,
                                    type: "string",
                                    description: element.comment != undefined ? element.comment : " ",
                                    format: "datepicker",
                                    default: element.valuedefault != undefined ? element.valuedefault : ""
                                };

                                var form = {
                                    key: element.name.replace(/\./g, ""),
                                    dateOptions: {
                                        autoclose: true,
                                        startView: "2",
                                        dateFormat: "dd.MM.yyyy"
                                    }
                                };
                                calcType(list, schema, form, element, request);
                            }
                        });
                        $window.console.log("request");
                        $window.console.info(request);
                    };

                    function calcType(list, schema, form, element, request) {
                        var i = 0;
                        if (list.length > 0) {
                            i = list.length - 1;
                        }

                        var name = "";
                        if (i > 0) {
                            for (var n = 0; n < i; n++) {
                                name += list[n];
                            }
                            calcForm(request.form, name, element, form);
                        } else {
                            request.form.push(form);
                        }

                        if (schema != null) {
                            request.schema.properties[element.name.replace(/\./g, "")] = schema;
                        } else if (element.type == "RadioItem") {
                            request.schema.properties[name].enum.push(element.valueDefault);
                        }
                    }

                    function calcForm(list, name, element, data) {
                        list.forEach(function(obj) {
                            if (obj.type == "fieldset") {
                                if (obj.items.length > 0) {
                                    if (obj.ident == name) {
                                        obj.items.push(data);
                                    } else {
                                        calcForm(obj.items, name, element, data);
                                    }
                                } else {
                                    if (obj.ident == name) {
                                        obj.items.push(data);
                                    }
                                }
                            } else {
                                if (obj.key == name) {
                                    if (element.type == "DropDownItem") {
                                        obj.titleMap[element.valueDefault] = element.title;
                                    } else if (element.type == "RadioItem") {
                                        obj.titleMap.push({ value: element.valueDefault, name: element.title });
                                    }
                                }
                            }
                        });
                    }

                    // prepare <CustomControlsValue> object
                    function createSoap(list, request) {
                        list.forEach(function(obj) {
                            if (obj.type != "RadioItem" && obj.type != "DropDownItem" && obj.type != "GroupBox") {
                                var val = {
                                    name: obj.valueName,
                                    value: "model." + obj.valueName
                                };
                                if (request.soap == undefined) request["soap"] = [];
                                request.soap.push(val);
                            }
                        });
                        $window.console.log("CustomControlsValue");
                        $window.console.info(request);
                    }

                    //		var temp = {
                    //			schema: {
                    //				"type": "object",
                    //				"title": "",
                    //				"properties": {}
                    //			},
                    //			form: []
                    //		};

                    //		$scope.status = STATUS.LOADING;
                    //		$scope.customControl($scope.controls,temp); // customControl
                    //		createSoap($scope.controls, temp);
                    //		$scope.super_model.schema = angular.copy(temp.schema);
                    //		$scope.super_model.form = angular.copy(temp.form);
                    //		$scope.status = STATUS.READY; // the end of promises

                    // подготовка данных из есиа
                    prepareUserData($scope.user);

                    // load setting from service
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "asp/settings/2600000010000018806")
                        .then(function(data) {
                            data = data.data; // 2600000010000018806 2600000010000024248
                            $scope.request.setting = data;
                            $window.console.log("before update");
                            $window.console.info($scope.request);
                            $scope.hiddeBlocks($scope.request.setting, $scope.request.form);
                            $scope.fillBlocks($scope.request.setting, $scope.request.schema);
                            fillRadio($scope.request.form, $scope.request.setting, "PaymentBlockPaymentMethod");
                            calcCondition($scope.request.form, $scope.request.setting); // hide fields in block
                            $scope.GetReqDocument("2600000010000018806");
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                }
            };
        }
    ]);
})();

(function() {
    chargeList.$inject = ["$http", "$q", "$window", "STATUS", "objectService", "session", "STATUS", "utils", "$timeout", "$uibModal"];
    angular.module("rpgu.app").directive("chargeListIpsh", chargeList);

    function chargeList($http, $q, $window, STATUS, objectService, session, STATUS, utils, $timeout, $uibModal) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/personcab/chargeListIPSH.template.html',
            link: function ($scope) {
                $scope.paging = {
                    page: 1,
                    size: 5
                };

                $scope.refreshBills = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'ipsh/refresh_bills').then(function (data) {
                        var requestId = data.data.requestId;
                        function checkStatus() {
                            $timeout(function () {
                                $http.get(apiRoot + 'ipsh/refresh_bills/' + requestId).then(function (data) {
                                    console.log(data.data.request.status);
                                    if (data.data.request.status.code === "NEW") {
                                        checkStatus();
                                    } else {
                                        $scope.refresh();
                                    }
                                }).catch(utils.errorHandler($scope));
                            }, 1000)
                        }
                        checkStatus();
                    }).catch(utils.errorHandler($scope));
                };

                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
/*
                    $http.get(
                        apiRoot + 'ipsh/add_bill_gos'
                    ).then(function (data) {
*/
                        $http.get(
                            apiRoot + 'ipsh/bills',
                            {
                                params: {
                                    pageNumber: $scope.paging.page,
                                    pageSize:   $scope.paging.size,
                                    //requestId: data.data.requestId
                                }
                            }
                        ).then(function (data) {
                            data = data.data;
                            $scope.fullList = data.bills.bill;
                            $scope.status = STATUS.READY;
                            $scope.data = data;
                            $scope.filter();
                        }).catch(function (data) {
                            utils.errorHandler($scope)(data);
                            if ($scope.error === '') { // TODO: Get Error text
                                $scope.error = 'Время действия вашей сессии истекло';
                            }
                        });
//                    }).catch(utils.errorHandler($scope))
                };

                $scope.getDate = function (value) {
                    return new Date(value)
                };

                $scope.filter = function () {
                    $scope.list = angular.copy($scope.fullList);
                };
                $scope.showDetails = function (item) {
                    $uibModal.open({
                        templateUrl: '/personcab/chargeListIPSHDetails.template.html',
                        size: 'lg',
                        controllerAs: '$ctrl',
                        resolve: {
                            item: function () {
                                return item;
                            }
                        },
                        controller: ["$uibModalInstance", "item", function ($uibModalInstance, item) {
                            var $ctrl = this;
                            $ctrl.status = STATUS.LOADING;
                            $http.get(apiRoot + 'ipsh/bills/' + item.billId).then(function (data) {
                                $ctrl.status = STATUS.READY;
                                $ctrl.details = data.data;
                            }).catch(utils.errorHandler($ctrl));
                            $ctrl.close = function () {
                                $uibModalInstance.close();
                            };
                        }]
                    });
                };

                /**
                $scope.getPaymentComissions = function (item) {
                    $uibModal.open({
                        templateUrl: '/personcab/chargeListIPSHPaymentCommissions.template.html',
                        size: 'xlg',
                        controllerAs: '$ctrl',
                        resolve: {
                            item: function () {
                                return item;
                            }
                        },
                        controller: function ($uibModalInstance, item, $scope) {
                            var billId = item.billId;
                            var $ctrl = this;
                            $ctrl.status = STATUS.LOADING;
                            $http.get(apiRoot + 'ipsh/bills/' + billId).then(function (data) {
                                $ctrl.details = data.data;
                                $http.get(apiRoot + 'ipsh/bills/' + billId + "/payment_comissions", {
                                    params: {
                                        amount: $ctrl.details.bill.billSumm.amount[0].summ,
                                        summId: $ctrl.details.bill.billSumm.amount[0].summId
                                    }
                                }).then(function (data) {
                                    $ctrl.status = STATUS.READY;
                                    $ctrl.payment_comissions = data.data;
                                    if($ctrl.payment_comissions.error.errorCode === 3004) {
                                        $ctrl.warning = $ctrl.payment_comissions.error.errorMessage;
                                    }
                                    $ctrl.groups = {};
                                    if($ctrl.payment_comissions.payOptions.payOption) {
                                        $ctrl.payment_comissions.payOptions.payOption.forEach(function (payOption) {
                                            var group = $ctrl.groups[payOption.payMethodGroup.code];
                                            if (!group) {
                                                group = [];
                                                $ctrl.groups[payOption.payMethodGroup.code] = group;
                                            }
                                            group.push(payOption);
                                        });
                                    }
                                }).catch(utils.errorHandler($ctrl));
                            }).catch(utils.errorHandler($ctrl));

                            $ctrl.pay = function (item) {
                                if($ctrl.status === STATUS.LOADING) {
                                    return;
                                }
                                $ctrl.status = STATUS.LOADING;
                                $http.post(apiRoot + 'ipsh/bills/' + billId + "/create_payment", {
                                    payMethodCode: item.payMethod.code,
                                    paySystemCode: item.paySystem.code,
                                    payInstrumentId: item.paymentInstrument ? item.paymentInstrument.code : null,
                                    fee: item.fee,
                                    hash: item.hash,
                                    amount: $ctrl.details.bill.billSumm.amount[0].summ,
                                    summId: $ctrl.details.bill.billSumm.amount[0].summId
                                }).then(function (data) {
                                    data = data.data;
                                    if(data.paymentResult.url) {
                                        $ctrl.paymentForm = {
                                            redirectUrl: data.paymentResult.url,
                                            redirectMethod: data.paymentResult.httpMethodCode,
                                            params: data.paymentResult.params.attr
                                        };
                                        $timeout(function () {
                                            $scope.$broadcast('gateway.redirect');
                                        });
                                    }
                                    $ctrl.status = STATUS.READY;
                                }).catch(utils.errorHandler(item))
                            };

                            $ctrl.close = function () {
                                $uibModalInstance.close();
                            };
                        }
                    });

                };
                */

                $scope.refresh();
            }
        }

    }
})();

(function () {
    "use strict";
    //
    // var app = angular.module("rpgu.app");
    //
    // app.component("covid19Qr", {
    //     templateUrl: "/personcab/covid-19/covid-19-qr.component.html",
    //     bindings: {
    //         "passId": "<"
    //     },
    //     controller: function ($scope, $http, STATUS, utils, $routeParams, $q, covid19Service) {
    //         var $ctrl = this;
    //         $ctrl.passId = $routeParams.id;
    //         $ctrl.status = STATUS.LOADING;
    //         $q.all({
    //             pass: $http.get(apiRoot + "covid19/pass/" + $ctrl.passId),
    //             dict: covid19Service.getPassTypeDict()
    //         }).then(function (data) {
    //             $ctrl.pass = data.pass.data;
    //             $ctrl.dict = data.dict;
    //             $ctrl.status = STATUS.READY;
    //         }, utils.errorHandler($ctrl));
    //
    //         $ctrl.getPassTypeCaption = function(passType) {
    //             return covid19Service.getPassTypeCaption($ctrl.dict, passType);
    //         };
    //
    //         $ctrl.getWayToTravelCaption = function (value) {
    //             switch (value) {
    //                 case "WALK":
    //                     return "Я перемещаюсь пешком / на общественном транспорте";
    //                 case "CAR":
    //                     return "Я перемещаюсь на автомобиле";
    //                 default:
    //                     return value;
    //             }
    //         };
    //
    //         $ctrl.getDocName = function (pass) {
    //             return pass.docType === "PASSPORT" || !pass.docType ? "Паспорт гражданина РФ" : pass.docName;
    //         };
    //
    //         $ctrl.getStatusColor = covid19Service.getStatusColor;
    //
    //         $ctrl.getSmsCode = function () {
    //             return Math.random();
    //         };
    //     }
    // });
}());

(function () {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("covid19List", {
        templateUrl: "/personcab/covid-19/covid-19-list.component.html",
        controller: ["$scope", "$http", "STATUS", "utils", "$q", "covid19Service", "session", "ROLES", function ($scope, $http, STATUS, utils, $q, covid19Service, session, ROLES) {
            var $ctrl = this;
            $ctrl.requredFieldsToPass = [];
            $ctrl.error = undefined;
            $ctrl.loading = true;
            $ctrl.covidRole = session.hasRole(ROLES.COVID19)

            $ctrl.setError = function (e) {
                $ctrl.error = e.data.errorMessage || e.message;
                $ctrl.loading = false;
            }

            $ctrl.requiredFieldsName = {
                email: "Заполните адрес электронной почты.",
                snils: "Заполните СНИЛС.",
                confirmed: "Не подтверждена учетная запись. Обратитесь в ближайший МФЦ.",
            }

            $ctrl.noPhoneAndSnils = function () {
                try {
                    var ph = session.isPhoneVerified();
                    var snils = session.getUser().oAuthUser.snils;
                    if (!ph || !snils) {
                        return true;
                    }
                    return false;
                } catch (e) {
                    // ..
                }
                return true;
            }

            $ctrl.$onInit = function () {
                $http.get(apiRoot + "covid19/permanent")
                    .then(function (res) {
                        $ctrl.userPass = res.data;
                        $ctrl.loading = false;
                    }).catch(function (err) {
                    if (err.data && err.data.errorMessage && err.data.errorMessage.includes("Пропуск не найден")) {
                        var msg = err.data || err.message;
                        console.warn(msg);
                    } else {
                        $ctrl.setError(err)
                    }
                    $ctrl.loading = false;
                });

            }

            $ctrl.getPass = function () {
                $ctrl.loading = true;
                $http.post(apiRoot + "covid19/permanent")
                    .then(function (res) {
                        $ctrl.userPass = res.data;
                    })
                    .catch($ctrl.setError)
                    .finally(function () {
                        $ctrl.loading = false;
                    });

                // $http.get(apiRoot + "covid19/permanent/check")
                //     .then(function (res) {
                //         for (var key in res.data) {
                //             if (!res.data[key]) {
                //                 $ctrl.requredFieldsToPass.push($ctrl.requiredFieldsName[key]);
                //             }
                //         }
                //         if ($ctrl.requredFieldsToPass.length === 0) {
                //             $http.post(apiRoot + "covid19/permanent")
                //                 .then(function (res) {
                //                     $ctrl.userPass = res.data;
                //                 }).catch($ctrl.setError);
                //         }
                //     }).catch(utils.errorHandler($ctrl)).finally(function () {
                //     $ctrl.loading = false;
                // });
            };

            $ctrl.getPassTypeCaption = function (passType) {
                return covid19Service.getPassTypeCaption($ctrl.dict, passType);
            };

            $ctrl.isInfected = function (item) {
                return !item.isHealthy || item.isTraveled;
            };

            $ctrl.isAdmin = function () {
                return session.hasRole(ROLES.COVID19);
            };

            $ctrl.getStatusColor = covid19Service.getStatusColor;
        }]
    });
}());

(function () {
    organizationList.$inject = ["$http", "STATUS", "$window"];
    angular.module("rpgu.app").directive("covid19OrganizationList", organizationList);

    function organizationList($http, STATUS, $window) {
        return {
            restrict: 'E',
            scope: {
                isEdit: "=edit"
            },
            templateUrl: '/personcab/covid-19/covid-19-organizationList.template.html',
            link: function ($scope) {
                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'organizations', {
                        params: {
                            search: $scope.search ? $scope.search : "",
                            isCovid19: true,
                            offset: $scope.skip,
                            limit: $scope.max
                        }
                    }).then(function (data) {
                        data = data.data;
                        $scope.status = STATUS.READY;
                        $scope.count = data.count;
                        $scope.list = data.list;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? {message: data.errorMessage} : data;
                    });
                };

                $scope.onSearchKeyDown = function ($event) {
                    if ($event.which == 13) {
                        $scope.refresh();
                    }
                };

                $scope.skip = 0;
                $scope.max = "9";
                $scope.refresh();

                $scope.$watchGroup(["skip", "max"], function (oldValue, newValue) {
                    if (!_.isEqual(oldValue, newValue)) {
                        $scope.refresh();
                    }
                });

                $scope.onRowClick = function (item) {
                    $window.location.href = "/personcab/appointments_places?id=" + item.id + "&isCovid19=true";
                };
            }
        };
    }
})();

(function () {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("covid19Pass", {
        templateUrl: "/personcab/covid-19/covid-19-pass.component.html",
        controller: ["$scope", "$http", "STATUS", "utils", "$window", "$routeParams", "$q", "session", "esiaAuth", function ($scope, $http, STATUS, utils, $window, $routeParams, $q, session, esiaAuth) {
            var FORM_TEMPLATE_ID = "5e867ceb0cf2053cf75e6c3d";
            var $ctrl = this;
            $ctrl.model = {data: {}};
            $ctrl.formTemplate = {};
            $ctrl.wizardPage = null;
            $ctrl.id = $routeParams.id;
            $ctrl.isLoggedIn = session.isLoggedInSaml();
            $ctrl.skipLogin = false;
            $ctrl.settings = null;
            $ctrl.status = STATUS.LOADING;
            if ($ctrl.id) {
                $q.all({
                    template: $http.get(apiRoot + "formTemplate/" + FORM_TEMPLATE_ID + "/processed"),
                    data: $http.get(apiRoot + "covid19/pass/" + $ctrl.id + "/edit"),
                }).then(function (res) {
                    $ctrl.title = res.template.data.name;
                    $ctrl.formTemplate = res.template.data.formio;
                    // Удаляем первую и последнюю страницу
                    $ctrl.formTemplate.components.shift();
                    $ctrl.formTemplate.components.pop();
                    $ctrl.formTemplate.numPages = $ctrl.formTemplate.numPages - 2;
                    var data = res.data.data;
                    data.isRegisteredCoronavirus = data.isRegisteredCoronavirus ? "1": "0";
                    data.isRegisteredCoronavirusSuspicion = data.isRegisteredCoronavirusSuspicion ? "1": "0";
                    delete data.time;
                    $ctrl.model.data = data;
                    $ctrl.status = STATUS.READY;
                }, utils.errorHandler($ctrl));
            } else {
                $q.all({
                    template: $http.get(apiRoot + "formTemplate/" + FORM_TEMPLATE_ID + "/processed"),
                    settings: $ctrl.isLoggedIn ? $http.get(apiRoot + "me/settings") : null
                }).then(function (res) {
                    $ctrl.title = res.template.data.name;
                    $ctrl.formTemplate = res.template.data.formio;
                    if ($ctrl.isLoggedIn) {
                        $ctrl.settings = res.settings ? res.settings.data : null;
                        $ctrl.model.data.penalty = $ctrl.settings && $ctrl.settings.penalty ? $ctrl.settings.penalty.checking : false;
                        if ($ctrl.model.data.penalty) {
                            // Удаляем последнюю страницу
                            $ctrl.formTemplate.components.pop();
                            $ctrl.formTemplate.numPages--;
                        }
                    } else {
                        // Удаляем последнюю страницу
                        $ctrl.formTemplate.components.pop();
                        $ctrl.formTemplate.numPages--;
                    }
                    $ctrl.status = STATUS.READY;
                }, utils.errorHandler($ctrl));
            }

            $scope.$on('wizardPage', function (event) {
                $ctrl.wizardPage = event.targetScope.currentPage;
            });

            $scope.$on('wizardNext', function (event) {
                $ctrl.wizardPage = event.targetScope.currentPage;
            });

            $ctrl.login = function () {
                esiaAuth.login($window.location.href);
            };

            $ctrl.isLastPage = function () {
                return $ctrl.formTemplate.display !== "wizard" ||
                    ($ctrl.formTemplate.display === "wizard" && $ctrl.wizardPage === ($ctrl.formTemplate.numPages - 1));
            };

            $ctrl.isValid = function isValid() {
                var formController = $("form[name='formioForm']").data("$formController");
                return formController && formController.$valid && $ctrl.isLastPage();
            };

            $ctrl.handleSubmit = function () {
                $ctrl.status = STATUS.LOADING;
                var data = angular.copy($ctrl.model.data);
                data.isRegisteredCoronavirus = data.isRegisteredCoronavirus === "1";
                data.isRegisteredCoronavirusSuspicion = data.isRegisteredCoronavirusSuspicion === "1";
                if (data.isRegisteredCoronavirus || data.isRegisteredCoronavirusSuspicion) {
                    $window.location.href = "/covid-19_infected";
                    return;
                }
                if ($ctrl.id) {
                    $http.put(apiRoot + "covid19/pass", data).then(function (data) {
                        $window.location.href = "/covid-19_qr/" + data.data;
                    }, utils.errorHandler($ctrl));
                } else {
                    $q.all({
                        pass: $http.post(apiRoot + "covid19/pass", data),
                        settings: $ctrl.settings && $ctrl.settings.penalty && $ctrl.settings.penalty.checking !== $ctrl.model.penalty ?
                            $http.post(apiRoot + "me/settings/penalty/" + $ctrl.model.data.penalty) : null
                    }).then(function (res) {
                        $window.location.href = "/covid-19_qr/" + res.pass.data;
                    }, utils.errorHandler($ctrl));
                }
            };
        }]
    });
}());

(function () {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("covid19QrOrg", {
        templateUrl: "/personcab/covid-19/covid-19-qr-org.component.html",
        bindings: {
            "orgId": "<",
        },
        controller: [
            "$scope", "$http", "STATUS", "utils", "$routeParams", "moment",
            function ($scope, $http, STATUS, utils, $routeParams, moment) {
                var $ctrl = this;
                $ctrl.status = STATUS.LOADING;
                $ctrl.orgId = $routeParams.id;
                $ctrl.phoneMode = true;
                $ctrl.phone = "";
                $ctrl.code = "";
                $ctrl.submitCode = false;
                $ctrl.statusError = "";

                $ctrl.$onInit = function () {
                    $http.get(apiRoot + "covid19/permanent/org/" + $ctrl.orgId  + "/details")
                        .then(function (res) {
                            $ctrl.orgInfo = res.data;
                        }).catch(function (e) {
                            utils.errorHandler($ctrl)(e);
                        })
                }

                $ctrl.submitPhone = function() {
                    $ctrl.statusError = "";
                    if (!$ctrl.code) {
                        $http.post(apiRoot + "covid19/permanent/mobile", {
                            orgId: $ctrl.orgId,
                            phone: $ctrl.phone,
                        }).then(function (res) {
                            $ctrl.mobileVisitId = res.data.mobileVisitId;
                            $ctrl.phone = "";
                            $ctrl.phoneMode = false;
                        }).catch(function (e) {
                            $ctrl.statusError = e.data.errorMessage;
                        });
                    } else {
                        $http.post(apiRoot + "covid19/permanent/mobile/confirm", {
                            mobileVisitId: $ctrl.mobileVisitId,
                            code: $ctrl.code,
                        }).then(function (res) {
                            $ctrl.phone = "";
                            $ctrl.grantedInfo = res.data;
                            if (res.data && res.data.validBefore) {
                                $ctrl.grantedInfo.dateLeft = moment.utc(res.data.validBefore).format("HH:mm DD.MM.YYYY");
                            }
                        }).catch(function (e) {
                            $ctrl.statusError  = e.data.errorMessage;
                        })
                    }
                }

                // <<Styles
                $ctrl.qrOrgWrapperStyle = {
                    position: "relative",
                    padding: "10px",
                    overflow: "hidden",
                    height: "100vh",
                    backgroundColor: "rgb(246, 246, 246)",
                };
                $ctrl.formOverlay = {
                    width: "100%",
                    position: "absolute",
                    top: "50%",
                    left: "50%",
                    transform: "translate(-50%,-50%)",
                };
                $ctrl.formModal = {
                    margin: "20px auto",
                    width: "320px",
                    textAlign: "center",
                };
                $ctrl.formModalContent = {
                    textAlign: "center",
                    backgroundColor: "#fff",
                    padding: "40px 30px",
                    boxShadow: "0 1px 10px 1px #ccc",
                };
                $ctrl.formModalImg = {
                    marginBottom: "15px",
                    width: "80%",
                };
                $ctrl.formModalHeader = {
                    marginBottom: "20px",
                };
                $ctrl.titleHeader = {
                    fontSize: "2rem",
                    lineHeight: 1.3,
                    marginBottom: "5px",
                };
                $ctrl.formPhoneInputPhone = {
                    padding: "15px 10px 15px 25px",
                    fontSize: "16px",
                };
                $ctrl.formPhoneInputCode = {
                    padding: "15px 10px",
                    fontSize: "16px",
                };
                $ctrl.submitStyle = {
                    width: "100%",
                };
                $ctrl.grantedIcon = {
                    display: "inline-block",
                    width: "50px",
                    height: "50px",
                    padding: "8px",
                    border:  "2px solid black",
                    borderRadius: "50%",
                    marginBottom: "10px",
                };
                $ctrl.mb = {
                    marginBottom: "20px",
                };
            }
        ]
    });
}());

(function () {
    "use strict";

    var app = angular.module("rpgu.app");

    app.component("covid19Qr", {
        templateUrl: "/personcab/covid-19/covid-19-qr.component.html",
        bindings: {
            "passId": "<"
        },
        controller: [
            "$scope", "$http", "STATUS", "utils", "$routeParams", "$timeout", "session", "ROLES",
            function ($scope, $http, STATUS, utils, $routeParams, $timeout, session, ROLES) {
                var $ctrl = this;
                $ctrl.passId = $routeParams.id;
                $ctrl.status = STATUS.LOADING;
                $ctrl.visitUrl = apiRoot + "covid19/permanent/visit/" + $ctrl.passId;
                $ctrl.rejected = false;
                $ctrl.passed = false;
                $ctrl.loaded = false;
                $ctrl.isValidData = "";

                $ctrl.isCovidOperator = session.hasRole(ROLES.COVID19);
                $ctrl.isLoggedIn = session.isLoggedIn();

                $ctrl.$onInit = function () {
                    $http.get(apiRoot + "covid19/permanent/" + $ctrl.passId)
                        .then(function (res) {
                            $ctrl.pass = res.data;
                            // Если открыл залогиненый проверяющий и пользователь в зоне риска
                            if ($ctrl.isCovidOperator && $ctrl.isLoggedIn) {
                                var body = {action: "pass"};
                                if (res.data.isInfected) {
                                    body = {action: "reject"};
                                }
                                $http.put($ctrl.visitUrl, body)
                                    .then(function () {
                                        if (res.data.isInfected) {
                                            $ctrl.rejected = true;
                                        } else {
                                            $ctrl.passed = true;
                                        }
                                    }).catch(utils.errorHandler($ctrl));
                            }

                            $ctrl.status = STATUS.READY;
                        })
                        .catch(function (e) {
                            console.warn(e);
                            $ctrl.isValidData = e.data.errorMessage;
                            utils.errorHandler($ctrl)(e);
                        }).finally(function () {
                            $ctrl.loaded = true;
                        });
                }

                $ctrl.toLogin = function() {
                    var backUrl = "/covid-19_qr/" + $ctrl.passId;
                    window.location.href = "/admin?backUrl=" + backUrl;
                }

                $ctrl.logout = function() {
                    $http.get(apiRoot + "oauth/logout")
                        .then(function() {
                            window.location.href = "/covid-19_qr/" + $ctrl.passId;
                        });
                }
            }
        ]
    });
}());

(function() {
    customSchedule.$inject = ["$http", "$routeParams", "session", "ROLES", "STATUS"];
    angular.module("rpgu.app").directive("customSchedule", customSchedule);

    function customSchedule($http, $routeParams, session, ROLES, STATUS) {
        return {
            restrict: 'E',
            scope: {
                data: "=",
                value: "="
            },
            require: 'ngModel',
            templateUrl: '/personcab/customSchedule.template.html',
            link: function($scope, $element, $attrs, ngModel) {
                $scope.selected = null;

                $scope.isLocked = function(day) {
                    if (day && (day.selectLocked || day.moment.isBefore(moment()))) {
                        return true;
                    }
                }

                $scope.select = function(day) {
                    $scope.selected = day;
                    if (day != null) {
                        var date = day.moment.format("DD.MM.YYYY").toString();
                        ngModel.$setViewValue(date);
                        // $scope.value = day.moment.format("DD.MM.YYYY").toString();
                    }
                };

                if ($scope.data.length > 0) {
                    $scope.moment = moment(moment($scope.data[0].value).utc().startOf("month"));
                } else {
                    $scope.moment = moment().utc().startOf("month");
                }

                $scope.days = getDaysOfWeek();
                $scope.weeks = getWeeks($scope.data);

                $scope.monthBack = function() {
                    $scope.moment.subtract(1, "month");
                    $scope.weeks = getWeeks($scope.data);
                };

                $scope.monthForward = function() {
                    $scope.moment.add(1, "month");
                    $scope.weeks = getWeeks($scope.data);
                };

                function getWeeks(dates) {
                    var numWeeks = 6;
                    var curMoment = $scope.moment.clone().startOf("week");
                    var endMoment = curMoment.clone().add(numWeeks, "week");
                    $scope.weeks = [];
                    $scope.select(null);
                    var weeks = [];
                    for (var w = 0; w < numWeeks; w++) {
                        var week = [];
                        for (var d = 0; d < 7; d++) {
                            var nextMoment = curMoment.clone().add(1, "day");
                            var day = {
                                selectLocked: true,
                                title: null,
                                moment: curMoment.clone()
                            };

                            dates.forEach(function(item) {
                                if (curMoment.format("DD") == moment(item.value).local().format("DD")
                                    && curMoment.format("MM") == moment(item.value).local().format("MM")
                                    && curMoment.format("YYYY") == moment(item.value).local().format(
                                        "YYYY")) {
                                    day.selectLocked = false;
                                }
                            });

                            week.push(day);
                            curMoment = nextMoment;
                        }
                        weeks.push({ week: week })
                    }
                    return weeks;
                }

                function getDaysOfWeek() {
                    var m = moment().startOf('week');
                    var res = [];
                    for (var p = 0; p < 7; p++) {
                        res.push({ day: m.day(), title: m.format("dd") });
                        m.add(1, "d");
                    }
                    return res;
                }
            }
        }

    }
})();

(function() {
    angular
        .module("rpgu.app")
        .directive("dosAppeal", ["$http", "$timeout", "$location", "STATUS", "REQUEST_STATUS", "$sce", "$q", "session", "utils", "$routeParams", "DigitalRGUService", function(
            $http,
            $timeout,
            $location,
            STATUS,
            REQUEST_STATUS,
            $sce,
            $q,
            session,
            utils,
            $routeParams,
            DigitalRGUService
        ) {
            return {
                restrict: "E",
                templateUrl: "/personcab/dos_appeal.template.html",
                link: function($scope) {
                    $scope.includes = {
                        record: "/includes/record.tmpl.html"
                    };

                    $scope.idService = $routeParams.idService || null;
                    $scope.procedureID = $routeParams.procedure || null;
                    $scope.uuid = $routeParams.uuid || null;

                    $scope.dateService = moment($routeParams.date || $routeParams.dateService);

                    $scope.selectedService = null;
                    $scope.showSelectService = false;

                    $scope.selectService = function selectService(selectedService) {
                        if (selectedService) {
                            $location.path($location.path())
                                .search("procedure", selectedService.service_id)
                                .reload();
                        }
                    };

                    $scope.getFullServiceName = function getFullServiceName(service) {
                        return "[" + service.service_id + "] - " + service.service_title;
                    };

                    $scope.findService = function findService(query) {
                        if (query && query.length && query.length > 2) {
                            return DigitalRGUService.getService(query);
                        }
                    };

                    if (!$scope.idService && !$scope.procedureID && !$scope.uuid) {
                        $scope.showSelectService = true
                        return;
                    }

                    $scope.request = {};
                    $scope.debugShow = false;
                    $scope.user = angular.copy(session.sessionData.user);

                    $scope.findFiasAsync = utils.findFiasAsync;

                    $scope.schemaForm = {
                        schema: {},
                        form: [],
                        model: {}
                    };

                    $scope.request.schema = {
                        type: "object",
                        // title: "",
                        notitle: true,
                        properties: {
                            service: {
                                title: "за получением которой Вы обращались*",
                                required: true,
                                readonly: true,
                                type: "string",
                                // description: "выберите документ или услугу из своих электронных заявлений",
                                placeholder: "- выберите из списка"
                            },
                            dateService: {
                                title: "на получение услуги",
                                type: "string",
                                // description: "Дата подачи заявления на получение услуги",
                                format: "datepicker"
                            },
                            deptInfo: {
                                // title: " ", // "Ведомство*",
                                notitle: true,
                                readonly: true,
                                required: true,
                                type: "string",
                                // description: "Для уточнения искомого местоположения ведомства введите адрес или его наименование в строке поиска.",
                                placeholder: "- выберите из списка"
                            },
                            /*
                        "subdivision": {
                            "title":       "Выберите Подразделение",
                            "required":    true,
                            "type":        "string",
                            "description": "Выберите Подразделение оказывающее услугу",
                            "placeholder": "- выберите из списка"
                        },
*/
                            worker: {
                                title: "Сотрудник с которым Вы общались",
                                type: "string",
                                // description: "с которым Вы общались"
                            },
                            /*
                        "complaint":   {
                            "title":   " ",
                            "type":    "array",
                            "default": [],
                            "items":   {
                                "type": "string",
                                "enum": [
                                    "TypeAppeal$689736",
                                    "TypeAppeal$689741"
                                ]
                            }
                        },
                        "appealText":     {
                            "title":             "комментарии",
                            "type":              "string",
                            "description":       "Максимальное количество символов — 2000",
                            "maxLength":         2000,
                            "validationMessage": "Вы превысили максимальное число символов 2000"
                        },
*/
                            dopInfo: {
                                // title: "дополнительные сведения",
                                notitle: true,
                                type: "string",
                                description: "Максимальное количество символов — 2000",
                                maxLength: 2000,
                                validationMessage: "Вы превысили максимальное число символов 2000"
                            },
                            files: {
                                type: "array",
                                format: "singlefile",
                                maxSize: {
                                    maximum: "5MB",
                                    validationMessage: "Превышен допустимый размер файла: ",
                                    validationMessage2: "Текущий размер файла: "
                                }
                            },
                            require: {
                                title: " ", //"ваши требования",
                                notitle: true,
                                type: "string",
                                description: "Максимальное количество символов — 2000",
                                maxLength: 2000,
                                validationMessage: "Вы превысили максимальное число символов 2000"
                            },
                            response: {
                                type: "object",
                                properties: {
                                    byEmail: {
                                        type: "boolean",
                                        title: "По электронной почте",
                                        description: "",
                                        default: false
                                    },
                                    byPost: {
                                        type: "boolean",
                                        title: "По почте",
                                        description: "",
                                        default: false
                                    },
                                    postAddr: {
                                        title: "Адрес",
                                        type: "string",
                                        placeholder: "Регион, населенный пункт, улица"
                                    }
                                }
                            },

                            persInfo: {
                                type: "object",
                                // title: "",
                                notitle: true,
                                properties: {
                                    lastName: {
                                        title: "Фамилия",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "name.lastName"
                                    },
                                    firstName: {
                                        title: "Имя",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "name.firstName"
                                    },
                                    middleName: {
                                        title: "Отчество",
                                        type: "string",
                                        description: "",
                                        defaultFieldName: "name.middleName"
                                    },
                                    mPhone: {
                                        title: "Контактный телефон",
                                        type: "string",
                                        description: "",
                                        required: true,
                                        readonly: true,
                                        defaultFieldName: "person.personMobilePhone"
                                    },
                                    email: {
                                        title: "Электронная почта",
                                        type: "string",
                                        description: "",
                                        defaultFieldName: "person.email"
                                    },
                                    regAddress: {
                                        title: "Адрес*",
                                        type: "string",
                                        required: true,
                                        placeholder: "Регион, населенный пункт, улица"
                                    },
                                    predstav: {
                                        type: "object",
                                        properties: {
                                            predstavCheck: {
                                                type: "boolean",
                                                title: "Услуга была оказана другому человеку или юридическому лицу, я являюсь представителем при подаче жалобы",
                                                description: "",
                                                default: false
                                            },
                                            fio: {
                                                title: "ФИО или Наименование юридического лица",
                                                type: "string",
                                                description: ""
                                            },
                                            document: {
                                                type: "array",
                                                format: "singlefile",
                                                maxSize: {
                                                    maximum: "5MB",
                                                    validationMessage: "Превышен допустимый размер файла: ",
                                                    validationMessage2: "Текущий размер файла: "
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };

                    $scope.request.form = [
                        {
                            title: "1. Укажите услугу",
                            type: "fieldset",
                            htmlClass: "fieldset-root",
                            description: "Заполните информацию об услуге, при получении которой у вас возникли сложности.",
                            items: [
                                {
                                    type: "help",
                                    htmlClass: "mb-025",
                                    helpvalue: "<strong>Документ или услуга *</strong>"
                                },
                                {
                                    key: "service",
                                    type: "strapselect",
                                    titleMap: {
                                        null: "нет данных"
                                    }
                                },
                                {
                                    type: "help",
                                    htmlClass: "mb-025",
                                    helpvalue: "<strong>Дата подачи заявления</strong>"
                                },
                                {
                                    key: "dateService",
                                    dateOptions: {
                                        autoclose: true,
                                        startView: "2",
                                        dateFormat: "dd.MM.yyyy"
                                    }
                                },
                                {
                                    key: "worker"
                                }
                            ]
                        },
                        {
                            title: "2. Укажите ведомство",
                            type: "fieldset",
                            description: "Заполните информацию о ведомстве, на которое вы жалуетесь.",
                            items: [{
                                type: "section",
                                htmlClass: "row",
                                items: [{
                                    type: "section",
                                    htmlClass: "col-xs-12",
                                    items: [{
                                        key: "deptInfo",
                                        type: "strapselect",
                                        notitle: true,
                                        style: "sr-only",
                                        onChange: "function() { $scope.schemaForm.model.subdivisionId = false; $scope.schemaForm.model.subdivision = undefined; if ($scope.schemaForm.model.deptInfo){ $timeout(function() { $scope.schemaForm.model.subdivisionId = true; }, 1) } }",
                                        titleMap: {
                                            null: "нет данных"
                                        }
                                    }]
                                }]
                            }]
                        },
                        {
                            title: "4. Укажите дополнительные сведения",
                            type: "fieldset",
                            description: "Что бы вы хотели указать дополнительно к представленным выше сведениям?",
                            items: [{
                                    key: "dopInfo",
                                    notitle: true,
                                    // title: "",
                                    type: "textarea"
                                },
                                {
                                    key: "files",
                                    title: "Прикрепленные файлы",
                                    description: "Прикрепите необходимые файлы, которые имеют отношение к предмету Вашей жалобы. Электронные версии документов, отсканированные копии, фото, аудио материалы и пр. Максимальный размер прикрепленных файлов – 5 Мб.",
                                    type: "nwpFileUpload",
                                    endpoint: ""
                                }
                            ]
                        },
                        {
                            title: "5. Укажите ваши требования",
                            type: "fieldset",
                            description: "Что вы хотите добиться от ведомства жалобой?",
                            items: [{
                                key: "require",
                                type: "textarea"
                            }]
                        },
                        {
                            title: "6. Персональные данные",
                            type: "fieldset",
                            description: "",
                            items: [{
                                    type: "section",
                                    htmlClass: "row",
                                    items: [{
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [{
                                                key: "persInfo.lastName"
                                            }]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [{
                                                key: "persInfo.firstName"
                                            }]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-4",
                                            items: [{
                                                key: "persInfo.middleName"
                                            }]
                                        }
                                    ]
                                },
                                {
                                    type: "section",
                                    htmlClass: "row",
                                    items: [{
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [{
                                                key: "persInfo.mPhone"
                                            }]
                                        },
                                        {
                                            type: "section",
                                            htmlClass: "col-xs-6",
                                            items: [{
                                                key: "persInfo.email"
                                            }]
                                        }
                                    ]
                                },
                                {
                                    key: "persInfo.regAddress",
                                    type: "inputDropdown",
                                    options: {
                                        callback: "findFiasAsync"
                                    }
                                },
                                {
                                    type: "section",
                                    htmlClass: "mb-2",
                                    items: [{
                                        key: "persInfo.predstav.predstavCheck"
                                    }]
                                },
                                {
                                    // title: "",
                                    notitle: true,
                                    type: "fieldset",
                                    condition: "model.persInfo.predstav.predstavCheck",
                                    description: "Укажите ФИО и адрес места жительства заявителя или наименование и адрес местоположения юридического лица, представителем которого Вы выступаете.",
                                    items: [{
                                            key: "persInfo.predstav.fio"
                                        },
                                        {
                                            key: "persInfo.predstav.document",
                                            title: "Прикрепленные файлы",
                                            description: "Приложите документ, на основании которого Вы выступаете представителем. Максимальный размер прикрепленных файлов – 5 Мб.",
                                            type: "nwpFileUpload",
                                            endpoint: ""
                                        }
                                    ]
                                },
                                {
                                    title: "Способ получения ответа",
                                    type: "fieldset",
                                    description: "Укажите способ, которым ведомство свяжется с Вами, чтобы предоставить ответ или запросить дополнительную информацию.",
                                    items: [{
                                            key: "response.byEmail"
                                        },
                                        {
                                            key: "response.byPost"
                                        },
                                        {
                                            key: "response.postAddr",
                                            type: "inputDropdown",
                                            options: {
                                                callback: "findFiasAsync"
                                            },
                                            condition: "model.response.byPost"
                                        }
                                    ]
                                }
                            ]
                        }
                    ];

                    // fill Service title map
                    function fillTitle(form, setting, name) {
                        form.forEach(function(obj) {
                            if (obj.type == "fieldset" || obj.type == "section") {
                                fillTitle(obj.items, setting, name);
                            } else {
                                if (obj.key == name) {
                                    obj.titleMap = {};
                                    setting.forEach(function(val) {
                                        obj.titleMap[val.value] = val.name;
                                    });
                                }
                            }
                        });
                    }

                    // function fillTitle2(form, setting, name) {
                    //     form.forEach(function(obj) {
                    //         if (obj.type == "fieldset" || obj.type == "section") {
                    //             fillTitle2(obj.items, setting, name);
                    //         } else {
                    //             if (obj.key == name) {
                    //                 obj.titleMap = setting;
                    //             }
                    //         }
                    //     });
                    // }

                    function FillUserData(schema) {
                        for (var value in schema) {
                            if (schema[value].type == "object") {
                                FillUserData(schema[value].properties);
                            } else {
                                if (schema[value].defaultFieldName != undefined) {
                                    if ($scope.user.samlUser != undefined) {
                                        var arr = schema[value].defaultFieldName.split(".");
                                        if ($scope.user.samlUser[arr[0]] != undefined) {
                                            var name = "$scope.user.samlUser." + schema[value].defaultFieldName;
                                            schema[value].default = eval(name);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // submit empty model
                    $scope.emptyModel = function() {
                        $scope.schemaForm.model = {};
                        $scope.debugShow = false;
                    };

                    // submit send request
                    $scope.Submit = function() {
                        $scope.$broadcast("schemaFormValidate");
                        var model = $scope.schemaForm.model;
                        if (!model.service) {
                            alert('Укажите "Услугу"');
                            return;
                        }
                        if (!model.dopInfo && model.complaint.length <= 0) {
                            alert('Укажите "дополнительные сведения" или "причину подачи жалобы"');
                            return;
                        }
                        if (!model.persInfo.firstName) {
                            alert('Укажите "Имя"');
                            return;
                        }
                        if (!model.persInfo.lastName) {
                            alert('Укажите "Фамилию"');
                            return;
                        }
                        if (!model.persInfo.mPhone) {
                            alert('Укажите "Контактный телефон"');
                            return;
                        }
                        if (!model.persInfo.regAddress) {
                            alert('Укажите "Адрес"');
                            return;
                        }
                        if (model.persInfo.predstav.predstavCheck && !model.persInfo.predstav.fio) {
                            alert('Укажите "ФИО или Наименование юридического лица"');
                            return;
                        }

                        if (!model.response.byEmail && !model.response.byPost) {
                            alert('Укажите "Способ получения ответа"');
                            return;
                        }

                        $scope.status = STATUS.LOADING;
                        // $scope.debugShow = true;
                        if ($scope.uuid) {
                            $http
                                .post(apiRoot + "appeal/" + $scope.uuid + "/edit", $scope.schemaForm.model)
                                .then(function() {
                                    $scope.status = STATUS.READY;
                                    alert("Жалоба отправлена повторно");
                                    $location.path("/personcab/index").search("tab", "appeal");
                                })
                                .catch(utils.errorHandler($scope));
                        } else {
                            $http
                                .post(apiRoot + "appeal/create", $scope.schemaForm.model)
                                .then(function() {
                                    // var uuid = data.data;
                                    $scope.status = STATUS.READY;
                                    alert("Жалобы успешно отправлена");
                                    $location.path("/personcab/index").search("tab", "appeal");
                                })
                                .catch(utils.errorHandler($scope));
                        }
                    };

                    // prepare data from esia
                    function prepareUserData(user) {
                        if (user.samlUser != undefined) {
                            user.samlUser["principalAdr"] = {
                                index: "",
                                region: "",
                                city: "",
                                street: "",
                                house: "",
                                corpus: "",
                                flat: ""
                            };
                            if (user.samlUser.person) {
                                if (user.samlUser.person.principalAdr) {
                                    if (user.samlUser.person.principalAdr.PERSON_REGISTRATION) {
                                        user.samlUser.principalAdr.index =
                                            user.samlUser.person.principalAdr.PERSON_REGISTRATION.index;
                                        user.samlUser.principalAdr.region =
                                            user.samlUser.person.principalAdr.PERSON_REGISTRATION.region;
                                        user.samlUser.principalAdr.city =
                                            user.samlUser.person.principalAdr.PERSON_REGISTRATION.city;
                                        user.samlUser.principalAdr.street =
                                            user.samlUser.person.principalAdr.PERSON_REGISTRATION.street;
                                        user.samlUser.principalAdr.house =
                                            user.samlUser.person.principalAdr.PERSON_REGISTRATION.house;
                                        user.samlUser.principalAdr.corpus =
                                            user.samlUser.person.principalAdr.PERSON_REGISTRATION.corpus;
                                        user.samlUser.principalAdr.flat =
                                            user.samlUser.person.principalAdr.PERSON_REGISTRATION.flat;
                                    }
                                }
                            }
                        }
                    }

                    var addr = $scope.user.oAuthUser.addrs.PRG
                        ? $scope.user.oAuthUser.addrs.PRG
                        : $scope.user.oAuthUser.addrs.PLV;
                    if (addr) {
                        var strAddr = [addr.addressStr, addr.house, addr.flat]
                            .filter(function(item) {
                                return !!item;
                            })
                            .join(", ");
                        $scope.schemaForm.model = { persInfo: { regAddress: strAddr } };
                    }

                    prepareUserData($scope.user);

                    // load all data
                    $scope.status = STATUS.LOADING;

                    function mapItem(item) {
                        return {
                            value: item.UUID,
                            name: item.title
                        };
                    }

                    if ($scope.idService || $scope.procedureID) {
                        // создание новой жалобы на основе услуги
                        $scope.schemaForm.model.dateService = moment($scope.dateService).format("DD.MM.YYYY");

                        var promise = null;
                        if ($scope.idService) {
                            promise = DigitalRGUService.get($scope.idService);
                        } else {
                            promise = $http.get(apiRoot + "service/search/" + $scope.procedureID)
                                .then(function(response) {
                                    return response.data[0] || {};
                                });
                        }
                        promise.then(function(service) {
                                FillUserData($scope.request.schema.properties);
                                var q = apiRoot + "appeal/get_ou/" + service.dept_id;
                                return $http.get(encodeURI(q)).then(function(response) {
                                        var data = response.data;
                                        if (data.length === 0) {
                                            utils.errorHandler($scope)(Error("Ведомство не найдено в системе ФГИС ДО"));
                                        } else {
                                            fillTitle($scope.request.form, data.map(mapItem), "deptInfo");
                                            $scope.schemaForm.model.deptInfo = data[0].UUID;
                                            $q.all({
                                                    service: $http.get(apiRoot + "appeal/find_life_events/" + $scope.schemaForm.model.deptInfo),
                                                    complaint: $http.get(apiRoot + "appeal/caseList/" + $scope.schemaForm.model.deptInfo)
                                                })
                                                .then(function(data) {
                                                    var services = data.service.data;
                                                    fillTitle($scope.request.form, services.map(mapItem), "service");
                                                    var s = services.find(function(item) {
                                                        return (item.title == service.service_title);
                                                    });
                                                    $scope.schemaForm.model.service = s == null ? null : s.UUID;

                                                    $scope.schemaForm.model.caseNames = {};
                                                    data.complaint.data.forEach(function(cs) {
                                                        $scope.schemaForm.model.caseNames[cs.value] = cs.name;
                                                    });

                                                    fillComplaints(data, $scope.request, null);
                                                    $scope.schemaForm.schema = angular.copy($scope.request.schema);
                                                    $scope.schemaForm.form = angular.copy($scope.request.form);
                                                    $scope.status = STATUS.READY; // the end of promises
                                                })
                                                .catch(utils.errorHandler($scope));
                                        }
                                    })
                                    .catch(utils.errorHandler($scope));
                            })
                            .catch(utils.errorHandler($scope));
                    } else if ($scope.uuid) {
                        // жалоба уже создана
                        $http
                            .get(apiRoot + "appeal/get_appeal/" + $scope.uuid)
                            .then(function(data) {
                                var appeal = data.data;
                                $q
                                    .all({
                                        service: $http.get(
                                            apiRoot + "appeal/find_life_events/" + appeal.sProvider.uuid
                                        ),
                                        complaint: $http.get(
                                            apiRoot + "appeal/find_type_appeal/" + appeal.sProvider.uuid
                                        )
                                    }).then(function(data) {
                                        var deptInfo = [{UUID: appeal.sProvider.uuid, title: appeal.sProvider.title}];
                                        fillTitle($scope.request.form, deptInfo.map(mapItem), "deptInfo");
                                        $scope.schemaForm.model.deptInfo = deptInfo[0].UUID;

                                        var services = data.service.data;
                                        fillTitle($scope.request.form, services.map(mapItem), "service");
                                        $scope.schemaForm.model.service = appeal.slmService.uuid;

                                        fillComplaints(data, $scope.request, appeal);

                                        // var complaint = data.complaint.data;
                                        // fillTitle2($scope.request.form, complaint.map(mapItem), "complaint");

                                        var model = $scope.schemaForm.model;

                                        model.dateService = moment(appeal.dateToService).format(
                                            "DD.MM.YYYY");

                                        model.worker = appeal.dlToService;

                                        // model.complaint = appeal.appealCase.objects.map(function(item) {
                                        //     return item.uuid;
                                        // });

                                        model.dopInfo = appeal.appealBasis;
                                        model.require = appeal.ARequirement;

                                        model.caseNames = {};
                                        data.complaint.data.forEach(function(cs) {
                                            model.caseNames[cs.UUID] = cs.title;
                                        });

                                        FillUserData($scope.request.schema.properties);

                                        model.persInfo = { email: appeal.aEmail, regAddress: appeal
                                                .aAddress };
                                        model.response = {
                                            postAddr: appeal.aPostAddress,
                                            byEmail: appeal.replyType.items.find(function(item) {
                                                return item.code == "email";
                                            }) !== undefined,
                                            byPost: appeal.replyType.items.find(function(item) {
                                                return item.code == "post";
                                            }) !== undefined
                                        };

                                        $scope.schemaForm.schema = angular.copy($scope.request.schema);
                                        $scope.schemaForm.form = angular.copy($scope.request.form);
                                        $scope.status = STATUS.READY; // the end of promises
                                    })
                                    .catch(utils.errorHandler($scope));
                            })
                            .catch(utils.errorHandler($scope));
                    } else {
                        utils.errorHandler($scope)(Error("Параметр idService | uuid не задан"));
                    }

                    function getCasList(appeal) {
                        if (!appeal || !appeal.appealText) {
                            return [];
                        }
                        var cases, i;
                        if (appeal) {
                            cases = [];
                            var splitted = appeal.appealText.split(/;/g);
                            for (i = 0; i < splitted.length; i = i + 2) {
                                cases.push({ title: splitted[i], text: splitted[i + 1] });
                            }
                        }
                        return cases;
                    }

                    function fillComplaints(data, schemaForm, appeal) {
                        // присутствие параметра appeal != null означает, что заявление на редактирование, и нужно заполнить ранее выбранные значения причин
                        var formField = {
                            title: "3. Укажите причину подачи жалобы",
                            type: "fieldset",
                            description: "Заполните информацию о ведомстве, на которое вы жалуетесь.В соответствии с Федеральным законом №210-ФЗ «Об организации предоставления государственных и муниципальных услуг» Вы можете подать жалобу по следующим причинам. Выберите одну или несколько причин подачи жалобы и опишите подробности допущенных нарушений со стороны ведомств.",
                            items: []
                        };
                        var complaint = {
                            type: "object",
                            properties: {}
                        };
                        var appealCases = getCasList(appeal);
                        data.complaint.data.forEach(function(item) {
                            var val = !appeal ? item.value : item.UUID;
                            var nam = !appeal ? item.name : item.title;
                            formField.items.push({
                                key: "complaint.complaint_" + val
                            });
                            formField.items.push({
                                key: "complaint.complaint_" + val + "_comment",
                                type: "textarea",
                                title: "Укажите комментарии",
                                condition: "model.complaint.complaint_" + val
                            });
                            complaint.properties["complaint_" + val] = {
                                type: "boolean",
                                title: nam
                            };
                            complaint.properties["complaint_" + val + "_comment"] = {
                                type: "string",
                                description: "Максимальное количество символов — 2000",
                                maxLength: 2000,
                                validationMessage: "Вы превысили максимальное число символов 2000"
                            };
                            if (appeal != undefined) {
                                var cas;
                                appealCases.forEach(function(cs) {
                                    if (cs.title == nam) cas = cs;
                                });
                                if (cas) {
                                    complaint.properties["complaint_" + val]["default"] = true;
                                    complaint.properties["complaint_" + val + "_comment"]["default"] =
                                        cas.text;
                                }
                            }
                        });
                        schemaForm.form.splice(2, 0, formField);
                        schemaForm.schema.properties.complaint = complaint;
                    }
                }
            };
        }]);
})();

(function() {
    elkRequest.$inject = ["$http", "$sce", "$timeout", "$window", "$location", "STATUS", "objectService", "session", "$routeParams", "aspService"];
    angular.module("rpgu.app").directive("elkRequest", elkRequest);
    function elkRequest(
        $http,
        $sce,
        $timeout,
        $window,
        $location,
        STATUS,
        objectService,
        session,
        $routeParams,
        aspService
    ) {
        return {
            restrict: "E",
            templateUrl: "/personcab/elkRequest.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;
                $scope.rUrl = $routeParams.rUrl;

                $window.console.log("elkRequest: id=" + $scope.id + " rUrl=" + $scope.rUrl);
                $scope.status = STATUS.LOADING;

                // asp data
                $scope.user = angular.copy(session.sessionData.user);
                $window.console.info($scope.user);
                $scope.schemaForm = {
                    schema: {},
                    form: []
                };

                $scope.createRequest = function(idForm) {
                    $scope.status = STATUS.LOADING;
                    $http
                        .post(apiRoot + "serviceRequest", { idServiceForm: idForm })
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.LOADING;
                            if ($scope.rUrl) {
                                window.location =
                                    context +
                                    "/personcab/request?" +
                                    $.param({ idServiceRequest: data }) +
                                    "&rUrl=" +
                                    $scope.rUrl;
                            } else {
                                $scope.status = STATUS.ERROR;
                                $scope.error = { message: "Ошибка подстановки атрибута rUrl" };
                            }
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };

                $scope.refresh = function() {
                    if ($scope.id) {
                        $scope.status = STATUS.LOADING;
                        $http
                            .get(apiRoot + "dept/ps_passport/service/" + $scope.id)
                            .then(function(data) {
                                data = data.data;
                                $window.console.log("refresh");
                                $window.console.info(data);
                                //							data.type = "asp";
                                //							data.idForm = "5800b645aebcb98f594b6e3e";

                                if (data.idForm) {
                                    if (data.type == "asp") {
                                        $window.console.log("asp prepare data");
                                        $scope.status = STATUS.LOADING;
                                        aspService.getAspform($scope, $scope.id, $scope.rUrl);
                                    } else {
                                        $window.console.log("createRequest");
                                        $scope.createRequest(data.idForm);
                                    }
                                } else {
                                    $scope.status = STATUS.ERROR;
                                    $scope.error = { message: "Для данной услуги отсутвует форма заявления" };
                                }
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    } else {
                        $scope.status = STATUS.ERROR;
                        $scope.error = { message: "id is undefined" };
                    }
                };
                $scope.refresh();
            }
        };
    }
})();

(function() {
    esia.$inject = ["$scope", "$http", "STATUS", "$window"];
    angular.module("rpgu.app").controller("esia", esia);
    function esia($scope, $http, STATUS, $window) {
        $scope.request = context + "/saml/login?idp=" + idp;
        $window.location.href = $scope.request;
//      /portal/saml/login?idp=https%3A%2F%2Fesia-portal1.test.gosuslugi.ru%2Fidp%2Fshibboleth
    };
})();

(function() {
    angular.module("rpgu.app")
        .directive("indexCab", [
            "STATUS",
            "session",
            "$route",
            "$routeParams",
            "$location",
            function indexCab(STATUS, session, $route, $routeParams, $location) {
                return {
                    restrict: "E",
                    templateUrl: "/personcab/index/indexCab.template.html",
                    controller: ["$scope", function($scope) {
                        $scope.session = session;
                        $scope.view = "charges";
                        $scope.type = '';

                        if ($scope.tab === "payment") {
                            $scope.reqBss = true;
                        }

                        $scope.status = STATUS.INIT;

                        if (typeof $routeParams.tab !== "undefined") {
                            $scope.tabset = $routeParams.tab;
                        } else {
                            $location.path($location.path()).search("tab", "mydata");
                        }

                        $scope.selectTab = function(setTab) {
                            $location.path($location.path())
                                .search("tab", setTab);
                        };

                        $scope.isSelected = function(checkTab) {
                            return $scope.tabset === checkTab;
                        };

                    }]
                };
            }
        ]);
})();

(function() {
    infoPou.$inject = ["$http", "$sce", "STATUS", "$window", "$document", "$timeout", "session"];
    angular.module("rpgu.app").directive("infoPouOld", infoPou);
    function infoPou($http, $sce, STATUS, $window, $document, $timeout, session) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/personcab/info-pou/infoPou.template.html',
            link: function ($scope) {
				$scope.idOkatoDict = "okato_avers";
				$scope.idGetOUDict = "avers_itu_GetOU";
				$scope.idGetChildDict = "avers_itu_GetChild";
				$scope.idGetChildSDict = "avers_itu_GetChildS";
				$scope.idGetPeriodsDict = "avers_itu_GetPeriods";
				$scope.idGetInfoDict = "avers_itu_GetInfo";
				$scope.idGetInfopDict = "avers_itu_GetInfoP";

			    $scope.info_status = true;
                $scope.status = STATUS.READY;
				$scope.teacher_status = "init";
				$scope.period_status = "init";
				$scope.exercise_status = "init";
				$scope.diaryCount = 0;

				$scope.diary_exercise_status = STATUS.LOADING;

				$scope.dateOptions = {
					formatYear: 'yyyy',
					maxDate: new Date(2100, 5, 22),
					minDate: new Date(),
					startingDay: 1,
					maxMode: 'year',
					placement: 'top right',
					showWeeks: false
				};

				$scope.dt_period_po = new Date();
				var nDate = new Date();
				$scope.dt_period_s = new Date(nDate.setMonth(nDate.getMonth() - 1));

				$scope.period_s = moment($scope.dt_period_s).format('DD-MM-YYYY');
				$scope.period_po = moment($scope.dt_period_po).format('DD-MM-YYYY');

				$scope.period_s_popup = {
					opened: false
				};

				$scope.period_po_popup = {
					opened: false
				};

				$scope.period_s_open = function() {
					$scope.period_s_popup.opened = true;
				}

				$scope.period_po_open = function() {
					$scope.period_po_popup.opened = true;
				}

				$scope.$watch("dt_period_s", function (value, oldValue) {
					if (value !=  oldValue){
						$scope.period_s = moment($scope.dt_period_s).format('DD-MM-YYYY');
					}
				});

				$scope.$watch("dt_period_po", function (value, oldValue) {
					if (value !=  oldValue){
						$scope.period_po = moment($scope.dt_period_po).format('DD-MM-YYYY');
					}
				});

				$scope.ConvertDate = function(d) {
					return moment(d).format('dddd') + " " + moment(d).format('DD-MM-YYYY');
				}

				$scope.appTypeOptions = [
					{value: 'a', name: 'обучающийся'},
					{value: 'b', name: 'родитель'}
				];
				$scope.appType = $scope.appTypeOptions[1];
				$scope.periods = STATUS.LOADING;

				$scope.transform = function (cnv) {
					var x2js = new X2JS();
					var aftCnv = x2js.xml_str2json(cnv);
					return aftCnv;
				}

				$scope.ParentBtn = function () {
					var status = 'true';
					if($scope.appType.name=='родитель') {
						if ((!angular.isUndefined($scope.OUName) && $scope.OUName != null) &&
							(!angular.isUndefined($scope.Childname) && $scope.Childname != null)) {
							var status = 'false';
						}
					}
					else
					{
						if (!angular.isUndefined($scope.OUName) && $scope.OUName != null) {
							var status = 'false';
						}
					}
					return status;
				}

				$scope.radio_button = "diary";
				$scope.okato_region = "00000000000";

				$scope.GetOkato = function(){
					$window.console.log("GetOkato");
					$scope.status = STATUS.LOADING;
					$scope.okato_alert = "init";
					var id = $scope.idOkatoDict;
					$window.console.log("id: " + id);
					$http.get(apiRoot + 'dict/' + id + '/values').then(function (data) {
                        data = data.data;
						$scope.okatoOptions = data;
						$window.console.info(data);
						$scope.status = STATUS.READY;
					}).catch(function (data) {
                        data = data.data || data;
						$scope.status = STATUS.ERROR;
						$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
						$window.console.log($scope.error);
					});
				};

				$scope.GetOU = function () {
					$window.console.log("GetOU");
					$scope.status = STATUS.LOADING;
					var id = $scope.idGetOUDict;
					if(!angular.isUndefined($scope.okato)) {
						$http.get(apiRoot + 'remoteDict/values/custom?remoteDict_code=' + id +
							'&okato=' + $scope.okato).then(function (data) {
                            data = data.data;
							$window.console.info(data);
							$scope.OUNameOptions = data;
							$scope.status = STATUS.READY;
						}).catch(function (data) {
                            data = data.data || data;
							$scope.status = STATUS.ERROR;
							$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
							$window.console.log($scope.error);
						});
					}
					else
					{
						$scope.status = STATUS.ERROR;
						$scope.error = "Код ОКАТО не доступен";
						$window.console.log($scope.error);

					}
				};

				$scope.GetChild = function () {
					$window.console.log("GetChild");
					$scope.status = STATUS.LOADING;
					var id = $scope.idGetChildDict;
					var ouid = $scope.OUName.value;
					var snils = (!angular.isUndefined(session.sessionData.user.samlUser))? session.sessionData.user.samlUser.person.snils: "142-638-320 50";
					var Surname = session.sessionData.user.samlUser.name.lastName;
					var Name = session.sessionData.user.samlUser.name.firstName;
					var Middlename = session.sessionData.user.samlUser.name.middleName;
					$window.console.log("id: " + id);
					$window.console.log("ouid: " + ouid);
					$window.console.log("snils: " + snils);
					$http.get(apiRoot + 'remoteDict/values/custom?remoteDict_code=' + id +
						'&ouid=' + ouid +
//						'&snils=' + snils +
						'&Surname=' + Surname +
						'&Name=' + Name +
						'&Middlename=' + Middlename
					).then(function (data) {
                        data = data.data;
						$window.console.info(data);
						$scope.ChildOptions = data;
						$scope.status = STATUS.READY;
					}).catch(function (data) {
                        data = data.data || data;
						$scope.status = STATUS.ERROR;
						$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
						$window.console.log($scope.error);
					});
				};


				$scope.GetChildS = function () {
					$window.console.log("GetChildS");
					$scope.status = STATUS.LOADING;
					var id = $scope.idGetChildSDict;
					var ouid = $scope.OUName.value;
					var snils = (!angular.isUndefined(session.sessionData.user.samlUser))? session.sessionData.user.samlUser.person.snils: "000-000-000 15";
					var surname = (!angular.isUndefined(session.sessionData.user.name))? session.sessionData.user.name.surname: "АгентПятьФамилия";
					var name = (!angular.isUndefined(session.sessionData.user.name))? session.sessionData.user.name.name: "АгентПятьИмя";
					var patronymic = (!angular.isUndefined(session.sessionData.name))? session.sessionData.user.name.patronymic: "АгентПятьОтчество";
//					var snils = "142-638-320 50";
//					var surname = "Борисов";
//					var name = "Григорий";
//					var patronymic = "АгентПятьОтчество";

					$window.console.log("id: " + id);
					$window.console.log("ouid: " + ouid);
					$window.console.log("snils: " + snils);
					$window.console.log("surname: " + surname);
					$window.console.log("name: " + name);
					$window.console.log("patronymic: " + patronymic);
					$http.get(apiRoot + 'remoteDict/values/custom?remoteDict_code=' + id +
					'&ouid=' + ouid +
					'&snils=' + snils +
					'&surname=' + surname +
					'&name=' + name +
					'&patronymic=' + patronymic).then(function (data) {
                        data = data.data;
						$window.console.info(data);
						if(data.length > 0) {
							$scope.Childname = data[0];
							$scope.status = STATUS.READY;
						}
						else
						{
							$scope.status = STATUS.ERROR;
							$scope.error = {message: "Отсуствует информация о детях у данного пользователя"};
							$window.console.log($scope.error);
						}
					}).catch(function (data) {
                        data = data.data || data;
						$scope.status = STATUS.ERROR;
						$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
						$window.console.log($scope.error);
					});
				};

				$scope.GetPeriods = function () {
					$window.console.log("GetPeriods");
					$scope.status = STATUS.LOADING;
					$scope.periods = STATUS.LOADING;
					var id = $scope.idGetPeriodsDict;
					if(!angular.isUndefined($scope.OUName) &&
						!angular.isUndefined($scope.Childname))
					{
						var ouid = $scope.OUName.value;
						var chid = $scope.Childname.value;
						$window.console.log("id: " + id);
						$window.console.log("ouid: " + ouid);
						$window.console.log("chid: " + chid);
						$http.get(apiRoot + 'remoteDict/values/custom?remoteDict_code=' + id +
						'&ouid=' + ouid +
						'&chid=' + chid).then(function (data) {
                            data = data.data;
							$window.console.info(data);
							$scope.periodOptions = data;
							$scope.status = STATUS.READY;
							$scope.periods =STATUS.READY;
						}).catch(function (data) {
                            data = data.data || data;
							$scope.status = STATUS.ERROR;
							$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
							$window.console.log($scope.error);
						});
					}
					else
					{
						$scope.alert = STATUS.ERROR;
						$scope.error = { message: "Ошибка - возможно не указаны поля: Школы обучающегося или ФИО обучающегося" };
					}
				};

				$scope.GetInfo = function (value) {
					$window.console.log("GetInfo");
					$scope.status = STATUS.LOADING;
					$scope.diary_status = STATUS.LOADING;
					var id = $scope.idGetInfoDict;
					var ouid = value.ouid;
					var chid = value.chid;
					var s = moment(value.PeriodStart).format('YYYY-MM-DD');
					var po = moment(value.PeriodEnd).format('YYYY-MM-DD');
					$window.console.log("id: " + id);
					$window.console.log("ouid: " + ouid);
					$window.console.log("chid: " + chid);
					$window.console.log("s: " + s);
					$window.console.log("po: " + po);
					$http.get(apiRoot + 'remoteDict/values/custom?remoteDict_code=' + id +
					'&ouid=' + ouid +
					'&chid=' + chid +
					'&s=' + s +
					'&po=' + po).then(function (data) {
                        data = data.data;
						var xml = "<root xmlns:ns3=\"http://smev.gosuslugi.ru/rev120315\">" + data[0].value + "</root>";
						var value = $scope.transform(xml);
						$scope.diary_value = angular.fromJson(value);
                        if ($scope.diary_value.root && $scope.diary_value.root.DiaryRecord) {
						  $scope.diaryCount = $scope.diary_value.root.DiaryRecord.length;
                        }
						$scope.dairy_paginator();
						$scope.status = STATUS.READY;
						$scope.diary_status = STATUS.READY;
					}).catch(function (data) {
                        data = data.data || data;
						$scope.status = STATUS.ERROR;
						$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
						$window.console.log($scope.error);
					});
				};

				$scope.GetInfoP = function (value) {
					$window.console.log("GetInfoP");
					$scope.status = STATUS.LOADING;
					$scope.period_status = STATUS.LOADING;
					var id = $scope.idGetInfopDict;
					var ouid = value.ouid;
					var chid = value.chid;
					var period = value.period;
					$window.console.log("id: " + id);
					$window.console.log("ouid: " + ouid);
					$window.console.log("chid: " + chid);
					$window.console.log("period: " + period);
					$http.get(apiRoot + 'remoteDict/values/custom?remoteDict_code=' + id +
					'&ouid=' + ouid +
					'&chid=' + chid +
					'&period=' + period).then(function (data) {
                        data = data.data;
						$window.console.info(data);
						var xml = "<root xmlns:ns3=\"http://smev.gosuslugi.ru/rev120315\">" + data[0].value + "</root>";
						var value = $scope.transform(xml);
						$scope.lookup_value = angular.fromJson(value);
						$scope.status = STATUS.READY;
						$scope.period_status = STATUS.READY;
					}).catch(function (data) {
                        data = data.data || data;
						$scope.status = STATUS.ERROR;
						$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
						$window.console.log($scope.error);
					});
				};

				$scope.show_exercise = function () {
					$scope.GetInfo({
						ouid: $scope.OUName.value,
						chid: $scope.Childname.value,
						PeriodStart: $scope.dt_period_s,
						PeriodEnd: $scope.dt_period_po
					});
				};

				$scope.show_period_itog = function () {
						$scope.GetInfoP({
							ouid: $scope.OUName.value,
							chid: $scope.Childname.value,
							period: $scope.period_itog_lookup.value
						});
				};

				$scope.dairy_paginator = function () {
					$window.console.log("dairy_paginator");
					var offset = $scope.listSkip ? $scope.listSkip: 0;
					var limit = $scope.listMax ? $scope.listMax: 10;
//					$window.console.log("offset" + offset);
//					$window.console.log("limit" + limit);
					if($scope.diaryCount > 0) {
						$scope.diary_status = STATUS.LOADING;
						$scope.fullList = [];
						var index = 0;
						for(var i=0;i<limit;i++) {
							index = i + offset;
							if(index >= $scope.diaryCount) break;
//							$window.console.log("index= " + index);
							$scope.fullList.push($scope.diary_value.root.DiaryRecord[index]);
						}
						$scope.diary_status = STATUS.READY;
//						$window.console.log("fullList" + $scope.fullList);
					}
				};

				$scope.$watchGroup(["listSkip", "listMax"], function () {
					if($scope.diaryCount > 0)
						$scope.dairy_paginator();
				});

				// start ou
				$scope.status = 'init';
				$scope.GetOkato();

				$scope.$watch("okato", function (value, oldValue) {
					if (value != oldValue) {
						$scope.GetOU();
					}
				});

				$scope.$watch("appType", function (value, oldValue) {
					if (value != oldValue) {
						if(!angular.isUndefined($scope.okato) && $scope.okato != null) {
							$scope.GetOU();
						}
					}
				});

				$scope.$watch("OUName", function (value, oldValue) {
					if (value !=  oldValue){
						if($scope.appType.name=='родитель') {
							if (!angular.isUndefined($scope.OUName) && $scope.OUName != null) {
								$scope.GetChild();
							}
							else
							{
								$scope.Childname = null;
								$scope.periodOptions = undefined;
								$scope.periods = STATUS.LOADING;
								$scope.period_status = STATUS.LOADING;
								$scope.diary_status = STATUS.LOADING;
							}
						}
						else
						{
							if (!angular.isUndefined($scope.OUName) && $scope.OUName != null) {
								$scope.GetChildS();
							}
							else
							{
								$scope.Childname = null;
								$scope.periodOptions = undefined;
								$scope.periods = STATUS.LOADING;
								$scope.period_status = STATUS.LOADING;
								$scope.diary_status = STATUS.LOADING;
							}
						}
					}
				});

				$scope.show_iperiod = function () {
					$scope.GetPeriods();
				};
            }
        }
    }
})();

(function() {
    angular
        .module("rpgu.app")
        .directive("infoService", ["$http", "$timeout", "$routeParams", "STATUS", "REQUEST_STATUS", "$sce", "$q", "session", "$window", function(
            $http,
            $timeout,
            $routeParams,
            STATUS,
            REQUEST_STATUS,
            $sce,
            $q,
            session,
            $window
        ) {
            return {
                restrict: "E",
                templateUrl: "/personcab/infoService.template.html",
                link: function($scope) {
                    $scope.idProcedure = $routeParams.idProcedure;
                    $scope.idServiceForm = $routeParams.idServiceForm;

                    $scope.request = {
                        schemaform: {
                            schema: {},
                            form: []
                        }
                    };
                    $scope.template = false;
                    $scope.status = STATUS.LOADING;

                    $scope.getForm = function(id) {
                        if (id) {
                            $http
                                .get(apiRoot + "form/" + id)
                                .then(function(data) {
                                    data = data.data;
                                    $scope.status = STATUS.READY;
                                    $scope.request.schemaform.schema = data.schemaform.schema;
                                    $scope.request.schemaform.form = data.schemaform.form;
                                    $window.console.log("getForm");
                                    $window.console.info(data);
                                })
                                .catch(function(data) {
                                    data = data.data;
                                    $scope.status = STATUS.ERROR;
                                    $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                                });
                        } else {
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: "Отсутствует параметр idServiceForm" };
                        }
                    };

                    $scope.refresh = function(procedure) {
                        $scope.status = STATUS.LOADING;
                        if (procedure) {
                            $http
                                .get(apiRoot + "service/search/" + procedure)
                                .then(function(data) {
                                    data = data.data;
                                    $window.console.log("refresh");
                                    $window.console.info(data);

                                    if (data.length > 0) {
                                        $scope.request.service_title = data[0].service_title;
                                        $scope.request.dept_title = data[0].dept_title;
                                        $scope.getForm($scope.idServiceForm);
                                    } else {
                                        $scope.status = STATUS.ERROR;
                                        $scope.error = { message: "Отсутствуют данные сервиса" };
                                    }
                                })
                                .catch(function(data) {
                                    data = data.data;
                                    $scope.status = STATUS.ERROR;
                                    $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                                });
                        } else {
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: "Отсутствует параметр idProcedure" };
                        }
                    };

                    $scope.refresh($scope.idProcedure);
                }
            };
        }]);
})();

(function() {
    login.$inject = ["$scope", "$http", "STATUS"];
    angular.module("rpgu.app").controller("login", login);

    function login($scope, $http, STATUS) {
        $scope.doLogin = function() {
            $scope.status = STATUS.LOADING;
            $http
                .post(context + "/login", null, {
                    params: {
                        username: $scope.login,
                        password: $scope.password
                    }
                })
                .then(function(data) {
                    data = data.data;
                    $scope.status = STATUS.READY;
                    if (data) window.location.href = data;
                    else window.location.href = context + "/personcab";
                })
                .catch(function(data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                });
        };
    }
})();

(function() {
    angular.module("rpgu.app").directive("me", ["$http", "STATUS", "session", "$localStorage", "$rootScope", me]);

    function me($http, STATUS, session, $localStorage, $rootScope) {
        var res = {
            restrict: "E",
            scope: {},
            templateUrl: "/personcab/me.template.html",
            link: function($scope) {
                $scope.personStatus = null;
                $scope.personal = {
                    samlUser: angular.copy(session.defaultSamlUser)
                };

                $scope.getUserData = function() {
                    $http
                        .get(apiRoot + "me")
                        .then(function(response) {
                            var data = response.data;

                            if (angular.isUndefined(data.samlUser)) {
                                $scope.personal.samlUser.name.firstName = data.name.name;
                                $scope.personal.samlUser.name.middleName = data.name.patronymic;
                                $scope.personal.samlUser.name.lastName = data.name.surname;
                            } else {
                                $scope.personal.samlUser = data.samlUser;

                                if (data.samlUser.gender) {
                                    if (data.samlUser.gender[0] == "M") {
                                        $scope.personal.samlUser.gender = "Мужской";
                                    } else if (data.samlUser.gender[0] == "F") {
                                        $scope.personal.samlUser.gender = "Женский";
                                    }
                                }

                                if (!angular.isUndefined(data.samlUser.person)) {
                                    var person = angular.copy(data.samlUser.person);

                                    $scope.personal.samlUser.person = person

                                    if (!angular.isUndefined(person.principalAdr)) {
                                        person.principalAdr.forEach(function(item) {
                                            var principalAdr = {};
                                            switch (item.addressType) {
                                                case "PERSON_REGISTRATION":
                                                    principalAdr.PERSON_REGISTRATION = item;
                                                    principalAdr.PERSON_REGISTRATION.city = (item.city)
                                                        ? item.city
                                                        : item.settlement;
                                                    break;
                                                case "PERSON_LIVE":
                                                    principalAdr.PERSON_LIVE = item;
                                                    principalAdr.PERSON_LIVE.city = (item.city)
                                                        ? item.city
                                                        : item.settlement;
                                            }
                                            $scope.personal.samlUser.person.principalAdr = principalAdr;
                                        });
                                    }

                                    // пока проверяю только паспорт
                                    if (!angular.isUndefined(person.principalDoc)) {
                                        person.principalDoc.forEach(function(item) {
                                            if (item.documentType == "01") {
                                                var passport_rf = item;
                                                if (item.issueDate) {
                                                    passport_rf.issueDate = item.issueDateFormatted;
                                                }
                                                $scope.personal.samlUser.person.principalDoc.passport_rf = passport_rf;
                                            }
                                        });
                                    }
                                }

                                if (data.samlUser.globalRole == "P") {
                                    $scope.personStatus = "person";
                                } else if (data.samlUser.globalRole == "E") {
                                    $scope.personStatus = "org";
                                    if (!angular.isUndefined(data.samlUser.org)) {
                                        var org = angular.copy(data.samlUser.org);

                                        if (!angular.isUndefined(org.type)) {
                                            switch (org.type) {
                                                case "BUSINESS":
                                                    org.orgType = "Индивидуальный предприниматель";
                                                    break;
                                                case "LEGAL":
                                                    org.orgType = "Юридическое лицо";
                                                    break;
                                                case "AGENCY":
                                                    org.orgType = "Орган исполнительной власти";
                                                    break;
                                            }
                                        }

                                        if (!angular.isUndefined(org.ctt)) {
                                            org.ctt.forEach(function(item) {
                                                if (!org.contacts) {
                                                    org.contacts = {};
                                                }
                                                switch (item.type) {
                                                    case "OPH":
                                                        org.contacts.OPH = item;
                                                        break;
                                                    case "OEM":
                                                        org.contacts.OEM = item;
                                                        break;
                                                    case "OFX":
                                                        org.contacts.OFX = item;
                                                        break;
                                                }
                                            });
                                        }

                                        if (!angular.isUndefined(org.orgAdr)) {
                                            org.orgAdr.forEach(function(item) {
                                                switch (item.addressType) {
                                                    case "ORG_LEGAL":
                                                        $scope.ORG_LEGAL = true;
                                                        org.ORG_LEGAL.country = item.country;
                                                        org.ORG_LEGAL.index = item.index;
                                                        org.ORG_LEGAL.region = item.region;
                                                        org.ORG_LEGAL.street = item.street;
                                                        org.ORG_LEGAL.house = item.house;
                                                        org.ORG_LEGAL.corpus = item.corpus;
                                                        org.ORG_LEGAL.structure = item.structure;
                                                        org.ORG_LEGAL.flat = item.flat;
                                                        break;
                                                    case "ORG_POSTAL":
                                                        $scope.ORG_POSTAL = true;
                                                        org.ORG_POSTAL.country = item.country;
                                                        org.ORG_POSTAL.index = item.index;
                                                        org.ORG_POSTAL.region = item.region;
                                                        org.ORG_POSTAL.street = item.street;
                                                        org.ORG_POSTAL.house = item.house;
                                                        org.ORG_POSTAL.corpus = item.corpus;
                                                        org.ORG_POSTAL.structure = item.structure;
                                                        org.ORG_POSTAL.flat = item.flat;
                                                        break;
                                                }
                                            });
                                        }

                                        $scope.personal.samlUser.org = org;

                                    }
                                }
                            }

                            $scope.status = STATUS.READY;
                        })
                        .catch(function(data) {
                            data = data.data || data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                        });
                };
                $scope.status = STATUS.LOADING;
                $scope.getUserData();

                $scope.orgsInUser = session.getUserOrgs();
                $scope.chosenOrg = session.getChosenOrg();

                $scope.chooseOrg = function() {
                    $rootScope.$emit("showOrgsModal");
                };
            }
        };

        return res;
    }
})();

(function() {
    mincultSchedule.$inject = ["$http", "$sce", "$timeout", "$window", "STATUS", "objectService", "session"];
    angular.module("rpgu.app").directive("mincultSchedule", mincultSchedule);
    function mincultSchedule($http, $sce, $timeout, $window, STATUS, objectService, session) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/personcab/mincultSchedule.template.html',
            link: function ($scope) {
                $scope.status = STATUS.INIT;
				$scope.monthProperty = [
					{ value: 1, name: "Январь" },
					{ value: 2, name: "Февраль" },
					{ value: 3, name: "Март" },
					{ value: 4, name: "Апрель" },
					{ value: 5, name: "Май" },
					{ value: 6, name: "Июнь" },
					{ value: 7, name: "Июль" },
					{ value: 8, name: "Август" },
					{ value: 9, name: "Сентябрь" },
					{ value: 10, name: "Октябрь" },
					{ value: 11, name: "Ноябрь" },
					{ value: 12, name: "Декабрь" }
				];

				$scope.mincultHtml = "<span>11111111</span><br><span>2222222222</span>";

                $scope.setCurrentDay = function () {
					var now = moment();
					var month = now.month() + 1;
					var year = now.year();
					$scope.monthProperty.forEach(function (obj) {
						if(obj.value == month) {
							$scope.month = obj.value;
							$scope.currMonth = obj.name;
						}
					});

					$scope.yearProperty = []
					for (var i = 0; i < 10; i++) {
						$scope.yearProperty.push({ value: year + i, name: year + i });
					}

					$scope.yearProperty.forEach(function (obj) {
						if(obj.value == year) {
							$scope.year = obj.value;
						}
					});
				};

				function convertHtml(text) {
					var arr = text.split('\n');
					var value = "";
						if(arr.length > 0) {
							arr.forEach(function (val) {
								value += "<span>" + val + "</span><br>";
							});
						}
						else
						{
							value = text;
						}
						return value;
				};


				$scope.$watch("dept", function (value, oldValue) {
					if (value != oldValue) {
						if(value != undefined && value != "") {
							$scope.fullList.forEach(function (obj) {
								if(obj.name == value) {
									$scope.mincultList = obj.events;
									$scope.mincultList.forEach(function (evn) {
										evn.html = convertHtml(evn.name);
									});
								}
							});
							if($scope.mincultList == undefined) $scope.mincultList = [];
						}
						else
						{
							$scope.mincultList = [];
						}
					}
				});

				$scope.$watchGroup(["month", "year"], function (value, oldValue) {
					if(value[0] != oldValue[0] || value[1] != oldValue[1]) {
						console.info(value);
						var month = value[0];
						var year = value[1];
						if ((month != undefined && month != "") && (year != undefined && year != "")) {
							$scope.monthProperty.forEach(function (obj) {
								if(obj.value == month) {
									$scope.currMonth = obj.name;
								}
							});
							$scope.getTheater();
						}
						else
						{
							$scope.mincultList = [];
						}
					}
                });

				$scope.getTheater = function () {
                    $scope.status = STATUS.LOADING;
					$http.get(apiRoot + 'mincult/' + $scope.year + '/' + $scope.month).then(function (data) {
                        data = data.data;
						if(data.length > 0) {
						    $scope.fullList = data;
							$scope.dept = undefined;
						}
						else
						{
							$scope.fullList = [
								{
									name: "Организаций в списке не обнаружено"
								}
							];
							$scope.dept = undefined;
							$scope.mincultList = [];
						}

						$window.console.info($scope.fullList);
						$scope.status = STATUS.READY;
					}).catch(function (data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = {message: data.errorMessage ? data.errorMessage : data };
					});
				};

				$scope.setCurrentDay();
                $scope.getTheater();

            }
        }
    };
})();

(function () {
    myAppointments.$inject = ["$http", "STATUS", "$window", "utils"];
    angular.module("rpgu.app").directive("myAppointments", myAppointments);

    function myAppointments($http, STATUS, $window, utils) {
        return {
            restrict: 'E',
            scope: {
                onShow: "="
            },
            templateUrl: '/personcab/myAppointments.template.html',
            link: function ($scope) {
                $scope.status = STATUS.LOADING;
                $scope.onlyCurrent = true;

                $scope.next = false;

                $scope.filter = function (text) {
                    $scope.list = $scope.fullList
                        ? $scope.fullList.filter(function (r) {
                            var res = true;
                            if (text) {
                                res = false;
                                res = r.question.name.toLowerCase().lastIndexOf(text.toLowerCase()) != -1;
                                if (!res) res = r.organization.name.toLowerCase().lastIndexOf(text.toLowerCase()) != -1;
                                if (!res) res = r.organization.deptTitle.toLowerCase().lastIndexOf(text.toLowerCase()) != -1;
                            }
                            return res;
                        })
                        : null
                    ;
                };

                $scope.$watch("onShow", function (value, oldValue) {
                    if (value != oldValue) {
                        $scope.reload();
                    }
                });

                $scope.reload = function () {
                    if ($scope.onShow == true) {
                        $http.get(apiRoot + 'schedule').then(function (res) {
                            var data = res.data;
                            $scope.fullList = data;
                            $scope.fullList = $scope.fullList.filter(function (item) {
                                return item != null;
                            });
                            var next = null;
                            $scope.fullList.forEach(function (r) {
                                r.current = Date.parse(r.time) > Date.parse(new Date());
                                if (r.current) {
                                    next = r;
                                }
                                r.time = moment(r.time).utc();
                                r.length = (r.type == 'portal') ? (r.length / 60000) : r.length;
                            });
                            $scope.next = next;
                            $scope.list = $scope.fullList;
                            $scope.status = STATUS.READY;
                        }).catch(utils.errorHandler($scope));
                    }
                };

                function deletePortalRec(item) {
                    $http.delete(apiRoot + 'organizations/' +
                        item.organization.id + '/resources/' +
                        item.resource.id + '/schedules/' + item.id).then(function () {
                        $scope.status = STATUS.READY;
                        $scope.reload();
                    }).catch(utils.errorHandler($scope));
                }

                function deleteMfcRec(item) {
                    $http.get(apiRoot + 'booking/cancelBooking/' + item.id).then(function () {
                        $scope.status = STATUS.READY;
                        $scope.reload();
                    }).catch(utils.errorHandler($scope));
                }

                $scope.delRecord = function (item) {
                    if (confirm("Вы точно уверены, что хотите отменить запись?")) {
                        if (item.type == 'portal') {
                            deletePortalRec(item);
                        }
                        if (item.type == 'mfc') {
                            deleteMfcRec(item);
                        }

                    }
                };

                $scope.$watch("search", function () {
                    $scope.filter($scope.search);
                });

                $scope.reload();
            }
        };
    }
})();

(function() {
    mySettings.$inject = ["$http", "STATUS", "TIMEZONES"];
    angular.module("rpgu.app").directive("mySettings", mySettings);

    function mySettings($http, STATUS, TIMEZONES) {
        return {
            restrict: "E",
            scope: {
                code: "@",
                state: "@",
                error: "@",
                error_description: "@"
            },
            templateUrl: "/personcab/mySettings.template.html",
            link: function($scope) {
                $scope.HOURS = new Array(24);
                for (var i = 0; i < $scope.HOURS.length; i++) {
                    $scope.HOURS[i] = { name: i + ":00", val: i };
                }

                $scope.tzList = TIMEZONES;

                $scope.getSettings = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "me/settings")
                        .then(function(data) {
                            data = data.data;
                            $scope.status = STATUS.READY;
                            $scope.elk = {
                                forwarding:
                                    data.elk && data.elk.forwarding
                                        ? data.elk.forwardingFromDate == null ? "all" : "current"
                                        : "off",
                                subscribed: data.elk && data.elk.subscribed ? data.elk.subscribed : false
                            };
                            $scope.sms = !data.sms ? { enabled: false, from: 8, to: 20, offset: +2 } : data.sms;

                            $scope.penalty = data.penalty ? data.penalty : null;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                $scope.saveElkForw = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "me/settings/forwarding", { params: { forwarding: $scope.elk.forwarding } })
                        .then(function() {
                            $scope.status = STATUS.READY;
                            $scope.editElkForw = false;
                            $scope.getSettings();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.editElkForw = false;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                        });
                };

                $scope.saveSMS = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .post(apiRoot + "me/settings/sms", $scope.sms)
                        .then(function() {
                            $scope.status = STATUS.READY;
                            $scope.editSMS = false;
                            $scope.getSettings();
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.editSMS = false;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                        });
                };

                $scope.saveElkSubscribed = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "me/settings/subscribed", { params: { enable: $scope.elk.subscribed } })
                        .then(function(data) {
                            data = data.data;
                            window.location.href = data;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.setElksubscribed = false;
                            $scope.status = STATUS.ERROR;
                            $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                        });
                };

                if ($scope.state) {
                    if ($scope.error || $scope.error_description) {
                        $scope.status = STATUS.ERROR;
                        $scope.error = { message: $scope.error + ": " + $scope.error_description };
                    }
                    if ($scope.code) {
                        $scope.status = STATUS.LOADING;
                    }
                } else {
                    $scope.getSettings();
                }

            }
        };
    }
})();

(function () {
    chargeList.$inject = ["$http", "$timeout", "STATUS", "session", "$window"];
    angular.module("rpgu.app").directive("chargeList", chargeList);

    function chargeList($http, $timeout, STATUS, session, $window) {
        return {
            restrict:    'E',
            scope:       {
                onShow: "="
            },
            templateUrl: '/personcab/payment/chargeList.template.html',
            link:        function ($scope) {

                $scope.$watch("search", function (value, oldValue) {
                    if (value !== oldValue)
                        $scope.filter();
                });
                $scope.$watchGroup(["$parent.type", "$parent.reqBss"], function (values, oldValues, scope) {
                    $scope.refresh();
                });

                $scope.$watch("onShow", function (value, oldValue) {
                    if (value !== oldValue) {
                        $scope.refresh();
                    }
                });

                $scope.refresh = function () {
                    if ($scope.onShow === true) {
                        $scope.getCharges();
                    }
                };

                $scope.getCharges = function () {
                    $scope.status = STATUS.LOADING;
                    $scope.tooLong = false;
                    $scope.nodoc = null;
                    var userdata = session.sessionData.user.samlUser.person;
                    $scope.checkHaveDoc(userdata);
                    if (!$scope.nodoc) {
                        $scope.data = null;
                        $scope.add_charges();
                    } else {
                        $scope.status = STATUS.READY;
                    }
                };

                $scope.add_charges = function () {
                    $http.get(apiRoot + 'me/unp_cache/charges', {
                        params: {
                            docType: $scope.$parent.type !== "" ? $scope.$parent.type : null
                        }
                    }).then(function (data) {
                        $scope.data = data.data ? data.data.response : null;
                        $scope.status = STATUS.READY;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.tooLong = false;
                        $scope.status = STATUS.ERROR;
                        $scope.error = {message: data.errorMessage ? data.errorMessage : data};
                        $scope.req_loading_more = false;
                    });


                };

                $scope.checkHaveDoc = function (userdata) {
                    if ($scope.$parent.type === "INN" && !userdata.inn) {
                        $scope.nodoc = 'ИНН';
                        $scope.status = STATUS.READY;
                    } else if ($scope.$parent.type === 'SNILS' && !userdata.snils) {
                        $scope.nodoc = 'СНИЛС';
                        $scope.status = STATUS.READY;
                    } else if ($scope.$parent.type === 'DRIVER') {
                        if (userdata.principalDoc.filter(function (doc) {
                                return doc.documentType === '05';
                            }).length === 0) {
                            $scope.nodoc = 'Водительское удостоверение';
                            $scope.status = STATUS.READY;
                        }
                    } else if ($scope.$parent.type === 'PASSPORT') {
                        if (userdata.principalDoc.filter(function (doc) {
                                return doc.documentType === '01';
                            }).length === 0) {
                            $scope.nodoc = 'Паспорт РФ';
                            $scope.status = STATUS.READY;
                        }
                    } else if ($scope.$parent.type === 'MILITARY') {
                        if (userdata.principalDoc.filter(function (doc) {
                                return doc.documentType === '11';
                            }).length === 0) {
                            $scope.nodoc = 'Военный билет';
                            $scope.status = STATUS.READY;
                        }
                    }
                };

                $scope.isExpired = function (expiry) {
                    var exp = moment(expiry);
                    var now = moment();
                    return now.isAfter(exp);
                };

                $scope.pay = function (item) {
                    item.status = STATUS.LOADING;
                    $http.get(apiRoot + 'me/charge/is_first_bill', {params: {supplierBillID: item.supplierBillID}}).then(function (data) {
                        item.status = STATUS.READY;
                        if (data.data !== true) {
                            if (!confirm("Возможно уже оплачено - поскольку информация об оплате появляется позднее. Продолжить?")) {
                                return;
                            }
                        }
                        $window.location.href = "https://www.gosuslugi.ru/payment/" + item.supplierBillID + "?returnUrl=https://26gosuslugi.ru/";
                    }).catch(function (data) {
                        item.error = {message: data.errorMessage ? data.errorMessage : data};
                        item.status = STATUS.ERROR;
                    });
                };
            }
        }

    }
})();

(function () {
    chargeList.$inject = ["$http", "$timeout", "STATUS", "session"];
    angular.module("rpgu.app").directive("paymentList", chargeList);

    function chargeList($http, $timeout, STATUS, session) {
        return {
            restrict:    'E',
            scope:       {
                onShow: "="
            },
            templateUrl: '/personcab/payment/paymentList.template.html',
            link:        function ($scope) {
                $scope.$watch("search", function (value, oldValue) {
                    if (value !== oldValue)
                        $scope.filter();
                });
                $scope.$watchGroup(["$parent.type", "$parent.reqBss"], function (values, oldValues, scope) {
                    $scope.refresh();
                });

                $scope.$watch("onShow", function (value, oldValue) {
                    if (value !== oldValue) {
                        $scope.refresh();
                    }
                });

                $scope.refresh = function () {
                    if ($scope.onShow === true) {
                        $scope.getCharges();
                    }
                };

                $scope.getCharges = function () {
                    $scope.status = STATUS.LOADING;
                    $scope.nodoc = null;
                    var userdata = session.sessionData.user.samlUser.person;
                    $scope.checkHaveDoc(userdata);
                    if (!$scope.nodoc) {
                        $scope.data = null;
                        $scope.add_charges();
                    } else {
                        $scope.status = STATUS.READY;
                    }
                };
                $scope.add_charges = function () {
                    $scope.messageId = null;
                    $http.get(apiRoot + 'me/unp_cache/payments', {
                        params: {
                            docType: $scope.$parent.type !== "" ? $scope.$parent.type : null,
                        }
                    }).then(function (data) {
                        $scope.data = data.data ? data.data.response : null;
                        $scope.status = STATUS.READY;
                    }).catch(function errorHandler(data) {
                        data = data.data;
                        $scope.tooLong = false;
                        $scope.status = STATUS.ERROR;
                        $scope.error = {message: data.errorMessage ? data.errorMessage : data};
                        $scope.req_loading_more = false;
                    });
                };

                $scope.checkHaveDoc = function (userdata) {
                    if ($scope.$parent.type === "INN" && !userdata.inn) {
                        $scope.nodoc = 'ИНН';
                        $scope.status = STATUS.READY;
                    } else if ($scope.$parent.type === 'SNILS' && !userdata.snils) {
                        $scope.nodoc = 'СНИЛС';
                        $scope.status = STATUS.READY;
                    } else if ($scope.$parent.type === 'DRIVER') {
                        if (userdata.principalDoc.filter(function (doc) {
                                return doc.documentType === '05';
                            }).length === 0) {
                            $scope.nodoc = 'Водительское удостоверение';
                            $scope.status = STATUS.READY;
                        }
                    } else if ($scope.$parent.type === 'PASSPORT') {
                        if (userdata.principalDoc.filter(function (doc) {
                                return doc.documentType === '01';
                            }).length === 0) {
                            $scope.nodoc = 'Паспорт РФ';
                            $scope.status = STATUS.READY;
                        }
                    } else if ($scope.$parent.type === 'MILITARY') {
                        if (userdata.principalDoc.filter(function (doc) {
                                return doc.documentType === '11';
                            }).length === 0) {
                            $scope.nodoc = 'Военный билет';
                            $scope.status = STATUS.READY;
                        }
                    }
                }
            }
        }

    }
})();

(function () {
    angular.module("rpgu.app").component("paymentsElk", {
        templateUrl: "/personcab/payment/paymentsELK.template.html",
        controller: ["STATUS", "utils", "paymentELKService", function (STATUS, utils, paymentELKService) {
            let $ctrl = this;
            $ctrl.status = STATUS.LOADING;
            paymentELKService.list().then(payments => {
                $ctrl.payments = payments;
                $ctrl.status = STATUS.READY;
            }).catch(utils.errorHandler($ctrl));
        }]
    });
}());

(function () {
    paymentList.$inject = ["$http", "$sce", "$timeout", "STATUS", "objectService", "session", "utils"];
    angular.module("rpgu.app").directive("paymentListIpsh", paymentList);

    function paymentList($http, $sce, $timeout, STATUS, objectService, session, utils) {
        return {
            restrict:    'E',
            templateUrl: '/personcab/paymentListIPSH.template.html',
            link:        function ($scope) {
                $scope.dateStart = moment().add(-1, 'month');
                $scope.dateEnd = moment();
                $scope.paging = {
                    page: 1,
                    size: 5
                };
                $scope.getPaymentList = function () {
                    $scope.status = STATUS.LOADING;
                    $http.post(apiRoot + 'ipsh/payments',
                        {
                            startDate:  utils.formatDateToJava($scope.dateStart),
                            endDate:    utils.formatDateToJava($scope.dateEnd),
                            pageNumber: $scope.paging.page,
                            pageSize:   $scope.paging.size
                        }).then(function (data) {
                        data = data.data;
                        $scope.status = STATUS.READY;
                        $scope.fullList = data.payments.payment ? data.payments.payment : [];
                        $scope.fullList.forEach(function(item) {
                            item.createTime = utils.momentFromXmlDateTime(item.createTime);
                        });
                        $scope.data = data;
                        $scope.filter();
                    }).catch(function (data) {
                        utils.errorHandler($scope)(data);
                        if ($scope.error === '') { // TODO: Get Error text
                            $scope.error = 'Время действия вашей сессии истекло';
                        }
                    });
                };

                $scope.filter = function () {
                    $scope.list = angular.copy($scope.fullList);
                };

                $scope.showDetails = function (item) {
                    if(item.requestStatus === STATUS.LOADING) {
                        return;
                    }
                    item.requestStatus = STATUS.LOADING;
                    $http.get(apiRoot + 'ipsh/payments/' + item.paymentId).then(function (data) {
                        item.requestStatus = STATUS.READY;
                        item.details = data.data;
                    }).catch(utils.errorHandler(item, "requestStatus"))
                    // TODO:
                };

                $scope.showStatus = function (item) {
                    if(item.requestStatus === STATUS.LOADING) {
                        return;
                    }
                    item.requestStatus = STATUS.LOADING;
                    $http.get(apiRoot + 'ipsh/payments/' + item.paymentId + "/status").then(function (data) {
                        item.requestStatus = STATUS.READY;
                        item._status = data.data;
                    }).catch(utils.errorHandler(item, "requestStatus"))
                    // TODO:
                };

                $scope.getStatusText = function (code) {
                    var dict = {
                        "INCOMPLETE":                      "Незавершен",
                        "PAY_BANK_ORDER_REFUND":           "В процессе возврата",
                        "PAY_BANK_ORDER_REFUNDED":         "В процессе возврата",
                        "SERVICE_PROVIDER_ORDER_REFUND":   "В процессе возврата",
                        "SERVICE_PROVIDER_ORDER_REFUNDED": "В процессе возврата",
                        "PAY_SERVICE_ORDER_REFUND":        "В процессе возврата",
                        "PAY_SERVICE_ORDER_REFUNDED":      "В процессе возврата",
                        "PAYMENT_REFUND_DENIED":           "Отказ в возврате",
                        "PAYMENT_REFUNDED":                "Возвращен",
                        "NEW":                             "В обработке",
                        "RETURNED":                        "Возвращен",
                        "PAY_SERVICE_CONFIRMATION":        "В обработке",
                        "PAY_SERVICE_CONFIRMED":           "В обработке",
                        "SERVICE_PROVIDER_CONFIRMATION":   "В обработке",
                        "SERVICE_PROVIDER_CONFIRMED":      "Принят",
                        "BANK_PAY_ORDER_CONFIRMATION":     "В обработке",
                        "BANK_PAY_ORDER_CONFIRMED":        "В обработке",
                        "BANK_PAY_CONFIRMATION":           "Принят",
                        "BANK_PAY_CONFIRMED":              "Проведен",
                        "BANK_PAY_ABORTING":               "Отменяется",
                        "BANK_PAY_ABORTED":                "Отменяется",
                        "SERVICE_PROVIDER_ABORTING":       "Отменяется",
                        "SERVICE_PROVIDER_ABORTED":        "Отменяется",
                        "PAY_SERVICE_ABORTING":            "Отменяется",
                        "PAY_SERVICE_ABORTED":             "Отменен",
                        "PAYMENT_ABORTED":                 "Отменен",
                        "PAYMENT_CREATION_ERROR":          "Ошибка",
                        "PAYMENT_DENIED":                  "Отказан"
                    };
                    return dict[code] ? dict[code] : code;
                }
            }
        }

    }
})();

(function() {
    pays.$inject = ["$http", "$sce", "$timeout", "STATUS", "utils", "ServiceRequest", "$location"];
    angular.module("rpgu.app").directive("pays", pays);

    function pays($http, $sce, $timeout, STATUS, utils, ServiceRequest, $location) {
        return {
            restrict: 'E',
            templateUrl: '/personcab/pays.template.html',
            link: function ($scope) {
				$scope.list	= [];
				$scope.status = STATUS.LOADING;

                $scope.getlist = function () {
                    $http.get(apiRoot + 'me/pays').then(function (data) {
                        data = data.data;
                        $scope.list = data.map(function (item) {
                            item.time = new Date(item.time);
                            return item;
                        });
                        $scope.status = STATUS.READY;
                    }).catch(utils.errorHandler($scope));
                };

                $scope.getPaymentStatusText = function(code) {
                    if (!code) {
                        return "";
                    }
                    var map = {
                        "REGS": "Распоряжение на платеж зарегистрировано",
                        "POST": "Распоряжение на оплату успешно передано",
                        "PROC": "Распоряжение на оплату в обработке",
                        "APRP": "Платеж успешно завершен",
                        "DECL": "Платеж отклонен"
                    };
                    var val = map[code];
                    if (!val) {
                        return "Неизвестный статус с кодом " + code;
                    }
                    return val;
                };

                $scope.showServiceRequest = function(idServiceRequest) {
                    ServiceRequest.get(idServiceRequest).then(function (request) {
                        $location
                            .path("/personcab/service-request/" + request.type)
                            .search({ idServiceRequest: idServiceRequest});
                    }).catch(utils.errorHandler($scope));
                };


				$scope.getlist();
            }
        }

    }
})();

(function() {
    payService.$inject = ["$http", "$sce", "session", "$routeParams", "STATUS", "utils"];
    angular.module("rpgu.app").directive("payService", payService);

    function payService($http, $sce, session, $routeParams, STATUS, utils) {
        return {
            restrict: "E",
            templateUrl: "/personcab/payService.template.html",
            link: function($scope) {
                $scope.serviceid = $routeParams.serviceid;

                $scope.refresh = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "payableService/service/" + $scope.serviceid)
                        .then(function(data) {
                            data = data.data;
                            $scope.serviceInfo = data.serviceInfo;
                            $scope.paymentOptions = data.paymentOptions;
                            $scope.paymentOptions.forEach(function (item) {
                                item.paymentDetails.amount /= 100.0;
                                item.paymentDetails.payerName = session.getUserName().fio;
                            });
                            if ($scope.paymentOptions.length === 1) {
                                updatePaymentData(0);
                            }
                            $scope.schema = $scope.getDefaultSchema();
                            // if ($scope.formModel['amount'] && $scope.formModel['amount'] != 0){
                            // 	$scope.formModel.amount = $scope.formModel.amount / 100;
                            // 	$scope.schema.properties.amount.readonly = true;
                            // }
                            // if ($scope.formModel['narrative'] && $scope.formModel['narrative'] != '')       $scope.schema.properties.narrative.readonly = true;
                            $scope.status = STATUS.READY;
                        })
                        .catch(utils.errorHandler($scope));
                };

                $scope.$watch("selectedPaymentOption", function(value, oldValue) {
                    if (value != oldValue) {
                        updatePaymentData($scope.selectedPaymentOption);
                    }
                });

                function updatePaymentData(optIndex) {
                    $scope.htmlComment = $scope.paymentOptions[optIndex].htmlComment;
                    $scope.formModel = $scope.paymentOptions[optIndex].paymentDetails;
                }

                $scope.pay = function() {
                    $scope.proceed = true;
                    $http
                        .post(apiRoot + "me/registerServicePay", {
                            idServiceRequest: $routeParams.idServiceRequest,
                            paymentDetailsId: $scope.formModel._id,
                            returnUrl:
                                $routeParams.returnUrl ?
                                $routeParams.returnUrl :
                                window.location.protocol +
                                "//" +
                                window.location.host +
                                context +
                                "/personcab/index?tab=pays"
                        }).then(function(data) {
                            data = data.data;
                            $scope.proceed = false;
                            window.location.href = data;
                        })
                        .catch(utils.errorHandler($scope));
                };
                $scope.refresh();

                $scope.getDefaultSchema = function() {
                    return {
                        type: "object",
                        properties: {
                            amount: {
                                title: "Сумма в рублях",
                                required: true,
                                readonly: true,
                                type: "number"
                            },
                            narrative: {
                                title: "Назначение платежа",
                                required: true,
                                readonly: true,
                                type: "string",
                                format: "html"
                            },
                            kbk: {
                                readonly: true,
                                title: "КБК",
                                type: "string"
                            },
                            payerName: {
                                readonly: true,
                                title: "Плательщик",
                                type: "string"
                            },
                            supplierOrgInfo: {
                                readonly: true,
                                title: "Информация об организации",
                                type: "object",
                                properties: {
                                    name: {
                                        title: "Наименование",
                                        type: "string"
                                    },
                                    inn: {
                                        title: "ИНН",
                                        type: "string"
                                    },
                                    kpp: {
                                        title: "КПП",
                                        type: "string"
                                    },
                                    ogrn: {
                                        title: "ОГРН",
                                        type: "string"
                                    },
                                    oktmo: {
                                        title: "ОКТМО",
                                        type: "string"
                                    },
                                    account: {
                                        title: "Банковский счет организации",
                                        type: "object",
                                        properties: {
                                            account: {
                                                title: "Номер счета",
                                                type: "string"
                                            },
                                            bankName: {
                                                title: "Наименование банка",
                                                type: "string"
                                            },
                                            bankBik: {
                                                title: "БИК банка",
                                                type: "string"
                                            },
                                            bankCorrespondentAccount: {
                                                title: "Корр. счет банка",
                                                type: "string"
                                            }
                                        }
                                    }
                                }
                            },
                            budgetIndex: {
                                readonly: true,
                                title: "Налоговые реквизиты п/п на оплату гос. услуги",
                                type: "object",
                                properties: {
                                    status: {
                                        title: "Статус плательщика",
                                        type: "string"
                                    },
                                    purpose: {
                                        title: "Показатель основания платежа",
                                        type: "string"
                                    },
                                    taxPeriod: {
                                        title: "Налоговый период или код таможенного органа",
                                        type: "string"
                                    },
                                    taxDocNumber: {
                                        title: "Показатель номера документа",
                                        type: "string"
                                    },
                                    taxDocDate: {
                                        title: "Показатель даты документа",
                                        type: "string"
                                    },
                                    paymentType: {
                                        title: "Показатель типа платежа",
                                        type: "string"
                                    }
                                }
                            }
                        }
                    };
                };

                $scope.form = [
                    {
                        type: "section",
                        htmlClass: "row",
                        items: [
                            {
                                type: "section",
                                htmlClass: "col-xs-6",
                                items: [
                                    {
                                        type: "fieldset",
                                        title: "Информация о платеже",
                                        items: ["amount", "narrative", "kbk", "payerName", "budgetIndex"]
                                    }
                                ]
                            },
                            {
                                type: "section",
                                htmlClass: "col-xs-6",
                                items: ["supplierOrgInfo"]
                            }
                        ]
                    }
                ];
            }
        };
    }
})();

(function() {
    personcab.$inject = ["$scope", "session", "ROLES"];
    angular.module("rpgu.app").controller("personcab", personcab);

    function personcab($scope, session, ROLES) {
        $scope.user = session.sessionData.user;
        $scope.hasRole = session.hasRole;
        $scope.ROLES = ROLES;
    }
})();

(function() {
    "use strict";
    angular.module("rpgu.app").component("poll", {
        templateUrl: "/personcab/poll/poll.component.html",
        bindings: {
            p: "<",
            hideRemove: "<",
            onRefresh: "&"
        },
        controller: ["$http", "STATUS", "$timeout", "session", "ROLES", "$q", "utils", "Upload", function ($http, STATUS, $timeout, session, ROLES, $q, utils, Upload) {
            let $ctrl = this;

            $ctrl.isAdmin = session.hasRole(ROLES.ADMIN);

            $ctrl.canVote = function (p) {
                if (p.isMultiVariant) {
                    return $ctrl.getCheckedVariants(p).length > 0
                } else {
                    return p.selected !== undefined;
                }
            };

            $ctrl.getCheckedVariants = function (p) {
                let res = [];
                for (let i = 0; i < p.variants.length; i++) {
                    if (p.variants[i].checked) {
                        res.push(i);
                    }
                }
                return res;
            };

            $ctrl.vote = function(p){
                let variants = p.isMultiVariant ? $ctrl.getCheckedVariants(p) : [p.selected];
                $http.put(apiRoot + 'poll/' + p._id + '/vote', variants).then(function (data) {
                    data = data.data;
                    p.status = STATUS.LOADING;
                    p.count = 0;
                    p.variants = data.variants;
                    p.variants.forEach(function(v){
                        p.count += v.count;
                    });
                    p.variants.forEach(function(v){
                        v.percent = (v.count*100/p.count).toFixed(0) ;
                    });
                    p.isSubmitted = true;
                    p.status = STATUS.READY;
                }).catch(function (data) {
                    data = data.data;
                    p.error = {message: data.errorMessage ? data.errorMessage : data};
                });
            };

            $ctrl.enable = function(p, enable){
                $http.put(apiRoot + 'poll/enable/' + p._id + '/' + enable).then(function () {
                    if (enable && !p.startDate) p.startDate = moment(new Date()).utc();
                    p.active = enable;
                }).catch(function (data) {
                    data = data.data;
                    p.error = {message: data.errorMessage ? data.errorMessage : data};
                    $timeout(function(){p.error = undefined;}, 5000);
                });
            };

            $ctrl.toMain = function(p){
                if (!p.active){
                    alert('Опрос сначала нужно активировать');
                    return;
                }
                $http.put(apiRoot + 'poll/toMain/' + p._id).then(function () {
                    alert('Теперь этот опрос находится на главной странице.')
                }).catch(function (data) {
                    data = data.data;
                    p.error = {message: data.errorMessage ? data.errorMessage : data};
                    $timeout(function(){p.error = undefined;}, 5000);
                });
            };

            $ctrl.save = function(p){
                p.status = STATUS.LOADING;
                let images = [];
                p.variants.forEach(variant => {
                    if (variant.image) {
                        images.push($ctrl.uploadImage(variant.image));
                    } else {
                        images.push(null);
                    }
                });
                $q.all(images).then(function (res) {
                    for (let i = 0; i < p.variants.length; i++) {
                        p.variants[i].imageId = res[i];
                        delete p.variants[i].image;
                    }
                    $http.post(
                        apiRoot + 'poll',
                        {
                            _id : p._id,
                            question : p.question,
                            description : p.description,
                            variants : p.variants.map(function(v) {
                                return {
                                    title: v.title,
                                    imageId: v.imageId
                                }
                            }),
                            isMultiVariant: p.isMultiVariant
                        }
                    ).then(function (data) {
                        data = data.data;
                        if (!data){
                            p.status = 'edit';
                            p.error = "Ошибка сохранения.";
                            return;
                        }
                        p._id = data._id;
                        p.question = data.question;
                        p.description = data.description;
                        p.active = data.active;
                        p.startDate = data.startDate;
                        p.variants = data.variants;
                        p.status = STATUS.READY;
                    }).catch(function (data) {
                        data = data.data;
                        p.status = STATUS.ERROR;
                        p.error = {message: data.errorMessage ? data.errorMessage : data};
                    });
                });
            };

            $ctrl.uploadImage = function (image) {
                return Upload.upload({
                    url: apiRoot + 'poll/image',
                    data: {file: image}
                }).then(function (resp) {
                    return resp.data;
                }, utils.errorHandler($ctrl));
            };

            $ctrl.remove = function(p){
                if (confirm('Удалить опрос?')) {
                    p.status = STATUS.LOADING;
                    $http.delete(apiRoot + 'poll/'+ p._id).then(function () {
                        if ($ctrl.onRefresh) {
                            $ctrl.onRefresh($ctrl.p);
                        }
                    }).catch(function (data) {
                        data = data.data;
                        p.status = STATUS.READY;
                        p.error = {message: data.errorMessage ? data.errorMessage : data};
                    });
                }
            };

            $ctrl.cancelEdit = function () {
                $ctrl.p.error = undefined;
                $ctrl.p.status = 'ready';
                if ($ctrl.onRefresh) {
                    $ctrl.onRefresh($ctrl.p);
                }
            };
        }]
    });
})();

(function() {
    pollList.$inject = ["$http", "$sce", "STATUS", "$window", "$timeout", "$document", "session", "ROLES", "utils", "Upload", "$q"];
    angular.module("rpgu.app").directive("pollList", pollList);

    function pollList($http, $sce, STATUS, $window, $timeout, $document, session, ROLES, utils, Upload, $q) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/personcab/poll/pollList.template.html',
            link: function ($scope) {
                $scope.isAdmin = session.hasRole(ROLES.ADMIN);
                $scope.refresh = function(){
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'poll').then(function (data) {
                            data = data.data;
                            $scope.polls = data;
                            $scope.polls.forEach(function(p){
                                p.startDate = p.startDate ? moment(p.startDate).utc() : undefined;
                                p.status = STATUS.READY;
                            });
                            $scope.status = STATUS.READY;
                        }).catch(function (data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = {message: data.errorMessage ? data.errorMessage : data};
                        });
                };
                $scope.refresh();
            }
        }
    }
})();

(function() {
    "use strict";
    angular.module("rpgu.app").component("pollOne", {
        templateUrl: "/personcab/poll/pollOne.component.html",
        controller: ["$http", "$routeParams", "STATUS", function ($http, $routeParams, STATUS) {
            let $ctrl = this;
            $ctrl.refresh = function(){
                $ctrl.status = STATUS.LOADING;
                $http.get(apiRoot + 'poll/' + $routeParams.pollId).then(function (data) {
                    $ctrl.p = data.data;
                    $ctrl.p.startDate = $ctrl.p.startDate ? moment($ctrl.p.startDate).utc() : undefined;
                    $ctrl.p.status = STATUS.READY;
                    $ctrl.status = STATUS.READY;
                }).catch(function (data) {
                    data = data.data;
                    $ctrl.status = STATUS.ERROR;
                    $ctrl.error = {message: data.errorMessage ? data.errorMessage : data};
                });
            };

            $ctrl.refresh();
        }]
    });
})();

(function() {
    recordMfc.$inject = ["$routeParams", "$http", "$sce", "STATUS", "$window", "session", "$timeout"];
    angular.module("rpgu.app").directive("recordMfc", recordMfc);

    function recordMfc($routeParams, $http, $sce, STATUS, $window, session, $timeout) {
        return {
            restrict: "E",
            templateUrl: "/personcab/recordMfc.template.html",
            link: function($scope) {
                $scope.status = STATUS.READY;

                $scope.code = $routeParams.code;
                $scope.mfcName = $routeParams.name;

                $scope.model = { mfcId: $scope.code, mfcName: $scope.mfcName };

                $scope.mfcList = [];
                $scope.serviceList = [];

                // loadMfc();
                loadServices();

                // function loadMfc() {
                //     $http
                //         .get(apiRoot + "remoteDict/values/custom?remoteDict_code=mfc_booking_getListOrganization")
                //         .then(function(data) {
                //             $scope.mfcList = data.data;
                //         })
                //         .catch(function(data) {
                //             data = data.data;
                //             $scope.status = STATUS.ERROR;
                //             $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                //         });
                // }

                function loadServices() {
                    $http
                        .get(apiRoot + "remoteDict/values/custom?remoteDict_code=mfc_booking_getListServices")
                        .then(function(data) {
                            $scope.serviceList = data.data;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                }

                $scope.appointment = function() {
                    $scope.status = STATUS.LOADING;
                    if (!$scope.model.time) {
                        alert("Необходимо выбрать время записи на прием");
                        $scope.status = STATUS.READY;
                        return;
                    } else {
                        $http
                            .post(apiRoot + "booking/bookRequest/", {
                                slotId: $scope.model.time,
                                organizationId: $scope.model.mfcId,
                                organizationName: $scope.model.mfcName,
                                serviceId: $scope.model.serviceId,
                                serviceName: $scope.serviceList.find(function(s) {
                                    return $scope.model.serviceId == s.value;
                                }).name,
                                lastName: session.sessionData.user.name.surname,
                                firstName: session.sessionData.user.name.name,
                                middleName: session.sessionData.user.name.patronymic
                            })
                            .then(function(data) {
                                $scope.status = "done";
                            })
                            .catch(function(data) {
                                $scope.status = "error";
                                $scope.error = data.data.errorMessage
                                    ? { message: data.data.errorMessage }
                                    : { message: data };
                            });
                    }
                };

                $scope.schema = {
                    type: "object",
                    properties: {
                        mfcId: {
                            title: "Код МФЦ ",
                            type: "string",
                        },
                        mfcName: {
                            title: "Выбран МФЦ",
                            type: "string",
                        },
                        serviceId: {
                            title: "Выберите услугу ",
                            type: "string",
                            placeholder: "- выбрать"
                        },
                        date: {
                            type: "string",
                            placeholder: "- выбрать"
                        },
                        time: {
                            type: "string",
                            placeholder: "- выбрать"
                        }
                    }
                };

                $scope.form = [
                    {
                        type: "section",
                        htmlClass: "row",
                        items: [
                            {
                                type: "section",
                                htmlClass: "col-xs-12",
                                items: [
                                    {
                                        key: "mfcName",
                                        type: "text",
                                        readonly: "true"
                                    },
                                    {
                                        key: "serviceId",
                                        type: "strapselect",
                                        onChange: "changeFlagDates()",
                                        options: {
                                            multiple: "false",
                                            httpGet: {
                                                url: "/rest/remoteDict/values/custom",
                                                optionsCallback: "prepareGet",
                                                variables: [
                                                    {
                                                        param: "remoteDict_code",
                                                        value: "mfc_booking_getListServices"
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        type: "section",
                        htmlClass: "row",
                        condition: "model.mfcId && model.serviceId",
                        items: [
                            {
                                type: "section",
                                htmlClass: "col-xs-7",
                                items: [
                                    {
                                        key: "date",
                                        title: "Дата записи на прием",
                                        type: "strapcustom",
                                        condition: "model.flagDates",
                                        options: {
                                            callback: "getDates"
                                        }
                                    }
                                ]
                            },
                            {
                                type: "section",
                                htmlClass: "col-xs-5",
                                items: [
                                    {
                                        key: "time",
                                        title: "Доступное время записи на прием",
                                        condition: "model.flagDates && model.flagTimes",
                                        type: "radiobuttonsvertical",
                                        style: {
                                            selected: "btn-success btn-xs",
                                            unselected: "btn-default btn-xs"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ];

                $scope.changeFlagDates = function() {
                    $scope.model.flagDates = false;
                    $scope.model.date = undefined;
                    $scope.model.time = undefined;
                    setField($scope.form, "time", [{ name: "Выберите дату", value: undefined }]);
                    $timeout(function() {
                        $scope.model.flagDates = true;
                    }, 1);
                };

                $scope.getDatesAsync = function(options) {
                    $scope.model.flagTimes = false;
                    return $http
                        .get(
                            apiRoot +
                                "remoteDict/values/custom?" +
                                "remoteDict_code=" +
                                "mfc_booking_getSlots" +
                                "&organizationId=" +
                                $scope.model.mfcId +
                                "&serviceId=" +
                                $scope.model.serviceId +
                                "&esiaId=" +
                                session.sessionData.user.samlUser.userId
                        )
                        .then(function(data) {
                            var list = data.data;

                            var days = list.map(function(slot) {
                                return { name: slot.time, value: slot.time };
                            });
                            list.forEach(function(sl) {
                                var day = moment(sl.time).format("DD.MM.YYYY");
                                var dur =
                                    moment(sl.time).format("HH:mm") +
                                    " - " +
                                    moment(sl.time)
                                        .add(sl.duration, "minute")
                                        .format("HH:mm");
                                var slotId = sl.slot;
                                if ($scope.tmpSlots[day] == undefined) {
                                    $scope.tmpSlots[day] = [];
                                }
                                $scope.tmpSlots[day].push({ name: dur, value: slotId });
                            });

                            $scope.mfcList = data.data;
                            return { data: days };
                        })
                        .catch(function(data) {
                            $scope.tmpSlots = {};
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                            return { data: [] };
                        });
                };

                $scope.getDates = function(options) {
                    $scope.model.flagTimes = false;
                    var request = new XMLHttpRequest();
                    request.open(
                        "GET",
                        apiRoot +
                            "remoteDict/values/custom?" +
                            "remoteDict_code=" +
                            "mfc_booking_getSlots" +
                            "&organizationId=" +
                            $scope.model.mfcId +
                            "&serviceId=" +
                            $scope.model.serviceId +
                            "&esiaId=" +
                            session.sessionData.user.samlUser.userId,
                        false
                    ); // `false` makes the request synchronous
                    request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                    request.send(null);
                    var days = [];
                    $scope.tmpSlots = {};
                    if (request.status === 200) {
                        var list = angular.fromJson(request.responseText);
                        days = list.map(function(slot) {
                            return { name: slot.time, value: slot.time };
                        });
                        list.forEach(function(sl) {
                            var day = moment(sl.time).format("DD.MM.YYYY");
                            var dur =
                                moment(sl.time).format("HH:mm") +
                                " - " +
                                moment(sl.time)
                                    .add(sl.duration, "minute")
                                    .format("HH:mm");
                            var slotId = sl.slot;
                            if ($scope.tmpSlots[day] == undefined) {
                                $scope.tmpSlots[day] = [];
                            }
                            $scope.tmpSlots[day].push({ name: dur, value: slotId });
                        });
                    } else {
                        $scope.tmpSlots = {};
                    }
                    return days;
                };

                $scope.$watch("model.date", function(value, oldValue) {
                    if (value != oldValue && $scope.model.date != undefined) {
                        $scope.model.time = undefined;
                        var list = $scope.tmpSlots[$scope.model.date.substring(0, 10)];
                        setField($scope.form, "time", list);
                        $scope.model.flagTimes = false;
                        $timeout(function() {
                            $scope.model.flagTimes = true;
                        }, 1);
                    }
                });

                function setField(fields, key, value) {
                    fields.forEach(function(field) {
                        if (field.type == "fieldset" || field.type == "section") {
                            setField(field.items, key, value);
                        } else if (field.key && field.key.toString() == key) {
                            $timeout(function() {
                                field.titleMap = value;
                            }, 1);
                        }
                    });
                }

                $scope.prepareGet = function(options) {
                    var params = "";
                    if (options.httpGet.variables) {
                        params = "?";
                        options.httpGet.variables.forEach(function(item, i, arr) {
                            var p = item.param.toString();
                            var v =
                                item.value.toString().indexOf("model.") == 0
                                    ? $scope.getModel()[item.value.toString().split(".")[1]]
                                    : item.value.toString();
                            params = params + p + "=" + v;
                            if (i < arr.length - 1) params = params + "&";
                        });
                    }
                    options.httpGet.url = options.httpGet.url + params;
                    if (options.httpGet.url.indexOf("/rest/") !== -1) {
                        options.httpGet.url = options.httpGet.url.replace("/rest/", "");
                    }
                    if (options.httpGet.url.indexOf("http") != 0) {
                        options.httpGet.url = apiRoot + options.httpGet.url;
                    }
                    return options;
                };
            }
        };
    }
})();

(function() {
    angular
        .module("rpgu.app")
        .directive("requestConfirm", ["$http", "STATUS", "$routeParams", "$window", "$location", "session", "$uibModal", "utils", function($http, STATUS, $routeParams, $window, $location, session, $uibModal, utils) {
            return {
                restrict: "E",
                templateUrl: "/personcab/requestConfirm.template.html",
                link: function($scope, $elem) {
                    $scope.idProcedure = $routeParams.procedure;
                    $scope.idServiceForm = $routeParams.form;
                    $scope.asp = $routeParams.asp;
                    $scope.type = $routeParams.type;

                    $scope.status = STATUS.READY;
                    $scope.checked = false;

                    // asp data
                    $scope.request = {};
                    $scope.user = angular.copy(session.sessionData.user);
                    $scope.schemaForm = {
                        schema: {},
                        form: []
                    };

                    // save asp form
                    $scope.saveAspform = function() {
                        $http
                            .post(apiRoot + "serviceRequest/v2/" + $scope.idProcedure, {
                                type: "asp",
                                schemaForm: $scope.schemaForm
                            })
                            .then(function(response) {
                                var data = response.data;
                                $scope.status = STATUS.READY;
                                $location.path(context + "/personcab/service-request/schemaform")
                                    .search({ idServiceRequest: data.id });
                            })
                            .catch(errorHandler);
                    };

                    // get sprav function
                    $scope.GetSprav = function(serviceId, idForm) {
                        $http
                            .get(apiRoot + "asp/sprav/" + serviceId + "/" + idForm)
                            .then(function(data) {
                                data = data.data;
                                if (idForm == "REG") {
                                    calcSprav($scope.request.form, data, "RegBlockReginfo");
                                }
                                $scope.schemaForm.schema = angular.copy($scope.request.schema);
                                $scope.schemaForm.form = angular.copy($scope.request.form);

                                $scope.saveAspform(); // ready all conditions
                            })
                            .catch(errorHandler);
                    };

                    $scope.fillDocuments = function(request, docList) {
                        if (docList != undefined && docList.length > 0) {
                            var form = {
                                title: "Документы, требуемые для подачи заявления",
                                type: "fieldset",
                                items: []
                            };

                            docList.forEach(function(doc, index) {
                                var name = "doc" + index;
                                var object = {
                                    type: "array",
                                    format: "singlefile",
                                    required: doc.strict == "1" ? true : false,
                                    maxSize: {
                                        maximum: "5MB",
                                        validationMessage: "Превышен допустимый размер файла: ",
                                        validationMessage2: "Текущий размер файла: "
                                    }
                                };
                                request.schema.properties.Documets.properties[name] = object;
                                var obj = {
                                    key: "Documets." + name,
                                    title: doc.name,
                                    description: doc.comment,
                                    type: "nwpFileUpload",
                                    endpoint: ""
                                };
                                form.items.push(obj);

                                if (doc.attachIdRef) {
                                    var objHelp = {
                                        type: "help",
                                        helpvalue:
                                            '<p><b>Шаблон документа: <a href="' +
                                            apiRoot +
                                            "asp/doc/" +
                                            $scope.idProcedure +
                                            "/" +
                                            doc.attachIdRef +
                                            '" target="_blank">' +
                                            doc.attachFileName +
                                            "</a></b></p>"
                                    };
                                    form.items.push(objHelp);
                                }
                            });
                            request.form.push(form);
                        }

                    };

                    // GetReqDocument service
                    $scope.GetReqDocument = function(serviceId) {
                        $http
                            .get(apiRoot + "asp/requiredDoc/" + serviceId)
                            .then(function(data) {
                                data = data.data;
                                $scope.docList = data;
                                $scope.fillDocuments($scope.request, $scope.docList);
                                $scope.GetSprav($scope.idProcedure, "REG");
                            })
                            .catch(errorHandler);
                    };

                    // 	HIDEN blocks from setting
                    $scope.hiddeBlocks = function(setting, form) {
                        setting.forEach(function(field) {
                            var title = field.title;
                            if(title.indexOf("Блок:") == 0 && title.length > 6) {
                                title = title[5].toUpperCase() + title.substr(6);
                            }
                            form.forEach(function(value) {
                                if (value.title == field.name) {
                                    if (field.hide == "1") {
                                        value["condition"] = "false";
                                    } else {
                                        if (field.require == "1") {
                                            value.title = title + " *";
                                        } else {
                                            value.title = title;
                                        }
                                    }
                                }
                            });
                        });
                    };

                    // fill schema from setting value
                    $scope.fillBlocks = function(setting, schema) {
                        for (var value in schema.properties) {
                            if (schema.properties[value].properties != undefined) {
                                for (var dept in schema.properties[value].properties) {
                                    setting.forEach(function(field) {
                                        var title = field.title;
                                        if(title.indexOf("Блок:") == 0 && title.length > 6) {
                                            title = title[5].toUpperCase() + title.substr(6);
                                        }
                                        console.log({ title: title });
                                        var name = field.name.replace(/\./g, "");
                                        if (dept.indexOf("_pasp") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (dept.indexOf("_svid") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        }
                                        if (dept.indexOf("_prepasp") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (dept.indexOf("_presvid") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (dept.indexOf("_predstav") != -1 && dept.indexOf(name) != -1) {
                                            schema.properties[value].properties[dept].title = title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        } else if (name == dept) {
                                            schema.properties[value].properties[dept].title = title;
                                            schema.properties[value].properties[dept].required =
                                                field.require == "1" ? true : false;
                                            schema.properties[value].properties[dept].description =
                                                field.comment != undefined ? field.comment : " ";
                                        }
                                    });
                                }
                            }
                        }
                    };

                    // fill radio button
                    function fillRadio(data, setting, fieldId) {
                        data.forEach(function(obj) {
                            if (obj.type == "fieldset" || obj.type == "section") {
                                fillRadio(obj.items, setting, fieldId);
                            } else if (obj.type != "help" && obj.key) {
                                var object = obj.key.replace(/\./g, "");
                                if (object.indexOf(fieldId) != -1) {
                                    obj.titleMap = [];
                                    setting.forEach(function(setting) {
                                        var name = setting.name.replace(/\./g, "");
                                        ["PaymentPost", "PaymentBank", "PaymentKard", "PaymentList"].forEach(function(
                                            arr
                                        ) {
                                            if (arr.indexOf(name) != -1) {
                                                if (setting.hide != "1") {
                                                    obj.titleMap.push({
                                                        value: arr,
                                                        name: setting.title
                                                    });
                                                }
                                            }
                                        });
                                    });
                                }
                            }
                        });
                    }

                    function deleteReadonly(block) {
                        for (var value in block.properties) {
                            block.properties[value].readonly = false;
                        }
                    }

                    // hide fields in block function
                    function calcCondition(data, setting) {
                        data.forEach(function(obj) {
                            if (obj.type == "fieldset" || obj.type == "section") {
                                calcCondition(obj.items, setting);
                            } else if (obj.type != "help" && obj.key) {
                                setting.forEach(function(setting) {
                                    var name = setting.name.replace(/\./g, "");
                                    var object = obj.key.split(".")[1];
                                    if (object && object.indexOf(name) != -1) {
                                        if (setting.hide == "1") {
                                            obj["condition"] = "false";
                                        }
                                    }
                                });
                            }
                        });
                    }

                    function calcSprav(data, spravList, setting) {
                        data.forEach(function(obj) {
                            if (obj.type == "fieldset" || obj.type == "section") {
                                calcSprav(obj.items, spravList, setting);
                            } else if (obj.type != "help" && obj.key) {
                                var object = obj.key.replace(/\./g, "");
                                if (object.indexOf(setting) != -1) {
                                    var list = {};
                                    if (spravList != undefined && spravList.length > 0) {
                                        spravList.forEach(function(szn) {
                                            list[szn.spravId] = szn.spravInfo;
                                        });

                                        if (obj.titleMap != undefined) {
                                            obj.titleMap = list;
                                        } else {
                                            obj["titleMap"] = list;
                                        }
                                    }
                                }
                            }
                        });
                    }

                    $scope.getAspform = function() {
                        $http
                            .get(apiRoot + "serviceRequest/v2/getASPForm?procedure=" + $scope.idProcedure)
                            .then(function(response) {
                                var data = response.data;
                                $scope.request.form = data.value.form;
                                $scope.request.schema = data.value.schema;
                                $scope.getSettings();
                            })
                            .catch(errorHandler);
                    };

                    $scope.nextRequest = function() {
                        var reqType = $scope.type;
                        if (reqType == "asp") {
                            $scope.status = STATUS.LOADING;
                            $scope.getAspform();
                        } else if (reqType == "form") {
                            $scope.createRequest(reqType);
                        } else {
                            $scope.createRequest(reqType);
                        }
                    };

                    $scope.getSettings = function() {
                        $http
                            .get(apiRoot + "asp/settings/" + $scope.idProcedure)
                            .then(function(data) {
                                data = data.data;
                                $scope.request.setting = data;
                                $scope.hiddeBlocks($scope.request.setting, $scope.request.form);
                                $scope.fillBlocks($scope.request.setting, $scope.request.schema);
                                fillRadio($scope.request.form, $scope.request.setting, "PaymentBlockPaymentMethod");
                                calcCondition($scope.request.form, $scope.request.setting); // hide fields in block
                                $scope.GetReqDocument($scope.idProcedure);
                            })
                            .catch(errorHandler);
                    };

                    $scope.createRequest = function(reqType, createNew) {
                        $scope.status = STATUS.LOADING;
                        var body = {
                            type: reqType
                        };
                        if ($routeParams.inclusiveUUID) {
                            body.inclusiveUUID = $routeParams.inclusiveUUID;
                        }
                        if ($routeParams.drguId) {
                            body.drguId = $routeParams.drguId;
                        }
                        if ($scope.idProcedure) {
                            body.stId = $scope.idProcedure;
                        }
                        if (createNew) {
                            body.createNew = true;
                        }

                        $http
                            .post(apiRoot + "serviceRequest/v2", body)
                            .then(function(response) {
                                if (reqType == null || reqType === "formio" || reqType === "schemaform") {
                                    var type = response.data.type || reqType;
                                    if (response.data.isDraft) {
                                        showDraftConfirmDialog(response.data.id, type, reqType);
                                    } else {
                                        $location
                                            .path("/personcab/service-request/" + type)
                                            .search({ idServiceRequest: response.data.id });
                                    }
                                } else {
                                    var id = response.data;
                                    $location
                                        .path("/personcab/request")
                                        .search("idServiceRequest", id);
                                }
                            })
                            .catch(errorHandler);
                    };

                    function showDraftConfirmDialog(id, type, reqType) {
                        $uibModal.open({
                            templateUrl: '/personcab/draftConfirmDialog.template.html',
                            size: 'lg',
                            controllerAs: '$ctrl',
                            controller: ["$uibModalInstance", function ($uibModalInstance) {
                                var $ctrl = this;
                                $ctrl.status = STATUS.READY;
                                $ctrl.useDraft = function () {
                                    $uibModalInstance.close();
                                    $location
                                        .path("/personcab/service-request/" + type)
                                        .search({ idServiceRequest: id });
                                };
                                $ctrl.createNew = function () {
                                    $uibModalInstance.close();
                                    $scope.createRequest(reqType, true);
                                };
                                $ctrl.close = function () {
                                    $uibModalInstance.close();
                                    $scope.status = STATUS.READY;
                                };
                            }]
                        });
                    }

                    function errorHandler(data) {
                        data = data.data || data;
                        report(data, "requestConfirm.directive.js");
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? { message: data.errorMessage } : data;
                    }
                }
            };
        }]);
})();

(function () {
    "use strict";
    var app = angular.module("rpgu.app");
    app.component("indicatorRadio", {
        templateUrl: "/personcab/requestRate/indicator-radio.html",
        bindings: {
            indicator: "=",
            isDisabled: "<"
        },
        controller: function () {
            //var $ctrl = this;
        }
    });
}());

(function () {
    "use strict";
    var app = angular.module("rpgu.app");
    app.component("indicatorTextarea", {
        templateUrl: "/personcab/requestRate/indicator-textarea.html",
        bindings: {
            indicator: "=",
        },
        controller: function () {
            //var $ctrl = this;
        }
    });
}());

(function () {
    "use strict";
    var app = angular.module("rpgu.app");
    app.component("requestRate", {
        templateUrl: "/personcab/requestRate/request-rate.html",
        controller: ["$http", "STATUS", "utils", "$q", "ServiceRequest", "DigitalRGUService", "$routeParams", "session", "$location", function ($http, STATUS, utils, $q, ServiceRequest, DigitalRGUService, $routeParams, session, $location) {
            var $ctrl = this;
            $ctrl.requestId = $routeParams.request;
            $ctrl.ratingId = $routeParams.rating;
            $ctrl.form = null;


            $ctrl.status = STATUS.READY;


            $ctrl.getIndicators = function (blockId) {
                return $ctrl.form.indicators.indicator.filter(indicator => indicator.blockId === blockId);
            };

            $ctrl.loadForm = function () {
                return $http.get(apiRoot + "rate/form")
                    .then(function (data) {
                        $ctrl.form = data.data;
                        return $ctrl.form;
                    });
            };

            $ctrl.loadServiceRequest = function (requestId) {
                return ServiceRequest.get(requestId)
                    .then(function (serviceRequest) {
                        $ctrl.request = serviceRequest;
                        return DigitalRGUService.get(serviceRequest.digitalRguServices)
                    })
                    .then(function (service) {
                        $ctrl.psPassport = {
                            id: service.pspassport_id,
                            name: service.pspassport_title
                        };
                        $ctrl.service = {
                            id: service.service_id,
                            name: service.service_title
                        };
                        $ctrl.dept = {
                            id: service.dept_id,
                            name: service.dept_title
                        };
                        $ctrl.docNum = $ctrl.request.docNum;
                        $ctrl.receivedDate = moment($ctrl.request.date).utc();
                        return service;
                    });
            };

            $ctrl.loadRate = function (ratingId) {
                return $http.get(apiRoot + "rate/" + ratingId).then(function (data) {
                    var rate = data.data;
                    $ctrl.docNum = rate.serviceRequestNum;
                    $ctrl.receivedDate = moment(rate.receivedDate).utc();
                    $ctrl.psPassport = rate.psPassport;
                    $ctrl.service = rate.service;
                    $ctrl.dept = rate.dept;
                    //$ctrl.comment.text = rate.comment;
                    rate.rateList.forEach(function (rate) {
                        let indicator = $ctrl.form.indicators.indicator.find(indicator => {
                            return indicator.id === rate.indicatorId;
                        });
                        if (indicator) {
                            indicator.value = rate.valueId;
                        }
                    });
                    return rate;
                });
            };

            $ctrl.postRate = function () {
                var rate = {
                    serviceRequestNum: $ctrl.request.docNum,
                    snils: session.sessionData.user.samlUser.person.snils
                        ? session.sessionData.user.samlUser.person.snils
                        : session.sessionData.user.samlUser.person.personMobilePhone,
                    email: session.sessionData.user.samlUser.person.email
                        ? session.sessionData.user.samlUser.person.email
                        : "",
                    dept: $ctrl.dept,
                    service: $ctrl.service,
                    psPassport: $ctrl.psPassport,
                    okato: "07401000000",
                    receivedDate: $ctrl.request.date,
                    comment: null,
                    rateList: $ctrl.form.indicators.indicator
                        .filter((indicator) => {
                            return indicator.value != null;
                        })
                        .map((indicator) => {
                            return {
                                indicatorId: indicator.id,
                                valueId: indicator.value,
                                value: indicator.viewAs === 'radio' ? '1' : null
                            };
                        })
                };
                if (rate.rateList.length === 0) {
                    alert("Необходимо оценить хотя бы по одному вопросу");
                    return;
                }
                $ctrl.status = STATUS.LOADING;
                $http
                    .post(apiRoot + "rate/" + $ctrl.requestId, rate)
                    .then(function (data) {
                        $ctrl.ratingId = data.data;
                        $ctrl.requestId = null;
                        $ctrl.status = STATUS.READY;
                        alert("Спасибо. Ваша оценка принята.");
                        $location.search({rating: $ctrl.ratingId});
                    }).catch(utils.errorHandler($ctrl));
            };

            $ctrl.status = STATUS.LOADING;
            let q = {form: $ctrl.loadForm()};
            if ($ctrl.requestId) {
                q.service = $ctrl.loadServiceRequest($ctrl.requestId);
            }
            $q.all(q).then(() => {
                $ctrl.status = STATUS.READY;
                if ($ctrl.ratingId) {
                    $ctrl.status = STATUS.LOADING;
                    $ctrl.loadRate($ctrl.ratingId).then(() => {
                        $ctrl.status = STATUS.READY;
                    }).catch(utils.errorHandler($ctrl));
                }
            }).catch(utils.errorHandler($ctrl));
        }]
    });
}());

(function () {
    "use strict";
    var app = angular.module("rpgu.app");

    app.component("removeIntervals", {
        templateUrl: "/personcab/resourceSchedule/removeIntervals.component.html",
        bindings: {
            onRemove: "&",
            idOrganization: "<",
            idResource: "<"
        },
        controller: ["STATUS", "$http", "utils", function (STATUS, $http, utils) {
            var $ctrl = this;
            $ctrl.dateStart = null;
            $ctrl.dateEnd = null;
            $ctrl.isValid = function () {
                var dateStart = moment($ctrl.dateStart);
                var dateEnd = moment($ctrl.dateEnd);
                return dateStart.isValid() && dateEnd.isValid() && dateStart.isBefore(dateEnd);
            };
            $ctrl.removeIntervals = function () {
                if (!$ctrl.isValid()) {
                    return;
                }
                $ctrl.status = STATUS.LOADING;
                var dateStart = moment($ctrl.dateStart);
                var dateEnd = moment($ctrl.dateEnd);
                $http.delete(
                    apiRoot + "organizations/"
                    + $ctrl.idOrganization
                    + "/resources/"
                    + $ctrl.idResource
                    + "/schedules",
                    {
                        params: {
                            startInterval: dateStart.format("YYYY-MM-DD"),
                            endInterval: dateEnd.format("YYYY-MM-DD")
                        }
                    }
                ).then(function (res) {
                    $ctrl.status = STATUS.READY;
                    $ctrl.onRemove({count: res.data});
                }).catch(utils.errorHandler($ctrl));
            }
        }]
    });

})();

(function() {
    angular.module("rpgu.app").directive("repeatInterval", repeatInterval);

    function repeatInterval() {
        return {
            restrict: 'E',
            scope: {
                minDate: "=",
                maxDate: "=",
                ngModel: "="
            },
            templateUrl: '/personcab/resourceSchedule/repeatInterval.template.html',
            link: function ($scope) {
                if(!$scope.ngModel)
                    $scope.ngModel = {checked: false, days: [true, true, true, true, true, true, true]};
                $scope.getDayName = function (day) {
                    return moment().weekday(day).format("dd");
                }
            }
        }

    }
})();

(function() {
    "use strict";
    resourceSchedule.$inject = ["$http", "session", "ROLES", "utils", "STATUS"];
    var app = angular.module("rpgu.app");

    app.directive("resourceSchedule", resourceSchedule);

    app.filter("mskFormat", function() {
        return function(date) {
            return date.tz("Europe/Moscow").format("HH:mm");
        };
    });

    function resourceSchedule($http, session, ROLES, utils, STATUS) {
        return {
            restrict: "E",
            scope: {
                notitle: "<",
                id: "@",
                place: "@",
                resourceId: "@",
                resource: "=",
                data: "=",
                question: "="
            },
            templateUrl: "/personcab/resourceSchedule/resourceSchedule.template.html",
            link: function($scope) {
                $scope.personal = {
                    samlUser: {
                        person: {
                            email: "", // Адрес электронной почты
                            personMobilePhone: "" // Номер мобильного телефона
                        },
                        principalAdr: {
                            PERSON_REGISTRATION: {
                                contryChar3Code: "",
                                region: "",
                                city: "",
                                street: "",
                                index: "",
                                house: "",
                                corpus: "",
                                flat: ""
                            }
                        }
                    }
                };

                /**
                 * Получение данных пользователя
                 * @param status
                 */
                $scope.GetUserData = function() {
                    $http
                        .get(apiRoot + "me")
                        .then(function(data) {
                            data = data.data;

                            // парсинг admin
                            if (!angular.isUndefined(data.samlUser)) {
                                // tag person
                                if (!angular.isUndefined(data.samlUser.person)) {
                                    // personMobilePhone
                                    if (!angular.isUndefined(data.samlUser.person.personMobilePhone)) {
                                        $scope.personal.samlUser.person.personMobilePhone =
                                            data.samlUser.person.personMobilePhone;
                                        $scope.newInt.userPhone = $scope.personal.samlUser.person.personMobilePhone;
                                    }

                                    // email
                                    if (!angular.isUndefined(data.samlUser.person.email)) {
                                        $scope.personal.samlUser.person.email = data.samlUser.person.email;
                                        $scope.newInt.userEmail = $scope.personal.samlUser.person.email;
                                    }

                                    // principalAddresses
                                    if (!angular.isUndefined(data.samlUser.person.principalAdr)) {
                                        data.samlUser.person.principalAdr.forEach(function(item) {
                                            if (item.addressType == "PERSON_REGISTRATION") {
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .region =
                                                    item.region;
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .city =
                                                    item.city;
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .street =
                                                    item.street;
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .index =
                                                    item.index;
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .contryChar3Code =
                                                    item.contryChar3Code;
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .house =
                                                    item.house;
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .corpus =
                                                    item.corpus;
                                                $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .flat =
                                                    item.flat;

                                                $scope.adress =
                                                    $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .index
                                                    + ", "
                                                    + $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .region
                                                    + ", "
                                                    + $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .city
                                                    + ", "
                                                    + $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .street
                                                    + ", "
                                                    + $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .house
                                                    + ", "
                                                    + $scope.personal.samlUser.principalAdr.PERSON_REGISTRATION
                                                    .flat;
                                                $scope.newInt.userAddress = $scope.adress;
                                            }
                                        });
                                    }
                                }
                            }

                            $scope.getStatus = "ready";
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.getStatus = "error";
                            $scope.getStatusError = data.errorMessage
                                ? { message: data.errorMessage }
                                : { message: data };
                        });
                };

                if ($scope.resourceId) {
                    $scope.resource = { id: $scope.resourceId };
                    $http
                        .get(apiRoot + "organizations/" + $scope.id + "/resources/" + $scope.resourceId)
                        .then(function(data) {
                            data = data.data;
                            $scope.resource = data;
                        });
                }

                $scope.isLocked = function(day) {
                    if (day && (day.selectLocked || day.moment.isBefore(moment()))) {
                        return true;
                    }
                }

                $scope.select = function(day) {
                    if ($scope.isLocked(day) && $scope.isUser) {
                        return;
                    }
                    $scope.selected = day;
                    $scope.maxDate = $scope.selected
                        ? moment($scope.selected.moment).add(6, "months")
                        : null;
                };

                $scope.moment = moment()
                    .utc()
                    .startOf("month");
                $scope.days = getDaysOfWeek();
                $scope.weeks = getWeeks();
                $scope.isDept = session.hasRole(ROLES.DEPT);
                $scope.isUser = session.sessionData.user.type == "user";
                $scope.selectedSubInterval = null;
                $scope.status = "loading";

                $scope.monthBack = function() {
                    $scope.moment.subtract(1, "month");
                    getWeeks();
                };
                $scope.monthForward = function() {
                    $scope.moment.add(1, "month");
                    getWeeks();
                };
                $scope.$watch("resource", function(newValue, oldValue) {
                    if (newValue != oldValue) {
                        getWeeks();
                    }
                });

                $scope.selectSubInterval = function(subInterval) {
                    $scope.selectedSubInterval = subInterval;
                    //                    $scope.newInt.time = moment(subInterval.time).format("HHmm");
                    $scope.newInt.time = $scope.selectedSubInterval ? moment(subInterval.time).format(
                        "HHmm") : null;
                    $scope.GetUserData();
                };

                $scope.returnStatus = function() {
                    $scope.addIntStatus = STATUS.INIT;
                };

                /**
                 * Запись
                 * @param status
                 */
                $scope.addInt = function(status) {
                    var newInt = $.extend({}, $scope.newInt);
                    newInt.time = moment(newInt.time, "HHmm")
                        .year($scope.selected.moment.year())
                        .month($scope.selected.moment.month())
                        .date($scope.selected.moment.date());
                    if (!newInt.time.isValid()) {
                        $scope.addIntStatus = "error";
                        $scope.addIntError = { message: "Время введено неверно" };
                        return;
                    }
                    $scope.addIntStatus = "loading";
                    $http
                        .post(apiRoot + "organizations/" + $scope.id + "/resources/" + $scope.resource.id +
                            "/schedules", {
                                time: newInt.time,
                                userPhone: newInt.userPhone,
                                userEmail: newInt.userEmail,
                                userAddress: newInt.userAddress,
                                status: status,
                                question: {
                                    id: $scope.question ? $scope.question.id : $scope.newInt.question.id
                                },
                                userText: newInt.userText,
                                info: newInt.info
                            })
                        .then(function(data) {
                            data = data.data || data;
                            if (data.errorMessage) $scope.newInt = {};
                            $scope.addIntStatus = "ready";
                            getWeeks($scope.selected.moment);
                            $scope.data = $scope.selectedSubInterval;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.addIntStatus = "error";
                            $scope.addIntError = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };

                /**
                 * Добавление свободных интервалов
                 */
                $scope.add = function() {
                    var start = moment($scope.newObj.start, "HHmm")
                        .year($scope.selected.moment.year())
                        .month($scope.selected.moment.month())
                        .date($scope.selected.moment.date());
                    var end = moment($scope.newObj.end, "HHmm")
                        .year($scope.selected.moment.year())
                        .month($scope.selected.moment.month())
                        .date($scope.selected.moment.date());
                    if (!start.isValid() || !end.isValid()) {
                        $scope.addStatus = "error";
                        $scope.addError = { message: "Время введено неверно" };
                        return;
                    }
                    $scope.addStatus = STATUS.LOADING;
                    $http
                        .post(
                            apiRoot + "organizations/"
                            + $scope.id
                            + "/resources/"
                            + $scope.resource.id
                            + "/schedules", {
                                time: start,
                                length: end.valueOf() - start.valueOf(),
                                repeatInterval: $scope.newObj.repeatInterval.checked
                                    ? {
                                        days: $scope.newObj.repeatInterval.days,
                                        dateEnd: $scope.newObj.repeatInterval.dateEnd
                                    }
                                    : null,
                                status: "vacant"
                            }
                        )
                        .then(function(data) {
                            data = data.data;
                            $scope.addStatus = STATUS.READY;
                            getWeeks($scope.selected.moment);
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.addStatus = STATUS.ERROR;
                            $scope.addError = data.errorMessage ? { message: data.errorMessage } : data;
                        });
                };

                /**
                 * удаление свободных и занятых интервалов
                 * @param interval
                 */
                $scope.remove = function(interval) {
                    interval.removeStatus = STATUS.READY;
                    $http
                        .delete(
                            apiRoot + "organizations/"
                            + $scope.id
                            + "/resources/"
                            + $scope.resource.id
                            + "/schedules/"
                            + interval.id
                        )
                        .then(function() {
                            $scope.removing = null;
                            interval.removeStatus = STATUS.READY;
                            getWeeks($scope.selected.moment);
                        })
                        .catch(function(data) {
                            data = data.data;
                            interval.removeStatus = STATUS.ERROR;
                            interval.removeError = data.errorMessage ? { message: data.errorMessage } :
                                data;
                        });
                };

                $scope.onRemove = function (count) {
                    alert("Удалено " + count + " записей");
                    getWeeks($scope.selected ? $scope.selected.moment : null);
                };

                /**
                 * Проверяет пользователей
                 * @param day текущий день
                 */

                function CalcUsers(day) {
                    if (day.intervals.length > 0) {
                        var copy = {};
                        angular.copy(day, copy);
                        var users = [];
                        //                        var count_user = 0;
                        for (var u = 0; u < copy.intervals.length; u++) {
                            var user = copy.intervals[u].user;
                            if (user !== undefined) {
                                //                                var count_user = count_user + 1;
                                for (var r = 0; r < copy.intervals.length; r++) {
                                    if (copy.intervals[r].user !== undefined) {
                                        if (user.id === copy.intervals[r].user.id) {
                                            copy.intervals[r].user = undefined;
                                        }
                                    }
                                }
                                users.push(user);
                            }
                        }
                        return users;
                    }
                }

                /**
                 * Загрузить недели месяца
                 * @param selectMoment После загрузки этот день будет выбран
                 */
                function getWeeks(selectMoment) {
                    var numWeeks = 6;
                    var dayHeight = 720;
                    var curMoment = $scope.moment.clone().startOf("week");
                    var endMoment = curMoment.clone().add(numWeeks, "week");
                    $scope.status = STATUS.LOADING;
                    $scope.weeks = [];
                    $scope.newInt = {};
                    $scope.select(null);
                    $http
                        .get(
                            apiRoot + "organizations/"
                            + $scope.id
                            + "/resources/"
                            + $scope.resource.id
                            + "/schedules", { params: { timeStart: curMoment.toISOString(), timeEnd: endMoment.toISOString() } }
                        )
                        .then(function(data) {
                            data = data.data;
                            var nData = 0;
                            data.forEach(function(item) {
                                if (item != null) {
                                    ["time", "bookDate", "occupyDate"].forEach(function(field) {
                                        if (item[field]) item[field] = moment(item[field]).utc();
                                    });
                                    item.timeEnd = item.time.clone().add(item.length, "ms");
                                }
                            });
                            var now = moment();
                            var weeks = [];
                            for (var w = 0; w < numWeeks; w++) {
                                var week = [];
                                for (var d = 0; d < 7; d++) {
                                    var nextMoment = curMoment.clone().add(1, "day");
                                    var currTime = curMoment.clone();
                                    var day = {
                                        editLocked: false,
                                        selectLocked: curMoment.isBefore(now, "day"),
                                        intervals: [], // Занятые интервалы (status: "occupied|booked")
                                        list: [], // Свободные интервалы (status: "vacant")
                                        maxInt: 0, // Максимальный свободный для записи интревал (мс)
                                        minperpx: 2,
                                        title: null,
                                        moment: curMoment.clone(),
                                        users: []
                                    };
                                    while (nData < data.length) {
                                        if (data[nData] != null) {
                                            if (!(
                                                    data[nData].time.local().format("DD")
                                                    == currTime.local().format("DD")
                                                    && data[nData].time.local().format("MM")
                                                    == currTime.local().format("MM")
                                                    && data[nData].time.local().format("YYYY")
                                                    == currTime.local().format("YYYY")
                                                )) {
                                                break;
                                            }
                                            switch (data[nData].status) {
                                                case "vacant":
                                                    day.list.push(data[nData]);
                                                    if (day.maxInt < data[nData].length)
                                                        // TODO: Надо бы учитывать занятые интервалы
                                                        day.maxInt = data[nData].length;
                                                    break;
                                                case "booked":
                                                case "occupied":
                                                    day.intervals.push(data[nData]);
                                                    if (day.maxInt > data[nData].length)
                                                        day.maxInt = day.maxInt - data[nData].length;
                                                    break;
                                            }
                                        }
                                        nData++;
                                    }
                                    if (day.list.length > 0) {
                                        day.minperpx =
                                            (day.list[day.list.length - 1].timeEnd.unix() - day.list[0].time
                                                .unix())
                                            / 60
                                            / dayHeight;
                                        var calcPos = function(item) {
                                            if (item != null) {
                                                item.top = (item.time.unix() - day.list[0].time.unix())
                                                    / 60 / day.minperpx;
                                                item.height = item.length / 60000 / day.minperpx;
                                                //item.color = item.status == "occupied" ? "#8feb8f" : "#6cd1ef";
                                            }
                                        }
                                        day.list.forEach(calcPos);
                                        day.intervals.forEach(calcPos);
                                    }

                                    if (selectMoment && selectMoment.isSame(day.moment)) {
                                        $scope.selected = day;
                                    }
                                    calcDaySubIntervals(
                                        day,
                                        $scope.resource.scheduleInterval > 0 ? $scope.resource.scheduleInterval
                                        : 10,
                                        $scope.question ? $scope.question.length : 1
                                    );
                                    day.users = CalcUsers(day);
                                    week.push(day);
                                    curMoment = nextMoment;
                                }
                                weeks.push({ week: week });
                            }
                            $scope.weeks = weeks;
                            $scope.status = "ready";
                        });
                }

                function calcDaySubIntervals(day, scheduleInterval, questionLength) {
                    day.subIntervals = [];
                    day.list.forEach(function(item) {
                        var subInterval = {
                            time: moment(item.time),
                            timeEnd: moment(item.time).add(scheduleInterval, "minutes"),
                            enabled: true
                        };
                        while (subInterval.timeEnd.isSameOrBefore(item.timeEnd)) {
                            //                            if (moment(subInterval.time).add(questionLength, "milliseconds").isAfter(item.timeEnd)) {
                            //                                subInterval.enabled = false;
                            //                            } else {
                            for (var i = 0, len = day.intervals.length; i < len; i++) {
                                var interval = day.intervals[i];

                                //                                    if (subInterval.time.isBetween(interval.time, interval.timeEnd) ||
                                //                                        subInterval.timeEnd.isBetween(interval.time, interval.timeEnd) ||
                                //                                        interval.time.isBetween(subInterval.time, subInterval.timeEnd) ||
                                //                                        interval.timeEnd.isBetween(subInterval.time, subInterval.timeEnd)) {

                                if (
                                    (subInterval.time.isSameOrAfter(interval.time)
                                        && subInterval.timeEnd.isSameOrBefore(interval.timeEnd))
                                    || (interval.time.isSameOrAfter(subInterval.time)
                                        && interval.timeEnd.isSameOrBefore(subInterval.timeEnd))
                                ) {
                                    subInterval.enabled = false;
                                    break;
                                } else if (
                                    moment(interval.time)
                                    .add(interval.question.length, "milliseconds")
                                    .isAfter(subInterval.time)
                                    && moment(interval.time)
                                    .add(interval.question.length, "milliseconds")
                                    .isSameOrBefore(subInterval.timeEnd)
                                ) {
                                    subInterval.enabled = false;
                                    break;
                                }
                                //                                }
                            }
                            day.subIntervals.push(subInterval);
                            subInterval = {
                                time: moment(subInterval.timeEnd),
                                timeEnd: moment(subInterval.timeEnd).add(scheduleInterval,
                                    "minutes"),
                                enabled: true
                            };
                        }
                    });
                }

                function getDaysOfWeek() {
                    var m = moment().startOf("week");
                    var res = [];
                    for (var p = 0; p < 7; p++) {
                        res.push({ day: m.day(), title: m.format("dd") });
                        m.add(1, "d");
                    }
                    return res;
                }
            }
        };
    }
})();

(function() {
    statusDou.$inject = ["$http", "$sce", "STATUS", "$window", "$document", "$timeout"];
    angular.module("rpgu.app").directive("statusDou", statusDou);
    function statusDou($http, $sce, STATUS, $window, $document, $timeout) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/personcab/statusDou.template.html',
            link: function ($scope) {
                $scope.status = 'init';
				$scope.codeDict = "GetQueuePosInfo";
				$scope.transform = function (cnv) {
					var x2js = new X2JS();
					var withoutNameSpaces = cnv.replace(/<(\/?)([^:>\s]*:)?([^>]+)>/g, "<$1$3>")
					var aftCnv = x2js.xml_str2json(withoutNameSpaces);
					return aftCnv;
				}

                $scope.show = function () {
					if (!angular.isUndefined($scope.form)) {
						$scope.GetData();
					}
				}

				$scope.ConvertDate = function(d) {
					return moment(d).format('DD-MM-YYYY');
				}

				$scope.GetData = function () {
					$window.console.log("Request GetData");
					$scope.status = STATUS.LOADING;
					var serial = $scope.form.serial_one + "-" + $scope.form.serial_two;
					$window.console.log("Input data:" + " number=" + $scope.form.number);
					$window.console.log("Input data:" + " serial=" + serial);
					$window.console.log("Input data:" + " surname=" + $scope.form.surname);
					$http.get(apiRoot + 'remoteDict/values/custom?remoteDict_code=' + $scope.codeDict +
						'&number=' + $scope.form.number +
						'&serial=' + serial +
						'&surname=' + $scope.form.surname
					).then(function (data) {
                        data = data.data;
						var value = $scope.transform(data[0].name);
						$scope.list = value["queue-pos-info"];
						if($scope.list && $scope.list._status == "Информация отсутствует") {
							$scope.status ='INFO';
						} else{
						    var er = value["error"];
						    if (er){
						        $scope.status ='INFO';
						        $scope.list = { _status : er.errorMessage };
						    }else{
						        $scope.status = STATUS.READY;
						    }
						}
					}).catch(function (data) {
                        data = data.data;
						$scope.status = STATUS.ERROR;
						$scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
						$window.console.log($scope.error);
					});
				};
            }
        }
    }
})();

(function () {
    angular.module("rpgu.app").directive("survey", ["$http", "STATUS", "utils", "$location", function ($http, STATUS, utils, $location) {
        return {
            restrict:    'E',
            scope: {
                digitalRguServices: "="
            },
            templateUrl: '/personcab/survey/survey.template.html',
            link:        function ($scope) {
                $scope.status = STATUS.LOADING;

                $http.get(apiRoot + 'me/survey', {params: {digitalRguServices: $scope.digitalRguServices}}).then(function (data) {
                    $scope.status = STATUS.READY;
                    $scope.data = data.data ? data.data : {digitalRguServices: $scope.digitalRguServices};
                }).catch(utils.errorHandler($scope));

                $scope.send = function (data) {
                    $scope.status = STATUS.LOADING;
                    return $http.post(apiRoot + 'me/survey', $scope.data).then(function (data) {
                        $scope.status = STATUS.READY;
                        $location.path('/');
                    }).catch(utils.errorHandler($scope));
                }
            }
        };
    }]);
})();


(function () {
    angular.module("rpgu.app").directive("vote", ["$http", "STATUS", "session", "ROLES", function ($http, STATUS, session, ROLES) {
        return {
            restrict:    'E',
            scope:       {id: "@"},
            templateUrl: '/personcab/vote.template.html',
            link:        function ($scope) {
                $scope.status = STATUS.LOADING;
                $scope.isAdmin = session.hasRole(ROLES.ADMIN);
                handleRes($http.get(apiRoot + 'vote/' + $scope.id));
                $scope.doVote = function () {
                    var variants = $scope.vote.variants.reduce(function (res, item) {
                        if (item.checked) {
                            res.push(item.n)
                        }
                        return res;
                    }, []);
                    $scope.status = STATUS.LOADING;
                    handleRes($http.put(apiRoot + 'vote/' + $scope.id, {
                        variants: variants
                    }));
                };
                $scope.getImgUrl = function (variant) {
                    return "rest/vote/" + $scope.id + "/" + variant.n + "/file"
                };
                $scope.onVote = function (variant) {
                    $scope.vote.variants.forEach(function (item) {
                        if(item != variant)
                            item.checked = false;
                    });
                };
                $scope.uploadFile = function() {
                    var n = this.variant.n;
                    this.variant.n = -1;
                    var input = $("input#" + n);
                    var file = input[0].files[0];
                    var formData = new FormData();
                    formData.append("file", file);
                    var that =this;
                    $http.post(apiRoot + 'vote/' + $scope.id + "/" + n + "/file", formData, {
                        withCredentials: false,
                        headers: {
                            'Content-Type': undefined
                        },
                        transformRequest: angular.identity
                    }).then(function () {
                        that.variant.n = n;
                    });
                };
                $scope.trunc = Math.trunc;
                function handleRes(req) {
                    req.then(function (data) {
                        data = data.data;
                        $scope.status = STATUS.READY;
                        $scope.vote = data.vote;
                        $scope.isVoted = data.isVoted;
                        $scope.vote.total = $scope.vote.variants.reduce(function (res, item, n) {
                            item.n = n;
                            return res + item.count;
                        }, 0);
                        $scope.vote.variants = $scope.vote.variants.sort(function (a, b) {
                            if ($scope.isVoted) {
                                if (a.count < b.count) {
                                    return 1;
                                } else if (a.count > b.count) {
                                    return -1;
                                } else {
                                    if (a.title < b.title) {
                                        return -1;
                                    } else if (a.title > b.title) {
                                        return 1;
                                    } else {
                                        return 0;
                                    }
                                }
                            } else {
                                if (a.title < b.title) {
                                    return -1;
                                } else if (a.title > b.title) {
                                    return 1;
                                } else {
                                    return 0;
                                }
                            }

                        });
                    }).catch(function (data) {
                        data = data.data;
                        $scope.error = {message: data.errorMessage ? data.errorMessage : data};
                        $scope.status = STATUS.ERROR;
                    });
                }
            }
        }
    }]);
})();

(function() {
    caseList.$inject = ["$http", "$sce", "STATUS", "$localStorage", "utils", "Upload", "session", "ROLES"];
    angular.module("rpgu.app").directive("caseList", caseList);

    function caseList($http, $sce, STATUS, $localStorage, utils, Upload, session, ROLES) {
        return {
            restrict: 'E',
            templateUrl: '/rgu/caseList.template.html',
            link: function ($scope) {
                $scope.onlyDigital = $localStorage.onlyDigital,

                $scope.$watch("search", function (value, oldValue) {
                    if(value != oldValue)
                        $scope.filter();
                });

				$scope.$watch(function(){return $localStorage.onlyDigital;}, function (value, oldValue) {
                    if(value != oldValue){
                        $scope.onlyDigital = $localStorage.onlyDigital;
                        $scope.refresh();
                    }
                });

				$scope.uploadFile = function (id, file) {
                    file.upload = Upload.upload({
                        url: apiRoot + 'lifeEvent/' + id + '/image',
                        data: {file: file}
                    }).then(function (resp) {
                        $scope.refresh();
                    }, utils.errorHandler($scope));
				};

				$scope.isAdmin = function () {
				    return session.hasRole(ROLES.ADMIN);
                };

                $scope.$watch(function(){return $localStorage.recieverType;}, function (value, oldValue) {
                    if(value != oldValue) $scope.refresh();
                });
                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'lifeEvent', {params: {receiver: $localStorage.recieverType, onlyDigital: $scope.onlyDigital}}).then(function (data) {
                        data = data.data;
                        $scope.fullList = data.map(function (item) {
                            var parentTitle = item.title;
                            item.link_title = window.encodeURIComponent(parentTitle);
                            item.list = item.list.map(function (item) {
                                item.link_title = window.encodeURIComponent(parentTitle + " > " + item.title);
                                return item;
                            });
                            return item;
                        });
                        $scope.filter();
                        $scope.status = STATUS.READY;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
                    });
                };
                $scope.filter = function () {
                    $scope.list = $.extend(true, [], $scope.fullList);//angular.copy($scope.fullList);
                    if($scope.search) {
                        var search = $scope.search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                        var regExp = new RegExp(search, "ig");
                        $scope.list = $scope.list.reduce(function (res, item) {
                            var fl = false;
                            if(regExp.test(item.title)) {
                                item.title = $sce.trustAsHtml(item.title.replace(regExp, "<span style='background:yellow'>$&</span>"));
                                fl = true;
                            } else {
                                item.title = $sce.trustAsHtml(item.title);
                            }
                            item.list = item.list.map(function (item) {
                                if(regExp.test(item.title)) {
                                    item.title = $sce.trustAsHtml(item.title.replace(regExp, "<span style='background:yellow'>$&</span>"));
                                    fl = true;
                                } else {
                                    item.title = $sce.trustAsHtml(item.title);
                                }
                                return item;
                            });
                            if(fl)
                                res.push(item);
                            return res;
                        }, []);
                    } else {
                        $scope.list = $scope.list.map(function (item) {
                            item.title = $sce.trustAsHtml(item.title);
                            item.list = item.list.map(function (item) {
                                item.title = $sce.trustAsHtml(item.title);
                                return item;
                            });
                            return item;
                        });
                    }
                };
                $scope.refresh();
            }
        }

    }
})();

(function() {
    caseServiceList.$inject = ["$http", "$sce", "STATUS", "$localStorage", "$routeParams"];
    angular.module("rpgu.app").directive("caseServiceList", caseServiceList);

    function caseServiceList($http, $sce, STATUS, $localStorage, $routeParams) {
        return {
            restrict: "E",
            scope: {
                title: "@"
            },
            templateUrl: "/rgu/caseServiceList.template.html",
            link: function($scope) {
                $scope.title = $routeParams.title || "";

                $scope.onlyDigital = $localStorage.onlyDigital;
                $scope.$watch("search", function(value, oldValue) {
                    if (value != oldValue) $scope.filter();
                });

                $scope.$watch(
                    function() {
                        return $localStorage.onlyDigital;
                    },
                    function(value, oldValue) {
                        if (value != oldValue) {
                            $scope.onlyDigital = $localStorage.onlyDigital;
                            $scope.refresh();
                        }
                    }
                );

                $scope.$watch(
                    function() {
                        return $localStorage.recieverType;
                    },
                    function(value, oldValue) {
                        if (value != oldValue) $scope.refresh();
                    }
                );
                $scope.refresh = function() {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "lifeEvent/" + $routeParams.id + "/service", {
                            params: { receiver: $localStorage.recieverType, onlyDigital: $scope.onlyDigital }
                        })
                        .then(function(data) {
                            data = data.data;
                            $scope.fullList = data;
                            $scope.filter();
                            $scope.status = STATUS.READY;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                        });
                };
                $scope.filter = function() {
                    $scope.list = $.extend(true, [], $scope.fullList); //angular.copy($scope.fullList);
                    if ($scope.search) {
                        var search = $scope.search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                        var regExp = new RegExp(search, "ig");
                        $scope.list = $scope.list.reduce(function(res, item) {
                            item.list = item.list.reduce(function(res, item) {
                                var fl = false;
                                if (regExp.test(item.title)) {
                                    item.title = item.title.replace(
                                        regExp,
                                        "<span style='background:yellow'>$&</span>"
                                    );
                                    fl = true;
                                }
                                item.list = item.list.reduce(function(res, item) {
                                    if (regExp.test(item.title)) {
                                        item.title = item.title.replace(
                                            regExp,
                                            "<span style='background:yellow'>$&</span>"
                                        );
                                        res.push(item);
                                    } else if (fl) res.push(item);
                                    return res;
                                }, []);
                                if (fl || item.list.length > 0) res.push(item);
                                return res;
                            }, []);
                            if (item.list.length > 0) res.push(item);
                            return res;
                        }, []);
                    }
                    $scope.list.forEach(function(item) {
                        item.list.forEach(function(item) {
                            item.title = $sce.trustAsHtml(item.title);
                            item.list.forEach(function(item) {
                                item.title = $sce.trustAsHtml(item.title);
                            });
                        });
                    });
                };
                $scope.refresh();
            }
        };
    }
})();

(function() {
    categoryList.$inject = ["$http", "$sce", "STATUS", "$localStorage"];
    angular.module("rpgu.app").directive("categoryList", categoryList);

    function categoryList($http, $sce, STATUS, $localStorage ) {
        return {
            restrict: 'E',
            templateUrl: '/rgu/categoryList.template.html',
            link: function ($scope) {
                $scope.$watch("search", function (value, oldValue) {
                    if(value != oldValue)
                        $scope.filter();
                });
                $scope.onlyDigital = $localStorage.onlyDigital,

				$scope.$watch(function(){return $localStorage.onlyDigital;}, function (value, oldValue) {
                    if(value != oldValue){
                        $scope.onlyDigital = $localStorage.onlyDigital;
                        $scope.refresh();
                    }
                });

                $scope.$watch(function(){return $localStorage.recieverType;}, function (value, oldValue) {
                    if(value != oldValue) $scope.refresh();
                });
                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http.get(apiRoot + 'category', {params: {receiver: $localStorage.recieverType, onlyDigital: $scope.onlyDigital}}).then(function (data) {
                        data = data.data;
                        $scope.fullList = data.map(function (item) {
                            var parentTitle = item.title;
                            item.link_title = window.encodeURIComponent(parentTitle);
                            item.link_category = window.encodeURIComponent(parentTitle);
                            item.list = item.list.map(function (item) {
                                item.link_title = window.encodeURIComponent(item.title);
                                item.link_category = window.encodeURIComponent(parentTitle);
                                return item;
                            });
                            return item;
                        });
                        $scope.filter();
                        $scope.status = STATUS.READY;
                    }).catch(function (data) {
                        data = data.data;
                        $scope.status = STATUS.ERROR;
                        $scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
                    });
                };
                $scope.filter = function () {
                    $scope.list = $.extend(true, [], $scope.fullList);//angular.copy($scope.fullList);
                    if($scope.search) {
                        var search = $scope.search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                        var regExp = new RegExp(search, "ig");
                        $scope.list = $scope.list.reduce(function (res, item) {
                            var fl = false;
                            if(regExp.test(item.title)) {
                                item.title = $sce.trustAsHtml(item.title.replace(regExp, "<span style='background:yellow'>$&</span>"));
                                fl = true;
                            } else {
                                item.title = $sce.trustAsHtml(item.title);
                            }
                            item.list = item.list.map(function (item) {
                                if(regExp.test(item.title)) {
                                    item.title = $sce.trustAsHtml(item.title.replace(regExp, "<span style='background:yellow'>$&</span>"));
                                    fl = true;
                                } else {
                                    item.title = $sce.trustAsHtml(item.title);
                                }
                                return item;
                            });
                            if(fl)
                                res.push(item);
                            return res;
                        }, []);
                    } else {
                        $scope.list = $scope.list.map(function (item) {
                            item.title = $sce.trustAsHtml(item.title);
                            item.list = item.list.map(function (item) {
                                item.title = $sce.trustAsHtml(item.title);
                                return item;
                            });
                            return item;
                        });
                    }
                };
                $scope.refresh();
            }
        }

    }
})();

(function() {
    categoryService.$inject = ["$http", "$sce", "$timeout", "$window", "$location", "STATUS", "objectService", "session", "$routeParams", "$localStorage"];
    angular.module("rpgu.app")
        .directive("categoryService", categoryService);

    function categoryService(
        $http,
        $sce,
        $timeout,
        $window,
        $location,
        STATUS,
        objectService,
        session,
        $routeParams,
        $localStorage
    ) {
        return {
            restrict: "E",
            templateUrl: "/rgu/categoryService.template.html",
            link: function($scope) {
                $scope.id = $routeParams.id;
                $scope.status = STATUS.INIT;
                $scope.category = {};
                $scope.subCategories = [];
                $scope.onlyDigital = $localStorage.onlyDigital;

                /* функционал для работы с новым размещением onlyDigital*/
                $scope.$watch(
                    function() {
                        return $localStorage.onlyDigital;
                    },
                    function(value, oldValue) {
                        if (value != oldValue) {
                            $scope.onlyDigital = $localStorage.onlyDigital;
                            $scope.refresh();
                        }
                    }
                );

                $scope.$watch(
                    function() {
                        return $localStorage.recieverType;
                    },
                    function(value, oldValue) {
                        if (value != oldValue) $scope.refresh();
                    }
                );

                $scope.refresh = function(id) {
                    $scope.list = [];
                    if ($scope.id == 720) {
                        $scope.category = { title: "Здравоохранение" };
                        $scope.serviceList = [{
                                id: "2600000010000002651",
                                full_title: "Прием заявлений, постановка на учет и предоставление информации о санаторно-курортных организациях и порядке направления на санаторно-курортное лечение детей в санатории, находящиеся в ведении Министерства здравоохранения Российской Федерации."
                            },
                            {
                                id: "2600000010000002627",
                                full_title: "Прием заявлений, постановка на учет и предоставление информации об организации оказания высокотехнологичной медицинской помощи в государственных учреждениях здравоохранения Ставропольского края"
                            },
                            {
                                id: "2600000010000002654",
                                full_title: "Присвоение аттестационной комиссией министерства здравоохранения Ставропольского края квалификационных категорий специалистам с высшим и средним профессиональным медицинским и фармацевтическим образованием"
                            },
                            {
                                id: "2600000010000002657",
                                full_title: "Прием заявлений, постановка на учет и направление на лечение бесплодия с применением вспомогательных репродуктивных технологий за счет средств обязательного медицинского страхования в Ставропольском крае"
                            },
                            {
                                id: "2600000010000002627",
                                full_title: "Прием заявлений, постановка на учет и предоставление информации об организации оказания высокотехнологичной медицинской помощи в государственных учреждениях здравоохранения Ставропольского края"
                            },
                            {
                                id: "2600000010000002639",
                                full_title: "Прием заявлений, предоставление информации об услуге и направление граждан Российской Федерации (в возрасте от 18 лет и старше), подвергшихся воздействию радиации вследствие катастрофы на Чернобыльской АЭС, и граждан, приравненных к данной категории, на санаторно-курортное лечение и реабилитацию"
                            },
                            {
                                id: "2600000010000002648",
                                full_title: "Прием заявлений, постановка на учет и предоставление информации о порядке направления на санаторно-курортное лечение детей участников ликвидации катастрофы на Чернобыльской АЭС"
                            }
                        ];
                        $scope.status = STATUS.READY;
                    } else if ($scope.id == 700) {
                        $scope.category = { title: "Социальное обеспечение, пособия, компенсации" };
                        $scope.serviceList = [{
                                id: "2600000010000098118",
                                full_title: "Прием заявлений, документов и принятие решений о назначении пособий на проведение летнего оздоровительного отдыха детей отдельных категорий военнослужащих и сотрудников некоторых федеральных органов исполнительной власти, погибших (умерших), пропавших без вести, ставших инвалидами в связи с выполнением задач в условиях вооруженного конфликта немеждународного характера в Чеченской Республике и на непосредственно прилегающих к ней территориях Северного Кавказа, отнесенных к зоне вооруженного конфликта, а также в связи с выполнением задач в ходе контртеррористических операций на территории Северо-Кавказского региона, пенсионное обеспечение которых осуществляется Пенсионным фондом Российской Федерации"
                            },
                            {
                                id: "2600000010000021142",
                                full_title: "Назначение и выплата ежемесячной денежной компенсации на каждого ребенка в возрасте до 18 лет многодетным семьям"
                            },
                            {
                                id: "2600000010000018678",
                                full_title: "Назначение и выплата ежегодного социального пособия на проезд студентам"
                            },
                            {
                                id: "2600000010000018957",
                                full_title: "Назначение и выплата ежемесячного пособия на ребенка"
                            },
                            {
                                id: "2600000010000022867",
                                full_title: "Назначение и осуществление ежемесячной денежной выплаты ветеранам труда и лицам, проработавшим в тылу в период с 22 июня 1941 года по 9 мая 1945 года не менее шести месяцев, исключая период работы на временно оккуптрованных территориях СССР, либо награжденным орденами или медалями СССР за самоотверженный труд в период Великой Отечественной войны"
                            },
                            {
                                id: "2600000010000036790",
                                full_title: "Государственная услуга «Предоставление мер социальной поддержки по оплате жилищно-коммунальных услуг гражданам, подвергшимся воздействию радиации вследствие катастрофы на Чернобыльской АЭС, аварии в 1957 году на производственном объединении «Маяк», сбросов радиоактивных отходов в реку Теча и ядерных испытаний на Семипалатинском полигоне, а также отдельным категориям граждан из числа ветеранов и инвалидов»"
                            }
                        ];
                        $scope.status = STATUS.READY;
                    } else if ($scope.id == 710) {
                        $scope.category = { title: "Пенсионное обеспечение" };
                        $scope.serviceList = [{
                                id: "2600000010000035690",
                                full_title: "Назначение и выплата пенсии за выслугу лет депутатам, членам выборного органа местного самоуправления, выборным должностным лицам местного самоуправления, осуществляющим свои полномочия на постоянной основе, муниципальным служащим муниципальной службы в Ставропольском крае"
                            },
                            {
                                id: "2600000010000039051",
                                full_title: "Установление и выплата ежемесячной доплаты к пенсии лицам, замещавшим должности в органах государственной власти и управления Ставропольского края, в организациях и учреждениях, осуществлявших в соответствии с законодательством СССР и союзных республик отдельные функции государственного управления в Ставропольском крае"
                            }
                        ];
                        $scope.status = STATUS.READY;
                    } else if ($scope.id == 761) {
                        $scope.category = { title: "Культурные ценности" };
                        $scope.serviceList = [{
                                id: "2600000010000000136",
                                full_title: "Предоставлению информации о времени и месте театральных представлений, филармонических и эстрадных концертов и гастрольных мероприятий театров и филармоний, киносеансов, анонсы данных мероприятий"
                            },
                            {
                                id: "2600000010000032293",
                                full_title: "Выдача задания и разрешения на проведение работ по сохранению объектов культурного наследия (памятников истории и культуры) народов Российской Федерации регионального значения, выявленных объектов культурного наследия (памятников истории и культуры) народов Российской Федерации, расположенных на территории Ставропольского края"
                            },
                            {
                                id: "2600000010000000092",
                                full_title: "Предоставление выписки из единого государственного реестра объектов культурного наследия (памятников истории и культуры) народов Российской Федерации"
                            },
                            {
                                id: "2600000010000091301",
                                full_title: "Согласование проектной документации на проведение работ по сохранению объекта культурного наследия регионального значения, включенного в единый государственный реестр объектов культурного наследия (памятников истории и культуры) народов Российской Федерации, или выявленного объекта культурного наследия"
                            },
                            {
                                id: "2600000010000000150",
                                full_title: "Предоставление доступа к справочно-поисковому аппарату государственных библиотек Ставропольского края, их базам данных"
                            }
                        ];
                        $scope.status = STATUS.READY;
                    } else if ($scope.id == 840) {
                        $scope.category = { title: "Спорт и туризм" };
                        $scope.serviceList = [{
                                id: "2600000010000042984",
                                full_title: 'Присвоение (продление срока действия) спортивных разрядов "кандидат в мастера спорта", "первый спортивный разряд" и квалификационной категории спортивного судьи "спортивный судья первой категории"'
                            },
                            {
                                id: "2600000010000043016",
                                full_title: "Предоставление мер социальной поддержки спортсменам и тренерам Ставропольского края, имеющим выдающиеся достижения перед Ставропольским краем в области физической культуры и спорта"
                            },
                            {
                                id: "2600000010000043243",
                                full_title: "Государственная аккредитация региональных спортивных федераций"
                            },
                            {
                                id: "2600000010000043229",
                                full_title: "Предоставление за счет средств бюджета Ставропольского края субсидий на частичное возмещение затрат физкультурно-спортивным организациям Ставропольского края, спортивные команды которых выступают на всероссийских и международных соревнованиях от имени Ставропольского края"
                            }
                        ];
                        $scope.status = STATUS.READY;
                    } else if ($scope.id == 850) {
                        $scope.category = { title: "Транспорт" };
                        $scope.serviceList = [{
                                id: "2600000010000032615",
                                full_title: "Государственная услуга «Регистрация тракторов, самоходных дорожно-строительных и иных машин и прицепов к ним и выдача на них государственных регистрационных знаков (кроме машин Вооруженных Сил и других войск Российской Федерации)»"
                            },
                            {
                                id: "2600000010000035860",
                                full_title: "Государственная услуга «Проведение государственного технического осмотра тракторов, самоходных дорожно-строительных и иных машин и прицепов к ним, зарегистрированных органами государственного надзора за техническим состоянием самоходных машин и других видов техники в Российской Федерации»"
                            },
                            {
                                id: "2600000010000107058",
                                full_title: "Выдача и переоформление разрешений на осуществление деятельности по перевозке пассажиров и багажа легковым такси на территории Ставропольского края"
                            },
                            {
                                id: "2600000010000103898",
                                full_title: "Выдача специального разрешения на движение по автомобильным дорогам тяжеловесного и (или) крупногабаритного транспортного средства, в случае если маршрут, часть маршрута указанного транспортного средства проходят по автомобильным дорогам регионального или межмуниципального значения, участкам таких автомобильных дорог, по автомобильным дорогам местного значения, расположенным на территориях двух и более муниципальных образований (муниципальных районов, городских округов), при условии, что маршрут такого транспортного средства проходит в границах Ставропольского края и указанный маршрут, часть маршрута не проходят по автомобильным дорогам федерального значения, участкам таких автомобильных дорог"
                            }
                        ];
                        $scope.status = STATUS.READY;
                    } else if ($scope.id == "selhoz") {
                        $scope.category = { title: "Субсидии сельхозпроизводителям" };
                        $scope.serviceList = [{
                                id: "2600000010000066059",
                                full_title: "Предоставление за счет средств бюджета Ставропольского края субсидий на поддержку племенного животноводства"
                            },
                            {
                                id: "2600000010000143863",
                                full_title: "Предоставление за счет средств бюджета Ставропольского края грантов на создание и развитие крестьянского (фермерского) хозяйства и единовременной помощи на бытовое обустройство"
                            },
                            {
                                id: "2600000010000069800",
                                full_title: "Предоставление за счет средств бюджета Ставропольского края субсидий на возмещение части затрат на уплату процентов по кредитам, полученным в российских кредитных организациях, и займам, полученным в сельскохозяйственных кредитных потребительских кооперативах, личным подсобным хозяйствам, сельскохозяйственным потребительским кооперативам, крестьянским (фермерским) хозяйствам"
                            },
                            {
                                id: "2600000010000036086",
                                full_title: "Предоставление за счет средств бюджета Ставропольского края субсидий на возмещение части стоимости приобретенных технических средств и оборудования для сельскохозяйственного производства Ставропольского края"
                            },
                            {
                                id: "2600000010000035468",
                                full_title: "Государственная услуга «Предоставление за счет средств бюджета Ставропольского края субсидий на возмещение части процентных ставок по привлеченным кредитам (на срок до одного года) на пополнение оборотных средств, полученным в российских кредитных организациях»"
                            },
                            {
                                id: "2600000010000072268",
                                full_title: "Государственная услуга «Предоставление за счет средств бюджета Ставропольского края субсидий на животноводческую продукцию»"
                            },
                            {
                                id: "2600000010000066251",
                                full_title: "Предоставление за счет средств бюджета Ставропольского края субсидий на поддержку отдельных подотраслей растениеводства"
                            },
                            {
                                id: "2600000010000076930",
                                full_title: "Предоставление за счет средств бюджета Ставропольского края субсидий за реализованные объемы мяса крупного рогатого скота и молодняка крупного рогатого скота"
                            }
                        ];
                        $scope.status = STATUS.READY;

                    } else if($scope.id == 'rosreestr') {
                        $scope.category = {title :'Федеральная служба государственной регистрации, кадастра и картографии'};
                        $scope.serviceList = [
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/EGRN_1', full_title: 'Получить выписку из ЕГРН об основных характеристиках и зарегистрированных правах на объект недвижимости'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/EGRN_2', full_title: 'Получить выписку из ЕГРН о кадастровой стоимости объекта недвижимости'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/EGRN_3', full_title: 'Получить выписку из ЕГРН о правах отдельного лица на имевшиеся (имеющиеся) у него объекты недвижимости'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/EGRN_4', full_title: 'Получить выписку из ЕГРН о переходе прав на объект недвижимости'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/EGRN_5', full_title: 'Получить выписку из ЕГРН о содержании правоустанавливающих документов'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/EGRN_6', full_title: 'Получить кадастровый план территории из ЕГРН'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/ir_egrn', full_title: 'Запрос посредством доступа к ФГИС ЕГРН'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/GKU_request', full_title: 'Подать заявление о ГКУ'},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/gku_grp', full_title: 'Подать заявление о ГКУ и ГРП '},
                            { url: 'https://rosreestr.ru/wps/portal/p/cc_present/reg_rights#/', full_title: 'Подать заявление на государственную регистрацию прав'}
                        ];
                        $scope.status = STATUS.READY;
                    } else {
                        $http
                            .get(apiRoot + "category/" + $scope.id + "/root", {
                                params: { receiver: $localStorage.recieverType, onlyDigital: $scope.onlyDigital }
                            })
                            .then(function(data) {
                                data = data.data;
                                $scope.listCount = data.count;
                                $scope.status = STATUS.READY;
                                $scope.category = data.category;
                                $scope.subCategories = data.subCategiries;
                                $scope.filter($scope.search);
                                //
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = { message: data.errorMessage ? data.errorMessage : data };
                                //
                            });
                    }
                };

                $scope.goBack = function() {
                    history.back();
                };

                $scope.filter = function(text) {
                    $scope.list = $scope.subCategories
                        ? $scope.subCategories.filter(function(item) {
                            return text
                                ? item.category.title.toLowerCase()
                                .lastIndexOf(text.toLowerCase()) != -1
                                : true;
                        })
                        : null;
                };

                $scope.$watch("search", function() {
                    $scope.filter($scope.search);
                });

                $scope.refresh();
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("categoryServiceList", [
        "$http",
        "$sce",
        "STATUS",
        "$localStorage",
        "$routeParams",
        function categoryServiceList($http, $sce, STATUS, $localStorage, $routeParams) {
            return {
                restrict: "E",
                templateUrl: "/rgu/categoryServiceList.template.html",
                link: function($scope) {
                    $scope.id = $routeParams.id;
                    $scope.title = $routeParams.title;
                    $scope.category = $routeParams.category;

                    ($scope.onlyDigital = $localStorage.onlyDigital),
                        $scope.$watch("search", function(value, oldValue) {
                            if (value != oldValue) $scope.filter();
                        });

                    $scope.$watch(
                        function() {
                            return $localStorage.onlyDigital;
                        },
                        function(value, oldValue) {
                            if (value != oldValue) {
                                $scope.onlyDigital = $localStorage.onlyDigital;
                                $scope.refresh();
                            }
                        }
                    );

                    $scope.$watch(
                        function() {
                            return $localStorage.recieverType;
                        },
                        function(value, oldValue) {
                            if (value != oldValue) $scope.refresh();
                        }
                    );
                    $scope.refresh = function() {
                        $scope.status = STATUS.LOADING;
                        $http
                            .get(apiRoot + "category/" + $scope.id + "/ps_passport", {
                                params: { receiver: $localStorage.recieverType, onlyDigital: $scope.onlyDigital }
                            })
                            .then(function(response) {
                                var data = response.data;

                                $scope.category = data.category.title;
                                $scope.fullList = data.list;
                                $scope.filter();
                                $scope.status = STATUS.READY;
                            })
                            .catch(function(err) {
                                $scope.status = STATUS.ERROR;
                                $scope.error = err.errorMessage ? { message: err.errorMessage } : { message: err };
                            });
                    };
                    $scope.filter = function() {
                        $scope.list = $.extend(true, [], $scope.fullList); //angular.copy($scope.fullList);
                        if ($scope.search) {
                            var search = $scope.search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
                            var regExp = new RegExp(search, "ig");
                            $scope.list = $scope.list.reduce(function(res, item) {
                                item.list = item.list.reduce(function(res, item) {
                                    var fl = false;
                                    if (regExp.test(item.title)) {
                                        item.title = item.title.replace(
                                            regExp,
                                            "<span style='background:yellow'>$&</span>"
                                        );
                                        fl = true;
                                    }
                                    item.list = item.list.reduce(function(res, item) {
                                        if (regExp.test(item.full_title)) {
                                            item.full_title = item.full_title.replace(
                                                regExp,
                                                "<span style='background:yellow'>$&</span>"
                                            );
                                            res.push(item);
                                        } else if (fl) res.push(item);
                                        return res;
                                    }, []);
                                    if (fl || item.list.length > 0) res.push(item);
                                    return res;
                                }, []);
                                if (item.list.length > 0) res.push(item);
                                return res;
                            }, []);
                        }
                        $scope.list.forEach(function(item) {
                            item.list.forEach(function(item) {
                                item.title = $sce.trustAsHtml(item.title);
                                item.list.forEach(function(item) {
                                    item.full_title = $sce.trustAsHtml(item.full_title);
                                });
                            });
                        });
                    };
                    $scope.refresh();
                }
            };
        }
    ]);
})();

(function() {
    angular
        .module("rpgu.app")
        .directive("deptList", ["$http", "$sce", "$window", "$location", "$localStorage", "objectService", "$routeParams", function($http, $sce, $window, $location, $localStorage, objectService, $routeParams) {
            return {
                restrict: "E",
                templateUrl: "/rgu/deptList.template.html",
                link: function($scope) {
                    if (typeof $routeParams.tab === "undefined") {
                        $location.path($location.path()).search("tab", "REGIONAL");
                        return;
                    }
                    $scope.type = $scope.tab = $routeParams.tab;

                    $scope.selectTab = function(setTab) {
                        $location.path($location.path()).search("tab", setTab);
                    };

                    ($scope.onlyDigital = $localStorage.onlyDigital),
                        $scope.$watch("search", function(value, oldValue) {
                            if (value != oldValue) $scope.filter();
                        });

                    /* функционал для работы с новым размещением onlyDigital*/
                    $scope.$watch(
                        function() {
                            return $localStorage.onlyDigital;
                        },
                        function(value, oldValue) {
                            if (value != oldValue) {
                                $scope.onlyDigital = $localStorage.onlyDigital;
                                // $scope.refresh();
                            }
                        }
                    );

                    $scope.$watch(
                        function() {
                            return $localStorage.recieverType;
                        },
                        function(value, oldValue) {
                            if (value != oldValue) $scope.refresh();
                        }
                    );

                    $scope.isSelected = function(checkTab) {
                        return $scope.tab === checkTab;
                    };

                    $scope.$watch("type", function(newValue, oldValue) {
                        if (newValue != oldValue) {
                            $scope.navTo(0);
                        }
                    });

                    $scope.$watch("search", function() {
                        $scope.filter($scope.search);
                    });

                    $scope.$watchGroup(["onlyDigital", "recieverType"], function() {
                        console.log("$scope.type - " + $scope.type);
                        if ($scope.type != "MUNICIPAL") {
                            $scope.refresh();
                        } else if ($scope.type == "MUNICIPAL") {
                            if ($scope.selected) {
                                if ($scope.selected.id != "all") {
                                    $scope.refreshMunicipal();
                                }
                            } else {
                                $scope.refreshMunicipal();
                            }
                        }
                    });

                    $scope.refresh = function() {
                        $scope.status = "loading";
                        var id = $scope.path[$scope.path.length - 1].id;
                        var params;
                        if (!id && $scope.type != "MUNICIPAL") {
                            // root
                            params = { levelTitle: $scope.type };
                        } else {
                            // child
                            params = { idParent: id };
                        }
                        angular.extend(params, {
                            receiver: $localStorage.recieverType,
                            onlyDigital: $scope.onlyDigital
                        });
                        $http
                            .get(apiRoot + "dept", { params: params })
                            .then(function(data) {
                                data = data.data;
                                $scope.status = "ready";
                                $scope.fullList = data;
                                $scope.fullList = data;
                                $scope.filter($scope.search);
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = "error";
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    };

                    $scope.getMunicipalDept = function(id) {
                        $scope.status = "loading";
                        var params = {
                            idArea: id,
                            receiver: $localStorage.recieverType,
                            onlyDigital: $scope.onlyDigital
                        };
                        $http
                            .get(apiRoot + "dept/municipal/depts", { params: params })
                            .then(function(data) {
                                data = data.data;
                                $scope.fullList = data;
                                $scope.status = "ready";
                                $scope.filter($scope.search);
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = "error";
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    };

                    $scope.getMunicipal = function() {
                        $scope.status = "loading";
                        $http
                            .get(apiRoot + "dept/municipal")
                            .then(function(data) {
                                data = data.data;
                                if (data.length > 0) {
                                    data.forEach(function(item) {
                                        $scope.options.push({ title: item.title, id: item._id });
                                    });
                                }
                                $scope.status = "ready";
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = "error";
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    };

                    $scope.refreshMunicipal = function() {
                        $scope.status = "loading";
                        if ($scope.selected.id == "all") {
                            $scope.refresh();
                        } else {
                            $scope.getMunicipalDept($scope.selected.id);
                        }
                    };

                    $scope.$watch("selected", function() {
                        if ($scope.type == "MUNICIPAL") {
                            $scope.search = undefined;
                            $scope.refreshMunicipal();
                        }
                    });

                    $scope.addToPath = function(item /*, c*/) {
                        var title = item.title;
                        $scope.path.push({
                            label: title.length > 50 ? title.substring(0, 50) + "..." : title,
                            full: title,
                            id: item.id
                        });
                        $scope.showService = false;
                        $scope.refresh();
                    };
                    $scope.navTo = function(index) {
                        $scope.path = $scope.path.splice(0, index + 1);
                        $scope.refresh();
                        $scope.showService = false;
                    };
                    $scope.filter = function(text) {
                        $scope.list = $scope.fullList
                            ? $scope.fullList.filter(function(item) {
                                  return text ? item.title.toLowerCase().lastIndexOf(text.toLowerCase()) != -1 : true;
                              })
                            : null;
                    };
                    $scope.path = [
                        {
                            label: "Органы власти",
                            id: 0
                        }
                    ];

                    $scope.options = [];
                    $scope.selected = $scope.options[0];
                    $scope.getMunicipal();
                }
            };
        }]);
})();

(function() {
    angular.module("rpgu.app").directive("deptView", [
        "$http",
        "$sce",
        "STATUS",
        "session",
        "ROLES",
        "$localStorage",
        "$routeParams",
        function($http, $sce, STATUS, session, ROLES, $localStorage, $routeParams) {
            return {
                restrict: "E",
                scope: {
                    id: "@"
                },
                templateUrl: "/rgu/deptView.template.html",
                link: function($scope) {
                    $scope.id = $routeParams.id;

                    $scope.tab = "services";
                    $scope.selectTab = function(setTab) {
                        $scope.tab = setTab;
                        $scope.type = setTab;
                    };
                    $scope.isSelected = function(checkTab) {
                        return $scope.tab === checkTab;
                    };

                    ($scope.onlyDigital = $localStorage.onlyDigital),
                        $scope.$watch(
                            function() {
                                return $localStorage.onlyDigital;
                            },
                            function(value, oldValue) {
                                if (value != oldValue) {
                                    $scope.onlyDigital = $localStorage.onlyDigital;
                                    $scope.refresh();
                                }
                            }
                        );

                    $scope.$watch(
                        function() {
                            return $localStorage.recieverType;
                        },
                        function(value, oldValue) {
                            if (value != oldValue) $scope.refresh();
                        }
                    );

                    $scope.hasRole = session.hasRole;
                    $scope.ROLES = ROLES;
                    $scope.status = STATUS.READY;
                    $scope.$watch("id", function(newValue, oldValue) {
                        if (newValue != oldValue) $scope.refresh();
                    });
                    $scope.$watch("search", function(newValue, oldValue) {
                        if (newValue != oldValue) $scope.filter();
                    });

                    $scope.addressToString = function (address) {
                        return [
                            address.region,
                            address.district,
                            address.city,
                            address.street,
                            address.house_number,
                            address.building_number
                        ].filter(function (item) {
                            return !!item;
                        }).join(", ")
                    };

                    $scope.refresh = function() {
                        $scope.status = STATUS.LOADING;
                        $scope.tab = "service";
                        $http
                            .get(apiRoot + "dept/" + $scope.id)
                            .then(function(data) {
                                data = data.data;
                                data.contacts.forEach(function (item) {
                                    if (item.office) {
                                        item.office.address = $scope.addressToString(item.office);
                                    }
                                });
                                data.office = data.office.map(function(item) {
                                    item.address = $scope.addressToString(item);
                                    item.search = encodeURIComponent(item.address);
                                    return item;
                                });
                                $scope.data = data;
                                $http
                                    .get(apiRoot + "dept/" + $scope.id + "/ps_passport", {
                                        params: {
                                            receiver: $localStorage.recieverType,
                                            onlyDigital: $scope.onlyDigital
                                        }
                                    })
                                    .then(function(data) {
                                        data = data.data;
                                        $scope.status = STATUS.READY;
                                        $scope.fullList = data;
                                        $scope.filter();
                                    })
                                    .catch(function(data) {
                                        data = data.data;
                                        $scope.status = STATUS.ERROR;
                                        $scope.error = data.errorMessage
                                            ? { message: data.errorMessage }
                                            : { message: data };
                                    });
                            })
                            .catch(function(data) {
                                data = data.data;
                                $scope.status = STATUS.ERROR;
                                $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                            });
                    };
                    $scope.filter = function() {
                        var list;
                        if ($scope.search) {
                            var search = $scope.search.toLowerCase();
                            list = $scope.fullList.filter(function(item) {
                                return item.full_title.toLowerCase().lastIndexOf(search) != -1;
                            });
                        } else {
                            list = $scope.fullList;
                        }
                        $scope.list = list.map(function(item) {
                            return $.extend({}, item, { full_title: $sce.trustAsHtml(item.full_title) });
                        });
                    };
                    $scope.refresh();
                }
            };
        }
    ]);
})();

(function() {
    formNew.$inject = ["$http", "$sce", "$timeout", "$q"];
    angular.module("rpgu.app").directive("formNew", formNew);
    function formNew($http, $sce, $timeout, $q) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/rgu/formNew.template.html',
            link: function ($scope) {

				$scope.findServiceFn = function(query, querySelectAs) {
					return findService(query);
				};

				function findService(query) {
					var deferred = $q.defer();

					$http.get(apiRoot + 'service/search/' + query).then(function (data) {
                        data = data.data;
							deferred.resolve(data);
						}).catch(function (data) {
                        	data = data.data;
							console.log(data);
						});

					return deferred.promise;
				};

				$scope.service = undefined;

				$scope.getFullName = function(service) {
				  return '[' + service.service_id + '] - ' + service.service_title;
				};
            }
        }
    };
})();

(function() {
    mfcRecord.$inject = ["$http", "$sce", "STATUS", "$window"];
    angular.module("rpgu.app").directive("mfcRecord", mfcRecord);

    function mfcRecord($http, $sce, STATUS, $window) {
        return {
            restrict: 'E',
            scope: {},
            templateUrl: '/rgu/mfcRecord.template.html',
            link: function ($scope) {
                $scope.show = false;
                $scope.options = [
                    {name: 'МФЦ Александровского района', id: '84.54.201.20'},
                    {name: 'МФЦ Андроповского района', id: '77.39.79.139'},
                    {name: 'МФЦ Апанасенковского района', id: '84.54.205.89'},
                    {name: 'МФЦ Арзгирского района', id: '84.54.229.30'},
                    {name: 'МФЦ Благодарненского района', id: '88.215.135.109'},
                    {name: 'МФЦ Будённовского района', id: '82.119.142.230'},
                    {name: 'МКУ «МФЦ в г. Георгиевске»', id: '46.243.14.73'},
                    {name: 'МФЦ Георгиевского района', id: '46.243.12.157'},
                    {name: 'МАУ «МФЦ г. Ессентуки»', id: '217.13.217.167'},
                    {name: 'МФЦ г. Железноводск', id: '77.39.71.197'},
                    {name: 'МКУ «МФЦ г. Кисловодска»', id: '88.215.150.242'},
                    {name: 'МФЦ г. Лермонтов', id: '217.13.216.14'},
                    {name: 'МФЦ г. Невинномысск ', id: '31.130.248.45'},
                    {name: 'МКУ «МФЦ в г.Пятигорске»', id: '109.168.218.175'},
                    {name: 'МФЦ Грачевского района', id: '84.54.197.192'},
                    {name: 'МКУ «МФЦ в г.Ставрополе»', id: 'online.mfc26.ru'},
                    {name: 'МФЦ Изобильненского района', id: '91.221.189.85'},
                    {name: 'МФЦ Ипатовского района', id: '94.255.3.188'},
                    {name: 'МФЦ Кировского района', id: '84.54.215.156'},
                    {name: 'МФЦ Кочубеевского района', id: '82.119.146.219'},
                    {name: 'МФЦ Красногвардейского района', id: '94.255.36.138'},
                    {name: 'МФЦ Курского района', id: '94.255.68.123'},
                    {name: 'МФЦ Левокумского района', id: '212.96.126.97'},
                    {name: 'МФЦ Минераловодского района', id: '77.39.41.45'},
                    {name: 'МФЦ Нефтекумского района', id: '46.63.166.27'},
                    {name: 'МФЦ Новоалександровского района', id: '88.215.176.136'},
                    {name: 'МФЦ Новоселицкого района', id: '84.54.210.42'},
                    {name: 'МФЦ Петровского района', id: '82.119.157.95'},
                    {name: 'МФЦ Предгорного района', id: '77.39.73.204'},
                    {name: 'МФЦ Советского района', id: '94.255.27.73'},
                    {name: 'МФЦ Степновского района', id: '84.54.218.205'},
                    {name: 'МФЦ Труновского района', id: '82.119.136.140'},
                    {name: 'МФЦ Туркменского района', id: '82.119.158.116'},
                    {name: 'МФЦ Шпаковского района', id: '77.39.7.178'}
                ];
                $scope.selectedOption = $scope.options[1];

                // функция отправки сообщения
                $scope.submit = function (form) {
//                    $scope.show = true;
//					$scope.location = "https://krasnogvardeyskoe.umfc26.ru/form_login.php";
//					$scope.location = "https://krasnogvardeyskoe.umfc26.ru/esia/form.php";
//					$scope.location = "https://mfcsk.ru/esia/form.php";
//					$scope.location = "http://" + $scope.selectedOption.id + "/esia/form.php"; //form_login.php"; // http://online.mfc26.ru/form_login.php
//					$scope.location = "http://" + $scope.selectedOption.id + "/esia/form.php";

//					var locate = "http://" + $scope.selectedOption.id + "/esia/form.php";
//					$window.open(locate,'_blank');

					$window.location.href = "http://" + $scope.selectedOption.id + "/esia/form.php";

				};

                $scope.trustSrc = function(src) {
                    return $sce.trustAsResourceUrl(src);
                }
            }
        }
    }
})();

angular.module("rpgu.app").component("procedureView2600000000164718192", {
    templateUrl: "/rgu/procedureView2600000000164718192.html",
    controller: function () {
        var $ctrl = this;
        $ctrl.data = {
            full_title: "Информационное обеспечение граждан, организаций и общественных объединений по документам Архивного фонда Ставропольского края, находящимся на временном хранении в архивных отделах администраций муниципальных районов и городских округов Ставропольского края"
        };
    }
});

(function() {
    angular.module("rpgu.app").directive("rguMenu", rguMenu);

    function rguMenu() {
        return {
            restrict: "EA",
            replace: true,
            transclude: false,
            scope: {
                onlyDigital: "=",
                recieverType: "=",
                select: "@",
                hideFilter: "="
            },
            templateUrl: "/rgu/rguMenu.template.html",
            link: function ($scope) {
                var selectList = [
                    {name: "dept", href: "rgu/dept_list"},
                    {name: "category", href: "rgu/category_list"},
                    {name: "case", href: "rgu/case_list"},
                    {name: "search", href: "rgu/search"}
                ];

                var href = window.location.href;
                $.each(selectList, function (i, item) {
                    if(href.indexOf(item.href) >=0) {
                        $scope.select = item.name;
                        return false;
                    }
                });
            }
        }
    }
})();

(function() {
    searchRgu.$inject = ["$http", "$sce", "session", "STATUS", "$localStorage", "$routeParams"];
    angular.module("rpgu.app").directive("searchRgu", searchRgu);

    function searchRgu($http, $sce, session, STATUS, $localStorage, $routeParams) {
        return {
            restrict: "E",
            scope: {
                search: "=",
                text: "@"
            },
            templateUrl: "/rgu/searchRgu.template.html",
            link: function($scope) {
                $scope.text = $routeParams.text;
                $scope.requested = false;
                $scope.tab = "service";
                $scope.serviceCount = 0;
                $scope.deptCount = 0;
                ($scope.onlyDigital = $localStorage.onlyDigital),
                    $scope.$watch("onlyDigital", function(value, oldValue) {
                        if (value != oldValue) {
                            $localStorage.onlyDigital = !$localStorage.onlyDigital;
                            $scope.refreshService();
                        }
                    });
                $scope.$watch(
                    function() {
                        return $localStorage.recieverType;
                    },
                    function(value, oldValue) {
                        if (value != oldValue) $scope.refreshService();
                    }
                );

                $scope.$watchGroup(["serviceSkip", "serviceMax"], function() {
                    if ($scope.serviceCount > 0) $scope.refreshService();
                });

                $scope.onSearchKeyDown = function($event) {
                    if ($event.which == 13) {
                        $scope.refreshService();
                    }
                };

                $scope.submit_rgu = function() {
                    $scope.refreshService();
                };

                $scope.refreshService = function() {
                    $scope.serviceStatus = STATUS.LOADING;
                    $http
                        .get(apiRoot + "ps_passport/search", {
                            params: {
                                receiver: $localStorage.recieverType,
                                onlyDigital: $scope.onlyDigital,
                                search: $scope.search ? $scope.search : "",
                                offset: typeof $scope.serviceSkip != "undefined" ? $scope.serviceSkip : 0,
                                limit: typeof $scope.serviceMax != "undefined" ? $scope.serviceMax : 10
                            }
                        })
                        .then(function(data) {
                            data = data.data;
                            $scope.serviceCount = data.count;
                            var regs = makeRegs();
                            $scope.serviceList = data.list.map(function(item) {
                                return mark(item, regs);
                            });
                            $scope.serviceStatus = STATUS.READY;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.serviceStatus = STATUS.ERROR;
                            $scope.serviceError = data.errorMessage
                                ? { message: data.errorMessage }
                                : { message: data };
                        });
                };

                function makeRegs() {
                    var searches = $scope.search.split(" ");
                    var regs = searches ? searches.map(function(s) {
                        return s
                            ? new RegExp(s.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), "ig")
                            : null;
                    }) : [];
                    return regs;
                }

                function mark(item, regs) {
                    var text = item.full_title;
                    regs.forEach(function(regExp){
                        text = text.replace(regExp, "<span style='background:yellow'>$&</span>");
                    });
                    item.full_title = $sce.trustAsHtml(text);
                    return item;
                }

                if ($scope.text != null && $scope.text != "" && typeof $scope.text != "undefined") {
                    if ($scope.requested == false) {
                        $scope.requested = true;
                        $scope.search = $scope.text;
                        $scope.refreshService();
                    }
                }
            }
        };
    }
})();

(function () {
    serviceView.$inject = ["$http", "$window", "$sce", "session", "STATUS", "ROLES", "$location", "objectService", "$routeParams", "utils", "$timeout"];
    angular.module("rpgu.app").directive("serviceView", serviceView);

    function serviceView($http, $window, $sce, session, STATUS, ROLES, $location, objectService, $routeParams, utils, $timeout) {
        return {
            restrict: "E",
            templateUrl: "/rgu/serviceView.template.html",
            link: function ($scope, $element) {
                $scope.id = $routeParams.id || null;
                $scope.idProcedure = $routeParams.p;

                $scope.rid = $routeParams.rid;
                $scope.tab = $routeParams.tab;

                $scope.session = session;
                $scope.isAdmin = session.hasRole(ROLES.ADMIN);
                $scope.isUserCatProcedure = false;
                $scope.minCult = session.hasMincult() == true ? true : false;
                $scope.status = STATUS.READY;

                $scope.openAccordion = function ($event) {
                    var target = $event.currentTarget;
                    if (jQuery(target).is(".is-active")) {
                        jQuery(target)
                            .removeClass("is-active")
                            .next("dd")
                            .slideUp("fast");
                    } else {
                        jQuery(target)
                            .addClass("is-active")
                            .next("dd")
                            .slideDown("fast");
                    }
                };

                $scope.$watch("id", function (newValue, oldValue) {
                    if (newValue !== oldValue) $scope.refresh();
                });
                $scope.$watch("search", function (newValue, oldValue) {
                    if (newValue !== oldValue) $scope.filter();
                });

                $scope.scrollTo = function (hash) {
                    jQuery("html, body").animate({scrollTop: jQuery(hash).offset().top}, "fast");
                };

                $scope.redexp = function (value) {
                    if (value) {
                        return window.striptags(value, ["<ul>", "<li>"]);
                    } else {
                        return "";
                    }
                };

                $scope.refresh = function () {
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "dept/ps_passport/" + $scope.id)
                        .then(function (data) {
                            data = data.data;
                            data.appeal_description = $sce.trustAsHtml($scope.redexp(data.appeal_description));
                            data.payment_description = $sce.trustAsHtml($scope.redexp(data.payment_description));
                            data.info_description = $sce.trustAsHtml($scope.redexp(data.info_description));
                            data.acts = data.acts.map(function (item) {
                                item.approval_date = moment(item.approval_date).utc();
                                return item;
                            });
                            $scope.data = data;
                            $http
                                .get(apiRoot + "dept/ps_passport/" + $scope.id + "/service")
                                .then(function (data) {
                                    data = data.data;
                                    $scope.fullList = data;
                                    if (!angular.isUndefined($scope.rid)) {
                                        selectProcedureById($scope.rid);
                                    }
                                    $scope.status = STATUS.READY;
                                    $scope.filter();
                                })
                                .catch(errorHandler);
                        })
                        .catch(errorHandler);
                };
                $scope.filter = function () {
                    function map(item) {
                        return $.extend({}, item, {title: $sce.trustAsHtml(item.title)});
                    }

                    var list = $scope.fullList;
                    $scope.listDrgu = list.filter(function (item) {
                        return item.href != null || item.drguId != null;
                    }).map(map);
                    $scope.list = list.filter(function (item) {
                        return item.href == null && item.drguId == null;
                    }).map(map);

                };

                $scope.selectStatement = function (item) {
                    $scope.rid = item.id;
                    $scope.selectProcedure({id: $scope.rid});
                };

                $scope.selectProcedure = function (item) {
                    $scope.entered = true;
                    $scope.procedure = null;
                    if (item) {
                        $scope.loadEntered = true;
                        selectProcedureById(item.id);
                    }
                };

                $scope.goBack = function () {
                    if ($scope.entered) {
                        return $scope.entered = false;
                    }
                    $window.history.back();
                };

                $scope.isEducationService = function () {
                    return $scope.id === "2600000010000162236";
                };

                $scope.refresh();

                $scope.isProcedureForm = function isProcedureForm(procedure) {
                    if (!procedure) {
                        return false;
                    }
                    if (procedure.href) {
                        return true;
                    }
                    switch (procedure.type) {
                        case 'asp':
                        case 'form':
                        case 'formio':
                        case 'schemaform':
                            return true;
                        default:
                            return false;
                    }
                };

                $scope.procedureFormUrl = function procedureFormUrl(procedure) {
                    if (!procedure) {
                        return "/";
                    }
                    if (procedure.href) {
                        return procedure.href;
                    }
                    return 'personcab/requestConfirm?procedure=' + procedure.id + '&type=' + procedure.type;
                };

                $scope.selectProcedureDialog = function () {
                    if ($scope.listDrgu.length === 1) {
                        $scope.selectProcedureAndShowForm($scope.listDrgu[0]);
                    } else {
                        $element.find("#selectProcedureTemplate").modal("show");
                    }
                };

                $scope.selectProcedureAndShowForm = function (procedure) {
                    if (procedure.href != null) {
                        $window.location = procedure.href;
                        return;
                    }
                    $scope.status = STATUS.LOADING;
                    $http
                        .get(apiRoot + "dept/ps_passport/service/" + procedure.id)
                        .then(function (response) {
                            $scope.status = STATUS.READY;
                            var procedure = response.data;
                            if (!procedure) {
                                return;
                            }
                            $element.find("#selectProcedureTemplate").modal("hide");
                            // Если не подождать - диалог не закрывается полностью
                            $timeout(function () {
                                $location.path('personcab/requestConfirm').search({procedure: procedure.id, type: procedure.type});
                            }, 200);
                        }).catch(utils.errorHandler($scope))
                };

                $scope.closeDialogAndGoToURL = function (url, params) {
                    $element.find("#selectProcedureTemplate").modal("hide");
                    // Если не подождать - диалог не закрывается полностью
                    $timeout(function () {
                        if (params) {
                            $location.path(url).search(params);
                        } else {
                            $location.path(url).search("");
                        }
                    }, 200);
                };

                function checkIsUserCatProcedure(categs) {
                    // JSON.stringify(categs);
                    var res = false;
                    if (session.sessionData && session.sessionData.user && session.sessionData.user.samlUser) {
                        categs = categs.map(function (categ) {
                            return categ.id;
                        });
                        var samlU = session.sessionData.user.samlUser;
                        if (samlU.globalRole == "P")
                            categs.forEach(function (item) {
                                if (["50", "54", "58", "55", "59"].indexOf(item) > -1) res = true;
                            });
                        else if (samlU.globalRole == "E" && samlU.org.orgType == "B")
                            categs.forEach(function (item) {
                                if (item == "52") res = true;
                            });
                        else if (samlU.globalRole == "E" && samlU.org.orgType == "L" && categs) res = true;
                    }
                    return res;
                }

                function selectProcedureById(id) {
                    $http
                        .get(apiRoot + "dept/ps_passport/service/" + id)
                        .then(function (response) {
                            var data = response.data;
                            if (!data) {
                                return;
                            }
                            $scope.loadEntered = false;
                            $scope.isUserCatProcedure = checkIsUserCatProcedure(data.categories);
                            $scope.procedure = jQuery.extend({}, data, {
                                ground_for_action: $sce.trustAsHtml($scope.redexp(data.ground_for_action)),
                                result: $sce.trustAsHtml($scope.redexp(data.result)),
                                fixation: $sce.trustAsHtml($scope.redexp(data.fixation)),
                                rights_and_dutues: $sce.trustAsHtml($scope.redexp(data.rights_and_dutues)),
                                term: $sce.trustAsHtml($scope.redexp(data.term)),
                                control: $sce.trustAsHtml($scope.redexp(data.control))
                            });
                            $scope.procedure.type = data.type;
                            report(data, "serviceView.directive.js");

                        })
                        .catch(function (data) {
                            data = data.data;
                            $scope.status = STATUS.ERROR;
                            $scope.isUserCatProcedure = false;
                            $scope.error = data.errorMessage ? {message: data.errorMessage} : {message: data};
                            report(data, "serviceView.directive.js");
                        });
                }

                function errorHandler(data) {
                    data = data.data || data;
                    warn(data, "error");
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? {message: data.errorMessage} : data;
                    report(data, "serviceView.directive.js");

                }
            }
        };
    }
})();

(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('AnnouncementService', ["$q", "$http", function($q, $http) {
        var root = apiRoot + "announcement";
        var cache = null;

        function defaultRespHandler(resp) {
            return resp.data;
        }

        return {
            get: function () {
                if (cache != null) {
                    return new Promise(function (resolve) {resolve(cache);});
                }
                return $http.get(root).then(defaultRespHandler).then(function (data) {
                    cache = data;
                    return data;
                });
            },
            save: function (data) {
                cache = data;
                return $http.post(root, data).then(defaultRespHandler);
            },
        };
    }]);
}());

(function() {
    var app = angular.module("rpgu.app");

    app.service("aspService", [
        "$http",
        "$sce",
        "$timeout",
        "$window",
        "$location",
        "STATUS",
        "objectService",
        "session",
        "$routeParams",
        aspService
    ]);


    function aspService($http, $sce, $timeout, $window, $location, STATUS, objectService, session, $routeParams) {
        var service = this;
        var requestForm = {};

        this.getAspform = function($scope, serviceId, rUrl) {
            $window.console.log("getAspform");
            $http
                .get(apiRoot + "asp/request/form")
                .then(function(data) {
                    data = data.data;
                    requestForm.form = data.value.form;
                    requestForm.schema = data.value.schema;
                    $window.console.info(requestForm);
                    service.getSettings($scope, requestForm, serviceId, rUrl);
                })
                .catch(function(data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        };

        this.getSettings = function($scope, request, serviceId, rUrl) {
            $http
                .get(apiRoot + "asp/settings/" + serviceId)
                .then(function(data) {
                    data = data.data;
                    request.setting = data;
                    service.hiddeBlocks(request.setting, request.form);
                    service.fillBlocks(request.setting, request.schema);
                    fillRadio(request.form, request.setting, "PaymentBlockPaymentMethod");
                    calcCondition(request.form, request.setting); // hide fields in block
                    service.GetReqDocument($scope, request, serviceId, rUrl);
                })
                .catch(function(data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        };

        // GetReqDocument service
        this.GetReqDocument = function($scope, request, serviceId, rUrl) {
            $http
                .get(apiRoot + "asp/requiredDoc/" + serviceId)
                .then(function(data) {
                    data = data.data;
                    $window.console.log("GetReqDocument");
                    $window.console.info(data);
                    service.fillDocuments(request, data, serviceId);
                    service.GetSprav($scope, request, serviceId, rUrl, "REG");
                })
                .catch(function(data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        };

        // 	HIDEN blocks from setting
        this.hiddeBlocks = function(setting, form) {
            setting.forEach(function(field) {
                form.forEach(function(value) {
                    if (value.title == field.name) {
                        if (field.hide == "1") {
                            value["condition"] = "false";
                        } else {
                            if (field.require == "1") {
                                value.title = field.title + " *";
                            } else {
                                value.title = field.title;
                            }
                        }
                    }
                });
            });
        };

        // fill schema from setting value
        this.fillBlocks = function(setting, schema) {
            for (var value in schema.properties) {
                if (schema.properties[value].properties != undefined) {
                    for (var dept in schema.properties[value].properties) {
                        setting.forEach(function(field) {
                            console.log({
                                title: field.title,
                                field: field
                            });
                            field.title = field.title.replace("Блок:", "");
                            var name = field.name.replace(/\./g, "");
                            if (dept.indexOf("_pasp") != -1 && dept.indexOf(name) != -1) {
                                schema.properties[value].properties[dept].title = field.title;
                                schema.properties[value].properties[dept].required =
                                    field.require == "1" ? true : false;
                                schema.properties[value].properties[dept].description =
                                    field.comment != undefined ? field.comment : " ";
                            } else if (dept.indexOf("_svid") != -1 && dept.indexOf(name) != -1) {
                                schema.properties[value].properties[dept].title = field.title;
                                schema.properties[value].properties[dept].required =
                                    field.require == "1" ? true : false;
                                schema.properties[value].properties[dept].description =
                                    field.comment != undefined ? field.comment : " ";
                            }
                            if (dept.indexOf("_prepasp") != -1 && dept.indexOf(name) != -1) {
                                schema.properties[value].properties[dept].title = field.title;
                                schema.properties[value].properties[dept].required =
                                    field.require == "1" ? true : false;
                                schema.properties[value].properties[dept].description =
                                    field.comment != undefined ? field.comment : " ";
                            } else if (dept.indexOf("_presvid") != -1 && dept.indexOf(name) != -1) {
                                schema.properties[value].properties[dept].title = field.title;
                                schema.properties[value].properties[dept].required =
                                    field.require == "1" ? true : false;
                                schema.properties[value].properties[dept].description =
                                    field.comment != undefined ? field.comment : " ";
                            } else if (dept.indexOf("_predstav") != -1 && dept.indexOf(name) != -1) {
                                schema.properties[value].properties[dept].title = field.title;
                                schema.properties[value].properties[dept].required =
                                    field.require == "1" ? true : false;
                                schema.properties[value].properties[dept].description =
                                    field.comment != undefined ? field.comment : " ";
                            } else if (name == dept) {

                                schema.properties[value].properties[dept].title = field.title;
                                schema.properties[value].properties[dept].required =
                                    field.require == "1" ? true : false;
                                schema.properties[value].properties[dept].description =
                                    field.comment != undefined ? field.comment : " ";
                            }
                        });
                    }
                }
            }
        };

        // fill radio button
        function fillRadio(data, setting, fieldId) {
            data.forEach(function(obj) {
                if (obj.type == "fieldset" || obj.type == "section") {
                    fillRadio(obj.items, setting, fieldId);
                } else if (obj.type != "help") {
                    var object = obj.key.replace(/\./g, "");
                    if (object.indexOf(fieldId) != -1) {
                        obj.titleMap = [];
                        setting.forEach(function(setting) {
                            var name = setting.name.replace(/\./g, "");
                            ["PaymentPost", "PaymentBank", "PaymentKard", "PaymentList"].forEach(function(arr) {
                                if (arr.indexOf(name) != -1) {
                                    if (setting.hide != "1") {
                                        obj.titleMap.push({
                                            value: arr,
                                            name: setting.title
                                        });
                                    }
                                }
                            });
                        });
                    }
                }
            });
        }

        // hide fields in block function
        function calcCondition(data, setting) {
            data.forEach(function(obj) {
                if (obj.type == "fieldset" || obj.type == "section") {
                    calcCondition(obj.items, setting);
                } else if (obj.type != "help") {
                    setting.forEach(function(setting) {
                        var name = setting.name.replace(/\./g, "");
                        var object = obj.key.split(".")[1];
                        if (object.indexOf(name) != -1) {
                            if (setting.hide == "1") obj["condition"] = "false";
                        }
                    });
                }
            });
        }

        // get sprav function
        this.GetSprav = function($scope, request, serviceId, rUrl, idForm) {
            $http
                .get(apiRoot + "asp/sprav/" + serviceId + "/" + idForm)
                .then(function(data) {
                    data = data.data;
                    $window.console.log("GetSprav " + idForm);
                    if (idForm == "REG") {
                        calcSprav(request.form, data, "RegBlockReginfo");
                    }
                    $window.console.info(data);
                    $scope.schemaForm.schema = angular.copy(request.schema);
                    $scope.schemaForm.form = angular.copy(request.form);
                    $window.console.log("Prepared data to send");
                    $window.console.info($scope.schemaForm);
                    service.saveAspform($scope, serviceId, rUrl); // ready all conditions
                })
                .catch(function(data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        };

        function calcSprav(data, spravList, setting) {
            data.forEach(function(obj) {
                if (obj.type == "fieldset" || obj.type == "section") {
                    calcSprav(obj.items, spravList, setting);
                } else if (obj.type != "help") {
                    var object = obj.key.replace(/\./g, "");
                    if (object.indexOf(setting) != -1) {
                        var list = {};
                        if (spravList != undefined && spravList.length > 0) {
                            spravList.forEach(function(szn) {
                                list[szn.spravId] = szn.spravInfo;
                            });

                            if (obj.titleMap != undefined) {
                                obj.titleMap = list;
                            } else {
                                obj["titleMap"] = list;
                            }
                        }
                    }
                }
            });
        }

        this.fillDocuments = function(request, docList, serviceId) {
            $window.console.log("fillDocuments");
            if (docList != undefined && docList.length > 0) {
                var form = {
                    title: "Документы, требуемые для подачи заявления",
                    type: "fieldset",
                    items: []
                };

                docList.forEach(function(doc, index) {
                    var name = "doc" + index;
                    var object = {
                        type: "array",
                        format: "singlefile",
                        required: doc.strict == "1" ? true : false,
                        maxSize: {
                            maximum: "5MB",
                            validationMessage: "Превышен допустимый размер файла: ",
                            validationMessage2: "Текущий размер файла: "
                        }
                    };
                    request.schema.properties.Documets.properties[name] = object;
                    var obj = {
                        key: "Documets." + name,
                        title: doc.name,
                        description: doc.comment,
                        type: "nwpFileUpload",
                        endpoint: ""
                    };
                    form.items.push(obj);

                    if (doc.attachIdRef) {
                        var objHelp = {
                            type: "help",
                            helpvalue:
                                '<p><b>Шаблон документа: <a href="' +
                                apiRoot + "asp/" +
                                serviceId +
                                "/" +
                                doc.attachIdRef +
                                '">' +
                                doc.attachFileName +
                                "</a></b></p>"
                        };
                        form.items.push(objHelp);
                    }
                });
                request.form.push(form);
            }
            $window.console.info(request);
        };

        // save asp form
        this.saveAspform = function($scope, serviceId, rUrl) {
            $window.console.log("saveAspform");
            $http
                .post(apiRoot + "serviceRequest/" + serviceId, { schemaForm: $scope.schemaForm })
                .then(function(data) {
                    data = data.data;
                    $window.console.info(data);
                    $scope.status = STATUS.READY; // the end of promises
                    if (data) {
                        if (rUrl) {
                            $window.location.href =
                                context + "/personcab/request?idServiceRequest=" + data + "&rUrl=" + $scope.rUrl;
                        } else {
                            $window.location.href = context + "/personcab/request?idServiceRequest=" + data;
                        }
                    }
                })
                .catch(function(data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = data.errorMessage ? { message: data.errorMessage } : { message: data };
                });
        };
    }
})();

(function() {
    var app = angular.module("rpgu.app");

    app.service("covid19Service", ["$http", function ($http) {
        this.getPassTypeDict = function () {
            return $http.get(apiRoot + "/dict/5e86d3ac971798e63428cfee/values").then(function (data) {
                return data.data.reduce(function (res, item) {
                    res[item.name] = item.value;
                    return res;
                }, {})
            })
        };

        this.getPassTypeCaption = function(dict, passType) {
            var caption = dict[passType];
            return caption ? caption : "";
        };

        this.getStatusColor = function (item) {
            // if (moment(item.time).isBefore(moment())) {
            if (moment().isAfter(moment(item.endTime))) {
                return "red";
            } else {
                return item.isActive ? "green" : "yellow";
            }
        }

    }]);
}());

(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('DigitalRGUService', ["$q", "$http", function($q, $http) {
        function searchService(query) {
            var deferred = $q.defer();
            if (query === null || query.length < 3) {
                deferred.resolve([]);
                return deferred.promise;
            }
            $http
                .get(apiRoot + "service/search/" + query)
                .then(function(response) {
                    var data = response.data;
                    deferred.resolve(data);
                }).catch(function(err) {
                    warn(err, "Error in findService");
                });
            return deferred.promise;
        }

        function listDigitalRGUServices(search, limit, skip) {
            var query = "?search=" + (search || "").toLowerCase()
                      + "&limit=" + (limit || 9)
                      + "&offset=" + (skip || 0);
            return $http
                .get(apiRoot + "digitalRGUService" + encodeURI(query))
                .then(function(response) {
                    return response.data || {};
                });
        }

        function getDigitalRGUService(id) {
            return $http
                .get(apiRoot + "digitalRGUService/" + id)
                .then(function(response) {
                    return response.data || {};
                });
        }

        function getDRGUWithOrg(id) {
            return $http
                .get(apiRoot + "digitalRGUService/" + id + "/with_org")
                .then(function(response) {
                    return response.data || {};
                });
        }

        function updateDigitalRGUService(data) {
            return $http.put(apiRoot + "digitalRGUService", data);
        }

        function createDigitalRGUService(data) {
            return $http.post(apiRoot + "digitalRGUService", data);
        }

        return {
            getService: searchService,
            list: listDigitalRGUServices,
            get: getDigitalRGUService,
            getDRGUWithOrg: getDRGUWithOrg,
            update: updateDigitalRGUService,
            create: createDigitalRGUService
        };
    }]);
}());

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.service("esiaAuth", ["$routeParams", "$localStorage", function EsiaAuth($routeParams, $localStorage) {
        var $ctrl = this;

        $ctrl.esiaAuthWindow = null;

        return {
            login: function(backUrl) {
                if (!backUrl) {
                    backUrl = typeof $routeParams.backUrl !== 'undefined' ? $routeParams.backUrl : '';
                }
                window.location.href =  apiRoot + "oauth/loginV2?backUrl=" + backUrl;
                // window.location.href = globalBackend + "esia-front.jsp?backUrl=" + backUrl;
            },
            logout: function() {
                $localStorage.$reset();
                window.location.href = globalBackend + "rest/oauth/logout";
            }
        }

    }]);

})();

(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('formioViewService', ["$http", function($http) {
        return {
            getFormData: function(id) {
                return $http
                    .get(apiRoot + "form/" + id)
                    .then(function(response) {
                        return response.data || {};
                    });
            },
            submitFormData: function(data) {
                return $http
                    .put(apiRoot + "form", data)
                    .then(function(response) {
                        return response.data || {};
                    })
            }
        };
    }]);
}());

(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('FormsTemplates', ["$q", "$http", function($q, $http) {
        var notFound = {
            _id: "",
            name: "не найдено ни одного шаблона"
        };

        function list(search, limit, skip) {
            var query = "?search=" + (search || "").toLowerCase()
                        + "&limit=" + (limit || 9)
                        + "&offset=" + (skip || 0);
            return $http
                .get(apiRoot + "formTemplate" + encodeURI(query))
                .then(function(response) {
                    return response.data || {};
                });
        }

        function get(id) {
            return $http
                .get(apiRoot + "formTemplate/" + id)
                .then(function(response) {
                    return response.data || {};
                });
        }

        function update(data) {
            return $http.put(apiRoot + "formTemplate", data);
        }

        function create(data) {
            return $http.post(apiRoot + "formTemplate", data);
        }

        function searchForm(query) {
            var deferred = $q.defer();
            this.list(query, 20, 0)
                .then(function(data) {
                    if (data.count > 0) {
                        deferred.resolve(data.list);
                    } else {
                        deferred.resolve(notFound);
                    }
                })
                .catch(function(err) {
                    warn(err, "Error in searchForm");
                });
            return deferred.promise;
        }

        return {
            searchForm: searchForm,
            list: list,
            get: get,
            update: update,
            create: create,
        };
    }]);
}());


(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('municipalsService', ["$http", "$log", "$q", function($http, $log, $q) {
        var unknown = "Не найдено";
        var titles = {};

        function mapMunicipals(municipal){
            municipal = {
                idObj: municipal.idObj,
                title: municipal.title,
                id: _.uniq(municipal.id)
            };
            municipal.id.forEach(function (k) {
                var x = {};
                x[k] = unknown;
                _.extend(titles, x);
            });
            return municipal;
        }

        return {
            getAllMunicipal: function() {
                return $http
                    .get(apiRoot + "municipal/getAllMunicipal")
                    .then(function(response) {
                        return response.data ? response.data.map(mapMunicipals) : [];
                    });
            },
            save: function(municipals) {
                return $http
                    .post(apiRoot + "municipal/save", municipals)
                    .then(function(response) {
                        return response.data ? response.data.map(mapMunicipals) : [];
                    });
            },
            fetchTitles: function(){
                /** https://beta.26gosuslugi.ru/portal/rest/dept/getInfo/2640100010000000049 */
                _.each(titles, function(title, id){
                    $http
                    .get(apiRoot + "dept/getInfo/" + id)
                    .then(function(response) {
                        titles[id] = response.data;
                    })
                    .catch(function(e){
                        warn(e, "error in fetchTitles");
                    });

                });
            },
            getTitle: function(id) {
                return titles[id];
            }
        };
    }]);
}());

(function() {
    angular.module("rpgu.app").factory("objectService", objectService);

    function objectService() {
        return {
            getByPath: function(obj, path) {
                path = path.replace(/\[(\w+)]/g, '.$1'); // convert indexes to properties
                path = path.replace(/^\./, '');           // strip splited leading dot
                var splited = path.split('.');
                for (var i = 0, n = splited.length; i < n; ++i) {
                    var k = splited[i];
                    if (k in obj) {
                        obj = obj[k];
                    } else {
                        return;
                    }
                }
                return obj;
            },
            setByPath: function(obj, path, value) {
                path = path.replace(/\[(\w+)]/g, '.$1'); // convert indexes to properties
                path = path.replace(/^\./, '');           // strip splited leading dot
                path = path.split('.');
                for (i = 0; i < path.length - 1; i++)
                    obj = obj[path[i]];
                obj[path[i]] = value;
            }
        }
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.service('paymentELKService', ["$q", "$http", function ($q, $http) {
        let root = apiRoot + "me/payment_elk";
        function defaultRespHandler(resp) {
            return resp.data;
        }
        this.list = function () {
            return $http.get(root).then(defaultRespHandler);
        };
    }]);
}());

(function () {
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('ServiceRequestTestSettingsService', ["$q", "$http", function ($q, $http) {
        var root = apiRoot + "serviceRequestTestSettings";
        function defaultRespHandler(resp) {
            return resp.data;
        }
        return {
            list: function (search, limit, skip) {
                return $http
                    .get(root, {
                        params: {
                            search: search,
                            limit: limit || 9,
                            skip: skip || 0
                        }
                    })
                    .then(defaultRespHandler);
            },
            post: function (data) {
                return $http.post(root, data).then(defaultRespHandler);
            },
            put: function (data) {
                return $http.put(root, data).then(defaultRespHandler);
            },
            delete: function (_id) {
                return $http.delete(root + "/" + _id).then(defaultRespHandler);
            },
        };
    }]);
}());

(function () {
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('ServiceRequestTestService', ["$q", "$http", function ($q, $http) {
        var root = apiRoot + "serviceRequestTest";
        function defaultRespHandler(resp) {
            return resp.data;
        }
        return {
            list: function (limit, skip) {
                return $http
                    .get(root, {
                        params: {
                            limit: limit || 9,
                            skip: skip || 0
                        }
                    })
                    .then(defaultRespHandler);
            },
            post: function () {
                return $http.post(root).then(defaultRespHandler);
            }
        };
    }]);
}());

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory("ServiceRequest", ["$q", "$http", "REQUEST_STATUS", "DigitalRGUService", function($q, $http, REQUEST_STATUS, DigitalRGUService) {
        var notFound = [
            {
                _id: "",
                name: "не найдено ни одного совпадения"
            }
        ];

        var defaults = _.extend(notFound, {
            model: {},
            date: moment().utc()
        });

        function fails(params) {
            return $http
                .get(apiRoot + 'serviceRequest/v2/fails', { params: params })
                .then(function(response) {
                    var data = response.data;
                    angular.forEach(data.list, function(request) {
                        request.date = moment(request.date).utc();
                        angular.forEach(request.statusList, function(status) {
                            request.status = REQUEST_STATUS[status.code];
                        });
                    });
                    return data;
                });
        }

        function report(report) {
            return $http.post(apiRoot + "serviceRequest/v2/" + report.idRequest + "/report", {
                email: report.email,
                phone: report.phone
            });
        }

        function list(search, limit, skip) {
            var query = "?search=" + (search || "").toLowerCase() +
                        "&limit=" + (limit || 9) +
                        "&offset=" + (skip || 0);
            return $http
                .get(apiRoot + "serviceRequest/v2/" + query)
                .then(function(response) {
                    return response.data || {};
                })
                .then(function(data) {
                    angular.forEach(data.list, function(req) {
                        req.date = moment(req.date).utc();
                        angular.forEach(req.statusList, function(status) {
                            status.date = moment(status.date).utc();
                            status.text = REQUEST_STATUS[status.code];
                        });
                    });
                    return data;
                });
        }

        function get(id) {
            return $http.get(apiRoot + "serviceRequest/v2/" + id).then(function(response) {
                return response.data || {};
            });
        }

        function copy(reqID) {
            return $http
                .post(apiRoot + "serviceRequest/v2/" + reqID + "/copy", {})
                .then(function(response){
                    return response.data;
                });
        }

        function update(id, body) {
            return $http.put(apiRoot + "serviceRequest/v2/" + id, body);
        }

        function destroy(id) {
            return $http.delete(apiRoot + "serviceRequest/v2/" + id);
        }

        function setServiceInfo(req) {
            if (req.digitalRguServices) {
                DigitalRGUService
                    .getDRGUWithOrg(req.digitalRguServices)
                    .then(function (drguWithOrg) {
                        req.service = drguWithOrg.digitalRguServices;
                        req.organization = drguWithOrg.organization;
                    });
            }
        }

        function oldList(limit, skip, search) {
            var query = "?active=false" +
                        "&limit=" + (limit || 9) +
                        "&offset=" + (skip || 0) +
                        "&search=" + (search || "");

            return $http
                .get(apiRoot + "serviceRequestArchive/" + query)
                .then(function(response) {
                    return response.data || [];
                })
        }

        function old(id) {
           return $http.get(apiRoot + "serviceRequest/v2/" + id).then(function(response) {
                return response.data || {};
            });
        }

        function create(procedureID, type, model) {
            return $http
                .post(apiRoot + "serviceRequest/v2/" + procedureID, {
                    model: model,
                    type: type
                })
                .then(function(response) {
                    return response.data || {};
                });
        }

        function soap(id, body) {
            return $http.put(apiRoot + "serviceRequest/v2/" + id + "/soap", body).then(function(response) {
                return response.data || {};
            });
        }

        function queue(model) {
            if (model.idPropertyMapTypeToUrl && model.type) {
                return $http
                    .get(apiRoot + "dict/" + model.idPropertyMapTypeToUrl + "/values")
                    .then(function(response) {
                        var url = null;
                        response.data && response.data.forEach(function(item) {
                            if (item.name == model.type) {
                                url = item.value;
                            }
                        });
                        return url;
                    })
            } else {
                return $q(function(resolve){
                    resolve(null);
                });
            }
        }

        function queuePut(request, reqUrl, soapReq) {
            var body = {};
            body.formId = request.formId;
            body.model = angular.toJson(request.model);
            body.soapReq = soapReq;
            body.reqUrl = reqUrl;
            body.receiveResultType = request.receiveResultType;
            if (request.receiveResultType == "MFC") {
                body.mfcReceive = request.mfcReceive || {};
            }
            body.isSMSReceive = request.isSMSReceive || false;
            body.isEmailReceive = request.isEmailReceive || false;

            return $http.put(apiRoot + "serviceRequest/v2/" + request._id + "/queue", body);
        }

        return {
            defaults: defaults,
            fails: fails,
            report: report,
            list: list,
            oldList: oldList,
            setServiceInfo: setServiceInfo,
            get: get,
            update: update,
            delete: destroy,
            soap: soap,
            queue: queue,
            queuePut: queuePut,
            copy: copy,
            old: old,
            create: create
        };
    }]);
})();

(function() {
    "use strict";

    var app = angular.module("rpgu.app");

    app.service("session", [
        "$http",
        "$localStorage",
        "$rootScope",
        function session($http, $localStorage, $rootScope) {
            var that = this;
            that.sessionData = $localStorage.sessionData || {};
            that.serviceRequestModifiedSinceLastLoginData = null;

            that.getSessionData = function() {
                return $http
                    .get(apiRoot + "session")
                    .then(function(response) {
                        if (_.isEqual(response.data, $localStorage.sessionData)) {
                            return false;
                        } else {
                            setUserData(response.data && response.data.user);
                            setUserOrgs(response.data && response.data.user);
                            that.sessionData = $localStorage.sessionData = response.data;
                            that.serviceRequestModifiedSinceLastLoginData = null;
                            $rootScope.$emit("userLogin");
                            return true;
                        }
                    })
                    .catch(function(err) {
                        console.log({err: err});
                        warn(err, "session service");
                    })
            };

            that.serviceRequestModifiedSinceLastLogin = function (noCaching) {
                return new Promise(function (resolve, reject) {
                    if (that.serviceRequestModifiedSinceLastLoginData !== null && !noCaching) {
                        resolve(that.serviceRequestModifiedSinceLastLoginData ? that.serviceRequestModifiedSinceLastLoginData.data : null);
                    } else {
                        resolve($http.get(apiRoot + "serviceRequest/v2/modified_since_last_login").then(function (response) {
                            that.serviceRequestModifiedSinceLastLoginData = {data: response.data};
                            return response.data;
                        }));
                    }
                });
            };

            function surname(userNameData) {
                var res = "";
                try {
                    res = userNameData && userNameData.surname ? userNameData.surname : "Не известно";
                } catch (e) {
                    console.warn(e);
                }
                return res;
            }

            function shortname(userNameData) {
                var res = "";
                try {
                    res = userNameData && userNameData.name ? userNameData.name.substr(0, 1) : "";
                } catch (e) {
                    console.warn(e);
                }
                return res;
            }

            function shortpatronymic(userNameData) {
                var res = "";
                try {
                    res = userNameData && userNameData.patronymic ? userNameData.patronymic.substr(0, 1) : "";
                } catch (e) {
                    console.warn(e);
                }
                return res;
            }

            function setUserData(user) {
                if (!user) {
                    $localStorage.$reset();
                    user = { name: {}, email: "", phone: "" };
                }
                $localStorage.user = user;
                if (user && user.name) {
                    $localStorage.shortUserName =
                        surname(user.name) + " " + shortname(user.name) + "." + shortpatronymic(user.name) + ".";
                    $localStorage.fullUserName =
                        surname(user.name) + " " + user.name ? user.name.name : "" + "." + user.name ? user.name.patronymic : "" + ".";
                }
                $localStorage.shortOrgName =
                    user.samlUser && user.samlUser.org && user.samlUser.org.oid
                        ? user.samlUser.org.shortName || "Не указано название"
                        : false;
            }

            function setUserOrgs(user) {
                if (!user || !user.oAuthUser) {
                    $localStorage.orgsModalShown = false;
                    $localStorage.orgs = null;
                    return;
                }
                $localStorage.orgs = {
                    chosen: user.samlUser.org || {},
                    roles: user.oAuthUser.roles || []
                };
            }

            function getFIO(user) {
                return surname(user.name) + " " + (user.name ? user.name.name : "") + " " + (user.name ? user.name.patronymic : "");
            }

            that.getUserName = function() {
                return {
                    shortUserName: $localStorage.shortUserName,
                    fullUserName: $localStorage.fullUserName,
                    shortOrgName: $localStorage.shortOrgName,
                    fio: getFIO($localStorage.user)
                };
            };

            that.getUserEmail = function() {
                var user = $localStorage.user;
                if (user.email) {
                    return user.email;
                }
                return user.oAuthUser
                    ? user.oAuthUser.ctt && user.oAuthUser.ctt.EML && user.oAuthUser.ctt.EML.value
                    : "";
            };

            that.isEmailVerified = function() {
                var user = $localStorage.user;
                if (user.oAuthUser && user.oAuthUser.ctt) {
                    var ctt = user.oAuthUser.ctt;
                    if (ctt.EML && ctt.EML.vrfStu == "VERIFIED") {
                        return true;
                    }
                }
                return false;
            }

            that.isPhoneVerified = function() {
                var user = $localStorage.user;
                if (user.oAuthUser && user.oAuthUser.ctt) {
                    var ctt = user.oAuthUser.ctt;
                    if (ctt.MBT && ctt.MBT.vrfStu == "VERIFIED") {
                        return true;
                    }
                }
                return false;
            }

            that.getUserPhone = function() {
                var user = $localStorage.user;
                if (user.phone) {
                    return user.phone;
                }
                return user.oAuthUser
                    ? user.oAuthUser.ctt && user.oAuthUser.ctt.MBT && user.oAuthUser.ctt.MBT.value
                    : "";
            };

            that.getChosenOrg = function() {
                var orgs = $localStorage.orgs;
                if (orgs && orgs.chosen) {
                    return orgs.chosen;
                } else {
                    return {};
                }
            };

            that.getUserOrgs = function() {
                let orgs = $localStorage.orgs;
                if (orgs != null) {
                    return orgs.roles || [];
                } else {
                    return []
                }
            };

            that.setUserOrg = function(orgID) {
                $localStorage.chosenOrgId = orgID;
            };

            that.isTrusted = function() {
                var user = $localStorage.user;
                return user.samlUser.person.personTrusted == "Y";
            };

            that.getUser = function() {
                return that.sessionData.user;
            };

            that.hasRole = function(role) {
                var user = that.sessionData ? that.sessionData.user : null;
                var res = false;
                if (user) {
                    jQuery.each(user.roles, function(i, userRole) {
                        try {
                            if (userRole && userRole.name == role) {
                                res = true;
                                return false;
                            }
                        } catch (e) {
                            console.warn(e);
                        }
                    });
                }
                return res;
            };

            that.hasRoleAny = function (roles) {
                for (const role of roles) {
                    if (that.hasRole(role)) {
                        return true;
                    }
                }
                return false;
            };

            that.hasMincult = function() {
                var user = that.sessionData ? that.sessionData.user : null;
                var res = false;
                if (user) {
                    if (user.login == "mincult_schedule") res = true;
                }
                return res;
            };

            that.hasBeta = function() {
                var user = that.sessionData ? that.sessionData.user : null;
                var SNILS_LIST = ["163-603-291 50", "142-367-426 52", "142-638-320 50", "057-154-923 69"];
                return !!(user && SNILS_LIST.indexOf(user.samlUser.person.snils) >= 0);
            };

            that.isLoggedIn = function() {
                return Boolean(that.sessionData.user);
            };

            that.isLoggedInSaml = function() {
                return that.sessionData.user && that.sessionData.user.samlUser;
            };

            that.defaultSamlUser = {
                globalRole: "Не указано",
                name: {
                    lastName: "Не указано",
                    firstName: "Не указано",
                    middleName: "Не указано",
                },
                org: {
                    orgOGRN: "Не указано", // ОГРН организации пользователя.
                    orgType: "Не указано", // Тип организации
                    orgAddresses: {
                        ORG_LEGAL: {
                            country: "Не указано",
                            index: "Не указано",
                            region: "Не указано",
                            street: "Не указано",
                            house: "Не указано",
                            corpus: "Не указано",
                            structure: "Не указано",
                            flat: "Не указано",
                        },
                        ORG_POSTAL: {
                            country: "Не указано",
                            index: "Не указано",
                            region: "Не указано",
                            street: "Не указано",
                            house: "Не указано",
                            corpus: "Не указано",
                            structure: "Не указано",
                            flat: "Не указано",
                        },
                    },
                    orgContacts: {
                        PHN: { value: "Не указано" },
                        EML: { value: "Не указано" },
                        FAX: { value: "Не указано" },
                    },
                    orgBranchKPP: "Не указано", // КПП филиала
                    orgBranchName: "Не указано", // Имя филиала
                    orgKPP: "Не указано", // КПП организации
                    orgLegalForm: "Не указано", // Организационно-правовая форма организации
                    orgINN: "Не указано", // ИНН организации пользователя
                    orgName: "Не указано", // Наименование организации пользователя
                    orgPosition: "Не указано", // Должность пользователя в организации
                },
                person: {
                    inn: "Не указано", // ИНН пользователя
                    snils: "Не указано", // СНИЛС пользователя
                    email: "Не указано", // Адрес электронной почты
                    personCitizenship: "Не указано", // Гражданство пользователя
                    personMobilePhone: "Не указано", // Номер мобильного телефона
                    personOGRN: "Не указано", // ОГРНИП пользователя
                    principalDoc: {
                        passport_rf: {
                            series: "Не указано",
                            number: "Не указано",
                            issueDate: "Не указано",
                            issuedBy: "Не указано",
                        },
                    },
                    principalAdr: {
                        PERSON_REGISTRATION: {
                            country: "Не указано",
                            region: "Не указано",
                            city: "Не указано",
                            street: "Не указано",
                            index: "Не указано",
                            house: "Не указано",
                            corpus: "Не указано",
                            flat: "Не указано",
                        },
                        PERSON_LIVE: {
                            country: "Не указано",
                            region: "Не указано",
                            city: "Не указано",
                            street: "Не указано",
                            index: "Не указано",
                            house: "Не указано",
                            corpus: "Не указано",
                            flat: "Не указано",
                        },
                    },
                },
                birthDate: "Не указано", // Дата рождения пользователя
                gender: "Не указано", // Пол пользователя
            };
        },
    ]);
})();

(function(){
    "use strict";
    var app = angular.module("rpgu.app");

    app.factory('SoapTemplates', ["$q", "$http", function($q, $http) {
        var notFound = {
            _id: "",
            name: "не найдено ни одного шаблона"
        };

        function list(search, limit, skip) {
            var query = "?search=" + (search || "").toLowerCase()
                        + "&limit=" + (limit || 9)
                        + "&offset=" + (skip || 0);
            return $http
                .get(apiRoot + "soapTemplate" + encodeURI(query))
                .then(function(response) {
                    return response.data || {};
                });
        }

        function get(id) {
            return $http
                .get(apiRoot + "soapTemplate/" + id)
                .then(function(response) {
                    return response.data || {};
                });
        }

        function update(data) {
            return $http.put(apiRoot + "soapTemplate", data);
        }

        function create(data) {
            return $http.post(apiRoot + "soapTemplate", data);
        }

        function searchSoap(query) {
            var deferred = $q.defer();
            this.list(query, 20, 0)
                .then(function(data) {
                    if (data.count > 0) {
                        deferred.resolve(data.list);
                    } else {
                        deferred.resolve(notFound);
                    }
                })
                .catch(function(err) {
                    warn(err, "Error in searchSoap");
                });
            return deferred.promise;
        }

        return {
            searchSoap: searchSoap,
            list: list,
            get: get,
            update: update,
            create: create
        };
    }]);
}());

(function(){
    "use strict";
    angular.module("rpgu.app").service("userStatusCovid19", [
        "$http",
        "$localStorage",
        function($http, $localStorage) {
            this.getUserCovid19Info = function () {
                return $localStorage.userCovid19Info;
            }

            this.userCovid19Info = function() {
                $http.get(apiRoot + "covid19/permanent")
                    .then(function(res) {
                        if (res.data) {
                            $localStorage.userCovid19Info = res.data;
                        }
                    }).catch(function(err) {
                    warn(err, "services loading error");
                });
            }

        }
    ]);
}());

(function() {
    "use strict";
    angular.module("rpgu.app").service("utils", [
        "STATUS",
        "$http",
        "$q",
        function utils(STATUS, $http, $q, session) {
            var utils = {
                checkTrusted: function() {
                    if (!session.isTrusted()) {
                        alert("Отправка заявления возможна только для пользователей с подтвержденной учетной записью");
                        return false;
                    }
                    return true;
                },
                errorHandler: function($scope, statusField, errorField) {
                    if (!statusField) {
                        statusField = "status";
                    }
                    if (!errorField) {
                        errorField = "error";
                    }
                    return function(error) {
                        $scope[statusField] = STATUS.ERROR;
                        if (error instanceof Error) {
                            $scope[errorField] = error;
                            throw error;
                        } else {
                            error = error.data || error;
                            $scope[errorField] = error.errorMessage ? { message: error.errorMessage } : { message: error };
                        }
                    };
                },
                findFiasAsync: function(options, search) {
                    if (search.length > 3) {
                        var q = encodeURIComponent(search);
                        var url = "https://www.gosuslugi.ru/api/nsi/v1/dadata/suggestions?q=" + q;
                        return $http.get(url).then(function(response) {
                            var suggestions = _.property("suggestions")(response.data);
                            var arr = !_.isEmpty(suggestions.addresses) ? suggestions.addresses.map(function(item) {
                                return { text: item.address };
                            }) : [];
                            return { data: arr };
                        });
                    } else {
                        return $q.when({ data: [] });
                    }
                },
                formatDateToJava: function(moment) {
                    return moment.format("YYYY-MM-DDTHH:mm:ss.SSS") + "Z";
                },
                momentFromXmlDateTime: function(dateTime) {
                    return moment(dateTime, moment.ISO_8601);
                },
                copyToClipboard: function (text) {
                    var copyElement = document.createElement("textarea");
                    copyElement.style.position = 'fixed';
                    copyElement.style.opacity = '0';
                    copyElement.textContent = text.toString();
                    var body = document.getElementsByTagName('body')[0];
                    body.appendChild(copyElement);
                    copyElement.select();
                    try {
                        var successful = document.execCommand('copy');
                        if (successful) {
                            return text;
                        }
                    } catch (err) {
                        return false;
                    }
                    body.removeChild(copyElement);
                }
            };
            return utils;
        }
    ]);
})();

(function() {
    support.$inject = ["$http", "$sce", "$timeout", "STATUS", "objectService", "session", "$window"];
    angular.module("rpgu.app").directive("support", support);

    function support($http, $sce, $timeout, STATUS, objectService, session, $window) {
        return {
            restrict: "E",
            scope: {},
            templateUrl: "/support/support.template.html",
            link: function($scope) {
                $scope.status = STATUS.INIT;
                $scope.order = "";
                $scope.options = [
                    { id: "Использование Портала", name: "Использование Портала" },
                    {
                        id: "Отзыв, пожелание, идея по работе Портала",
                        name: "Отзыв, пожелание, идея по работе Портала"
                    },
                    { id: "Работа мобильных приложений", name: "Работа мобильных приложений" },
                    { id: "Другое", name: "Другое" }
                ];

                $scope.data = {
                    selected: "",
                    msg: "",
                    link: "",
                    lastName: "",
                    firstName: "",
                    middleName: "",
                    email: "",
                    phone: ""
                };

                $scope.selectedOption = $scope.options[0];

                // проверка персональных данных пользователя
                // если sessionData == null значит залогились админом
                // если sessionData != null значит залогинились пользователем
                if (!angular.isUndefined(session.sessionData) && session.sessionData != null) {
                    // читаем user данные из сессии
                    $scope.userdata = session.sessionData.user;

                    // если данные пользователя валидны
                    if (!angular.isUndefined($scope.userdata)) {
                        $scope.data.lastName = !angular.isUndefined($scope.userdata.name.surname)
                            ? $scope.userdata.name.surname
                            : "";
                        $scope.data.firstName = !angular.isUndefined($scope.userdata.name.name)
                            ? $scope.userdata.name.name
                            : "";
                        $scope.data.middleName = !angular.isUndefined($scope.userdata.name.surname)
                            ? $scope.userdata.name.patronymic
                            : "";

                        if (!angular.isUndefined($scope.userdata.samlUser)) {
                            $scope.data.email = !angular.isUndefined($scope.userdata.samlUser.person.email)
                                ? $scope.userdata.samlUser.person.email
                                : "";
                            $scope.data.phone = !angular.isUndefined($scope.userdata.samlUser.person.personMobilePhone)
                                ? $scope.userdata.samlUser.person.personMobilePhone
                                : "";
                        }
                    }
                }

                // функция отправки сообщения
                $scope.submit = function(form) {
                    $scope.data.selected = $scope.selectedOption.id;
                    $window.console.log(JSON.stringify($scope.data));
                    $scope.status = STATUS.LOADING;
                    $http
                        .post(apiRoot + "support", $scope.data)
                        .then(function(data) {
                            data = data.data;

                            $scope.order = data;
                            $scope.status = STATUS.READY;
                        })
                        .catch(function(data) {
                            data = data.data;
                            $scope.order = "";
                            $scope.error = data.errorMessage ? data.errorMessage : data;
                            $scope.status = STATUS.ERROR;
                        });
                };
            }
        };
    }
})();

(function() {
    carriers.$inject = ["$http", "STATUS", "$timeout"];
    angular.module("rpgu.app").directive("carriers", carriers);

    function carriers($http, STATUS, $timeout) {
        return {
            restrict: 'E',
            scope: {
                tab: "@"
            },
            templateUrl: '/transport/carriers.template.html',
            link: function ($scope) {
                $http.get('https://transport.stavregion.ru/channel/api/v1/carriers?name=&datework=' + new Date().getTime()).then(function (data) {
                    data = data.data;
                    $scope.fullList = data;
                    $scope.list = $scope.fullList;
                    $scope.status = STATUS.READY;
                }).catch(function (data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = {message: data.errorMessage ? data.errorMessage : data};

                });

                $scope.$watchGroup(["findNum", "findName"], function (newValues, oldValues, scope) {
                    $scope.list = $scope.fullList ? $scope.fullList.filter(function (item) {
                        if ((!$scope.findNum || $scope.findNum == '') && (!$scope.findStart || $scope.findStart == '') && (!$scope.findFinish || $scope.findFinish == '')) return true;
                        if ($scope.findNum && item.routeCode.toLowerCase().lastIndexOf($scope.findNum.toLowerCase()) == -1) return false;
                        if ($scope.findStart && item.start.toLowerCase().lastIndexOf($scope.findStart.toLowerCase()) == -1) return false;
                        if ($scope.findFinish && item.finish.toLowerCase().lastIndexOf($scope.findFinish.toLowerCase()) == -1) return false;
                        return true;
                    }) : null;
                });

            }
        };
    }
})();

(function() {
    routes.$inject = ["$http", "$timeout", "STATUS", "$q"];
    angular.module("rpgu.app").directive("routes", routes);


    function routes($http, $timeout, STATUS, $q) {
        return {
            restrict: 'E',
            scope: {
                tab: "@"
            },
            templateUrl: '/transport/routes.template.html',
            link: function ($scope) {

                $("#index-head-button").removeClass("is-active");
                $("#transport-head-button").addClass("is-active");

                $scope.today = function() {
                    $scope.dt = new Date();
                };
                $scope.today();

                var SCALE = 0.5;
                var IMG_VEHICLE_ACTIVE      = context + '/images/transport/vehicle-direction.svg';
                var IMG_VEHICLE_INACTIVE    = context + '/images/transport/vehicle-inactive.svg';

                function toGrad(rad){
                    return rad * 3.14159265359 / 180;
                }

                $http.get('https://transport.stavregion.ru/channel/api/v1/routes?name=&dateWork=' + new Date().getTime()).then(function (data) {
                    data = data.data;
                    $scope.fullList = data;
                    $scope.list = $scope.fullList;
                    $scope.status = STATUS.READY;
                }).catch(function (data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = {message: data.errorMessage ? data.errorMessage : data};
                    console.log(JSON.stringify(data));
                });

                $scope.$watchGroup(["findNum", "findStart", "findFinish"], function (newValues, oldValues, scope) {
                    $scope.list = $scope.fullList ? $scope.fullList.filter(function (item) {
                        if ((!$scope.findNum || $scope.findNum == '') && (!$scope.findStart || $scope.findStart == '') && (!$scope.findFinish || $scope.findFinish == '')) return true;
                        if ($scope.findNum && item.number.toLowerCase().lastIndexOf($scope.findNum.toLowerCase()) == -1) return false;
                        if ($scope.findStart && item.startStop.toLowerCase().lastIndexOf($scope.findStart.toLowerCase()) == -1) return false;
                        if ($scope.findFinish && item.endStop.toLowerCase().lastIndexOf($scope.findFinish.toLowerCase()) == -1) return false;
                        return true;
                    }) : null;
                });

                $scope.$watch("dt", function (value, oldValue) {
                    if ($scope.dt & value != oldValue){
                        $scope.getSchedule($scope.stop_id);
                        $scope.dateSt = $scope.dt.getDate().toString() + "." +  ($scope.dt.getMonth()+1).toString() + "." +  ($scope.dt.getYear()+1900).toString();
                    }
                });

                $scope.showStops = function(r) {
                    $scope.hideTracks();
                    $scope.today();
                    $scope.schedule = [];
                    $scope.selected = r;
                    $scope.stopsStatus = 'loading';
                    $http.get('https://transport.stavregion.ru/channel/api/v1/routes/' + r.id).then(function (data) {
                        data = data.data;
                        $scope.selected.stops = data.filter(function(item){
                            return item.location && item.location.id;
                        });
                        $scope.stopsStatus = 'ready';
                    }).catch(function (data) {
                        data = data.data;
                        $scope.stopsStatus = 'error';
                        console.log(JSON.stringify(data));
                    });
                };



                  $scope.open1 = function() {
                    $scope.popup1.opened = true;
                  };

                  $scope.popup1 = {
                    opened: false
                  };

                  $scope.inlineOptions = {
                    minDate: new Date(),
                    showWeeks: true,
                    maxMode: 'year'
                  };

                  $scope.dateOptions = {
                    formatYear: 'yyyy',
                    maxDate: new Date(2100, 5, 22),
                    minDate: new Date(),
                    startingDay: 1,
                    maxMode: 'year',
                    placement: 'top right',
                    showWeeks: false
                  };

                $scope.getSchedule = function(stop_id) {
                    if (!stop_id) return;
                    $scope.stop_id = stop_id;
                    $scope.scheduleStatus = 'loading';
                    $scope.schedule = [];
                    var date = new Date();
                    $http.get('https://transport.stavregion.ru/channel/api/v1/stops/'+ stop_id + '/schedule?dateWork=' + $scope.dt.getTime()).then(function (data) {
                        data = data.data;
                        data.forEach(function(t){
                            date.setTime(t.departureTime);
                            var hh = date.getHours();
                            var mm = ('0' + date.getMinutes()).slice(-2);
                            var found = $.grep($scope.schedule, function(el){ return el.hour == hh; });
                            if (found.length > 0){
                                found[0].mins.push(mm);
                            }else{
                                $scope.schedule.push({hour:hh, mins:[mm]});
                            }
                        });
                        $scope.schedule.sort();
                        $scope.schedule.forEach(function(it){ it.mins = it.mins.join('; ')})
                        $scope.scheduleStatus = 'ready';
                    }).catch(function (data) {
                        data = data.data;
                        $scope.scheduleStatus = 'error';
                        console.log(JSON.stringify(data));
                    });
                }

                $scope.tracksReq = new XMLHttpRequest();;
                $scope.tracksReq.onprogress = function(data) {
                    try {
                        var txt = $scope.tracksReq.responseText.replace(/\]\[/g, ",");
                        var resp = JSON.parse(txt);
                        var arr1 = getLastTimedTracks(resp);
                        arr1.forEach(function(item){
                            curTrackFeature = $scope.trackSource.getFeatureById(item.id);
                            if (!curTrackFeature){
                                var newFeat =
                                    new ol.Feature({
                                        geometry : new ol.geom.Point(new ol.geom.Point(ol.proj.transform([item.lon, item.lat], 'EPSG:4326', 'EPSG:3857'))),
                                        id : item.id,
                                        style: new ol.style.Style({
                                            image: new ol.style.Icon({
                                               src: (item.speed > 0) ? IMG_VEHICLE_ACTIVE : IMG_VEHICLE_INACTIVE,
                                               scale: SCALE,
                                               rotation: toGrad(item.heading)
                                           })
                                        })
                                    });
                                newFeat.setId(item.id);
                                $scope.trackSource.addFeature(
                                    newFeat
                                )
                            }else{
                                curTrackFeature.setGeometry(new ol.geom.Point(ol.proj.transform([item.lon, item.lat], 'EPSG:4326', 'EPSG:3857')));
                                curTrackFeature.setStyle(new ol.style.Style({
                                    image: new ol.style.Icon({
                                       src: (item.speed > 0) ? IMG_VEHICLE_ACTIVE : IMG_VEHICLE_INACTIVE,
                                       scale: SCALE,
                                       rotation: toGrad(item.heading)
                                   })
                                }));
                            }
                        });
                    } catch (e){
                      console.log(e);
                    }
                };
                $scope.tracksReq.onreadystatechange = function(){
                };

                function getLastTimedTracks(arr){
                    var res = [];
                    arr.forEach(function(i){
                        var cur = getById(res, i.originalId);
                        if (!cur){
                            res.push(
                            {
                                id : i.originalId,
                                time : i.time,
                                lat : i.lat,
                                lon : i.lon,
                                heading : i.heading,
                                speed : i.speed
                            })
                        }else{
                            if (i.time > cur.time){
                                cur.time = i.time;
                                cur.lat = i.lat;
                                cur.lon = i.lon;
                                cur.heading = i.heading;
                                cur.speed = i.speed;
                            }
                        }
                    });
                    return res;
                }
                
                function getById(arr, id) {
                  for (var i=0, iLen=arr.length; i<iLen; i++) {
                    if (arr[i].id == id) return arr[i];
                  }
                  return undefined;
                }

                $scope.showVehicles = function(r) {
                    if (r === r && r.info){
                        r.info = false;
                        if ($scope.infoStatus=='readyVehicles') return;
                    }
                    $scope.list.forEach(function (item){ item.info = false;});
                    r.info = true;
                    $scope.infoStatus = 'loading';
                    $scope.vehicles = [];
                    $http.get('https://transport.stavregion.ru/channel/api/v1/routes/'+ r.id + '/vehicles?dateWork=' + new Date().getTime()).then(function (data) {
                        data = data.data;
                        // filtering by unique numbers
                        $scope.vehicles = $scope.getUnique(data);
                        $scope.infoStatus = 'readyVehicles';
                    }).catch(function (data) {
                        data = data.data;
                        $scope.infoStatus = 'error';
                        console.log(JSON.stringify(data));
                    });
                }

                $scope.getUnique = function(data){
                    var arr = {};
                    for ( var i=0, len=data.length; i < len; i++ ){
                        arr[data[i]['number']] = data[i];
                    }
                    var res = new Array();
                    for ( var key in arr ){
                        res.push(arr[key]);
                    }
                    return res;
                }

                $scope.hideTracks = function(){
                    $scope.tracksShowed = false;
                    if ($scope.trackSource) $scope.trackSource.clear();
                    $scope.tracksReq.abort();
                }

                $scope.showTracks = function(r){
                    $scope.hideTracks();
                    $scope.tracksShowed = true;
                    $http.get('https://transport.stavregion.ru/channel/api/v1/routes/'+ r.id + '/vehicles?dateWork=' + new Date().getTime()).then(function (data) {
                        data = data.data;
                        // filtering by unique numbers
                        $scope.tracks = $scope.getUnique(data);
                        if ($scope.tracks.length == 0){
                            $scope.noTracks=true;
                            $timeout(function () { $scope.noTracks = false; }, 3000);
                            $scope.hideTracks();
                        }else{
                            $scope.loadTracks=true;
                            $timeout(function () { $scope.loadTracks = false; }, 15000);
                        }
                        $scope.tracksReq.open('GET', 'https://transport.stavregion.ru/channel/publicApi?call=tracks&arg.ids=' + $scope.tracks.map(function(tr) {return tr.id;}).join(','), true);
                        $scope.tracksReq.send();

                    }).catch(function (data) {
                        data = data.data;
                        $scope.hideTracks();
                        console.log(JSON.stringify(data));
                    });

                }

                $scope.showMap = function(r) {
                   $scope.hideTracks();
                   if (r === r && r.info){
                        r.info = false;
                        if ($scope.infoStatus=='readyMap') return;
                   }
                   $scope.list.forEach(function (item){ item.info = false;});
                   r.info = true;
                   $scope.infoStatus = 'loading';
                   $http.get('https://transport.stavregion.ru/channel/api/v1/routes/' + r.id).then(function (data) {
                       data = data.data;
                       $scope.infoStatus = 'readyMap';
                       $timeout(function(){
                           //слой с картой
                           var container = document.getElementById("map");
                           var mapLayer = new ol.layer.Tile({
                            id: 'map_layer',
                            title: 'Map',
                            source: new ol.source.OSM({  //тайлы для карты берем со спутника
                                url: "http://tiles.maps.sputnik.ru/{z}/{x}/{y}.png"
                            })
                           });

                           var line = new ol.geom.LineString();

                           //преобразование координат
                           data.forEach(function(item){
                                line.appendCoordinate(ol.proj.transform([item.lon, item.lat], 'EPSG:4326', 'EPSG:3857'));
                           });
                           //слой для отображения начальной и конечной точек (изображение берется из файла)
                           var endsLayer = new ol.layer.Vector({
                            id: 'ends_layer',
                            title: 'Ends',
                            style: new ol.style.Style({
                                image: new ol.style.Icon({
                                    anchor: [0.5, 1],
                                    src: 'location-48.png'
                                })
                            }),
                            source: new ol.source.Vector({
                                features:[
                                    new ol.Feature(new ol.geom.Point(ol.proj.transform([data[0].location.lon, data[0].location.lat], 'EPSG:4326', 'EPSG:3857'))),
                                    new ol.Feature(new ol.geom.Point(ol.proj.transform([data[data.length - 1].location.lon, data[0].location.lat], 'EPSG:4326', 'EPSG:3857')))
                                ]
                            })
                           });

                           //слой для точек (изображаются окружностями)
                           var feat = [];
                           data.forEach(function(item, i, arr){
                                if (i != arr.length - 1 && i != 0 && item.location && item.location.lon && item.location.lat)
                                    feat.push(
                                        new ol.Feature({
                                            geometry : new ol.geom.Point(ol.proj.transform([item.location.lon, item.location.lat], 'EPSG:4326', 'EPSG:3857')),
                                            name : item.name
                                        })
                                    );
                           });

                           pointsLayer = new ol.layer.Vector({
                            id: 'points_layer',
                            title: 'Points',
                            style: new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: 5,
                                    fill: new ol.style.Fill( {
                                        color: "#ff0000"
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: "#000000",
                                        width: 1
                                    })
                                })
                            }),
                            source: new ol.source.Vector({
                                features : feat
                            })
                           });

                           $scope.trackSource =  new ol.source.Vector({ features : [] });

                           tracksLayer = new ol.layer.Vector({
                            id: 'tracks_layer',
                            title: 'tracks',
                            source: $scope.trackSource
                           });



                           //слой для линий
                           var linesLayer = new ol.layer.Vector({
                            id: 'lines_layer',
                            title: 'Lines',
                            style: new ol.style.Style({
                                stroke: new ol.style.Stroke({
                                    color: "#ff0000",
                                    width: 3
                                })
                            }),
                            source: new ol.source.Vector({
                                features:[
                                    new ol.Feature(line)
                                ]
                            })
                           });


                           //инициализация карты
                           var instance = new ol.Map({
                            target: container,
                            view: new ol.View({
                                center: [0, 0],
                                zoom: 3
                            }),
                            layers: [
                                mapLayer,
                                linesLayer,
                                pointsLayer,
                                tracksLayer,
                                endsLayer
                            ]
                           });

                            var element = document.getElementById('popup');

                            var popup = new ol.Overlay({
                                element: element,
                                positioning: 'bottom-center',
                                autoPan: false,
                                offset: [0, 0]
                            });
                            instance.addOverlay(popup);

                            instance.on('click', function(evt) {
                                $(element).popover('destroy');
                                $timeout(function(){
                                    var feature = instance.forEachFeatureAtPixel(evt.pixel,
                                        function(feature) {
                                          return feature;
                                        });
                                    if (feature) {
                                      var coordinates = feature.getGeometry().getCoordinates();
                                      popup.setPosition(coordinates);
                                      $(element).popover({
                                        'trigger': 'manual',
                                        'placement': 'top',
                                        'html': true,
                                        'content': function() { return '<h5 style="width: 250px;text-align: center;margin-bottom: 5px;">' + feature.get('name') + '</h5>'; }
                                      });
                                      if (feature.get('name')) $(element).popover('show');
                                    } else {
                                      $(element).popover('destroy');
                                    }
                                }, 300);
                            });

                           //добавление интерактива к слоям (клик по элементам их выделяет стилем)
                           var select = new ol.interaction.Select({
                            condition: ol.events.condition.click,
                            layers: [
                                pointsLayer,
                                linesLayer
                            ],
                            style: new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: 10,
                                    fill: new ol.style.Fill( {
                                        color: "#fff000"
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: "#000000",
                                        width: 2
                                    })
                                }),
                                stroke: new ol.style.Stroke({
                                    color: "#fff000",
                                    width: 6
                                })
                            })
                           });

//                           instance.addInteraction(select);

                           //масштабирование карты по геометрии (line)
                           instance.getView().fit(line, instance.getSize(), {
                            padding:[10, 10, 10, 10],
                            maxZoom:18
                           });



                       }, 1);
                    }).catch(function (data) {
                       data = data.data;
                        $scope.infoStatus = 'error';
                        $scope.infoError = {message: data.errorMessage ? data.errorMessage : data};
                    });
                };

                $scope.showTickets = function(r) {
                   if ($scope.trackSource) $scope.trackSource.clear();
                   if (r === r && r.info){
                        r.info = false;
                        if ($scope.infoStatus=='noTickets' || $scope.infoStatus=='readyTickets') return;
                   }
                   $scope.list.forEach(function (item){ item.info = false;});
                   r.info = true;
                   $scope.infoStatus = 'loading';
                   $http.get('https://transport.stavregion.ru/channel/api/v1/routes/' + r.id + '/objects').then(function (data) {
                       data = data.data;
                       $scope.infoStatus = 'readyTickets';
                       if (!data || data.length == 0){
                            $scope.infoStatus = 'noTickets';
                            return;
                       }
                       $timeout(function(){
                           //слой с картой
                           var container = document.getElementById("mapTickets");
                           var mapLayer = new ol.layer.Tile({
                            id: 'map_layer',
                            title: 'Map',
                            source: new ol.source.OSM({  //тайлы для карты берем со спутника
                                url: "http://tiles.maps.sputnik.ru/{z}/{x}/{y}.png"
                            })
                           });

                           var line = new ol.geom.LineString();

                           //слой для точек (изображаются окружностями)
                           var feat = [];
                           data.forEach(function(item){
                               if (item.type && item.type == 'Пункт продажи билетов'){
                                   var coords = item.geometry.substring(6,item.geometry.length-1).split(' ');
                                   line.appendCoordinate(ol.proj.transform([parseFloat(coords[0]), parseFloat(coords[1])], 'EPSG:4326', 'EPSG:3857'));
                                   feat.push(new ol.Feature(new ol.geom.Point(ol.proj.transform([parseFloat(coords[0]), parseFloat(coords[1])], 'EPSG:4326', 'EPSG:3857'))));
                               }
                           });
                           var pointsLayer = new ol.layer.Vector({
                            id: 'points_layer',
                            title: 'Points',
                            style: new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: 5,
                                    fill: new ol.style.Fill( {
                                        color: "#ff0000"
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: "#000000",
                                        width: 1
                                    })
                                })
                            }),
                            source: new ol.source.Vector({
                                features : feat
                            })
                           });

                           //инициализация карты
                           var instance = new ol.Map({
                            target: container,
                            view: new ol.View({
                                center: [0, 0],
                                zoom: 3
                            }),
                            layers: [
                                mapLayer,
                                pointsLayer
                            ]
                           });

                           //добавление интерактива к слоям (клик по элементам их выделяет стилем)
                           var select = new ol.interaction.Select({
                            condition: ol.events.condition.click,
                            layers: [
                                pointsLayer
                            ],
                            style: new ol.style.Style({
                                image: new ol.style.Circle({
                                    radius: 10,
                                    fill: new ol.style.Fill( {
                                        color: "#fff000"
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: "#000000",
                                        width: 2
                                    })
                                }),
                                stroke: new ol.style.Stroke({
                                    color: "#fff000",
                                    width: 6
                                })
                            })
                           });

                           instance.addInteraction(select);

                           //масштабирование карты по геометрии (line)
                           instance.getView().fit(line, instance.getSize(), {
                            padding:[10, 10, 10, 10],
                            maxZoom:18
                           });

                       }, 1);
                    }).catch(function (data) {
                       data = data.data;
                        $scope.infoStatus = 'error';
                        $scope.infoError = {message: data.errorMessage ? data.errorMessage : data};
                    });
                };
            }
        };
    }
})();

(function() {
    stops.$inject = ["$http", "STATUS", "$timeout"];
    angular.module("rpgu.app").directive("stops", stops);

    function stops($http, STATUS, $timeout) {
        return {
            restrict: 'E',
            scope: {
                tab: "@"
            },
            templateUrl: '/transport/stops.template.html',
            link: function ($scope) {
                $http.get('https://transport.stavregion.ru/channel/api/v1/stops').then(function (data) {
                    data = data.data;
                    $scope.fullList = data;
                    $scope.list = $scope.fullList;
                    $scope.status = STATUS.READY;
                }).catch(function (data) {
                    data = data.data;
                    $scope.status = STATUS.ERROR;
                    $scope.error = {message: data.errorMessage ? data.errorMessage : data};

                });

                $scope.$watchGroup(["findName", "findRoute"], function (newValues, oldValues, scope) {
                    $scope.list = $scope.fullList ? $scope.fullList.filter(function (item) {
                        if ($scope.findName === '' && $scope.findRoute === '') return true;
                        if ($scope.findName && item.name.toLowerCase().lastIndexOf($scope.findName.toLowerCase()) == -1) return false;
                        if ($scope.findRoute && item.routesList.toLowerCase().lastIndexOf($scope.findRoute.toLowerCase()) == -1) return false;
                        return true;
                    }) : null;
                });

                $scope.showMap = function(r) {
                   if (r === r && r.info){
                        r.info = false;
                        return;
                   }
                   $scope.list.forEach(function (item){ item.info = false;});
                   r.info = true;
//                   $scope.infoStatus = 'loading';
                    if (!r.lon || !r.lat){
                      $scope.infoStatus = 'error';
                      console.log('Нет координат!');
                      return;
                    }

                   $scope.infoStatus = 'readyMap';
                   $timeout(function(){
                       //слой с картой
                       var container = document.getElementById("map");
                       var mapLayer = new ol.layer.Tile({
                        id: 'map_layer',
                        title: 'Map',
                        source: new ol.source.OSM({  //тайлы для карты берем со спутника
                            url: "http://tiles.maps.sputnik.ru/{z}/{x}/{y}.png"
                        })
                       });

                       var feat = [];
                       feat.push(new ol.Feature(new ol.geom.Point(ol.proj.transform([r.lon, r.lat], 'EPSG:4326', 'EPSG:3857'))));
                       var pointsLayer = new ol.layer.Vector({
                        id: 'points_layer',
                        title: 'Points',
                        style: new ol.style.Style({
                            image: new ol.style.Circle({
                                radius: 5,
                                fill: new ol.style.Fill( {
                                    color: "#ff0000"
                                }),
                                stroke: new ol.style.Stroke({
                                    color: "#000000",
                                    width: 1
                                })
                            })
                        }),
                        source: new ol.source.Vector({
                            features : feat
                        })
                       });


                       //инициализация карты
                       var instance = new ol.Map({
                        target: container,
                        view: new ol.View({
                            center: [0, 0],
                            zoom: 3
                        }),
                        layers: [
                            mapLayer,
                            pointsLayer
                        ]
                       });

                       //добавление интерактива к слоям (клик по элементам их выделяет стилем)
                       var select = new ol.interaction.Select({
                        condition: ol.events.condition.click,
                        layers: [
                            pointsLayer
                        ],
                        style: new ol.style.Style({
                            image: new ol.style.Circle({
                                radius: 10,
                                fill: new ol.style.Fill( {
                                    color: "#fff000"
                                }),
                                stroke: new ol.style.Stroke({
                                    color: "#000000",
                                    width: 2
                                })
                            }),
                            stroke: new ol.style.Stroke({
                                color: "#fff000",
                                width: 6
                            })
                        })
                       });

                       instance.addInteraction(select);

                       //масштабирование карты по геометрии
                       instance.getView().fit(new ol.geom.Point(ol.proj.transform([r.lon, r.lat], 'EPSG:4326', 'EPSG:3857')), instance.getSize(), {
                        padding:[10, 10, 10, 10],
                        maxZoom:18
                       });

                   }, 1);
                };
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("transport", ["$routeParams", "$location", function transport($routeParams, $location) {
        return {
            restrict: "E",
            scope: {
                tab: "@"
            },
            templateUrl: "/transport/transport.template.html",
            link: function($scope) {
                $scope.status = "INIT";
                var here = $location.path();

                if (typeof $routeParams.tab === 'undefined') {
                    $location.path(here).search("tab", "rules");
                }

                $scope.tabset = $routeParams.tab;

                $scope.selectTab = function(setTab) {
                    $location.path(here).search("tab", setTab);
                };

                $scope.isSelected = function(checkTab) {
                    return $scope.tabset === checkTab;
                };
            }
        };
    }]);
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("widgetKnowInn", [
        "$http",
        "STATUS",
        "$q",
        function($http, STATUS, $q) {
            return {
                restrict: "E",
                templateUrl: "/widgets/widget.template.html",
                link: function($scope, $element) {
                    $scope.status = STATUS.LOADING;
                    $q
                        .all({
                            userToken: $http.get(apiRoot + "me/oauth/access_token"),
                            systemToken: $http.get(apiRoot + "oauth/system_token")
                        })
                        .then(function(tokens) {
                            $scope.status = STATUS.READY;
                            window
                                .rooxWidgetStart(
                                    prepareRooxObject(tokens),
                                    $element.find("#widget")[0]
                                )
                                .onError(function(errOptions, el) {
                                    warn({
                                        errOptions: errOptions,
                                        el: el
                                    }, "rooxWidgetStart");
                                    $scope.$apply(function() {
                                        $scope.status = STATUS.ERROR;
                                        $scope.error = {
                                            message: "Виджет вернул код ошибки: "
                                                + errOptions.status
                                        };
                                    });
                                });
                        });
                }
            };
        }
    ]);

    function prepareRooxObject(tokens) {
        return {
            scheme: "https",
            wrsHost: "widget.gosuslugi.ru",
            wrs: "wrs-4.1",
            widget: "https://widget.gosuslugi.ru/widgets/epgu-wrapper/epgu-wrapper.xml",
            method: "POST",
            params: {
                renderType: "iframe",
                doTokenInjection: "true",
                up_targetId: "2",
                up_targetFormId: "-10000000263",
                up_passportId: "16816",
                view: "prod"
            },
            auth: {
                tokens: {
                    st: "esia_1.0_" + tokens.userToken.data,
                    rt: "esia_1.0_" + tokens.systemToken.data
                }
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("widgetLawInfo", ["$http", "STATUS", "$q", function indexCab($http, STATUS, $q) {
        return {
            restrict: "E",
            templateUrl: "/widgets/widget.template.html",
            link: function($scope, $element) {
                $scope.status = STATUS.LOADING;
                $q
                    .all({
                        userToken: $http.get(apiRoot + "me/oauth/access_token"),
                        systemToken: $http.get(apiRoot + "oauth/system_token")
                    })
                    .then(function(tokens) {
                        $scope.status = STATUS.READY;
                        window
                            .rooxWidgetStart(prepareRooxObject(tokens), $element.find("#widget")[0])
                            .onError(function(errOptions, el) {
                                console.error({
                                    errOptions: errOptions,
                                    el: el
                                });
                                $scope.$apply(function() {
                                    $scope.status = STATUS.ERROR;
                                    $scope.error = { message: "Виджет вернул код ошибки: " + errOptions.status };
                                });
                            });
                    });
            }
        };
    }]);

    function prepareRooxObject(tokens) {
        return {
            scheme: "https",
            wrsHost: "widget.gosuslugi.ru",
            wrs: "wrs-4.1",
            widget: "https://widget.gosuslugi.ru/widgets/epgu-wrapper/epgu-wrapper.xml",
            method: "POST",
            params: {
                renderType: "iframe",
                doTokenInjection: "true",
                up_mnemonic: "10000010385",
                up_targetId: "7",
                up_targetFormId: "10001505301",
                up_passportId: "10003",
                view: "prod"
            },
            auth: {
                tokens: {
                    st: "esia_1.0_" + tokens.userToken.data,
                    rt: "esia_1.0_" + tokens.systemToken.data
                }
            }
        };
    }
})();

(function() {
    "use strict";
    WidgetMutualSettlementsController.$inject = ["$element", "$http", "$q", "STATUS"];
    var app = angular.module("rpgu.app");

    app.component("widgetMutualSettlements", {
        templateUrl: "/widgets/widget.template.html",
        controller: WidgetMutualSettlementsController
    });

    function WidgetMutualSettlementsController($element, $http, $q, STATUS) {
        var $ctrl = this;
        $ctrl.status = STATUS.LOADING;
        $q
            .all({
                userToken: $http.get(apiRoot + "me/oauth/access_token"),
                systemToken: $http.get(apiRoot + "oauth/system_token")
            })
            .then(function(tokens) {
                $ctrl.status = STATUS.READY;
                window
                    .rooxWidgetStart(prepareRooxObject(tokens), $element.find("#widget")[0])
                    .onError(function(errOptions, el) {
                        console.error({
                            errOptions: errOptions,
                            el: el
                        });
                        $ctrl.$apply(function() {
                            $ctrl.status = STATUS.ERROR;
                            $ctrl.error = { message: "Виджет вернул код ошибки: " + errOptions.status };
                        });
                    });
            });
    }

    function prepareRooxObject(tokens) {
        return {
            scheme: "https",
            wrsHost: "widget.gosuslugi.ru",
            wrs: "wrs-4.1",
            widget: "https://widget.gosuslugi.ru/widgets/mutual-settlements/mutual-settlements.xml",
            method: "POST",
            params: {
                renderType: "iframe",
                doTokenInjection: "true",
                up_mnemonic: "10000019405",
                up_targetId: "-10000011469",
                view: "prod"
            },
            auth: {
                tokens: {
                    st: "esia_1.0_" + tokens.userToken.data,
                    rt: "esia_1.0_" + tokens.systemToken.data
                }
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("widgetNalogDebet", [
        "$http",
        "STATUS",
        "$q",
        function($http, STATUS, $q) {
            return {
                restrict: "E",
                templateUrl: "/widgets/widget.template.html",
                link: function($scope, $element) {
                    $scope.status = STATUS.LOADING;
                    $q
                        .all({
                            userToken: $http.get(apiRoot + "me/oauth/access_token"),
                            systemToken: $http.get(apiRoot + "oauth/system_token")
                        })
                        .then(function nalogDebet(tokens) {
                            $scope.status = STATUS.READY;
                            window
                                .rooxWidgetStart(prepareRooxObject(tokens), $element.find("#widget")[0])
                                .onError(function(errOptions, el) {
                                    console.error({
                                        errOptions: errOptions,
                                        el: el
                                    });
                                    $scope.$apply(function() {
                                        $scope.status = STATUS.ERROR;
                                        $scope.error = { message: "Виджет вернул код ошибки: " + errOptions.status };
                                    });
                                });
                        })
                        .catch(function(err) {
                            console.warn({
                                ref: "load script error",
                                err: err
                            });
                        });
                }
            };
        }
    ]);

    function prepareRooxObject(tokens) {
        return {
            scheme: "https",
            wrsHost: "widget.gosuslugi.ru",
            wrs: "wrs-4.1",
            widget: "https://widget.gosuslugi.ru/widgets/epgu-wrapper/epgu-wrapper.xml",
            method: "POST",
            features_loaded: 'org.jquery.core-1.7.2',
            params: {
                renderType: "iframe",
                doTokenInjection: "true",
                up_mnemonic: "12186",
                up_targetId: "1",
                up_targetFormId: "321894988",
                up_passportId: "10002",
                view: "prod"
            },
            auth: {
                tokens: {
                    st: "esia_1.0_" + tokens.userToken.data,
                    rt: "esia_1.0_" + tokens.systemToken.data
                }
            }
        };
    }
})();

(function() {
    "use strict";
    var app = angular.module('rpgu.app');

    app.controller("WidgetController", ["$scope", "$element", WidgetController]);

    function WidgetController($scope, $element) {}
}());

(function() {
    "use strict";
    var app = angular.module("rpgu.app");

    app.directive("widgetZagran", [
        "$http",
        "STATUS",
        "$q",
        function($http, STATUS, $q) {
            return {
                restrict: "E",
                templateUrl: "/widgets/widget.template.html",
                link: function($scope) {

                    function onReady() {
                        $scope.status = STATUS.READY;
                    }

                    function onError(errOptions, el) {
                        warn({
                            errOptions: errOptions,
                            el: el
                        }, "rooxWidgetStart");
                        $scope.$apply(function() {
                            $scope.status = STATUS.ERROR;
                            $scope.error = {
                                message: "Виджет вернул код ошибки: " + errOptions.status
                            };
                        });
                    }

                    $scope.status = STATUS.LOADING;
                    $q.all({
                        userToken: $http.get(apiRoot + "me/oauth/access_token"),
                        systemToken: $http.get(apiRoot + "oauth/system_token")
                    }).then(function(tokens) {
                        window.rooxWidgetStart(prepareRooxObject(tokens), document.getElementById("widget"))
                            .onReady(onReady)
                            .onError(onError);
                    });

                }
            };
        }
    ]);

    function prepareRooxObject(tokens) {
        return {
            scheme: "https",
            wrsHost: "widget.gosuslugi.ru",
            wrs: "wrs-4.1",
            widget: "https://widget.gosuslugi.ru/widgets/epgu-wrapper/epgu-wrapper.xml",
            method: "POST",
            features_loaded: 'org.jquery.core-1.7.2',
            params: {
                renderType: "iframe",
                doTokenInjection: "true",
                up_mnemonic: '100511',
                up_targetId: "",
                up_targetFormId: '10001970310',
                up_passportId: '10051',
                view: "prod"
            },
            auth: {
                tokens: {
                    st: "esia_1.0_" + tokens.userToken.data,
                    rt: "esia_1.0_" + tokens.systemToken.data
                }
            }
        };
    }
})();
